{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.service.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.module.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","null","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.component.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/focus-within/focus-within.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/splitter/splitter-accessibility.directive.ts","ng://@ux-aspects/ux-aspects/common/operators/tick.operator.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.service.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/accessibility.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-subject.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-utils.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.service.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/interfaces/conduit-properties.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.decorator.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.service.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drop.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/grab-handle/grab-handle.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/grab-handle/grab-handle.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/check-list-item/facet-check-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/components/filters/events/filter-add-event.ts","ng://@ux-aspects/ux-aspects/components/filters/events/filter-remove-all-event.ts","ng://@ux-aspects/ux-aspects/components/filters/events/filter-remove-event.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.service.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-typeahead-highlight.pipe.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/custom-control/custom-control.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.service.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-link/navigation-link.directive.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-secondary-item/navigation-secondary-item.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/pagination/pagination.component.ts","ng://@ux-aspects/ux-aspects/components/pagination/pagination.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-focus.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-alt-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list-item/select-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/multiple-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/single-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table.service.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table-column.component.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table.directive.ts","ng://@ux-aspects/ux-aspects/components/table/table.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/observers/overflow/overflow-observer.directive.ts","ng://@ux-aspects/ux-aspects/directives/observers/observers.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-state.class.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.service.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-row.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-indent.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.module.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts"],"names":["AccordionPanelHeadingDirective","Directive","args","selector","AccordionService","Subject","prototype","collapseAll","this","collapse","next","Injectable","uniqueId","AccordionPanelComponent","accordion","_this","panelId","EventEmitter","subscribe","toggle","expanded","collapseOthers","expand","disabled","expandedChange","Component","template","host","class","role","Input","type","HostBinding","Output","AccordionComponent","_accordion","Object","defineProperty","providers","aria-multiselectable","AccordionModule","NgModule","imports","CommonModule","declarations","exports","BreadcrumbsComponent","clickCrumb","event","crumb","onClick","call","BreadcrumbsModule","RouterModule","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","e","rejected","result","done","then","apply","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","ResizeService","_zone","ResizeObserver","elementDidResize","bind","WeakMap","ngOnDestroy","_observer","disconnect","addResizeListener","target","runOutsideAngular","observe","_targets","has","get","emitter","ReplaySubject","set","removeResizeListener","unobserve","entries","run","entries_1","tslib_1.__values","entries_1_1","entry","width","offsetWidth","height","offsetHeight","NgZone","ResizeDirective","_elementRef","_resizeService","_ngZone","ngOnInit","_subscription","nativeElement","pipe","debounceTime","throttle","uxResize","emit","unsubscribe","ElementRef","ResizeModule","CardTabContentDirective","CardTabsService","BehaviorSubject","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","getComputedStyle","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","id","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","key","colorValueSet","_colors","getColorValueByHex","_html","_element","document","createElement","className","innerHTML","appendChild","getColorValue","parentNode","removeChild","color","hex","replace","parseInt","substring","toString","ThemeColor","querySelector","Error","rgba","window","backgroundColor","match","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","colorName","toLowerCase","toRgba","a","_r","_g","_b","undefined","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","primary","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","BUTTON_WIDTHS","sm","md","lg","ColorPickerComponent","colors","normalizedColors","isArray","row","ColorPickerColor","selected","selected$","columns","columns$","buttonSize","buttonSize$","pairwise","takeUntil","_onDestroy","prev","curr","selectedChange","combineLatest","w","cssWidth","complete","updateColorValue","input","mode","inputPatterns","test","toggleColorEntryType","inputMode","exportAs","name","_color","_originalHexValue","_originalRgbaValue","FocusWithinDirective","_focusMonitor","ngZone","monitor","origin","uxFocusWithin","uxBlurWithin","stopMonitoring","FocusMonitor","SplitterAccessibilityDirective","_renderer","_platform","_splitter","dragProgress","updateGutterAttributes","ngAfterViewInit","onGutterChange","areas","changes","isPlatformBrowser","MutationObserver","childList","isSplitterGutter","focus","_gutters","getGutters","setGutterAttributes","gutters","idx","children","node","item","forEach","gutter","setAttribute","setGutterValueNow","setGutterValueMin","setGutterValueMax","index","area","displayedAreas","round","size","toArray","minSize","availableSize","_area","reduce","total","onKeydown","gutterKeydown","onIncreaseKey","setGutterPosition","preventDefault","onDecreaseKey","onHomeKey","getAreasFromGutter","delta","comp","onEndKey","tagName","refreshStyleSizes","indexOf","Renderer2","Inject","PLATFORM_ID","SplitComponent","ContentChildren","SplitAreaDirective","HostListener","tick","source","Observable","subscriber","requestAnimationFrame","err","TabbableListService","initialize","items","wrap","_items","focusKeyManager","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","_direction","withWrap","setFirstItemTabbable","onInit","initialized","ensureTabbableItem","activate","activeItemIndex","setActiveItem","isItemActive","activeItem","first","tabindex","focusTabbableItem","findIndex","allowAltModifier","altKey","allowCtrlModifier","ctrlKey","allowBoundaryKeys","which","HOME","setFirstItemActive","END","setLastItemActive","hierarchy","keyCode","DOWN_ARROW","RIGHT_ARROW","keyboardExpanded$","UP_ARROW","LEFT_ARROW","parent","sortItemsByHierarchy","list","topLevel","flattenHierarchy","flatList","sort","rank","nextId","TabbableListItemDirective","_tabbableList","focusMonitor","change","active","TabbableListDirective","ngAfterContentInit","_focusedElement","_orderedItems","QueryList","reset","notifyOnChanges","focusOnShow","returnFocus","HTMLElement","setTimeout","descendants","AccessibilityModule","A11yModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","Infinity","_propagateChange","_min","_max","_step","_disabled","increment","decrement","isValid","valid","onScroll","deltaY","wheelDelta","[class.has-error]","NumberPickerModule","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_tooltipService","fromEvent","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","firstChange","currentValue","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","delay","clearTimeout","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","includes","array","showTriggers","hideTriggers","isFocused","activeElement","removeAttribute","ViewContainerRef","Overlay","ScrollDispatcher","TooltipModule","OverlayModule","ObserversModule","entryComponents","ColorPickerModule","ColumnSortingDirective","events","toggleColumn","sorting","order","singleSort","toggleSingleColumn","toggleMultipleColumn","state","ColumnSortingState","NoSort","column","Ascending","Descending","_column","ColumnSortingComponent","_columnSorter","columnIdx","stateChange","changeState","ColumnSortingModule","ConduitSubject","conduit","zoneId","_subject","subject","getInitialValue","distinctUntilChanged","onOutput","getEvents","onInput","acceptsInput","subjects","getSubjects","subjectOne","subjectTwo","lastModified","getTime","producesOutput","zone","outputValue","Date","destroy","invokeSuperFunction","functionName","functionList","_i","func","ConduitZone","_zoneId","unregisterConduit","registerConduit","getConduitSubject","setZoneId","setConduitProperties","properties","conduitSubject","_conduit","prop","createConduit","registerConduits","component","_conduits","propertyKey","unregisterConduits","ConduitComponent","decorators","Optional","ConduitZoneComponent","_super","tslib_1.__extends","defaultConduitProps","CONDUITS","DragService","onDragStart","onDrag","onDragEnd","onDrop","onDropEnter","onDropLeave","DragDirective","_drag","_mousedown$","draggable","dragStart","_isDragging","dragEvent","clone","cloneNode","addClass","group","data","model","_mousemove$","_mouseup$","dragMove","dragEnd","_clone","updateNodePosition","removeClass","getBoundingClientRect","top","left","_offset","x","clientX","clientY","inlineStyles","setStyle","pageX","pageY","styles","style","DropDirective","_dragService","isGroupAllowed","onMouseOver","_group","isMouseOver","isDragging","[class.ux-drop-hover]","DragModule","DashboardService","defaultOptions","dimensions$","visible","layout$","setLayoutData","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","forEachBlock","onResizeStart","action","_event","bringToFront","onResizeDrag","mousePosX","pageXOffset","mousePosY","pageYOffset","handle","mouseX","mouseY","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","setWidgetOrigin","cacheWidgets","isDragging$","_widgetOrigin","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","cache","restoreSize","wgt","widgetsToMove","this_1","space","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","splice","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","Rounding","RoundUpOverHalf","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundDownBelowHalf","RoundUp","getRowCount","emptyRow","sendToBack","stable","callback","getWidgetBelow","onShiftStart","onShift","deltaX","onShiftEnd","onResize","getSurroundingWidgets","DashboardWidgetComponent","dashboardService","getDefaultAriaLabel","regular","update","ariaLabel","getAriaLabel","isGrabbing$","isGrabbing","_columnSpan","_rowSpan","console","warn","random","getStackableValue","_row","setStackableValue","zIndex","dragstart","drag","dragend","widgetAriaLabel","resizable","isDraggable","property","DashboardGrabHandleService","_dashboard","setHandles","handles","_handles","setFirstItemFocusable","ensureFocusable","setItemFocus","focusElement","getHandlesInOrder","blur","setPreviousItemFocus","getHandleIndex","setNextItemFocus","setSiblingItemFocus","current","handleOne","handleTwo","_handle","tabIndex","DashboardGrabHandleDirective","_announcer","getChangeSuccessAnnouncement","getStartAnnouncement","getMoveFailAnnouncement","getResizeFailAnnouncement","getConfirmAnnouncement","getCancellationAnnouncement","getAnnouncement","uxGrabAriaLabel","enableDragMode","_lastMovement","announce","uxGrabStartAnnouncement","disableDragMode","uxGrabConfirmAnnouncement","cancelDragMode","uxGrabCancelAnnouncement","toggleDragMode","ESCAPE","SPACE","ENTER","stopPropagation","resizeWidget","moveWidget","moveFocus","announcement","uxGrabAllowMove","getDirectionFromKey","getLayoutDiff","uxGrabChangeSuccessAnnouncement","uxGrabMoveFailAnnouncement","uxGrabAllowResize","uxGrabResizeFailAnnouncement","getDiffAnnouncements","join","diff","isMovedHorizontally","isMovedVertically","currentRow","currentColumn","isMovedDown","isMovedUp","isMovedLeft","isMovedRight","isResized","currentColumnSpan","currentRowSpan","getDashboardAriaLabel","getWidgetAriaLabel","diffs","layout","previousLayout","Number","previousColumn","previousRow","previousColumnSpan","previousRowSpan","isMoved","diffOne","diffTwo","LiveAnnouncer","DashboardComponent","_grabHandleService","tap","layoutChange","dashboardElement","customAriaLabel","DashboardDragHandleDirective","elementRef","renderer","DECLARATIONS","gridify","range","start","end","dateRange","dates","setDate","getDate","compareDays","day1","day2","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","weekdays","weekdaysShort","weekday","timezones","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showMeridian","showSpinners","nowBtnText","ModeDirection","None","date","setViewportMonth","setViewportYear","date$","month$","year$","year","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","triggerDecrement","triggerIncrement","encapsulation","ViewEncapsulation","SpinButtonModule","TimeFormatPipe","transform","pad","Pipe","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","value$","getHours","hour","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","hourChange","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","aria-label","TimePickerModule","DayViewService","_datepicker","createDayGrid","setFocus","focused$","getDay","isToday","isActive","isCurrentMonth","grid$","selectedDay","DayViewComponent","datePicker","dayService","trackWeekByFn","trackDayByFn","_index","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","decrementTimezone","YearViewService","Subscription","_year","createYearGrid","goToNextDecade","goToPreviousDecade","add","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","_timeout","preventScroll","focusIfScroll","focusIfDelay","FocusIfModule","DateTimePickerModule","forRoot","ngModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","TypeaheadOptionEvent","option","TypeaheadKeyService","handleKey","typeahead","open","moveHighlight","selectOnEnter","selectHighlighted","TypeaheadService","TypeaheadComponent","typeaheadElement","_changeDetector","_service","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","pageSize","arrayOrPromise","newOptions","open$","openChange","initOptions","highlighted$","highlightedKey","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","displayHtml","length_1","matchIndex","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","InfiniteScrollLoadButtonDirective","_template","_viewContainer","load","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","_updateRequests","filterOperator","request","check","auditTime","doRequest","enabled","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","loading","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","_subscriptions","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","subtree","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","of","from","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","scrollTop","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","scrollIntoView","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","TypeaheadModule","ReorderableHandleDirective","ReorderableModelDirective","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","isEmpty","getGroup","moves","canMove","_containers","getModelForElement","getModelFromElement","containers","c","mirrorContainer","on","sibling","drop","cancel","cloned","containerElement","isSameNode","ReorderableDirective","reorderableGroup","_container","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","reorderEnd","setTableCellWidths","captureCanvases","reorderingDisabled","sourceCells","targetCells","cell","getPropertyValue","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","ReorderableModule","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","tag","selectedFacet","title","previousElementSibling","nextElementSibling","deselectAllFacets","trackBy","shiftRight","facetsReorderable","shiftFacet","shiftLeft","FacetBaseComponent","facetContainer","deselectAll","toggleFacetSelection","isFacetSelected","Host","FacetHeaderComponent","toggleExpand","canExpand","(click)","(keyup.enter)","[attr.aria-expanded]","[attr.aria-label]","FacetCheckListItemComponent","getLabel","FacetCheckListComponent","_focusKeyManager","activeIndex","toggleFacet","ViewChildren","FacetTypeaheadListItemComponent","FacetTypeaheadListComponent","typeaheadKeyService","maxResults","minCharacters","config","query$","typeaheadOptions","mergeMap","getFacetObservable","updateTypeahead","query","typeaheadOpen","FacetTypeaheadHighlight","searchQuery","regex","RegExp","Facet","count","FilterAddEvent","FilterRemoveAllEvent","FilterRemoveEvent","FilterService","isSelected","initial","filters$","events$","remove","_filter","removeAll","FilterContainerComponent","filterService","filters","filtersChange","FilterBaseComponent","filtersContainer","removeFilter","addFilter","FilterDropdownComponent","_filterService","rxFilter","selectFilter","FilterDynamicComponent","_defaultOptions","_options","typeaheadItems","getItems","maxIndividualItems","showTypeahead","selectOption","typeaheadOption","dropdown","clickOff","BsDropdownDirective","FilterTypeaheadHighlight","MenuNavigationService","MenuNavigationItemDirective","service","active$","setActive","activated","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","keydownHandler","isKeyMatch","menuOpen","keyEnter","menuPosition","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","focusFirst","moveFirst","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","navigatedOut","nextIndex","DOCUMENT","EXPORTS","BsDropdownModule","MenuNavigationModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","onKeyDown","[class.horizontal]","[class.vertical]","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","close","setPrimaryButtonFocusable","isHorizontal","direction$","isVertical","setButtons","buttons","_buttons","btn","tabindex$","focusPrimaryButton","button","focusSibling","getFocusedButton","last","getButtonIndex","FloatingActionButtonComponent","fab","_tooltip","preserveWhitespaces","Attribute","FloatingActionButtonsComponent","animations","transition","opacity","stagger","animate","FloatingActionButtonsModule","ClickOutsideDirective","_initialised","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","PopoverModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","getChildren","children$","observer","child","nodes","_child","HierarchyBarComponent","hierarchyBar","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","HierarchyBarModule","SidePanelService","SidePanelComponent","inline","attachTo","openPanel","closePanel","clickHandler","closeOnExternalClick","ItemDisplayPanelComponent","visibleChange","panel","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","[attr.aria-labelledby]","WizardComponent","stepChange","invalidIndicator","setWizardStepIds","steps","stepChanging","StepChangingEvent","getCurrentStep","stepError","onNext","onPrevious","finish","onFinishing","onFinish","onCancel","gotoStep","stepIndex","stp","isLastStep","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","MarqueeWizardModule","WizardModule","FrameExtractionService","createVideoPlayer","videoPlayer","preload","src","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","skip","frames","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","duration","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","readyState","seekable","seeking","textTracks","videoTracks","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","canPlayType","addTextTrack","kind","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","hideSubtitleTracks","MediaPlayerBaseExtensionDirective","mediaPlayerService","ColorServiceModule","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","thumb","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","tooltips","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","clamp","updateThumbPosition","eventPosition","MouseEvent","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","toFixed","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","getSteps","output","showLabels","tk","t1","t2","destination","value1","value2","isSliderValue","obj1","obj2","SliderModule","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","volumeChangeEvent","mouseEnterVolume","volumeActive","mouseLeaveVolume","switchMap","timer","toggleMute","goToStart","goToEnd","isSubtitleActive","setSubtitleTrack","cues","line","getSubtitleTrack","[class.quiet]","MediaPlayerCustomControlDirective","MediaPlayerTimelineExtensionComponent","scrub","timeUpdateEvent","progressEvent","mousedown$","mousemove$","mouseup$","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","AudioService","_http","getAudioFileMetadata","mediaElement","responseType","response","filename","lastIndexOf","extension","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","getAudioBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","waveform","points","channel","arrayBuffer","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","createAnalyser","HttpClient","AudioServiceModule","HttpClientModule","MediaPlayerComponent","_audioService","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","DurationPipe","minutes","hours","days","DurationPipeModule","FileSizePipe","log","pow","FileSizePipeModule","NavigationItemComponent","_parent","_router","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","parentElement","levelClass","getLevelClass","setIndentWithoutArrow","_childrenChanges","some","indentWithoutArrow","[class.active]","[class.selected]","SkipSelf","Router","NavigationService","setExpanded","autoCollapse","collapseSiblings","siblings","parent_1","getParent","siblings_1","siblings_1_1","NavigationLinkDirective","_locationStrategy","_navigationService","_expanded$","navigationItem","ariaExpanded","updateNavigationState","updateAttributes","routerLink","commands","navigate","routerExtras","isActiveItem","href","getHref","indentChildren","urlTree","createUrlTree","prepareExternalUrl","serializeUrl","LocationStrategy","NavigationComponent","tree","hierarchyClasses","itemClick","needsIndent","NavigationModule","NotificationService","_colorService","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","updateItemsWithActiveRoute","secondaryNavigationAutoselect","secondary$","isParentOf","deselect","items$","updateItem","setItems","setParent","initialSelectedItem","setSecondaryNavigation","PageHeaderActiveNavigationItem","findActiveItem","exact","childItem","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","menuNavigationToggle","PageHeaderNavigationDropdownItemComponent","_pageHeaderService","_hover$","dropdownOpen","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationSecondaryItemDirective","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","indicatorX","indicatorWidth","PageHeaderComponent","condensed","_crumbs","crumbs","_logoBackground","_logoForeground","logoBackground","logoForeground","goBack","backClick","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","TabFocusDirective","_tabset","uxTabFocus","uniqueTabId","TabComponent","TabHeadingDirective","headingRef","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","TabsetModule","PageHeaderModule","PAGINATION_CONTROL_VALUE_ACCESSOR","PaginationComponent","_page","pages","getPages","onChange","pagesize","_pagesize","_total","onTouched","pageChange","trackByFn","pageCount","isPageVisible","numPages","maxSize","PaginationModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","RadioButtonModule","UNSET_FOCUS","groupId","SearchBuilderFocusService","focus$","clearFocus","SearchBuilderService","registerComponent","_components","cmp","registerComponents","components","getComponent","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","_searchBuilderFocusService","init","_id","removeAtIndex","SearchBuilderGroupComponent","searchBuilderGroupService","focusIndex","addField","removeFieldAtIndex","field","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","outlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","ComponentFactoryResolver","SearchBuilderComponent","_querySubscription","_validSubscription","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","_value$","_input$","_dropdownOpen","dropdownOpenChange","propagateChange","inputChange","allowNull","multiple","filter$","onfocus","singleInput","tagInput","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","inputKeyHandler","singleOptionSelected","TagInputEvent","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","validate","tags","_onTouchedHandler","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","commitTypeahead","commitInput","BACKSPACE","backspace","DELETE","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","tagValue","inputPattern","inputValid","tagPattern","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","BaseSearchComponent","validation","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchDateComponent","SearchSelectComponent","dropDirection","maxHeight","SearchTextComponent","SearchBuilderModule","SelectionStrategy","selectionService","setSelectionService","mousedown","keydown","selectAll","dataset","RowSelectionStrategy","shiftKey","multipleSelect","singleSelect","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","deactivate","startIdx","endIdx","activateSibling","RowAltSelectionStrategy","handleCursorKey","getSibling","SimpleSelectionStrategy","Set","SelectionService","_dataset","_strategyToDestroy","selections","selection","selectionHasMutated","delete","getSelectionState","selection$","setStrategy","trim","setDisabled","isEnabled","SelectListItemComponent","onMouseDown","MultipleSelectListStrategy","_lastSelection","SingleSelectListStrategy","SelectListComponent","SelectListModule","SidePanelCloseDirective","SparkComponent","_theme","_trackColor","_barColor","values","val","SparkModule","ResizableTableService","onResize$","setColumns","_columns","getNaturalWidth","tableWidth","isInitialised$","setResizing","isResizing","unit","ColumnUnit","Percentage","Pixel","setColumnWidth","sizes","resizeColumn","getSiblingColumn","tslib_1.__spread","isWidthValid","getVariableColumn","isFixedWidth","getCellIndex","getColumnDisabled","getColumnInstance","ResizableTableCellDirective","_table","cellIndex","ResizableTableColumnComponent","isInitialised","widthChange","coerceNumberProperty","computed","onDragMove","onMoveLeft","onMoveRight","ResizableTableDirective","getScrollWidth","tBodies","tbody","TableModule","TimelineComponent","TimelineModule","TimelineEventComponent","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","_embeddedView","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","OverflowDirective","horizontalOverflow","verticalOverflow","checkForOverflow","tolerance","_state","uxOverflowHorizontalObserver","uxOverflowVerticalObserver","uxOverflowObserver","SelectionItemDirective","_selectionService","_selected","_managedTabIndex","uxSelectionItem","focusTarget","isClickEnabled","isKeyboardEnabled","SelectionDirective","_cdRef","uxSelectionChange","SelectionModule","TreeGridState","setSize","positionInSet","TreeGridService","data$","rows$","getFlattenedTree","insertChildren","removeChildren","loadChildren","loading$","getNormalizedChildren","toPromise","uniqueChildren","childRows","rows","TreeGridRowDirective","_treeGridService","isExpanded","[class.treegrid-row]","TreeGridIndentDirective","uxTreeGridIndent","TreeGridDirective","rowsChange","TreeGridModule","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","ThumbnailNg1Component","TreeGridNg1Component","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","pdfServiceFactory","pdfServiceProvider","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","navigationMenuServiceProvider","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","Conduit","tslib_1.__assign"],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'ux-accordion-panel-header'\n})\nexport class AccordionPanelHeadingDirective {\n\n}","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class AccordionService {\n\n    collapseOthers: boolean = false;\n    collapse = new Subject<void>();\n\n    collapseAll(): void {\n        this.collapse.next();\n    }\n}","import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { AccordionService } from '../accordion.service';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-accordion-panel',\n    templateUrl: './accordion-panel.component.html',\n    host: {\n        'class': 'panel panel-default',\n        'role': 'tab'\n    }\n})\nexport class AccordionPanelComponent {\n\n    @Input() panelId: string = `ux-accordion-panel-${uniqueId++}`;\n    @Input() headingId: string = `${this.panelId}-heading`;\n\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() @HostBinding('class.panel-open') expanded: boolean = false;\n\n    @Output() expandedChange = new EventEmitter<boolean>();\n\n    constructor(public accordion: AccordionService) {\n        accordion.collapse.subscribe(() => this.collapse());\n    }\n\n    toggle(): void {\n\n        if (this.expanded) {\n            this.collapse();\n            return;\n        }\n\n        // check if we should collapse others\n        if (this.accordion.collapseOthers) {\n            this.accordion.collapseAll();\n        }\n\n        // store the new expanded state\n        this.expand();\n    }\n\n    expand(): void {\n        if (this.disabled === false && this.expanded === false) {\n            this.expanded = true;\n            this.expandedChange.next(true);\n        }\n    }\n\n    collapse(): void {\n        if (this.disabled === false && this.expanded === true) {\n            this.expanded = false;\n            this.expandedChange.next(false);\n        }\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { AccordionService } from './accordion.service';\n\n@Component({\n    selector: 'ux-accordion',\n    templateUrl: './accordion.component.html',\n    providers: [ AccordionService ],\n    host: {\n        'class': 'panel-group',\n        'role': 'tablist',\n        'aria-multiselectable': 'true'\n    }\n})\nexport class AccordionComponent {\n\n    @Input() set collapseOthers(collapseOthers: boolean) {\n        this._accordion.collapseOthers = collapseOthers;\n    }\n\n    constructor(private _accordion: AccordionService) { }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccordionPanelHeadingDirective } from './accordion-panel/accordion-panel-heading.directive';\nimport { AccordionPanelComponent } from './accordion-panel/accordion-panel.component';\nimport { AccordionComponent } from './accordion.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ],\n    exports: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ]\n})\nexport class AccordionModule { }","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    templateUrl: 'breadcrumbs.component.html'\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _observer = new ResizeObserver(this.elementDidResize.bind(this));\n    private _targets = new WeakMap<HTMLElement, ReplaySubject<ResizeDimensions>>();\n\n    constructor(private _zone: NgZone) {}\n\n    ngOnDestroy(): void {\n        this._observer.disconnect();\n    }\n\n    addResizeListener(target: HTMLElement): ReplaySubject<ResizeDimensions> {\n        this._zone.runOutsideAngular(() => this._observer.observe(target));\n\n        if (this._targets.has(target)) {\n            return this._targets.get(target);\n        } else {\n            const emitter = new ReplaySubject<ResizeDimensions>();\n            this._targets.set(target, emitter);\n            return emitter;\n        }\n    }\n\n    removeResizeListener(target: HTMLElement): void {\n        this._observer.unobserve(target);\n    }\n\n    private elementDidResize(entries: ResizeObserverEntry[]): void {\n        this._zone.run(() => {\n            for (const entry of entries) {\n                if (this._targets.has(entry.target as HTMLElement)) {\n                    const emitter = this._targets.get(entry.target as HTMLElement);\n                    emitter.next({ width: (entry.target as HTMLElement).offsetWidth, height: (entry.target as HTMLElement).offsetHeight });\n                }\n            }\n        });\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._resizeService.removeResizeListener(this._elementRef.nativeElement);\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  templateUrl: './card-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  templateUrl: './card-tabset.component.html',\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ResizeModule } from '../../directives/resize/index';\r\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\r\nimport { CardTabComponent } from './card-tab/card-tab.component';\r\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResizeModule\r\n  ],\r\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\r\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\r\n})\r\nexport class CardTabsModule { }\r\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    templateUrl: './checkbox.component.html',\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { pairwise, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ThemeColor } from '../../services/color/color.service';\n\n// Values corresponding to stylesheet\nconst BUTTON_MARGIN = 8;\nconst BUTTON_WIDTHS = {\n    'sm': 26,\n    'md': 32,\n    'lg': 40\n};\n\nlet uniqueId = 0;\n\n@Component({\n    selector: 'ux-color-picker',\n    exportAs: 'ux-color-picker',\n    templateUrl: 'color-picker.component.html'\n})\nexport class ColorPickerComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('attr.id')\n    id: string = `ux-color-picker-${uniqueId++}`;\n\n    @Input('colors')\n    set inputColors(colors: ColorPickerInputColors[] | ColorPickerInputColors[][]) {\n\n        let normalizedColors: ColorPickerInputColors[][];\n\n        // If it's a 1d array, convert it to 2d\n        if (colors.length === 0 || !Array.isArray(colors[0])) {\n            normalizedColors = [<ColorPickerInputColors[]>colors];\n        } else {\n            normalizedColors = <ColorPickerInputColors[][]>colors;\n        }\n\n        // Convert any string colors to ColorPickerColor\n        this.colors = normalizedColors.map(row => {\n            return row.map(color => color instanceof ColorPickerColor ? color : new ColorPickerColor(color, color));\n        });\n    }\n\n    @Input()\n    set selected(selected: ColorPickerColor) {\n        this.selected$.next(selected);\n    }\n\n    @Input()\n    set columns(columns: number) {\n        this.columns$.next(columns);\n    }\n\n    @Input()\n    buttonStyle: ColorPickerButtonStyle = 'circle';\n\n    @Input()\n    set buttonSize(buttonSize: ColorPickerButtonSize) {\n        this.buttonSize$.next(buttonSize);\n    }\n\n    @Input()\n    showTooltips: boolean = false;\n\n    @Input()\n    showInput: boolean = false;\n\n    @Input()\n    inputMode: ColorPickerInputMode = 'hex';\n\n    @Output()\n    selectedChange = new EventEmitter<ColorPickerColor>();\n\n    @Output()\n    inputSubmit = new EventEmitter<void>();\n\n    @HostBinding('style.width')\n    cssWidth = 'auto';\n\n    colors: ColorPickerColor[][] = [];\n    selected$ = new BehaviorSubject<ColorPickerColor>(null);\n    columns$ = new BehaviorSubject<number>(-1);\n    buttonSize$ = new BehaviorSubject<ColorPickerButtonSize>('md');\n    inputPatterns = {\n        'hex': /^#(?:[\\da-fA-F]{3}){1,2}$/,\n        'rgba': /^(?:rgb\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3}\\))|(?:rgba\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3},\\s*\\d(\\.\\d+)?\\))$/\n    };\n\n    private _onDestroy = new Subject();\n\n    ngOnInit(): void {\n\n        // Skip emitting the initial selectedChange\n        this.selected$.pipe(pairwise(), takeUntil(this._onDestroy)).subscribe(([prev, curr]) => {\n            if (prev) {\n                this.selectedChange.emit(curr);\n            }\n        });\n\n        // Set the width based on column count and button size\n        combineLatest(this.columns$, this.buttonSize$)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(([columns, buttonSize]) => {\n                if (columns > 0) {\n                    const w = columns * (BUTTON_WIDTHS[buttonSize] + (2 * BUTTON_MARGIN));\n                    this.cssWidth = `${w}px`;\n                } else {\n                    this.cssWidth = 'auto';\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateColorValue(input: string, mode: ColorPickerInputMode): void {\n        if (this.inputPatterns[mode].test(input)) {\n            this.selected$.next(new ColorPickerColor('Custom', input, mode));\n        }\n    }\n\n    toggleColorEntryType(): void {\n        this.inputMode = (this.inputMode === 'hex') ? 'rgba' : 'hex';\n    }\n}\n\nexport type ColorPickerInputColors = ColorPickerColor | string;\nexport type ColorPickerButtonStyle = 'square' | 'circle';\nexport type ColorPickerButtonSize = 'sm' | 'md' | 'lg';\nexport type ColorPickerInputMode = 'hex' | 'rgba';\n\n/**\n * Type representing a color, including its descriptive name.\n */\nexport class ColorPickerColor {\n\n    /**\n     * Human-readable name of the color.\n     */\n    name: string;\n\n    /**\n     * Hex value of the color, e.g. `#ffffff`.\n     */\n    get hex(): string {\n        return this._originalHexValue ? this._originalHexValue : this._color.toHex();\n    }\n\n    /**\n     * RGBA value of the color, e.g. `rgba(255, 255, 255, 1)`.\n     */\n    get rgba(): string {\n        return this._originalRgbaValue ? this._originalRgbaValue : this._color.toRgba();\n    }\n\n    get r(): number {\n        return parseInt(this._color.getRed());\n    }\n\n    get g(): number {\n        return parseInt(this._color.getGreen());\n    }\n\n    get b(): number {\n        return parseInt(this._color.getBlue());\n    }\n\n    get a(): number {\n        return parseFloat(this._color.getAlpha());\n    }\n\n    private _color: ThemeColor;\n    private _originalHexValue: string;\n    private _originalRgbaValue: string;\n\n    constructor(name: string, value: string, inputMode?: ColorPickerInputMode) {\n        this.name = name;\n        this._color = ThemeColor.parse(value);\n\n        // Preserve the format entered by the user if it's valid\n        if (inputMode === 'hex') {\n            this._originalHexValue = value;\n        } else if (inputMode === 'rgba') {\n            this._originalRgbaValue = value;\n        }\n    }\n\n    toString(): string {\n        return this._color.toRgba();\n    }\n}","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxFocusWithin],[uxBlurWithin]',\n})\nexport class FocusWithinDirective implements OnDestroy {\n\n    @Output() uxFocusWithin = new EventEmitter<void>();\n    @Output() uxBlurWithin = new EventEmitter<void>();\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor, ngZone: NgZone) {\n        _focusMonitor.monitor(this._elementRef.nativeElement, true)\n            .subscribe(origin => ngZone.run(() => origin ? this.uxFocusWithin.emit() : this.uxBlurWithin.emit()));\n    }\n\n    ngOnDestroy(): void {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n}","import { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, OnDestroy, Output, PLATFORM_ID, QueryList, Renderer2 } from '@angular/core';\nimport { SplitAreaDirective, SplitComponent } from 'angular-split';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: 'split'\n})\nexport class SplitterAccessibilityDirective implements AfterViewInit, OnDestroy {\n\n    /** Emit an event whenever the gutter is moved using the keyboard */\n    @Output() gutterKeydown = new EventEmitter<KeyboardEvent>();\n\n    /** Find all the split areas */\n    @ContentChildren(SplitAreaDirective) areas: QueryList<SplitAreaDirective>;\n\n    /** Store all the gutter elements */\n    private _gutters: HTMLElement[] = [];\n\n    /** Watch for gutters being added or removed */\n    private _observer: MutationObserver;\n\n    /** Teardown our observables on destroy */\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Inject(PLATFORM_ID) private _platform: string,\n        private _splitter: SplitComponent\n    ) {\n        // update aria values when the a gutter is dragged\n        _splitter.dragProgress\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.updateGutterAttributes());\n    }\n\n    /** Once initialised make the gutters accessible */\n    ngAfterViewInit(): void {\n        // find the gutters\n        this.onGutterChange();\n\n        // if the number of split areas change then update the gutters and apply aria properties\n        this.areas.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.onGutterChange());\n\n        // we can't know when additional split-gutters appear using ContentChildren as the directive class is not exported and selector doesn't work - use mutation observer instead\n        if (isPlatformBrowser(this._platform)) {\n\n            // create the mutation observer\n            this._observer = new MutationObserver(() => this.onGutterChange());\n\n            // begin observing the child nodes\n            this._observer.observe(this._elementRef.nativeElement, { childList: true });\n        }\n    }\n\n    /** Destroy all observables and observers */\n    ngOnDestroy(): void {\n\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** We should focus the gutter when it is clicked */\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            (event.target as HTMLElement).focus();\n        }\n    }\n\n    /** Find all the gutters and set their attributes */\n    private onGutterChange(): void {\n        this._gutters = this.getGutters();\n        this.setGutterAttributes();\n    }\n\n    /** Get all the gutter elements */\n    private getGutters(): HTMLElement[] {\n        // This function uses DOM accessing properties - which won't work if server side rendered\n        if (isPlatformBrowser(this._platform)) {\n            const gutters: HTMLElement[] = [];\n\n            for (let idx = 0; idx < this._elementRef.nativeElement.children.length; idx++) {\n                const node = this._elementRef.nativeElement.children.item(idx);\n\n                if (this.isSplitterGutter(node as HTMLElement)) {\n                    gutters.push(node as HTMLElement);\n                }\n            }\n\n            return gutters;\n        }\n\n        return [];\n    }\n\n    /** Set the appropriate attributes on the gutter elements */\n    private setGutterAttributes(): void {\n        // apply attribute to every gutter\n        this._gutters.forEach(gutter => {\n            // apply the separator role\n            this._renderer.setAttribute(gutter, 'role', 'separator');\n\n            // make the gutters tabbable\n            this._renderer.setAttribute(gutter, 'tabindex', '0');\n\n            // set the value now aria property\n            this.updateGutterAttributes();\n        });\n    }\n\n    /** Apply the aria attribute values */\n    private updateGutterAttributes(): void {\n        // update the value now properties of each gutter\n        this._gutters.forEach((gutter, idx) => {\n            this.setGutterValueNow(gutter, idx);\n            this.setGutterValueMin(gutter, idx);\n            this.setGutterValueMax(gutter, idx);\n        });\n    }\n\n    /** Apply the value now aria attribute */\n    private setGutterValueNow(gutter: HTMLElement, index: number): void {\n        // get the matching split area\n        const area = this._splitter.displayedAreas[index];\n\n        // indicate the size\n        this._renderer.setAttribute(gutter, 'aria-valuenow', `${Math.round(area.size * 100)}`);\n    }\n\n    /** Apply the value min aria attribute */\n    private setGutterValueMin(gutter: HTMLElement, index: number): void {\n        // get the matching split area\n        const area = this.areas.toArray()[index];\n\n        // indicate the minimum size\n        this._renderer.setAttribute(gutter, 'aria-valuemin', `${Math.round(area.minSize * 100)}`);\n    }\n\n    /** Apply the value max aria attribute */\n    private setGutterValueMax(gutter: HTMLElement, index: number): void {\n        // get every other splitter area\n        const availableSize = this.areas\n            .filter((_area, idx) => index !== idx)\n            .reduce<number>((total, area) => total + area.minSize, 0);\n\n        // indicate the minimum size\n        this._renderer.setAttribute(gutter, 'aria-valuemax', `${100 - Math.round(availableSize * 100)}`);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.gutterKeydown.emit(event);\n        }\n    }\n\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowRight', ['$event'])\n    onIncreaseKey(event: KeyboardEvent): void {\n        // only perform a move if a gutter is focused\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.setGutterPosition(event.target as HTMLElement, -0.01);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.ArrowLeft', ['$event'])\n    onDecreaseKey(event: KeyboardEvent): void {\n        // only perform a move if a gutter is focused\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.setGutterPosition(event.target as HTMLElement, 0.01);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.Home', ['$event'])\n    onHomeKey(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            // get the affected panels\n            const areas = this.getAreasFromGutter(event.target as HTMLElement);\n\n            // set the previous area to it's minimum size\n            const delta = areas.previous.size - areas.previous.comp.minSize;\n\n            // update the sizes accordingly\n            this.setGutterPosition(event.target as HTMLElement, delta);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.End', ['$event'])\n    onEndKey(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            // get the affected panels\n            const areas = this.getAreasFromGutter(event.target as HTMLElement);\n\n            // set the next area to it's minimum size\n            const delta = areas.next.size - areas.next.comp.minSize;\n\n            // update the sizes accordingly\n            this.setGutterPosition(event.target as HTMLElement, -delta);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    /** Determine if an element is a gutter */\n    private isSplitterGutter(element: HTMLElement): boolean {\n        return element.tagName === 'SPLIT-GUTTER';\n    }\n\n    /** Update the gutter position */\n    private setGutterPosition(gutter: HTMLElement, delta: number): void {\n        // get the affected panels\n        const areas = this.getAreasFromGutter(gutter);\n\n        // ensure we can perform the resize\n        if (areas.previous.size - delta < areas.previous.comp.minSize || areas.next.size + delta < areas.next.comp.minSize) {\n            return;\n        }\n\n        // perform the resize\n        areas.previous.size -= delta;\n        areas.next.size += delta;\n\n        // update the splitter - this is a private method but we need to call it\n        (this._splitter as any).refreshStyleSizes();\n\n        // update the gutter aria values\n        this.updateGutterAttributes();\n    }\n\n    /** Get the split areas associated with a given gutter */\n    private getAreasFromGutter(gutter: HTMLElement) {\n        const index = this._gutters.indexOf(gutter);\n\n        return {\n            previous: this._splitter.displayedAreas[index],\n            next: this._splitter.displayedAreas[index + 1]\n        };\n    }\n}\n","import { Observable } from 'rxjs/Observable';\n\n/**\n * This is a simple RxJS operator to allow us to avoid the\n * \"expression has changed after it was checked issue\"\n * by making the subscription asynchronous. We could just use a\n * delay operator but this uses a timeout which is significantly\n * slower than using requestAnimationFrame.\n */\nexport const tick = <T>() => (source: Observable<T>) => new Observable<T>((subscriber) => {\n    source.subscribe({\n        next(value: T) { requestAnimationFrame(() => subscriber.next(value)); },\n        error(err: any) { subscriber.error(err); },\n        complete() { subscriber.complete(); },\n    });\n});","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Injectable, OnDestroy, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\n\n@Injectable()\nexport class TabbableListService implements OnDestroy {\n\n    hierarchy: boolean = false;\n    allowAltModifier: boolean = true;\n    allowCtrlModifier: boolean = true;\n    allowBoundaryKeys: boolean = false;\n    focusKeyManager: FocusKeyManager<TabbableListItemDirective>;\n\n    private _items: QueryList<TabbableListItemDirective>;\n    private _direction: 'horizontal' | 'vertical';\n    private _onDestroy = new Subject<void>();\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    initialize(items: QueryList<TabbableListItemDirective>, direction: 'horizontal' | 'vertical', wrap: boolean): void {\n\n        // store the items\n        this._items = items;\n\n        // create the new focus key manager\n        this.focusKeyManager = new FocusKeyManager(items);\n\n        // set the direction of the list\n        direction === 'vertical' ? this.focusKeyManager.withVerticalOrientation() : this.focusKeyManager.withHorizontalOrientation('ltr');\n        this._direction = direction;\n\n        // enable wrapping if required\n        if (wrap) {\n            this.focusKeyManager.withWrap();\n        }\n\n        // make sure the first item in the list is tabbable\n        this.setFirstItemTabbable();\n\n        // call the init function on each item\n        this._items.forEach(item => item.onInit());\n\n        // if the list changes we need to ensure there is always at least one tabbable item\n        this._items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n\n            // call the on init function on any new items\n            this._items.filter(item => !item.initialized).forEach(item => item.onInit());\n\n            // ensure there is at least one item tabbable at all times\n            this.ensureTabbableItem();\n        });\n    }\n\n    activate(item: TabbableListItemDirective): void {\n\n        if (!item) {\n            return;\n        }\n\n        // get the item index\n        const index = this._items.toArray().indexOf(item);\n\n        // active the item if it is not already active\n        if (this.focusKeyManager.activeItemIndex !== index) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    isItemActive(item: TabbableListItemDirective): boolean {\n        return this.focusKeyManager.activeItem.id === item.id;\n    }\n\n    setFirstItemTabbable(): void {\n        // delay to prevent expression changed after check error\n        requestAnimationFrame(() => {\n            // find the first item that is not disabled\n            const first = this._items.find(item => !item.disabled);\n\n            if (first) {\n                first.tabindex = 0;\n            }\n        });\n    }\n\n    ensureTabbableItem(): void {\n        // check to see if any item is tabbable\n        const active = this._items.find(item => item.tabindex === 0);\n\n        if (!active) {\n            this.setFirstItemTabbable();\n        }\n    }\n\n    focusTabbableItem(): void {\n\n        if (!this._items) {\n            return;\n        }\n\n        // find the item in the list with a tab index\n        const index = this._items.toArray().findIndex(item => item.tabindex === 0);\n\n        // if an item was found then focus it\n        if (index !== -1) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n\n    onKeydown(source: TabbableListItemDirective, event: KeyboardEvent): any {\n\n        // prevent anything happening when modifier keys are pressed if they have been disabled\n        if (!this.allowAltModifier && event.altKey || !this.allowCtrlModifier && event.ctrlKey) {\n            return;\n        }\n\n        this.focusKeyManager.onKeydown(event);\n\n        // if the key is a boundary key and boundary keys are enabled\n        if (this.allowBoundaryKeys) {\n            switch (event.which) {\n                case HOME:\n                    this.focusKeyManager.setFirstItemActive();\n                    event.preventDefault();\n                    break;\n\n                case END:\n                    this.focusKeyManager.setLastItemActive();\n                    event.preventDefault();\n                    break;\n            }\n        }\n\n        if (this.hierarchy) {\n\n            if ((this._direction === 'horizontal' && event.keyCode === DOWN_ARROW) ||\n                (this._direction === 'vertical' && event.keyCode === RIGHT_ARROW)) {\n                source.keyboardExpanded$.next(true);\n            } else if ((this._direction === 'horizontal' && event.keyCode === UP_ARROW) ||\n                (this._direction === 'vertical' && event.keyCode === LEFT_ARROW)) {\n\n                if (source.children.length > 0 && source.expanded) {\n                    source.keyboardExpanded$.next(false);\n                } else if (source.parent) {\n                    source.parent.keyboardExpanded$.next(false);\n                }\n            }\n        }\n    }\n\n    sortItemsByHierarchy(list: QueryList<TabbableListItemDirective>): TabbableListItemDirective[] {\n\n        const topLevel: TabbableListItemDirective[] = [];\n\n        // Populating children - clear previously generated collection\n        list.forEach(item => item.children = []);\n\n        // Populating children - map from child -> parent relationship\n        list.forEach(item => {\n            if (item.parent) {\n                item.parent.children.push(item);\n            } else {\n                topLevel.push(item);\n            }\n        });\n\n        // Flatten the tree to produce the cursor key order\n        return this.flattenHierarchy(topLevel);\n    }\n\n    private flattenHierarchy(items: TabbableListItemDirective[]): TabbableListItemDirective[] {\n        const flatList: TabbableListItemDirective[] = [];\n        items.forEach(item => {\n            item.children.sort((a, b) => a.rank - b.rank);\n            flatList.push(item, ...this.flattenHierarchy(item.children));\n        });\n        return flatList;\n    }\n}\n","import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../../common/index';\nimport { TabbableListService } from './tabbable-list.service';\n\nlet nextId = 0;\n\n@Directive({\n    selector: '[uxTabbableListItem]',\n    exportAs: 'ux-tabbable-list-item'\n})\nexport class TabbableListItemDirective implements FocusableOption, OnDestroy {\n\n    @Input() parent: TabbableListItemDirective;\n\n    @Input() rank: number = 0;\n\n    @Input() disabled: boolean = false;\n\n    @Input() expanded: boolean = false;\n\n    @Output() expandedChange = new EventEmitter<boolean>();\n\n    @HostBinding() tabindex: number = -1;\n\n    id: number = nextId++;\n\n    initialized: boolean = false;\n\n    children: TabbableListItemDirective[] = [];\n\n    keyboardExpanded$ = new Subject<boolean>();\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _tabbableList: TabbableListService, private _elementRef: ElementRef, focusMonitor: FocusMonitor) {\n\n        this.keyboardExpanded$.pipe(tick(), takeUntil(this._onDestroy)).subscribe(expanded => {\n\n            // Emit event which may alter the DOM\n            this.expandedChange.emit(expanded);\n\n            // Activate the appropriate item\n            if (expanded) {\n                if (this.children.length > 0) {\n                    this._tabbableList.activate(this.children[0]);\n                }\n            } else {\n                this._tabbableList.activate(this);\n            }\n        });\n\n        // add classes to indicate the origin of the focus event\n        focusMonitor.monitor(_elementRef.nativeElement, false).pipe(takeUntil(this._onDestroy)).subscribe();\n    }\n\n    onInit(): void {\n        this.initialized = true;\n\n        this._tabbableList.focusKeyManager.change\n            .pipe(takeUntil(this._onDestroy), map(() => this._tabbableList.isItemActive(this)))\n            .subscribe(active => this.tabindex = active ? 0 : -1);\n    }\n\n    ngOnDestroy(): void {\n\n        // check if this is the currently focused item - if so we need to make another item tabbable\n        if (this.tabindex === 0) {\n            this._tabbableList.setFirstItemTabbable();\n        }\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('focus')\n    focus(): void {\n\n        // apply focus to the element\n        this._elementRef.nativeElement.focus();\n\n        // ensure the focus key manager updates the active item correctly\n        this._tabbableList.activate(this);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._tabbableList.onKeydown(this, event);\n    }\n}","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, ContentChildren, Directive, Input, OnDestroy, QueryList } from '@angular/core';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\nimport { TabbableListService } from './tabbable-list.service';\n\n@Directive({\n    selector: '[uxTabbableList]',\n    exportAs: 'ux-tabbable-list',\n    providers: [TabbableListService]\n})\nexport class TabbableListDirective implements AfterContentInit, OnDestroy {\n\n    /** Determine whether the up/down arrows should be used or the left/right arrows */\n    @Input() direction: 'horizontal' | 'vertical' = 'vertical';\n\n    /** Indicate whether or not focus should loop back to the first element after the last */\n    @Input() wrap: boolean = true;\n\n    /** Indicate whether or not the first item should receive focus on show - useful for modals and popovers */\n    @Input() focusOnShow: boolean = false;\n\n    /** Indicate whether or not focus should be returned to the previous element (only applicable when using focusOnShow) */\n    @Input() returnFocus: boolean = false;\n\n    /** Enabling handling of hierarchical lists via use of the `TabbableListItemDirective.parent` property. */\n    @Input() set hierarchy(value: boolean) { this._tabbableList.hierarchy = value; }\n\n    /** Prevent keyboard interaction when alt modifier key is pressed */\n    @Input() set allowAltModifier(value: boolean) { this._tabbableList.allowAltModifier = value; }\n\n    /** Prevent keyboard interaction when ctrl modifier key is pressed */\n    @Input() set allowCtrlModifier(value: boolean) { this._tabbableList.allowCtrlModifier = value; }\n\n    /** Focus the first or last item when Home or End keys are pressed */\n    @Input() set allowBoundaryKeys(value: boolean) { this._tabbableList.allowBoundaryKeys = value; }\n\n    /** Find all tabbable list items */\n    @ContentChildren(TabbableListItemDirective, { descendants: true }) items: QueryList<TabbableListItemDirective>;\n\n    private _focusedElement: HTMLElement;\n    private _orderedItems: QueryList<TabbableListItemDirective>;\n\n    get focusKeyManager(): FocusKeyManager<TabbableListItemDirective> {\n        return this._tabbableList.focusKeyManager;\n    }\n\n    constructor(private _tabbableList: TabbableListService) { }\n\n    ngAfterContentInit(): void {\n\n        // store the currently focused element\n        this._focusedElement = document.activeElement as HTMLElement;\n\n        if (this._tabbableList.hierarchy) {\n\n            // Sort items in a hierarchy\n            this._orderedItems = new QueryList<TabbableListItemDirective>();\n            this._orderedItems.reset(this._tabbableList.sortItemsByHierarchy(this.items));\n\n            // Ensure that the child items remain sorted\n            this.items.changes.subscribe(() => {\n                this._orderedItems.reset(this._tabbableList.sortItemsByHierarchy(this.items));\n                this._orderedItems.notifyOnChanges();\n            });\n\n        } else {\n\n            // Items are already in order\n            this._orderedItems = this.items;\n        }\n\n        // Set up the focus monitoring\n        this._tabbableList.initialize(this._orderedItems, this.direction, this.wrap);\n\n        // focus the first element if specified\n        if (this.focusOnShow) {\n            this._tabbableList.focusKeyManager.setFirstItemActive();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.returnFocus && this._focusedElement instanceof HTMLElement) {\n            setTimeout(() => this._focusedElement.focus());\n        }\n    }\n\n    focus(): void {\n        if (this._tabbableList.focusKeyManager && this._tabbableList.focusKeyManager.activeItem) {\n            this._tabbableList.focusKeyManager.activeItem.focus();\n        }\n    }\n\n    focusTabbableItem(): void {\n        this._tabbableList.focusTabbableItem();\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { NgModule } from '@angular/core';\nimport { FocusWithinDirective } from './focus-within/focus-within.directive';\nimport { SplitterAccessibilityDirective } from './splitter/splitter-accessibility.directive';\nimport { TabbableListItemDirective } from './tabbable-list/tabbable-list-item.directive';\nimport { TabbableListDirective } from './tabbable-list/tabbable-list.directive';\n\n@NgModule({\n    declarations: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective,\n        SplitterAccessibilityDirective\n    ],\n    imports: [\n        A11yModule\n    ],\n    exports: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective,\n        SplitterAccessibilityDirective,\n    ]\n})\nexport class AccessibilityModule {}","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    templateUrl: './number-picker.component.html',\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  templateUrl: './tooltip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { NumberPickerModule } from '../number-picker/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { ColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n    imports: [\n        AccessibilityModule,\n        CommonModule,\n        FormsModule,\n        NumberPickerModule,\n        TooltipModule,\n    ],\n    exports: [ColorPickerComponent],\n    declarations: [ColorPickerComponent],\n    providers: [],\n})\nexport class ColorPickerModule { }\n","import { Directive, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective implements OnDestroy {\n\n    @Input() singleSort: boolean;\n    events = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    toggleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n\n        // apply sorting based on the single or multiple sort\n        this.order = this.singleSort ? this.toggleSingleColumn(sorting) : this.toggleMultipleColumn(sorting);\n\n        // emit the latest order\n        this.events.next(this.order);\n\n        return this.order;\n    }\n\n    private toggleSingleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        return sorting.state === ColumnSortingState.NoSort ? [] : [{ key: sorting.key, state: sorting.state }];\n    }\n\n    private toggleMultipleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        // reorder columns here\n        const idx = this.order.findIndex(column => column.key === sorting.key);\n\n        // if wasnt previously selected add to list\n        if (idx === -1) {\n            return [...this.order, { key: sorting.key, state: sorting.state }];\n        }\n\n        // if we are sorting it change the sorting order\n        if (sorting.state === ColumnSortingState.Ascending || sorting.state === ColumnSortingState.Descending) {\n            return [...this.order.filter(_column => _column.key !== sorting.key), { key: sorting.key, state: sorting.state }];\n        }\n\n        // Otherwise remove the item\n        return this.order.filter(_column => _column.key !== sorting.key);\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState;\n}\n\nexport enum ColumnSortingState {\n    Ascending = 'ascending',\n    Descending = 'descending',\n    NoSort = 'none'\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ColumnSortingDirective, ColumnSortingOrder, ColumnSortingState } from './column-sorting.directive';\n\n@Component({\n    selector: 'ux-column-sorting',\n    templateUrl: './column-sorting.component.html',\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent implements OnDestroy {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Output() stateChange = new EventEmitter<ColumnSortingState>();\n\n    order: number;\n    columnSortingState = ColumnSortingState;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _columnSorter: ColumnSortingDirective) {\n        this._columnSorter.events.pipe(takeUntil(this._onDestroy)).subscribe(event => {\n\n            // if we are sorting this column then find the matching data\n            const columnIdx = event.findIndex(_column => _column.key === this.key);\n\n            // if we are not sorting this column then mark it as NoSort\n            if (columnIdx === -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            this.order = event.length < 2 || columnIdx === -1 ? null : columnIdx + 1;\n\n            // Emit the latest change\n            this.stateChange.emit(this.state);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        switch (this.state) {\n\n            case ColumnSortingState.Ascending:\n                this.state = ColumnSortingState.Descending;\n                break;\n\n            case ColumnSortingState.Descending:\n                this.state = ColumnSortingState.NoSort;\n                break;\n\n            default:\n                this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._columnSorter.toggleColumn({ key: this.key, state: this.state });\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\n\nexport class ConduitSubject {\n\n    private _subject: Subject<any>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(public conduit: ConduitMetadata, private _zone: ConduitZone, public zoneId: string) {\n\n        // store the target subject object\n        this._subject = conduit.subject;\n\n        // check if there are any conduits that have supplied an initial value\n        this.getInitialValue();\n\n        // subscribe to changes to the source subject\n        this._subject.pipe(distinctUntilChanged(conduit.changeDetection), takeUntil(this._onDestroy))\n            .subscribe(this.onOutput.bind(this));\n\n        // subscribe to the zone events and root zone events\n        _zone.getEvents().pipe(filter(event => event.conduit.id === conduit.id), takeUntil(this._onDestroy)).subscribe(this.onInput.bind(this));\n    }\n\n    /** Check all allow inputs to see if there is a value we should initially set the conduit to */\n    getInitialValue(): void {\n\n        // if we do not accept inputs then do nothing\n        if (this.conduit.acceptsInput === false) {\n            return;\n        }\n\n        // return all subjects that are 1) Not itself 2) In a zone that is listed in acceptsInput 3) Have a currentValue set\n        const subjects = this._zone.getSubjects().filter(subject => {\n\n            // If this is itself or if it has not value to give us then do nothing\n            if (subject === this || subject.conduit.id !== this.conduit.id || !subject.conduit.hasOwnProperty('currentValue')) {\n                return false;\n            }\n\n            // if acceptsInput is true then we return every time\n            if (this.conduit.acceptsInput === true) {\n                return true;\n            }\n\n            if (Array.isArray(this.conduit.acceptsInput)) {\n                return this.conduit.acceptsInput.indexOf(subject.zoneId) !== -1;\n            }\n        });\n\n        // if there are no matches then do nothing\n        if (subjects.length === 0) {\n            return;\n        }\n\n        // otherwise sort by the last modified field\n        subjects.sort((subjectOne, subjectTwo) => subjectOne.conduit.lastModified.getTime() < subjectTwo.conduit.lastModified.getTime() ? 1 : -1);\n\n        // get the most recent value\n        this._subject.next(subjects[0].conduit.currentValue);\n    }\n\n    /** This will be triggered when a conduits value has changed */\n    onInput(event: ConduitEvent): void {\n        // if we dont accept input or we emitted this value then do nothing\n        if (this.conduit.acceptsInput === false || event.conduit === this.conduit) {\n            return;\n        }\n\n        // check if the conduit produces output - if not we only do something if we are in the same zone\n        if (event.conduit.producesOutput === false && event.zoneId !== this.zoneId) {\n            return;\n        }\n\n        // check if we only accept inputs from specific zones\n        if (Array.isArray(this.conduit.acceptsInput)) {\n            // check if the event came from an acceptable zone\n            if (!this.conduit.acceptsInput.find(zone => zone === event.zoneId)) {\n                return;\n            }\n        }\n\n        // if required transform the value\n        const outputValue = this.conduit.map ? this.conduit.map(event.value) : event.value;\n\n        // update the subject\n        this._subject.next(outputValue);\n    }\n\n    /** This will be fired when this conduit emits a new value */\n    onOutput(value: any): void {\n\n        // store the most recent value and when it was modified - can be used for any new conduits to lookup a value\n        this.conduit.currentValue = value;\n        this.conduit.lastModified = new Date();\n\n        // check if this should produce output\n        if (this.conduit.producesOutput) {\n            this._zone.emit({ conduit: this.conduit, zoneId: this.zoneId, value });\n        }\n    }\n\n    /** Unsubscribe once this subject is destroyed */\n    destroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","/** This utility is to ensure a all functions with the specified name are called in all super classes */\nexport function invokeSuperFunction(target: object, functionName: string): void {\n    // get all instances of the function\n    const functionList: Function[] = [];\n\n    // store the current prototype we are checking\n    let prototype: any = target;\n\n    // look through every base class and check it\n    do {\n        if (prototype.hasOwnProperty(functionName)) {\n            functionList.push(prototype[functionName]);\n        }\n\n        prototype = prototype.__proto__;\n    } while (prototype.__proto__);\n\n    // augment the top level function to call all the functions\n    target[functionName] = function (...args: any[]) {\n        functionList.forEach(func => func.call(target, ...args));\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitSubject } from './conduit-subject';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\n@Injectable()\nexport class ConduitZone implements OnDestroy {\n\n    /** Create a global subject store */\n    static subjects: ConduitSubject[] = [];\n\n    /** Expose an event stream of new values */\n    static events = new Subject<ConduitEvent>();\n\n    /** Store the zone name */\n    private _zoneId: string;\n\n    ngOnDestroy(): void {\n        // find all conduit subjects that are part of this zone\n        ConduitZone.subjects.filter(_subject => _subject.zoneId === this._zoneId)\n            .forEach(_subject => this.unregisterConduit(_subject.conduit));\n    }\n\n    /** Store reference to the repository and begin watching for and emitting changes */\n    registerConduit(conduit: ConduitMetadata): void {\n        ConduitZone.subjects.push(new ConduitSubject(conduit, this, this._zoneId));\n    }\n\n    /** Destroy a conduit */\n    unregisterConduit(conduit: ConduitMetadata): void {\n        const subject = this.getConduitSubject(conduit.subject);\n\n        if (subject) {\n            // remove the subject from the internal list of conduit subjects\n            ConduitZone.subjects = ConduitZone.subjects.filter(_subject => _subject !== subject);\n\n            // perform all unsubscriptions\n            subject.destroy();\n        }\n    }\n\n    /** Provide the zone with an ID */\n    setZoneId(zoneId: string): void {\n        this._zoneId = zoneId;\n    }\n\n    /** Emit a value to all zones for checking */\n    emit(event: ConduitEvent): void {\n        ConduitZone.events.next(event);\n    }\n\n    /** Retrieve a conduit subsject object from the rxjs subject */\n    getConduitSubject(subject: Subject<any>): ConduitSubject | null {\n        return ConduitZone.subjects.find(_subject => _subject.conduit.subject === subject);\n    }\n\n    /** Get all subjects from all zones */\n    getSubjects(): ConduitSubject[] {\n        return ConduitZone.subjects;\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n\n        // find the conduit with the matching subject\n        const conduitSubject = this.getSubjects().find(_conduit => _conduit.conduit.subject === subject);\n\n        // if a match was found update the properties\n        if (conduitSubject) {\n\n            // update each specified property\n            for (const prop in properties) {\n                conduitSubject.conduit[prop] = properties[prop];\n            }\n        }\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n\n        // register the conduit with the zone\n        this.registerConduit({ ...properties, subject });\n    }\n\n    /** Register all conduits in a component */\n    registerConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.registerConduit({ ...conduit, subject: component[conduit.propertyKey] }));\n        }\n    }\n\n    /** Register all conduits in a component */\n    unregisterConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.unregisterConduit(conduit));\n        }\n    }\n\n    /** Return the global event stream */\n    getEvents(): Subject<ConduitEvent> {\n        return ConduitZone.events;\n    }\n}\n","import { OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { invokeSuperFunction } from './conduit-utils';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\nexport class ConduitComponent implements OnInit, OnDestroy {\n\n    constructor(@Optional() protected _zone: ConduitZone) {\n        // we want to ensure these functions get called even if a class overrides them\n        invokeSuperFunction(this, 'ngOnInit');\n        invokeSuperFunction(this, 'ngOnDestroy');\n    }\n\n    /** We need to register the conduits with the zone when the component is initialised */\n    ngOnInit(): void {\n        // register the conduit in the zone and ensure it gets the correct instance of the target\n        this._zone.registerConduits(this);\n    }\n\n    /** We need to unregister the conduits when the component is destroyed */\n    ngOnDestroy(): void {\n        this._zone.unregisterConduits(this);\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n        this._zone.setConduitProperties(subject, properties);\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n        this._zone.createConduit(subject, properties);\n    }\n\n}\n","import { OnInit } from '@angular/core';\nimport { ConduitComponent } from './conduit.component';\n\nexport abstract class ConduitZoneComponent extends ConduitComponent implements OnInit {\n    abstract zoneId: string;\n\n    ngOnInit(): void {\n        this._zone.setZoneId(this.zoneId);\n    }\n}\n","export interface ConduitProperties {\n    id: number | string;\n    acceptsInput?: boolean | string[];\n    producesOutput?: boolean;\n    changeDetection?: (x: any, y: any) => boolean;\n    map?: any;\n}\n\nexport const defaultConduitProps: Partial<ConduitProperties> = {\n    acceptsInput: true,\n    producesOutput: true,\n};\n","import { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties, defaultConduitProps } from './interfaces/conduit-properties';\n\n/** Expose the property that conduits will be stored in */\nexport const CONDUITS = '_conduits';\n\n/** Create the conduit property decorator */\nexport function Conduit(properties: ConduitProperties | Function): PropertyDecorator {\n    return (target: Object, propertyKey: string) => {\n\n        if (typeof properties === 'function') {\n            properties = properties.call(null);\n        }\n\n        // if the target does not already have a conduit list then create one\n        if (!target.hasOwnProperty(CONDUITS)) {\n            Object.defineProperty(target, CONDUITS, { value: [] });\n        }\n\n        // add the conduit to the list ensuring all required properties are provided\n        target[CONDUITS].push({ ...defaultConduitProps, ...properties, target, propertyKey } as ConduitMetadata);\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class DragService implements OnDestroy {\n\n    /** Emit when dragging begins */\n    onDragStart = new Subject<UxDragEvent>();\n\n    /** Emit when dragging moves */\n    onDrag = new Subject<UxDragEvent>();\n\n    /** Emit when dragging ends */\n    onDragEnd = new Subject<UxDragEvent>();\n\n    /** Emit when the user is dragging over the drop area */\n    onDropEnter = new Subject<void>();\n\n    /** Emit when the user is dragging out of the drop area */\n    onDropLeave = new Subject<void>();\n\n    /** Emit when a drop occurs */\n    onDrop = new Subject<any>();\n\n    /** Destroy all observables */\n    ngOnDestroy(): void {\n        this.onDragStart.complete();\n        this.onDrag.complete();\n        this.onDragEnd.complete();\n        this.onDrop.complete();\n        this.onDropEnter.complete();\n        this.onDropLeave.complete();\n    }\n\n}\n\nexport type UxDragEvent = { group?: string, event?: MouseEvent, data?: any };","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DragService } from './drag.service';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    /** Detemine if we should show a clone when dragging */\n    @Input() clone: boolean = false;\n\n    /** Define the group the drag event belongs to */\n    @Input() group: string;\n\n    /** Associate some data with the drag event */\n    @Input() model: any;\n\n    /** Allow the dragging to be enabled/disabled */\n    @Input() draggable: boolean = true;\n\n    /** Emit an event when dragging starts */\n    @Output() onDragStart = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the mouse moves while dragging */\n    @Output() onDrag = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the dragging finishes */\n    @Output() onDragEnd = new EventEmitter<void>();\n\n    /** Emit when the user drops an item in a drop area */\n    @Output() onDrop = new EventEmitter<any>();\n\n    /** Emit when the user drags over a drop area */\n    @Output() onDropEnter = new EventEmitter<void>();\n\n    /** Emit when the user drags out of a drop area */\n    @Output() onDropLeave = new EventEmitter<void>();\n\n    /** Store the element we have cloned */\n    private _clone: Element;\n\n    /** Store the dragging state */\n    private _isDragging: boolean = false;\n\n    /** Store the mouse offset for the cloned element position */\n    private _offset: { x: number, y: number };\n\n    /** Create an observable from the mouse down event */\n    private _mousedown$ = fromEvent<MouseEvent>(this._elementRef.nativeElement, 'mousedown');\n\n    /** Create an observable from the mouse move event */\n    private _mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n\n    /** Create an observable from the mouse up event */\n    private _mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n    /** Use an observable to unsubscribe from all subscriptions */\n    protected _onDestroy = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, private _ngZone: NgZone, private _renderer: Renderer2, private _drag: DragService) {\n\n        // ensure all mouse down events on the object are captured\n        this._mousedown$.pipe(filter(() => this.draggable), takeUntil(this._onDestroy)).subscribe(this.dragStart.bind(this));\n\n        // emit the outputs when drag events occur\n        _drag.onDragStart.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(dragEvent => this.onDragStart.emit(dragEvent.event));\n\n        _drag.onDrag.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(dragEvent => this.onDrag.emit(dragEvent.event));\n\n        _drag.onDragEnd.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDragEnd.emit());\n\n        _drag.onDrop.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(event => this.onDrop.emit(event));\n\n        _drag.onDropEnter.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDropEnter.emit());\n\n        _drag.onDropLeave.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDropLeave.emit());\n    }\n\n    /** Emit events and create clone when drag starts */\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this.clone) {\n            // clone the node\n            this.cloneNode(event);\n        }\n\n        // apply a class to the element being dragged\n        this._renderer.addClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // store the dragging state\n        this._isDragging = true;\n\n        // emit the drag start event\n        this._ngZone.run(() => this._drag.onDragStart.next({ event, group: this.group, data: this.model }));\n\n        this._mousemove$.pipe(takeUntil(this._mouseup$), takeUntil(this._onDestroy))\n            .subscribe(this.dragMove.bind(this), null, this.dragEnd.bind(this));\n    }\n\n    /** Emit event and update clone position when dragging moves */\n    dragMove(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this._clone) {\n            this.updateNodePosition(event);\n        }\n\n        // emit the drag start event\n        this._ngZone.run(() => this._drag.onDrag.next({ event, group: this.group, data: this.model }));\n    }\n\n    /** Emit event and destroy clone when dragging ends */\n    dragEnd(): void {\n        // if there was a clone, remove it\n        if (this._clone) {\n            this._renderer.removeChild(document.body, this._clone);\n            this._clone = null;\n        }\n\n        // remove the dragging class\n        this._renderer.removeClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // emit the on drag end output\n        this._ngZone.run(() => this._drag.onDragEnd.next({ group: this.group, data: this.model }));\n\n        // store the dragging state\n        this._isDragging = false;\n    }\n\n    /** Create an exact clone of an element */\n    cloneNode(event: MouseEvent): void {\n\n        // duplicate the node\n        this._clone = this._elementRef.nativeElement.cloneNode(true);\n\n        // store the position within the draggable element\n        const { top, left, width } = this._elementRef.nativeElement.getBoundingClientRect();\n        this._offset = { x: event.clientX - left, y: event.clientY - top };\n\n        // inline all styles so it looks identical regardless of its position in the DOM\n        this.inlineStyles(this._elementRef.nativeElement, this._clone);\n\n        // IE doesn't always calculate the correct width value using getComputedStyles... use bounding client value instead\n        this._renderer.setStyle(this._clone, 'width', width + 'px');\n\n        // ensure we can easily position the node an it is above all other elements\n        this._renderer.setAttribute(this._clone, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._clone, 'position', 'absolute');\n        this._renderer.setStyle(this._clone, 'z-index', '99999');\n\n        // apply a class to allow custom styling\n        this._renderer.addClass(this._clone, 'ux-drag-dragging-clone');\n\n        // insert the cloned element\n        this._renderer.appendChild(document.body, this._clone);\n\n        // set the cloned element initial position\n        this.updateNodePosition(event);\n    }\n\n    /** Position the clone relative to the mouse */\n    updateNodePosition(event: MouseEvent): void {\n        this._renderer.setStyle(this._clone, 'left', (event.pageX - this._offset.x) + 'px');\n        this._renderer.setStyle(this._clone, 'top', (event.pageY - this._offset.y) + 'px');\n    }\n\n    /** Inline all styles to ensure styling is consistent regardless of its position in the dom */\n    inlineStyles(source: Element, target: Element): void {\n        // get all the computed styles from the source element\n        const styles = getComputedStyle(source);\n\n        // inline every specified style\n        for (let idx = 0; idx < styles.length; idx++) {\n            const style = styles.item(idx);\n\n            if (style !== undefined) {\n                this._renderer.setStyle(target, styles[idx], styles[style]);\n            }\n        }\n\n        // ensure we dont capture any move events\n        this._renderer.setStyle(target, 'pointer-events', 'none');\n\n        // do the same for all the child elements\n        for (let idx = 0; idx < source.children.length; idx++) {\n            this.inlineStyles(source.children[idx], target.children[idx]);\n        }\n    }\n\n    /** Unsubscribe from all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { Directive, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DragService, UxDragEvent } from './drag.service';\n\n@Directive({\n    selector: '[uxDrop]',\n    host: {\n        '[class.ux-drop-hover]': 'isMouseOver && isDragging'\n    }\n})\nexport class DropDirective implements OnDestroy {\n\n    /** Define a specific group of dragged items to listen to */\n    @Input() group: string | string[];\n\n    /** Emit the model of the item dropped */\n    @Output() onDrop = new EventEmitter<any>();\n\n    /** Determine whether or not the mouse is within the drop region */\n    isMouseOver: boolean = false;\n\n    /** Determine whether or not we are currently dragging an item */\n    isDragging: boolean = false;\n\n    /** Store the group of the dragged item */\n    private _group: string;\n\n    /** Ensure we destroy all subscriptions */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _dragService: DragService) {\n        // subscribe to drag events\n        _dragService.onDragStart.pipe(takeUntil(this._onDestroy), filter(event => this.isGroupAllowed(event.group))).subscribe(this.onDragStart.bind(this));\n        _dragService.onDragEnd.pipe(takeUntil(this._onDestroy), filter(event => this.isGroupAllowed(event.group))).subscribe(this.onDragEnd.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Update the mouse over state */\n    @HostListener('mouseenter')\n    onMouseOver(): void {\n        if (this.isGroupAllowed(this._group)) {\n            this.isMouseOver = true;\n\n            // emit that we are over a drop area\n            this._dragService.onDropEnter.next();\n        }\n    }\n\n    /** Update the mouse over state */\n    @HostListener('mouseleave')\n    onMouseLeave(): void {\n\n        // always ensure this value is reset\n        this.isMouseOver = false;\n\n        // only emit the dropd leave event when appropriate\n        if (this.isGroupAllowed(this._group)) {\n            this._dragService.onDropLeave.next();\n        }\n    }\n\n    /** Update the dragging state */\n    onDragStart(event: UxDragEvent): void {\n        this.isDragging = true;\n        this._group = event.group;\n    }\n\n    /** Update the dragging state */\n    onDragEnd(event: UxDragEvent): void {\n\n        // update the dragging state\n        this.isDragging = false;\n\n        // clear the cached group\n        this._group = null;\n\n        // if the mouse is over and it is in an allowed group emit the dop event\n        if (this.isMouseOver && this.isGroupAllowed(event.group)) {\n            this.onDrop.emit(event.data);\n            this._dragService.onDrop.next(event.data);\n        }\n    }\n\n    /** Determine whether or not the event is part of the specified groups */\n    private isGroupAllowed(group: string): boolean {\n\n        // if no group specified allow all groups\n        if (!this.group) {\n            return true;\n        }\n\n        // if it is an array then ensure it is allowed\n        if (Array.isArray(this.group)) {\n            return !!this.group.find(_group => _group === group);\n        }\n\n        return this.group === group;\n    }\n}","import { NgModule } from '@angular/core';\nimport { DragDirective } from './drag.directive';\nimport { DragService } from './drag.service';\nimport { DropDirective } from './drop.directive';\n\n@NgModule({\n    exports:      [DragDirective, DropDirective],\n    declarations: [DragDirective, DropDirective],\n    providers:    [DragService]\n})\nexport class DragModule { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../common/index';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService implements OnDestroy {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _event: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(tick(), map(dimensions => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n    isDragging$ = new BehaviorSubject<DashboardWidgetComponent>(null);\n    isGrabbing$ = new BehaviorSubject<DashboardWidgetComponent>(null);\n\n    get options(): DashboardOptions {\n        return this.options$.getValue();\n    }\n\n    get widgets(): DashboardWidgetComponent[] {\n        return this.widgets$.getValue();\n    }\n\n    get stacked(): boolean {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions(): DashboardDimensions {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth(): number {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    /** Unsubscribe from all observables on destroy */\n    private _onDestroy = new Subject<void>();\n\n    constructor() {\n        this.layout$.pipe(takeUntil(this._onDestroy)).subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(takeUntil(this._onDestroy), filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(takeUntil(this._onDestroy), tick()).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(takeUntil(this._onDestroy), tick()).subscribe(() => this.renderDashboard());\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() + (w1.getRow() * this.options.columns);\n            const w2Position = w2.getColumn() + (w2.getRow() * this.options.columns);\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._event = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._event.pageX - pageXOffset;\n        const mousePosY = this._event.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._event = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._event = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n\n        // emit the widget we are dragging\n        this.isDragging$.next(action.widget);\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n\n        this.isDragging$.next(null);\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._event.pageX && action.event.pageY === this._event.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._event.pageX;\n        const mouseY = action.event.pageY - this._event.pageY;\n\n        // store the latest event\n        this._event = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): DashboardCache[] {\n        this._cache = this.widgets.map(widget => ({\n            id: widget.id,\n            column: widget.getColumn(),\n            row: widget.getRow(),\n            columnSpan: widget.getColumnSpan(),\n            rowSpan: widget.getRowSpan(),\n        }));\n\n        // return a new array of the cache for custom caching\n        return [...this._cache];\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false, cache: DashboardCache[] = this._cache, restoreSize: boolean = false): void {\n        cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n\n                if (restoreSize) {\n                    match.setColumnSpan(widget.columnSpan);\n                    match.setRowSpan(widget.rowSpan);\n                }\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    const requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    const available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            const distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if any of the target spaces are out of bounds\n        if (targetSpaces.find(space => space.column < 0)) {\n            return false;\n        }\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the left\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // find the target column\n            const column = targetSpaces.reduce((target, space) => Math.min(target, space.column), Infinity);\n\n            // move current widget to the left\n            if (column !== Infinity) {\n                widget.setColumn(column);\n            }\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if any of the target spaces are out of bounds\n        if (targetSpaces.find(space => space.column >= this.getColumnCount())) {\n            return false;\n        }\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row)\n            .filter(wgt => wgt !== space.widget)\n            .every(wgt => this.canWidgetMoveRight(wgt))\n        );\n\n        if (performMove && moveable) {\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => this._actionWidget && space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    getWidgetBelow(widget: DashboardWidgetComponent): DashboardWidgetComponent | null {\n        const target = this.getWidgetsAtPosition(widget.getColumn(), widget.getRow() + widget.getRowSpan(), true);\n\n        return target.length > 0 ? target[0] : null;\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n\n    onShiftStart(widget: DashboardWidgetComponent): void {\n        this.onDragStart({ direction: ActionDirection.Move, widget });\n    }\n\n    /** Programmatically move a widget in a given direction */\n    onShift(widget: DashboardWidgetComponent, direction: ActionDirection): void {\n\n        // get the current mouse position\n        let deltaX = 0, deltaY = 0;\n\n        // move based on the direction\n        switch (direction) {\n            case ActionDirection.Top:\n                deltaY = -this.getRowHeight();\n                break;\n            case ActionDirection.Right:\n                deltaX = this.getColumnWidth();\n                break;\n            case ActionDirection.Bottom: {\n                deltaY = this.getRowHeight();\n                break;\n            }\n            case ActionDirection.Left:\n                deltaX = -this.getColumnWidth();\n                break;\n        }\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: widget.x + deltaX,\n            y: widget.y + deltaY,\n            width: widget.width,\n            height: widget.height\n        };\n\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(false, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update widget position\n        const { x, y } = this.placeholder$.value;\n\n        // move the widget to the placeholder position\n        widget.setBounds(x - this.options.padding, y - this.options.padding, dimensions.width, dimensions.height);\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n    }\n\n    onShiftEnd(): void {\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        // the height of the dashboard may have changed after moving widgets\n        this.setDashboardHeight();\n\n        // reset all properties\n        this.onDragEnd();\n    }\n\n    /** Programmatically resize a widget in a given direction */\n    onResize(widget: DashboardWidgetComponent, direction: ActionDirection): void {\n\n        // do not perform resizing if we are in stacked mode\n        if (this.stacked) {\n            return;\n        }\n\n        // perform the resizing\n        let deltaX = 0, deltaY = 0;\n\n        // move based on the direction\n        switch (direction) {\n            case ActionDirection.Top:\n                deltaY = -this.getRowHeight();\n                break;\n            case ActionDirection.Right:\n                deltaX = this.getColumnWidth();\n                break;\n            case ActionDirection.Bottom:\n                deltaY = this.getRowHeight();\n                break;\n            case ActionDirection.Left:\n                deltaX = -this.getColumnWidth();\n                break;\n        }\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: widget.x,\n            y: widget.y,\n            width: widget.width + deltaX,\n            height: widget.height + deltaY\n        };\n\n        const currentWidth = widget.x + widget.width;\n        const currentHeight = widget.y + widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.getColumnWidth() * this.getColumnCount()) {\n            dimensions.width = widget.width;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.getColumnWidth()) {\n            dimensions.x = widget.x;\n            dimensions.width = this.getColumnWidth();\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.getRowHeight()) {\n            dimensions.y = widget.y;\n            dimensions.height = this.getRowHeight();\n        }\n\n        // move the widget to the placeholder position\n        widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(false, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // the height of the dashboard may have changed after moving widgets\n        this.setDashboardHeight();\n    }\n\n    getSurroundingWidgets(widget: DashboardWidgetComponent, direction: ActionDirection): DashboardWidgetComponent[] {\n        let widgets: DashboardWidgetComponent[] = [];\n\n        for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n\n            switch (direction) {\n\n                case ActionDirection.Top:\n                    widgets = [...widgets, ...this.getWidgetsAtPosition(column, widget.getRow() - 1)];\n                    break;\n\n                case ActionDirection.Bottom:\n                    widgets = [...widgets, ...this.getWidgetsAtPosition(column, widget.getRow() + widget.getRowSpan())];\n                    break;\n            }\n        }\n\n        return widgets;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event?: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n    columnSpan: number;\n    rowSpan: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, Component, HostBinding, Input, OnDestroy, OnInit } from '@angular/core';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    templateUrl: './dashboard-widget.component.html'\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() name: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n    @Input() widgetAriaLabel: (widgets: DashboardWidgetComponent) => string | string = this.getDefaultAriaLabel;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n    @HostBinding('attr.aria-label') ariaLabel: string;\n    @HostBinding('class.dragging') isDragging: boolean = false;\n    @HostBinding('class.grabbing') isGrabbing: boolean = false;\n\n    isDraggable: boolean = false;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _onDestroy = new Subject<void>();\n\n    constructor(public dashboardService: DashboardService) {\n        // subscribe to option changes\n        dashboardService.options$.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.update());\n\n        // every time the layout changes we want to update the aria label\n        dashboardService.layout$.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.ariaLabel = this.getAriaLabel());\n\n        // allow widget movements to be animated\n        dashboardService.isDragging$.pipe(takeUntil(this._onDestroy), map(widget => widget === this))\n            .subscribe(isDragging => this.isDragging = isDragging);\n\n        // allow widget movements to be animated\n        dashboardService.isGrabbing$.pipe(takeUntil(this._onDestroy), map(widget => widget === this))\n            .subscribe(isGrabbing => this.isGrabbing = isGrabbing);\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time\n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.isGrabbing$.next(null);\n        this.dashboardService.onResizeStart({ widget: this, direction, event, handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction, event, handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    getAriaLabel(): string {\n        if (this.widgetAriaLabel && typeof this.widgetAriaLabel === 'string') {\n            return this.widgetAriaLabel;\n        } else if (this.widgetAriaLabel && typeof this.widgetAriaLabel === 'function') {\n            return this.widgetAriaLabel(this);\n        }\n\n        return this.ariaLabel;\n    }\n\n    private getDefaultAriaLabel(widget: DashboardWidgetComponent): string {\n\n        let options: string = '';\n\n        if (widget.resizable && widget.isDraggable) {\n            options = 'It can be moved and resized.';\n        } else if (widget.resizable) {\n            options = 'It can be resized.';\n        } else if (widget.isDraggable) {\n            options = 'It can be moved.';\n        }\n\n        return `${widget.name} panel in row ${widget.getRow()}, column ${widget.getColumn()}, is ${widget.getColumnSpan()} columns wide and ${widget.getRowSpan()} rows high. ${options}`;\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Injectable, OnDestroy, QueryList } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\nimport { DashboardGrabHandleDirective } from './grab-handle.directive';\n\n@Injectable()\nexport class DashboardGrabHandleService implements OnDestroy {\n\n    /** Store the querylist of all the grab handles */\n    private _handles: QueryList<DashboardGrabHandleDirective>;\n\n    /** Automatically unsubscribe from all observables when destroyed */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _dashboard: DashboardService) { }\n\n    /** Perform unsubscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Provide the service with the list of grab handles */\n    setHandles(handles: QueryList<DashboardGrabHandleDirective>): void {\n\n        // store the grab handles\n        this._handles = handles;\n\n        // we want to make the first item focusable (raf to avoid expression changed error)\n        requestAnimationFrame(() => this.setFirstItemFocusable());\n\n        // watch for any future changes to the list of handles\n        this._handles.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.ensureFocusable());\n\n        // if a drag is performed by the mouse we should update the focusable item to be the first again\n        this._dashboard.layout$.pipe(takeUntil(this._onDestroy), filter(() => !this._dashboard.isGrabbing$.value))\n            .subscribe(() => this.setFirstItemFocusable());\n    }\n\n    /** Make the first visual item in the list focusable */\n    setFirstItemFocusable(): void {\n        this.setItemFocus(0, false);\n    }\n\n    /** Set an item at a given index focused */\n    setItemFocus(index: number, focusElement: boolean = true): void {\n\n        // if the list is empty then do nothing\n        if (!this._handles || this._handles.length === 0) {\n            return;\n        }\n\n        // check if the index is out of bounds\n        if (index < 0) {\n            return this.setItemFocus(0);\n        }\n\n        if (index > this._handles.length - 1) {\n            return this.setItemFocus(this._handles.length - 1);\n        }\n\n        // try focusing a specific index\n        this.getHandlesInOrder().forEach((handle, idx) => idx === index ? handle.focus(focusElement) : handle.blur());\n\n        // for safety we want to ensure one of the items is definitely still focusabled\n        this.ensureFocusable();\n    }\n\n    /** Focus the previous grab handle */\n    setPreviousItemFocus(handle: DashboardGrabHandleDirective): void {\n        this.setItemFocus(this.getHandleIndex(handle) - 1);\n    }\n\n    /** Focus the next grab handle */\n    setNextItemFocus(handle: DashboardGrabHandleDirective): void {\n        this.setItemFocus(this.getHandleIndex(handle) + 1);\n    }\n\n    /** Focus the grab handle on the widget above */\n    setSiblingItemFocus(widget: DashboardWidgetComponent, direction: ActionDirection): void {\n\n        // find all widgets that are directly above and have grab handles\n        const target = this._dashboard.getSurroundingWidgets(widget, direction)\n            .map(_widget => this._handles.find(handle => handle.widget === _widget))\n            .filter(handle => !!handle)\n            .reduce((handle, current) => !handle || current.widget.getColumn() > handle.widget.getColumn() ? current : handle, null);\n\n        // ensure we have a target before focusing\n        if (!target) {\n            return;\n        }\n\n        // get the index of the target handle\n        const index = this.getHandleIndex(target);\n\n        // focus the item\n        this.setItemFocus(index);\n    }\n\n    /** Get handles in the order they appear rather than the order they are in the DOM */\n    getHandlesInOrder(): DashboardGrabHandleDirective[] {\n        const widgets = this._dashboard.getWidgetsByOrder();\n        const handles = this._handles.toArray();\n\n        // sort the handles according to the position of the widget it belongs to\n        return handles.sort((handleOne, handleTwo) => widgets.indexOf(handleOne.widget) - widgets.indexOf(handleTwo.widget));\n    }\n\n    private getHandleIndex(handle: DashboardGrabHandleDirective): number {\n        return this.getHandlesInOrder().findIndex(_handle => _handle === handle);\n    }\n\n    /** If the current focusable handle is removed we need to make another one focusable */\n    private ensureFocusable(): void {\n        if (!this._handles.find(handle => handle.tabIndex === 0)) {\n            this.setFirstItemFocusable();\n        }\n    }\n\n}","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { DOWN_ARROW, ENTER, ESCAPE, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Directive, ElementRef, HostBinding, HostListener, Input, OnDestroy, OnInit } from '@angular/core';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ActionDirection, DashboardCache, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\nimport { DashboardGrabHandleService } from './grab-handle.service';\n\n@Directive({\n    selector: '[uxDashboardGrabHandle]',\n    exportAs: 'ux-dashboard-grab-handle'\n})\nexport class DashboardGrabHandleDirective implements OnInit, OnDestroy {\n\n    /** Specify whether or not this handle can be used to perform moving */\n    @Input() uxGrabAllowMove: boolean = true;\n\n    /** Specify whether or not this handle can be used to perform resizing */\n    @Input() uxGrabAllowResize: boolean = true;\n\n    /** The aria label for the grab handle */\n    @Input() uxGrabAriaLabel: (widget: DashboardWidgetComponent) => string | string = this.getDefaultAriaLabel.bind(this);\n\n    /** Customize the announcement that is made whenever an item has successfully been moved or resized */\n    @Input() uxGrabChangeSuccessAnnouncement: (widget: DashboardWidgetComponent, differences: DashboardLayoutDiff[]) => string | string = this.getChangeSuccessAnnouncement.bind(this);\n\n    /** Customize the announcement that is made whenever an item enters 'grab' mode */\n    @Input() uxGrabStartAnnouncement: (widget: DashboardWidgetComponent) => string | string = this.getStartAnnouncement.bind(this);\n\n    /** Customize the announcement thqt is made whenever an item cannot be moved */\n    @Input() uxGrabMoveFailAnnouncement: (widget: DashboardWidgetComponent, direction: ActionDirection) => string | string = this.getMoveFailAnnouncement.bind(this);\n\n    /** Customize the announcement thqt is made whenever an item cannot be resized */\n    @Input() uxGrabResizeFailAnnouncement: (widget: DashboardWidgetComponent, direction: ActionDirection) => string | string = this.getResizeFailAnnouncement.bind(this);\n\n    /** Customize the announcement made whenever the moving/resizing is commited */\n    @Input() uxGrabConfirmAnnouncement: (widget: DashboardWidgetComponent) => string | string = this.getConfirmAnnouncement.bind(this);\n\n    /** Customize the announcement made whenever the moving/resizing is cancelled */\n    @Input() uxGrabCancelAnnouncement: (widget: DashboardWidgetComponent) => string | string = this.getCancellationAnnouncement.bind(this);\n\n    /** Binding for the grab handle aria label */\n    @HostBinding('attr.aria-label') ariaLabel: string;\n\n    /** We must programmatically control the focus of the drag handles */\n    @HostBinding('tabIndex') tabIndex: number = -1;\n\n    /** Store the current dragging state */\n    isGrabbing: boolean = false;\n\n    /** Store the current layout when we enter 'grab' mode */\n    private _cache: DashboardCache[];\n\n    /** Store the layout after the most recent successful move or resize */\n    private _lastMovement: DashboardCache[];\n\n    /** Emit when the directive is destroyed to unsubscribe from all observables */\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        public widget: DashboardWidgetComponent,\n        private _dashboard: DashboardService,\n        private _handle: DashboardGrabHandleService,\n        private _elementRef: ElementRef,\n        private _announcer: LiveAnnouncer) {\n\n        if (!widget) {\n            throw new Error('uxDashboardGrabHandle must be used within a dashboard widget');\n        }\n\n        // subscribe to changes to the current grab state\n        _dashboard.isGrabbing$.pipe(takeUntil(this._onDestroy), map(_widget => _widget === widget))\n            .subscribe(isGrabbing => this.isGrabbing = isGrabbing);\n    }\n\n    /** Set the initial aria label and subscribe to layout changes */\n    ngOnInit(): void {\n\n        if (!this.widget.name) {\n            console.warn(`Dashboard widget ${this.widget.id} must have a valid 'name' to use uxDashboardGrabHandle`);\n        }\n\n        // set the initial aria label\n        this.ariaLabel = this.getAnnouncement(this.uxGrabAriaLabel);\n\n        // update the aria label when layout changes occur\n        this._dashboard.layout$.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.ariaLabel = this.getAnnouncement(this.uxGrabAriaLabel));\n    }\n\n    /** Unsubscribe from all observables */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Begin drag mode and cache initial state */\n    enableDragMode(): void {\n        if (!this.isGrabbing) {\n\n            // cache the widgets so we can restore when escape is pressed\n            this._cache = this._lastMovement = this._dashboard.cacheWidgets();\n\n            // store the current widget being grabbed\n            this._dashboard.isGrabbing$.next(this.widget);\n\n            this._dashboard.onShiftStart(this.widget);\n\n            // announce the grab start\n            this._announcer.announce(this.getAnnouncement(this.uxGrabStartAnnouncement));\n        }\n    }\n\n    /** Finish drag mode and commit the current state */\n    disableDragMode(): void {\n        if (this.isGrabbing) {\n            this._dashboard.isGrabbing$.next(null);\n            this._lastMovement = null;\n            this._dashboard.onShiftEnd();\n\n            // announce the confirmation\n            this._announcer.announce(this.getAnnouncement(this.uxGrabConfirmAnnouncement));\n        }\n    }\n\n    /** Finish the drag mode and restore the original state */\n    cancelDragMode(): void {\n        if (this.isGrabbing) {\n            this._dashboard.onShiftEnd();\n            this._dashboard.restoreWidgets(false, this._cache, true);\n            this._dashboard.setDashboardHeight();\n            this._dashboard.layout$.next(this._dashboard.getLayoutData());\n            this._dashboard.isGrabbing$.next(null);\n\n            // announce the cancellation\n            this._announcer.announce(this.getAnnouncement(this.uxGrabCancelAnnouncement));\n        }\n    }\n\n    /** Toggle the drag mode state */\n    toggleDragMode(): void {\n        this.isGrabbing ? this.disableDragMode() : this.enableDragMode();\n    }\n\n    /** Set the tab index and optionally focus the DOM element */\n    focus(focusElement: boolean = true): void {\n        this.tabIndex = 0;\n\n        if (focusElement) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n\n    /** Make this item non-tabbable */\n    blur(): void {\n        this.tabIndex = -1;\n    }\n\n    /** When the grab handle loses focus then exit 'grab' mode */\n    @HostListener('blur')\n    onBlur(): void {\n        this.disableDragMode();\n    }\n\n    /** Handle key events */\n    @HostListener('keydown', ['$event', '$event.which', '$event.ctrlKey'])\n    onKeydown(event: KeyboardEvent, key: number, ctrlKey: boolean): void {\n\n        switch (key) {\n            case ESCAPE:\n                this.cancelDragMode();\n                break;\n\n            case SPACE:\n            case ENTER:\n                this.toggleDragMode();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n\n            case UP_ARROW:\n            case RIGHT_ARROW:\n            case DOWN_ARROW:\n            case LEFT_ARROW:\n                if (this.isGrabbing) {\n                    ctrlKey ? this.resizeWidget(event, key) : this.moveWidget(event, key);\n                } else {\n                    this.moveFocus(event, key);\n                }\n        }\n    }\n\n    /** Get an announcement from the inputs - they may be a string or a function so handle both */\n    getAnnouncement(announcement: Function | string, ...args: any[]): string {\n        return typeof announcement === 'function' ? announcement(this.widget, ...args) : announcement;\n    }\n\n    /** Move the widget in a given direction based on arrow keys */\n    private moveWidget(event: KeyboardEvent, key: number): void {\n\n        // check if moving is allowed\n        if (!this.widget.isDraggable || !this.uxGrabAllowMove) {\n            return;\n        }\n\n        // attempt to perform the move\n        this._dashboard.onShift(this.widget, this.getDirectionFromKey(key));\n\n\n        // get the announcable diff\n        const changes = this.getLayoutDiff();\n\n        // if there were changes then announce them\n        if (changes.length > 0) {\n            this._announcer.announce(this.getAnnouncement(this.uxGrabChangeSuccessAnnouncement, changes));\n        } else {\n            this._announcer.announce(this.getAnnouncement(this.uxGrabMoveFailAnnouncement, this.getDirectionFromKey(key)));\n        }\n\n        this._lastMovement = this._dashboard.cacheWidgets();\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /** Resize the widgets accordingly based on the arrow keys */\n    private resizeWidget(event: KeyboardEvent, key: number): void {\n\n        // check if resizing is allowed\n        if (!this.widget.resizable || !this.uxGrabAllowResize) {\n            return;\n        }\n\n        this._dashboard.onResize(this.widget, this.getDirectionFromKey(key));\n\n        // get the announcable diff\n        const changes = this.getLayoutDiff();\n\n        // if there were changes then announce them\n        if (changes.length > 0) {\n            this._announcer.announce(this.getAnnouncement(this.uxGrabChangeSuccessAnnouncement, changes));\n        } else {\n            this._announcer.announce(this.getAnnouncement(this.uxGrabResizeFailAnnouncement, this.getDirectionFromKey(key)));\n        }\n\n        this._lastMovement = this._dashboard.cacheWidgets();\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /** Shift focus between the variour grab handles */\n    private moveFocus(event: KeyboardEvent, key: number): void {\n\n        switch (key) {\n\n            case UP_ARROW:\n                this._handle.setSiblingItemFocus(this.widget, ActionDirection.Top);\n                break;\n\n            case RIGHT_ARROW:\n                this._handle.setNextItemFocus(this);\n                break;\n\n            case DOWN_ARROW:\n                this._handle.setSiblingItemFocus(this.widget, ActionDirection.Bottom);\n                break;\n\n            case LEFT_ARROW:\n                this._handle.setPreviousItemFocus(this);\n                break;\n        }\n\n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /** Convert an arrow key code into an ActionDirection enum */\n    private getDirectionFromKey(key: number): ActionDirection {\n        switch (key) {\n\n            case UP_ARROW:\n                return ActionDirection.Top;\n\n            case RIGHT_ARROW:\n                return ActionDirection.Right;\n\n            case DOWN_ARROW:\n                return ActionDirection.Bottom;\n\n            case LEFT_ARROW:\n                return ActionDirection.Left;\n        }\n    }\n\n    /** Supply the default grab handle aria label based on the provided constraints */\n    private getDefaultAriaLabel(widget: DashboardWidgetComponent): string {\n        if (widget.resizable && this.uxGrabAllowResize && widget.isDraggable && this.uxGrabAllowMove) {\n            return `Press space to move and resize the ${widget.name} panel.`;\n        } else if (widget.resizable && this.uxGrabAllowResize) {\n            return `Press space to resize the ${widget.name} panel.`;\n        } else if (widget.isDraggable && this.uxGrabAllowMove) {\n            return `Press space to move the ${widget.name} panel.`;\n        }\n    }\n\n    /** Get the default announcement whenever a movement or resize was successful */\n    private getChangeSuccessAnnouncement(): string {\n        return `${this.getDiffAnnouncements().join(' ')} Use the cursor keys to continue moving and resizing, enter to commit, or escape to cancel.`;\n    }\n\n    private getDiffAnnouncements(): string[] {\n        // map the differences to strings\n        return this.getLayoutDiff().map(diff => {\n\n            const changes: string[] = [];\n\n            // Handle movement strings\n            if (diff.isMovedHorizontally && diff.isMovedVertically) {\n                changes.push(`moved to row ${diff.currentRow}, column ${diff.currentColumn}`);\n            } else if (diff.isMovedDown) {\n                changes.push(`moved down to row ${diff.currentRow}, column ${diff.currentColumn}`);\n            } else if (diff.isMovedUp) {\n                changes.push(`moved up to row ${diff.currentRow}, column ${diff.currentColumn}`);\n            } else if (diff.isMovedLeft) {\n                changes.push(`moved left to row ${diff.currentRow}, column ${diff.currentColumn}`);\n            } else if (diff.isMovedRight) {\n                changes.push(`moved right to row ${diff.currentRow}, column ${diff.currentColumn}`);\n            }\n\n            // handle resize strings\n            if (diff.isResized) {\n                changes.push(`resized to ${diff.currentColumnSpan} columns wide and ${diff.currentRowSpan} rows high`);\n            }\n\n            return `${diff.widget.name} panel is ${changes.join(' and ')}.`;\n        });\n    }\n\n    /** Get the default announcement whenever a movement is not possible due to dashboard boundaries */\n    private getMoveFailAnnouncement(widget: DashboardWidgetComponent, direction: ActionDirection): string {\n\n        switch (direction) {\n\n            case ActionDirection.Top:\n                return `Cannot move the ${widget.name} panel up, because it is at the top edge of the dashboard`;\n\n            case ActionDirection.Bottom:\n                return `Cannot move the ${widget.name} panel down, because it is at the bottom edge of the dashboard`;\n\n            case ActionDirection.Right:\n                return `Cannot move the ${widget.name} panel right, because it is at the right edge of the dashboard`;\n\n            case ActionDirection.Left:\n                return `Cannot move the ${widget.name} panel left, because it is at the left edge of the dashboard`;\n        }\n    }\n\n    /** Get the default announcement whenever a resize is not possible due to either widget constraints of dashboard bounds */\n    private getResizeFailAnnouncement(widget: DashboardWidgetComponent, direction: ActionDirection): string {\n        switch (direction) {\n\n            case ActionDirection.Top:\n                return `Cannot make the ${widget.name} panel shorter, because it is currently at its minimum height.`;\n\n            case ActionDirection.Bottom:\n                return `Cannot make the ${widget.name} panel taller, because it is currently at its maximum height.`;\n\n            case ActionDirection.Right:\n                return `Cannot make the ${widget.name} panel wider, because it is at the right edge of the dashboard.`;\n\n            case ActionDirection.Left:\n                return `Cannot make the ${widget.name} panel narrower, because it is currently at its minimum width.`;\n        }\n    }\n\n    /** Get the default announcement whenever we enter 'grab' mode */\n    private getStartAnnouncement(widget: DashboardWidgetComponent): string {\n        if (widget.isDraggable && widget.resizable && this.uxGrabAllowMove && this.uxGrabAllowResize) {\n            return `${widget.name} panel is currently on row ${widget.getRow()}, column ${widget.getColumn()} and is ${widget.getColumnSpan()} columns wide and ${widget.getRowSpan()} rows high. Use the cursor keys to move the widget and the cursor keys with the control modifier to resize the widget. Press enter to commit changes and press escape to cancel changes.`;\n        } else if (widget.isDraggable && this.uxGrabAllowMove) {\n            return `${widget.name} panel is currently on row ${widget.getRow()}, column ${widget.getColumn()}. Use the cursor keys to move the widget. Press enter to commit changes and press escape to cancel changes.`;\n        } else if (widget.resizable && this.uxGrabAllowResize) {\n            return `${widget.name} panel is currently on row ${widget.getRow()}, column ${widget.getColumn()} and is ${widget.getColumnSpan()} columns wide and ${widget.getRowSpan()} rows high. Use the cursor keys with the control modifier to resize the widget. Press enter to commit changes and press escape to cancel changes.`;\n        }\n    }\n\n    /** Get the default announcement whenever grab mode is exited after a movement or resize */\n    private getConfirmAnnouncement(widget: DashboardWidgetComponent): string {\n        if (widget.isDraggable && widget.resizable && this.uxGrabAllowMove && this.uxGrabAllowResize) {\n            return `Moving and resizing complete. ${this.getDiffAnnouncements().join(' ')} ${this.getAnnouncement(this.uxGrabAriaLabel)}`;\n        } else if (widget.isDraggable && this.uxGrabAllowMove) {\n            return `Moving complete. ${this.getDiffAnnouncements().join(' ')} ${this.getAnnouncement(this.uxGrabAriaLabel)}`;\n        } else if (widget.resizable && this.uxGrabAllowResize) {\n            return `Resizing complete. ${this.getDiffAnnouncements().join(' ')} ${this.getAnnouncement(this.uxGrabAriaLabel)}`;\n        }\n    }\n\n    /** Get the default announcement whenever grab mode is exited after being cancelled */\n    private getCancellationAnnouncement(widget: DashboardWidgetComponent): string {\n        if (widget.isDraggable && widget.resizable && this.uxGrabAllowMove && this.uxGrabAllowResize) {\n            return `Moving and resizing cancelled. ${this.getDashboardAriaLabel()} ${this.getAnnouncement(this.uxGrabAriaLabel)}`;\n        } else if (widget.isDraggable && this.uxGrabAllowMove) {\n            return `Moving cancelled. ${this.getDashboardAriaLabel()} ${this.getAnnouncement(this.uxGrabAriaLabel)}`;\n        } else if (widget.resizable && this.uxGrabAllowResize) {\n            return `Resizing cancelled. ${this.getDashboardAriaLabel()} ${this.getAnnouncement(this.uxGrabAriaLabel)}`;\n        }\n    }\n\n    /** Get a description of all dashboard widgets, their positions and sizes */\n    private getDashboardAriaLabel(): string {\n        return `Dashboard with ${this._dashboard.options.columns} columns, containing ${this._dashboard.widgets.length} panels. ${this._dashboard.widgets.map(this.getWidgetAriaLabel).join(' ')}`;\n    }\n\n    /** Get a description of a given widget */\n    private getWidgetAriaLabel(widget: DashboardWidgetComponent): string {\n        return `${widget.name} panel in row ${widget.getRow()}, column ${widget.getColumn()}, is ${widget.getColumnSpan()} columns wide and ${widget.getRowSpan()} rows high.`;\n    }\n\n    /** Get an object describing all the changes that have been made to all widgets since the last change */\n    private getLayoutDiff(): DashboardLayoutDiff[] {\n\n        // find all changes\n        const diffs = this._dashboard.getLayoutData().map(layout => {\n\n            // get the most recent cache\n            const cache = this._lastMovement || this._cache;\n\n            // get the actual widget\n            const widget = this._dashboard.widgets.find(_widget => _widget.id === layout.id);\n\n            // get previous position\n            const previousLayout = cache.find(_widget => _widget.id === layout.id);\n\n            // ensure they are all numbers\n            layout.row = Number(layout.row);\n            layout.rowSpan = Number(layout.rowSpan);\n            layout.col = Number(layout.col);\n            layout.colSpan = Number(layout.colSpan);\n\n            previousLayout.row = Number(previousLayout.row);\n            previousLayout.rowSpan = Number(previousLayout.rowSpan);\n            previousLayout.column = Number(previousLayout.column);\n            previousLayout.columnSpan = Number(previousLayout.columnSpan);\n\n            return {\n                widget,\n                currentRow: layout.row,\n                currentColumn: layout.col,\n                currentRowSpan: layout.rowSpan,\n                currentColumnSpan: layout.colSpan,\n                previousColumn: previousLayout.column,\n                previousRow: previousLayout.row,\n                previousColumnSpan: previousLayout.columnSpan,\n                previousRowSpan: previousLayout.rowSpan,\n                isMovedLeft: layout.col < previousLayout.column,\n                isMovedRight: layout.col > previousLayout.column,\n                isMovedUp: layout.row < previousLayout.row,\n                isMovedDown: layout.row > previousLayout.row,\n                isMovedHorizontally: layout.col !== previousLayout.column,\n                isMovedVertically: layout.row !== previousLayout.row,\n                isMoved: layout.col !== previousLayout.column || layout.row !== previousLayout.row,\n                isResized: previousLayout.columnSpan !== layout.colSpan || previousLayout.rowSpan !== layout.rowSpan\n            } as DashboardLayoutDiff;\n        });\n\n        // get the order the widgets appear visually\n        const order = this._handle.getHandlesInOrder().map(handle => handle.widget);\n\n        // only return items that have been repositioned or resized\n        return diffs.filter(diff => diff.isMoved || diff.isResized).sort((diffOne, diffTwo) => {\n\n            // sort this so that the item that the user moved is first in the list, and the remainder are in their new order as seen in the dashboard\n            if (diffOne.widget === this.widget) {\n                return -1;\n            }\n\n            if (diffTwo.widget === this.widget) {\n                return 1;\n            }\n\n            // otherwise sort based on their visual order\n            return order.indexOf(diffOne.widget) < order.indexOf(diffTwo.widget) ? -1 : 1;\n        });\n    }\n}\n\nexport interface DashboardLayoutDiff {\n    widget: DashboardWidgetComponent;\n    previousColumn: number;\n    currentColumn: number;\n    previousRow: number;\n    currentRow: number;\n    previousColumnSpan: number;\n    currentColumnSpan: number;\n    previousRowSpan: number;\n    currentRowSpan: number;\n    isMovedLeft: boolean;\n    isMovedRight: boolean;\n    isMovedUp: boolean;\n    isMovedDown: boolean;\n    isMovedHorizontally: boolean;\n    isMovedVertically: boolean;\n    isResized: boolean;\n    isMoved: boolean;\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList, ViewChild } from '@angular/core';\nimport { map, takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\nimport { DashboardGrabHandleDirective } from './grab-handle/grab-handle.directive';\nimport { DashboardGrabHandleService } from './grab-handle/grab-handle.service';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Component({\n    selector: 'ux-dashboard',\n    templateUrl: './dashboard.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        DashboardService,\n        DashboardGrabHandleService\n    ]\n})\nexport class DashboardComponent implements AfterViewInit, OnDestroy {\n\n    isGrabbing: boolean = false;\n\n    @Input('aria-label') customAriaLabel: (widgets: DashboardWidgetComponent[], options: DashboardOptions) => string | string = this.getDefaultAriaLabel;\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @HostBinding('attr.aria-label') ariaLabel: string;\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    /** Find all grab handles used in the dashboard */\n    @ContentChildren(DashboardGrabHandleDirective, { descendants: true }) handles: QueryList<DashboardGrabHandleDirective>;\n\n    /** Ensure we unsubscribe from all observables */\n    private _onDestroy = new Subject<void>();\n\n    constructor(public dashboardService: DashboardService, private _grabHandleService: DashboardGrabHandleService) {\n\n        dashboardService.layout$.pipe(takeUntil(this._onDestroy), tap(() => this.ariaLabel = this.getAriaLabel()))\n            .subscribe(layout => this.layoutChange.emit(layout));\n\n        // subscribe to changes to the grab mode\n        dashboardService.isGrabbing$.pipe(takeUntil(this._onDestroy), map(widget => !!widget))\n            .subscribe(isGrabbing => this.isGrabbing = isGrabbing);\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        // set the initial dimensions\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n\n        // supply the grab handle query list\n        this._grabHandleService.setHandles(this.handles);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n\n    getAriaLabel(): string {\n        if (this.customAriaLabel && typeof this.customAriaLabel === 'string') {\n            return this.customAriaLabel;\n        } else if (this.customAriaLabel && typeof this.customAriaLabel === 'function') {\n            return this.customAriaLabel(this.dashboardService.widgets, this.dashboardService.options);\n        }\n\n        return this.ariaLabel;\n    }\n\n    private getDefaultAriaLabel(widgets: DashboardWidgetComponent[], options: DashboardOptions): string {\n        return `Dashboard with ${options.columns} columns, containing ${widgets.length} panels. ${widgets.map(this.getWidgetAriaLabel).join(' ')}`;\n    }\n\n    private getWidgetAriaLabel(widget: DashboardWidgetComponent): string {\n        return `${widget.name} panel in row ${widget.getRow()}, column ${widget.getColumn()}, is ${widget.getColumnSpan()} columns wide and ${widget.getRowSpan()} rows high.`;\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { takeUntil, tap } from 'rxjs/operators';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\nimport { DragService } from '../../../directives/drag/index';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef,\n        ngZone: NgZone, renderer: Renderer2, drag: DragService) {\n\n        super(elementRef, ngZone, renderer, drag);\n\n        // inform the widget that it can be dragged\n        widget.isDraggable = true;\n\n        this.onDragStart.pipe(takeUntil(this._onDestroy), tap(() => dashboardService.isGrabbing$.next(null)))\n            .subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.onDrag.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.onDragEnd.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DragModule } from '../../directives/drag/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { DashboardGrabHandleDirective } from './grab-handle/grab-handle.directive';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\nconst DECLARATIONS = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective,\n    DashboardGrabHandleDirective\n];\n\n@NgModule({\n    imports: [\n        A11yModule,\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));\n\n/** Export the default set of time zone */\nexport const timezones: DateTimePickerTimezone[] = [\n    { name: 'GMT-11', offset: 660 },\n    { name: 'GMT-10', offset: 600 },\n    { name: 'GMT-9', offset: 540 },\n    { name: 'GMT-8', offset: 480 },\n    { name: 'GMT-7', offset: 420 },\n    { name: 'GMT-6', offset: 360 },\n    { name: 'GMT-5', offset: 300 },\n    { name: 'GMT-4', offset: 240 },\n    { name: 'GMT-3', offset: 180 },\n    { name: 'GMT-2', offset: 120 },\n    { name: 'GMT-1', offset: 60 },\n    { name: 'GMT', offset: 0 },\n    { name: 'GMT+1', offset: -60 },\n    { name: 'GMT+2', offset: -120 },\n    { name: 'GMT+3', offset: -180 },\n    { name: 'GMT+4', offset: -240 },\n    { name: 'GMT+5', offset: -300 },\n    { name: 'GMT+6', offset: -360 },\n    { name: 'GMT+7', offset: -420 },\n    { name: 'GMT+8', offset: -480 },\n    { name: 'GMT+9', offset: -540 },\n    { name: 'GMT+10', offset: -600 },\n    { name: 'GMT+11', offset: -660 },\n    { name: 'GMT+12', offset: -720 }\n];\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort, timezones, months, DateTimePickerTimezone, monthsShort } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n    timezones: DateTimePickerTimezone[] = timezones;\n    months: string[] = months;\n    monthsShort: string[] = monthsShort;\n}","import { Injectable, Optional } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator, weekdaysShort, timezones, DateTimePickerTimezone, months, monthsShort } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config ? this._config.showDate : true);\n    showTime$ = new BehaviorSubject<boolean>(this._config ? this._config.showTime : true);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config ? this._config.showTimezone : true);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config ? this._config.showSeconds : false);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config ? this._config.showMeridian : true);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config ? this._config.showSpinners : true);\n    weekdays$ = new BehaviorSubject<string[]>(this._config ? this._config.weekdays : weekdaysShort);\n    nowBtnText$ = new BehaviorSubject<string>(this._config ? this._config.nowBtnText : 'Today');\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config ? this._config.timezones : timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    months: string[] = this._config ? this._config.months : months;\n    monthsShort: string[] = this._config ? this._config.monthsShort : monthsShort;\n\n    private _subscription: Subscription;\n\n    constructor(@Optional() private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        const zones = this._config ? this._config.timezones : timezones;\n        return zones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DatePickerMode, DateTimePickerService } from './date-time-picker.service';\nimport { dateComparator, DateTimePickerTimezone, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  templateUrl: './date-time-picker.component.html',\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set months(months: string[]) {\n    this.datepicker.months = months;\n  }\n\n  @Input() set monthsShort(months: string[]) {\n    this.datepicker.monthsShort = months;\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(public datepicker: DateTimePickerService) {\n    datepicker.selected$.pipe(takeUntil(this._onDestroy), distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    datepicker.timezone$.pipe(takeUntil(this._onDestroy), distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    templateUrl: './spin-button.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n    transform(value: number, pad: boolean): string | number {\n        return value < 10 && pad ? '0' + value : value;\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, OnDestroy, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    templateUrl: './time-picker.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(this._datepicker.months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n\n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  templateUrl: './day-view.component.html',\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(_index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    templateUrl: './header.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: this._datepicker.monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n\n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    templateUrl: './month-view.component.html',\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    templateUrl: './time-view.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  templateUrl: './year-view.component.html',\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n    @Input() focusIfScroll: boolean = true;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus({ preventScroll: !this.focusIfScroll });\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ModuleWithProviders } from '@angular/core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent]\n})\nexport class DateTimePickerModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: DateTimePickerModule,\n            providers: [\n                DateTimePickerConfig\n            ]\n        };\n    }\n}\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    templateUrl: './ebox.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { Injectable } from '@angular/core';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n\n                case 'Enter':\n                    if (typeahead.selectOnEnter) {\n                        typeahead.selectHighlighted();\n                    }\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    templateUrl: 'typeahead.component.html',\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input()\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n    @Input() selectOnEnter: boolean = false;\r\n    @Input() loading = false;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n    highlightedKey: string = null;\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _changeDetector: ChangeDetectorRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n\r\n                // Invoke the callback which may return an array or a promise.\r\n                const arrayOrPromise = this.options(pageNum, pageSize, filter);\r\n\r\n                // Map the results to an array of TypeaheadVisibleOption.\r\n                return Promise.resolve(arrayOrPromise).then(newOptions => {\r\n\r\n                    if (!Array.isArray(newOptions)) {\r\n                        return newOptions;\r\n                    }\r\n\r\n                    return newOptions.map((option: any) => {\r\n                        return {\r\n                            value: option,\r\n                            key: this.getKey(option)\r\n                        };\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.openChange.emit(next);\r\n\r\n            if (next) {\r\n                this.initOptions();\r\n            }\r\n        });\r\n\r\n        this.highlighted$.pipe(takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.highlightedKey = next ? next.key : null;\r\n            this.highlightedChange.emit(next ? next.value : null);\r\n        });\r\n\r\n        combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n            });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        const displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n            this._changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlight(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    selectHighlighted(): void {\r\n        if (this.highlighted) {\r\n            this.select({ value: this.highlighted, key: this.getKey(this.highlighted)});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n\r\n        this._changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableHandle]'\r\n})\r\nexport class ReorderableHandleDirective { }\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableModel]'\r\n})\r\nexport class ReorderableModelDirective {\r\n\r\n    // allow the user to specify a model for the item - allows use with ngFor\r\n    @Input() uxReorderableModel: any;\r\n\r\n    // this can be used to identify which instance of the directive relates to which element\r\n    constructor(public elementRef: ElementRef) { }\r\n}\r\n","// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport { Drake } from 'dragula';\n// @ts-ignore\nimport * as dragulaNamespace from 'dragula/dist/dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ReorderEvent } from '../../directives/reorderable/index';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    templateUrl: './facet-container.component.html'\n})\nexport class FacetContainerComponent implements OnDestroy {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    constructor(private _announcer: LiveAnnouncer) { }\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet, tag?: HTMLElement): void {\n\n        // find the index of the item in the selected array\n        const idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n\n        // announce the facet removal\n        this._announcer.announce(`Option ${facet.title} deselected.`, 'assertive');\n\n        // focus another tag if there is one\n        if (tag) {\n            const sibling = tag.previousElementSibling || tag.nextElementSibling;\n\n            // if there is a sibling then focus it\n            if (sibling) {\n                (sibling as HTMLElement).focus();\n            }\n        }\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n\n        // announce the facet removal\n        this._announcer.announce(`All options deselected.`, 'assertive');\n    }\n\n    trackBy(_index: number, facet: Facet): string | number {\n        return facet.id || facet.title;\n    }\n\n    shiftRight(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, 1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved down.`);\n    }\n\n    shiftLeft(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, -1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved up.`);\n    }\n\n    private shiftFacet(facet: Facet, distance: number) {\n        const index = this.facets.indexOf(facet);\n        const target = index + distance;\n\n        // Ensure the move is valid\n        if (target < 0 || target === this.facets.length) {\n            return;\n        }\n\n        // Perform the move\n        this.facets.splice(index, 1);\n        this.facets.splice(target, 0, facet);\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}\n\nexport interface FacetReorderEvent extends ReorderEvent {\n    index: number;\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        const index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    templateUrl: './facet-header.component.html',\n    host: {\n        'role': 'button',\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()',\n        '[attr.aria-expanded]': 'expanded',\n        '[attr.aria-label]': 'header + \\' Facet: Activate to \\' + (expanded ? \\'collapse\\' : \\'expand\\')'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;\n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list-item',\n    templateUrl: './facet-check-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetCheckListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet = null;\n    @Input() selected: boolean = false;\n    @Input() tabbable: boolean = false;\n    @Output() selectedChange = new EventEmitter<Facet>();\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() itemBlur = new EventEmitter<void>();\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : '';\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, QueryList, ViewChildren } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\nimport { FacetCheckListItemComponent } from './check-list-item/facet-check-list-item.component';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    templateUrl: './facet-check-list.component.html'\n})\nexport class FacetCheckListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n\n    @ViewChildren(FacetCheckListItemComponent) options: QueryList<FacetCheckListItemComponent>;\n\n    isFocused: boolean = false;\n    activeIndex: number = 0;\n\n    private _focusKeyManager: FocusKeyManager<FacetCheckListItemComponent>;\n\n    ngAfterViewInit(): void {\n        this._focusKeyManager = new FocusKeyManager(this.options)\n            .withVerticalOrientation();\n\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list-item',\n    templateUrl: './facet-typeahead-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetTypeaheadListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet;\n    @Input() selected: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() tabbable: boolean = false;\n\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() selectedChange = new EventEmitter<Facet>();\n\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : null;\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, ElementRef, Input, Pipe, PipeTransform, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map, mergeMap, takeUntil, tap } from 'rxjs/operators';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { FacetContainerComponent } from '../facet-container.component';\nimport { Facet } from '../models/facet';\nimport { FacetTypeaheadListItemComponent } from './typeahead-list-item/facet-typeahead-list-item.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    templateUrl: './facet-typeahead-list.component.html'\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    @Input()\n    set typeaheadConfig(config: FacetTypeaheadListConfig) {\n        this._config = { placeholder: '', maxResults: 50, minCharacters: 1, ...config };\n    }\n\n    get typeaheadConfig(): FacetTypeaheadListConfig {\n        return this._config;\n    }\n\n    @ViewChildren(FacetTypeaheadListItemComponent) options: QueryList<FacetTypeaheadListItemComponent>;\n\n    query$ = new BehaviorSubject<string>('');\n    loading: boolean = false;\n    activeIndex: number = 0;\n    typeaheadId: string = `ux-facet-typeahead-${uniqueId++}`;\n    typeaheadOpen: boolean = false;\n    typeaheadOptions: Facet[] = [];\n    highlightedElement: HTMLElement;\n\n    private _config: FacetTypeaheadListConfig = { placeholder: '', maxResults: 50, minCharacters: 1 };\n    private _focusKeyManager: FocusKeyManager<FacetTypeaheadListItemComponent>;\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, facetContainer: FacetContainerComponent, elementRef: ElementRef, private _announcer: LiveAnnouncer) {\n        super(facetContainer, elementRef);\n    }\n\n    ngAfterViewInit(): void {\n\n        // set up search query subscription\n        this.query$.pipe(\n            takeUntil(this._onDestroy),\n            tap(() => {\n                this.loading = true;\n                this.typeaheadOptions = [];\n            }),\n            mergeMap(() => this.getFacetObservable().pipe(map(facets => {\n                return facets.filter(facet => !facet.disabled && !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .slice(0, this._config.maxResults);\n            })))\n        ).subscribe(facets => {\n            this.loading = false;\n            this.typeaheadOptions = facets;\n        });\n\n        this._focusKeyManager = new FocusKeyManager(this.options).withVerticalOrientation();\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n\n    /** Only show typeahead if we have enough characters */\n    updateTypeahead(query: string = ''): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n    }\n\n    getFacetObservable(): Observable<Facet[]> {\n        return this.facets instanceof Observable ? this.facets : of(this.facets);\n    }\n\n    select(event: TypeaheadOptionEvent) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === event.option)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(event.option);\n\n        // clear the typeahead\n        this.query$.next('');\n\n        // announce the selected facet\n        this._announcer.announce(`${(event.option as Facet).title} selected.`);\n    }\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListItemComponent } from './facet-check-list/check-list-item/facet-check-list-item.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetTypeaheadHighlight, FacetTypeaheadListComponent } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FacetTypeaheadListItemComponent } from './facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetCheckListItemComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadListItemComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        A11yModule,\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Filter } from '../interfaces/filter.interface';\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}","export class FilterRemoveAllEvent {}","import { Filter } from '../interfaces/filter.interface';\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterAddEvent } from './events/filter-add-event';\nimport { FilterEvent } from './events/filter-event';\nimport { FilterRemoveAllEvent } from './events/filter-remove-all-event';\nimport { FilterRemoveEvent } from './events/filter-remove-event';\nimport { Filter } from './interfaces/filter.interface';\n\n@Injectable()\nexport class FilterService {\n\n    /** The list of active filters */\n    filters$ = new BehaviorSubject<Filter[]>([]);\n\n    /** Emit all the events when they occur */\n    events$ = new Subject<FilterEvent>();\n\n    add(filter: Filter): void {\n\n        // if the filter is already selected or it is the intial filter then do nothing\n        if (this.isSelected(filter) || filter.initial) {\n            return;\n        }\n\n        // update the list of active filters\n        this.filters$.next([...this.filters$.value, filter]);\n\n        // emit the event\n        this.events$.next(new FilterAddEvent(filter));\n    }\n\n    remove(filter: Filter): void {\n\n        // if the filter is not selected then do nothing\n        if (!this.isSelected(filter)) {\n            return;\n        }\n\n        // update the list of active filters\n        this.filters$.next(this.filters$.value.filter(_filter => _filter !== filter));\n\n        // emit the event\n        this.events$.next(new FilterRemoveEvent(filter));\n    }\n\n    removeAll(): void {\n\n        // empty the list of active filters\n        this.filters$.next([]);\n\n        // emit the event\n        this.events$.next(new FilterRemoveAllEvent());\n    }\n\n    isSelected(filter: Filter): boolean {\n        return this.filters$.value.indexOf(filter) > -1;\n    }\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterEvent } from './events/filter-event';\nimport { FilterService } from './filter.service';\nimport { Filter } from './interfaces/filter.interface';\n\n@Component({\n    selector: 'ux-filter-container',\n    templateUrl: './filter-container.component.html',\n    providers: [ FilterService ]\n})\nexport class FilterContainerComponent implements OnDestroy {\n\n    /** Allow filters to set from outside the component */\n    @Input() set filters(filters: Filter[]) { this.filterService.filters$.next(filters); }\n\n    /** Define the tooltip text */\n    @Input() clearTooltip: string;\n\n    /** Emit when the active filters chance */\n    @Output() filtersChange = new EventEmitter<Filter[]>();\n\n    /** Emit when a specific event occurs */\n    @Output() events = new EventEmitter<FilterEvent>();\n\n    /** Unsubscribe from the subscriptions on destroy */\n    private _onDestroy = new Subject<void>();\n\n    constructor(public filterService: FilterService) {\n\n        // subscribe to changes to the active filters\n        filterService.filters$.pipe(takeUntil(this._onDestroy), distinctUntilChanged())\n            .subscribe(filters => this.filtersChange.emit(filters));\n\n        // relay any events to the event emitter\n        this.filterService.events$.pipe(takeUntil(this._onDestroy))\n            .subscribe(event => this.events.emit(event));\n    }\n\n    /** Destroy all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FilterRemoveAllEvent } from '../events/filter-remove-all-event';\nimport { FilterContainerComponent } from '../filter-container.component';\nimport { Filter } from '../interfaces/filter.interface';\n\n/**\n * @deprecated\n * This should no longer be used as we now have the FilterService\n * which is easier to use than this base component.\n */\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent, private _announcer: LiveAnnouncer) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.filterService.add(_filter);\n            this._announcer.announce(`Filter ${_filter.name} selected.`);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.filterService.remove(_filter);\n        this._announcer.announce(`Filter ${_filter.name} deselected.`);\n    }\n\n}","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { filter as rxFilter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterRemoveAllEvent } from '../events/filter-remove-all-event';\nimport { FilterService } from '../filter.service';\nimport { Filter } from '../interfaces/filter.interface';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    templateUrl: './filter-dropdown.component.html',\n})\nexport class FilterDropdownComponent implements OnInit, OnDestroy {\n\n    /** The list of items to display in the dropdown */\n    @Input() filters: Filter[] = [];\n\n    /** Define an initial item to select */\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _filterService: FilterService) {\n        _filterService.events$.pipe(takeUntil(this._onDestroy), rxFilter(event => event instanceof FilterRemoveAllEvent))\n            .subscribe(() => this.removeFilter());\n\n        // ensure that the current selected filter is still selected when the active filters change\n        _filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            if (this.selected && filters.indexOf(this.selected) === -1) {\n                this.removeFilter();\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        this.selected = this.initial;\n\n        // check to see if any of the filters have been preselected or changes to selected filters\n        this._filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            filters.forEach(filter => {\n                if (this.filters.indexOf(filter) !== -1) {\n                    this.selected = filter;\n                }\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFilter(filter: Filter, event: MouseEvent) {\n        this.removeFilter();\n        this.selected = filter;\n        this._filterService.add(this.selected);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    removeFilter(): void {\n        this._filterService.remove(this.selected);\n        this.selected = this.initial;\n    }\n\n}","import { Component, ElementRef, HostListener, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter as rxFilter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FilterRemoveAllEvent } from '../events/filter-remove-all-event';\nimport { FilterService } from '../filter.service';\nimport { FilterDynamicListConfig } from '../interfaces/filter-dynamic-list-config.interface';\nimport { Filter } from '../interfaces/filter.interface';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    templateUrl: './filter-dynamic.component.html'\n})\nexport class FilterDynamicComponent implements OnDestroy {\n\n    /** The list of possible filter options */\n    @Input() filters: Filter[] = [];\n\n    /** Specify if there should be an initially selected filter */\n    @Input() initial: Filter;\n\n    /** Specify the typeahead options */\n    @Input() set options(options: FilterDynamicListConfig) { this._options = options; }\n\n    /** Get the options with the defaults for any missing options */\n    get options(): FilterDynamicListConfig {\n        return { ... this._defaultOptions, ...this._options };\n    }\n\n    /** Get the dropdown directive */\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    /** Generate a unique id for the typeahead */\n    typeaheadId: string = `ux-filter-dynamic-typeahead-${uniqueId++}`;\n\n    /** Store the current search query */\n    query$ = new BehaviorSubject<string>('');\n\n    /** Store the selected filter */\n    selected: Filter;\n\n    /** Indicate whether or not the typeahead should be shown */\n    showTypeahead: boolean = true;\n\n    /** Store the items that should be displayed in the typeahead */\n    typeaheadItems: string[] = [];\n\n    /** Store the currently highlighted element */\n    highlightedElement: HTMLElement;\n\n    /** Store the open state of the typeahead */\n    typeaheadOpen: boolean = false;\n\n    /** The default options */\n    private _defaultOptions: FilterDynamicListConfig = { placeholder: '', minCharacters: 3, maxResults: Infinity };\n\n    /** Store the user specified typeahead options */\n    private _options: FilterDynamicListConfig = { ...this._defaultOptions };\n\n    /** Unsubscribe from all subscriptions */\n    private _onDestroy = new Subject<void>();\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, private _filterService: FilterService, private _elementRef: ElementRef) {\n        // listen for remove all events in which case we should deselect event initial filters\n        _filterService.events$.pipe(takeUntil(this._onDestroy), rxFilter(event => event instanceof FilterRemoveAllEvent))\n            .subscribe(() => this.removeFilter());\n\n        // ensure that the current selected filter is still selected when the active filters change\n        _filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            if (this.selected && filters.indexOf(this.selected) === -1) {\n                this.removeFilter();\n            }\n        });\n    }\n\n    /** Set up the initial conditions */\n    ngOnInit(): void {\n\n        // The initially selected item should be set the the specified initial item\n        this.selected = this.initial;\n\n        // watch for changes to the selected filters\n        this._filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            filters.forEach(filter => {\n                if (this.filters.indexOf(filter) !== -1) {\n                    this.selected = filter;\n                }\n            });\n        });\n\n        // get the items to be displayed in the typeahead\n        this.typeaheadItems = this.getItems();\n\n        // determine if we should show the typeahead control\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    /** Cleanup all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Get the items to display in the typeahead based on the search query */\n    getItems(): string[] {\n        const query = this.query$.value.toLowerCase();\n\n        return this.filters.filter(item => item !== this.initial && item.name.toLowerCase().indexOf(query) !== -1)\n            .map(item => item.name)\n            .slice(0, this._options.maxResults);\n    }\n\n    /** Handle selection of a typeahead options */\n    selectOption(typeaheadOption: TypeaheadMatch): void {\n\n        // remove any current filters\n        this.removeFilter();\n\n        // find the filter that corresponds to the selected item\n        this.selected = this.filters.find(_filter => _filter.name === typeaheadOption.value);\n\n        // store the selection in the service\n        this._filterService.add(this.selected);\n\n        // clear the search query\n        this.query$.next('');\n\n        // hide the dropdown\n        this.dropdown.hide();\n    }\n\n    /** If a click occurred that was outside the dropdown then close the dropdown */\n    @HostListener('document:click', ['$event.target'])\n    clickOff(target: HTMLElement): void {\n\n        // if the click was outside the dropdown then close it\n        if (!(this._elementRef.nativeElement as HTMLElement).contains(target)) {\n            this.query$.next('');\n            this.dropdown.hide();\n        }\n    }\n\n    /** If a filter needs removed, and is not the initial filter then remove it */\n    removeFilter(): void {\n\n        // check if the filter we want to remove is the initial filter\n        if (this.selected !== this.initial) {\n            this._filterService.remove(this.selected);\n            this.selected = this.initial;\n        }\n\n        // clear the search query\n        this.query$.next('');\n    }\n\n    /** Select a specific filter */\n    selectFilter(filter: Filter): void {\n\n        // clear any current filters\n        this.removeFilter();\n\n        // store the newly selected filter\n        this.selected = filter;\n\n        // store the filter in the service\n        this._filterService.add(this.selected);\n    }\n\n    /** Update typeahead items and visibility */\n    updateTypeahead(query: string): void {\n        this.typeaheadOpen = query.length >= this._options.minCharacters;\n        this.typeaheadItems = this.getItems();\n    }\n\n    /** Select a filter from a typeahead item */\n    select(event: TypeaheadOptionEvent): void {\n        // find the filter with the matching name\n        const filter = this.filters.find(_filter => _filter.name === event.option);\n\n        if (filter) {\n            this.selectFilter(filter);\n        }\n    }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'filterTypeaheadHighlight'\n})\nexport class FilterTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        const regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"filter-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter<void>();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.pipe(filter(item => item === this))\n            .subscribe(() => this.setActive());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { DOWN_ARROW, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    @Output()\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.which)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => this.keyEnter.emit());\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: number): boolean {\n        switch (key) {\n            case ENTER:\n            case SPACE:\n                return true;\n\n            case UP_ARROW:\n                return this.menuPosition === 'top';\n\n            case DOWN_ARROW:\n                return this.menuPosition === 'bottom';\n\n            case LEFT_ARROW:\n                return this.menuPosition === 'left';\n\n            case RIGHT_ARROW:\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { DOWN_ARROW, END, ESCAPE, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) private _document: any\n    ) { }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this.toggleButton.keyEnter.pipe(takeUntil(this._onDestroy))\n                .subscribe(() => this.focusFirst());\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this.items.changes.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this._itemsOrdered = this.items.toArray());\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.which) {\n\n            case UP_ARROW:\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case DOWN_ARROW:\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case LEFT_ARROW:\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case RIGHT_ARROW:\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case HOME:\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case END:\n                this.moveLast();\n                handled = true;\n                break;\n\n            case ESCAPE:\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/typeahead.module';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent } from './filter-dynamic/filter-dynamic.component';\nimport { FilterTypeaheadHighlight } from './filter-dynamic/filter-typeahead-highlight.pipe';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent,\n    FilterTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        MenuNavigationModule,\n        CommonModule,\n        TypeaheadModule,\n        A11yModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    templateUrl: './flippable-card.component.html',\n    host: {\n        'tabindex': '0',\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean): void {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped(): void {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click')\n    clickTrigger(): void {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter')\n    hoverEnter(): void {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave')\n    hoverExit(): void {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    @HostListener('keydown.spacebar', ['$event']) // IE uses different naming\n    onKeyDown(event: KeyboardEvent): void {\n        if (this.trigger !== 'manual') {\n            this.toggleFlipped();\n            event.preventDefault();\n        }\n    }\n}\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable, QueryList } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n    direction$ = new BehaviorSubject<FloatingActionButtonDirection>('top');\n\n    private _buttons: QueryList<FloatingActionButtonComponent>;\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n\n        // make the first button tabbable again\n        this.setPrimaryButtonFocusable();\n    }\n\n    isHorizontal(): boolean {\n        return this.direction$.value === 'left' || this.direction$.value === 'right';\n    }\n\n    isVertical(): boolean {\n        return this.direction$.value === 'top' || this.direction$.value === 'bottom';\n    }\n\n    setButtons(buttons: QueryList<FloatingActionButtonComponent>): void {\n        this._buttons = buttons;\n\n        // make the first button tabbable\n        this.setPrimaryButtonFocusable();\n    }\n\n    /** Make only the first button tabbable */\n    setPrimaryButtonFocusable(): void {\n        this._buttons.forEach(btn => btn.tabindex$.next(btn.primary ? 0 : -1));\n    }\n\n    focusPrimaryButton(): void {\n        this.focus(this._buttons.find(btn => btn.primary));\n    }\n\n    focus(button: FloatingActionButtonComponent): void {\n\n        // if the button is not defined then do nothing\n        if (!button) {\n            return;\n        }\n\n        // set the button tab index\n        this._buttons.forEach(btn => btn.tabindex$.next(button === btn ? 0 : -1));\n\n        // apply the focus\n        button.focus();\n    }\n\n    focusSibling(next: boolean): void {\n\n        // if the buttons are not visible then do nothing\n        if (this.open$.value === false) {\n            return;\n        }\n\n        // get the current focused item\n        const button = this.getFocusedButton();\n\n        if (next && button === this._buttons.last) {\n            return this.focus(this._buttons.first);\n        } else if (!next && button === this._buttons.first) {\n            return this.focus(this._buttons.last);\n        }\n\n        // find the sibling button\n        const sibling = this._buttons.toArray()[this.getButtonIndex(button) + (next ? 1 : -1)];\n\n        // focus the next button\n        this.focus(sibling);\n    }\n\n    private getFocusedButton(): FloatingActionButtonComponent {\n        return this._buttons.find(btn => btn.tabindex$.value === 0);\n    }\n\n    private getButtonIndex(button: FloatingActionButtonComponent): number {\n        return this._buttons.toArray().findIndex(btn => btn === button);\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';\n","import { DOWN_ARROW, ENTER, ESCAPE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { AfterViewInit, Attribute, ChangeDetectionStrategy, Component, ElementRef, HostListener, Input, OnDestroy, Optional, ViewChild } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipDirective } from '../tooltip/index';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    templateUrl: './floating-action-button.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent implements AfterViewInit, OnDestroy {\n\n    @Input() icon: string;\n    @Input('aria-label') ariaLabel: string;\n    @ViewChild('button') button: ElementRef;\n\n    primary: boolean = false;\n    tabindex$ = new BehaviorSubject<number>(-1);\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService, @Optional() private _tooltip: TooltipDirective) {\n        this.primary = primary !== null;\n    }\n\n    ngAfterViewInit(): void {\n        if (this._tooltip) {\n            // ensure the tooltip gets hidden when the button is hidden\n            this.fab.open$.pipe(takeUntil(this._onDestroy), filter(isOpen => !isOpen && !this.primary))\n                .subscribe(() => this._tooltip.hide());\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    onFocus(): void {\n        // ensure the tooltip gets shown\n        if (this._tooltip) {\n            this._tooltip.show();\n        }\n    }\n\n    onBlur(): void {\n        // ensure the tooltip gets hidden\n        if (this._tooltip) {\n            this._tooltip.hide();\n        }\n    }\n\n    close(): void {\n        this.fab.close();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n\n        switch (event.which) {\n\n            case UP_ARROW:\n                if (this.fab.isVertical()) {\n                    this.fab.focusSibling(this.fab.direction$.value !== 'bottom');\n                    event.preventDefault();\n                }\n                break;\n\n            case DOWN_ARROW:\n                if (this.fab.isVertical()) {\n                    this.fab.focusSibling(this.fab.direction$.value === 'bottom');\n                    event.preventDefault();\n                }\n                break;\n\n            case LEFT_ARROW:\n                if (this.fab.isHorizontal()) {\n                    this.fab.focusSibling(this.fab.direction$.value !== 'right');\n                    event.preventDefault();\n                }\n                break;\n\n            case RIGHT_ARROW:\n                if (this.fab.isHorizontal()) {\n                    this.fab.focusSibling(this.fab.direction$.value === 'right');\n                    event.preventDefault();\n                }\n                break;\n\n            case ENTER:\n                this.fab.focusPrimaryButton();\n                break;\n\n            case ESCAPE:\n                this.fab.focusPrimaryButton();\n                this.fab.close();\n                break;\n\n        }\n\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\nimport { FloatingActionButtonDirection, FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    templateUrl: './floating-action-buttons.component.html',\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    /** Specify the direction that the FAB should display */\n    @Input() set direction(direction: FloatingActionButtonDirection) { this.fab.direction$.next(direction); }\n\n    /** Emit whenever the open state changes */\n    @Output() openChange = new EventEmitter<boolean>();\n\n    /** Get all child FAB buttons */\n    @ContentChildren(FloatingActionButtonComponent) buttons: QueryList<FloatingActionButtonComponent>;\n\n    private _subscription: Subscription = new Subscription();\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) {\n        this._subscription.add(this.fab.open$.subscribe(value => this.openChange.emit(value)));\n    }\n\n    ngAfterViewInit(): void {\n        this.fab.setButtons(this.buttons);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    /** Often a click event makes the element appear - if so we can end up closing it immediately */\n    private _initialised: boolean = false;\n\n    constructor(private _elementRef: ElementRef) {\n        setTimeout(() => this._initialised = true);\n    }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._initialised && this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  templateUrl: './popover.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HierarchyBarService {\r\n\r\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _root: HierarchyBarNode;\r\n    private _nodes: HierarchyBarNode[] = [];\r\n\r\n    /**\r\n     * Store the root node of the hierarchy tree\r\n     */\r\n    setRootNode(root: HierarchyBarNode) {\r\n\r\n        // store the root node\r\n        this._root = root;\r\n\r\n        // create a flat structure of nodes\r\n        this._nodes = this.getNodeList(root);\r\n\r\n        // flatten the array - based on the selected node\r\n        this.nodes$.next(this.getSelectedChildren(root));\r\n    }\r\n\r\n    /**\r\n     * Select a node. This causes all nodes to be\r\n     * deselected and the path to the selected node\r\n     * to be selected\r\n     */\r\n    selectNode(node: HierarchyBarNode): void {\r\n\r\n        // deselect all nodes\r\n        this.deselectAll();\r\n\r\n        // ensure the current node is selected and its parents\r\n        this.select(node);\r\n\r\n        // emit a new node list to trigger change detection\r\n        this.nodes$.next(this.getSelectedChildren(this._root));\r\n    }\r\n\r\n    /**\r\n     * Handles getting children with support for both arrays and observables\r\n     */\r\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\r\n\r\n        if (Array.isArray(node.children)) {\r\n            return of({ loading: false, children: node.children });\r\n        }\r\n\r\n        const children$: Observable<HierarchyBarNode[]> = node.children;\r\n\r\n        // if it is an observable then handle loading\r\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\r\n            // emit initial value\r\n            observer.next({ loading: true, children: [] });\r\n\r\n            // now wait until the children observable completes\r\n            children$.pipe(first()).subscribe(children => {\r\n\r\n                // replace the observable with an array for future loading\r\n                node.children = children;\r\n\r\n                // rebuild the node tree\r\n                this.setRootNode(this._root);\r\n\r\n                // emit the latest value\r\n                observer.next({ loading: false, children: children });\r\n\r\n                // close the observable stream\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Traverses all the parents to ensure they are selected\r\n     */\r\n    private select(node: HierarchyBarNode): void {\r\n        node.selected = true;\r\n\r\n        if (node.parent) {\r\n            this.select(node.parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselects all nodes\r\n     */\r\n    private deselectAll(): void {\r\n        this._nodes.forEach(node => node.selected = false);\r\n    }\r\n\r\n    /**\r\n     * Gets all the nodes in the tree as a flat array.\r\n     * It also stores the parent node in a parent property\r\n     * on the node for easy traversal in both directions\r\n     */\r\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        // if there are no children then return only itself\r\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\r\n            return [node];\r\n        }\r\n\r\n        // store the parent property\r\n        node.children.forEach(child => child.parent = node);\r\n\r\n        // get all descendants of this node\r\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\r\n\r\n        return [node, ...descendants];\r\n    }\r\n\r\n    /**\r\n     * Gets all selected nodes from the parent node.\r\n     */\r\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        if (node.children instanceof Observable) {\r\n            return [node];\r\n        }\r\n\r\n        // get the children - and account for when there is none\r\n        const children = node.children || [];\r\n\r\n        // check if any child is selected\r\n        const child = children.find(_child => _child.selected);\r\n\r\n        // return the remaining chain of selected items\r\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\r\n    }\r\n}\r\n\r\nexport interface HierarchyBarNode {\r\n    icon?: string;\r\n    title: string;\r\n    selected?: boolean;\r\n    parent?: HierarchyBarNode;\r\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\r\n}\r\n\r\nexport interface HierarchyBarNodeChildren {\r\n    loading: boolean;\r\n    children: HierarchyBarNode[];\r\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\r\n\r\n@Component({\r\n    selector: 'ux-hierarchy-bar',\r\n    templateUrl: './hierarchy-bar.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    viewProviders: [HierarchyBarService]\r\n})\r\nexport class HierarchyBarComponent implements OnDestroy {\r\n\r\n    @Input() set root(node: HierarchyBarNode) {\r\n        this.hierarchyBar.setRootNode(node);\r\n    }\r\n\r\n    @Input() set selected(node: HierarchyBarNode) {\r\n        this.hierarchyBar.selectNode(node);\r\n    }\r\n\r\n    @Input() loadingIndicator: TemplateRef<any>;\r\n\r\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\r\n    @ViewChild('nodelist') nodelist: ElementRef;\r\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\r\n\r\n    overflow$ = new BehaviorSubject<boolean>(false);\r\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(public hierarchyBar: HierarchyBarService) {\r\n\r\n        // subscribe to changes in the selected node\r\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\r\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\r\n\r\n        // store subscriptions\r\n        this._subscription.add(selected);\r\n        this._subscription.add(changed);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * When there is overflow ensure that the rightmost\r\n     * node remains in view at all times. The nodes no longer\r\n     * visible be be displayed in a popover available on the\r\n     * overflow indicator\r\n     */\r\n    scrollIntoView(): void {\r\n\r\n        if (!this.nodelist) {\r\n            return;\r\n        }\r\n\r\n        // get the native element\r\n        const { nativeElement } = this.nodelist;\r\n\r\n        // emit whether or not there is overflow\r\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\r\n\r\n        // if the hierarchy bar contents do not overflow then do nothing\r\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\r\n\r\n            // determine the amount of overflow\r\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\r\n\r\n            // determine which nodes are not fully visible\r\n            this.overflowNodes$.next(\r\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\r\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\r\n            );\r\n\r\n            // move the scroll position to always show the last itme\r\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\r\n        }\r\n    }\r\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { PopoverModule } from '../popover/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule,\n        AccessibilityModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SidePanelService } from './side-panel.service';\n\n@Component({\n    selector: 'ux-side-panel',\n    exportAs: 'ux-side-panel',\n    templateUrl: 'side-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel'\n    }\n})\nexport class SidePanelComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('class.open')\n    get open(): boolean {\n        return this.service.open$.value;\n    }\n\n    set open(value: boolean) {\n        this.service.open$.next(value);\n    }\n\n    @Input()\n    @HostBinding('class.inline')\n    inline = false;\n\n    @Input()\n    attachTo: 'window' | 'container' = 'window';\n\n    @Input()\n    width: string | number = '50%';\n\n    @Input()\n    top: string | number = '0';\n\n    @Input()\n    @HostBinding('attr.aria-modal')\n    modal = false;\n\n    @Input()\n    @HostBinding('class.animate')\n    animate = false;\n\n    @Input()\n    closeOnExternalClick = false;\n\n    @Input()\n    focusOnShow: boolean = false;\n\n    @Output()\n    openChange = new EventEmitter<boolean>();\n\n    get position() {\n        if (this.inline) {\n            return 'static';\n        }\n        if (this.attachTo === 'container') {\n            return 'absolute';\n        }\n        return 'fixed';\n    }\n\n    get cssWidth(): string {\n        if (typeof this.width === 'number') {\n            return this.width === 0 ? '0' : this.width + 'px';\n        }\n        return this.width;\n    }\n\n    get cssTop(): string {\n        if (typeof this.top === 'number') {\n            return this.top === 0 ? '0' : this.top + 'px';\n        }\n        return this.top;\n    }\n\n    @HostBinding('style.width')\n    get componentWidth(): string {\n        if (this.inline) {\n            return this.open ? this.cssWidth : '0';\n        }\n        return null;\n    }\n\n    get hostWidth() {\n        return this.inline ? '100%' : this.cssWidth;\n    }\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor(\n        protected service: SidePanelService,\n        private _elementRef: ElementRef\n    ) { }\n\n    ngOnInit() {\n        this.service.open$.pipe(takeUntil(this._onDestroy)).subscribe(isOpen => this.openChange.emit(isOpen));\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    openPanel() {\n        this.service.open();\n    }\n\n    @HostListener('document:keyup.escape')\n    closePanel() {\n        this.service.close();\n    }\n\n    @HostListener('document:click', ['$event'])\n    clickHandler(event: MouseEvent) {\n        if (!this.open || !this.closeOnExternalClick) {\n            return;\n        }\n\n        const target = event.target as HTMLElement;\n\n        if (!this._elementRef.nativeElement.contains(target) ||\n            (target && target.classList.contains('modal-backdrop'))) {\n            this.closePanel();\n        }\n    }\n}","import { Component, ContentChild, Directive, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\nimport { SidePanelService } from '../side-panel/side-panel.service';\n\n@Directive({\n    selector: '[uxItemDisplayPanelContent]'\n})\nexport class ItemDisplayPanelContentDirective { }\n\n@Directive({\n    selector: '[uxItemDisplayPanelFooter]'\n})\nexport class ItemDisplayPanelFooterDirective { }\n\n@Component({\n    selector: 'ux-item-display-panel',\n    templateUrl: './item-display-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel ux-item-display-panel'\n    }\n})\nexport class ItemDisplayPanelComponent extends SidePanelComponent implements OnInit {\n\n    @Input() header: string;\n\n    @Input() boxShadow: boolean = true;\n\n    @Input() closeVisible: boolean = true;\n\n    get preventClose(): boolean {\n        return !this.closeOnExternalClick;\n    }\n\n    @Input()\n    set preventClose(value: boolean) {\n        this.closeOnExternalClick = !value;\n    }\n\n    @Input() shadow: boolean = false;\n\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\n    @ViewChild('panel') panel: ElementRef;\n\n    /**\n     * @deprecated\n     * Title used for adding tooltips and shouldn't be used as an input\n     * instead header will be used. This is here to support backward compatibility only\n     * this property should not be used.\n     */\n    @Input()\n    set title(value: string) {\n        this.header = value;\n    }\n\n    get title() {\n        return this.header;\n    }\n\n    @Input()\n    set visible(visible: boolean) {\n        this.open = visible;\n    }\n\n    get visible() {\n        return this.open;\n    }\n\n    constructor(service: SidePanelService, elementRef: ElementRef) {\n        super(service, elementRef);\n\n        this.animate = false;\n        this.closeOnExternalClick = true;\n    }\n\n    ngOnInit() {\n        this.service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe(isVisible => this.visibleChange.emit(isVisible));\n    }\n\n    focus(): void {\n        if (this.panel) {\n            this.panel.nativeElement.focus();\n        }\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FocusIfModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter, Host, HostBinding, Inject, forwardRef } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    templateUrl: './wizard-step.component.html',\n    host: {\n        'role': 'tabpanel',\n        '[attr.aria-labelledby]': 'id + \"-label\"'\n    }\n})\nexport class WizardStepComponent {\n\n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input()\n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n\n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    @HostBinding('attr.aria-expanded')\n    get active(): boolean {\n        return this._active;\n    }\n\n    @HostBinding('id') id: string;\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { WizardStepComponent } from './wizard-step.component';\n\nlet uniqueId: number = 0;\n\n@Component({\n    selector: 'ux-wizard',\n    templateUrl: './wizard.component.html',\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit, OnDestroy {\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextAriaLabel: string = 'Go to the next step';\n    @Input() previousAriaLabel: string = 'Go to the previous step';\n    @Input() cancelAriaLabel: string = 'Cancel the wizard';\n    @Input() finishAriaLabel: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n    @Output() stepError = new EventEmitter<number>();\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    id: string = `ux-wizard-${uniqueId++}`;\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    private _step: number = 0;\n    private _onDestroy = new Subject<void>();\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n\n        // initially set the ids for each step\n        this.setWizardStepIds();\n\n        // if the steps change then update the ids\n        this.steps.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.setWizardStepIds());\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Set ids for each of the wizard steps */\n    setWizardStepIds(): void {\n        this.steps.forEach((step, idx) => step.id = `${this.id}-step-${idx}`);\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            this.stepError.next(this.step);\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();\n                } else {\n                    this.stepError.next(this.step);\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\nimport { AccessibilityModule } from '../../directives/accessibility/accessibility.module';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule,\n        AccessibilityModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    templateUrl: './marquee-wizard-step.component.html'\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    templateUrl: './marquee-wizard.component.html',\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(filter((event: MarqueeWizardValidEvent) => !event.valid))\n            .subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        } else {\n            this.stepError.next(this.step);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            } else {\n                this.stepError.next(this.step);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule,\n        AccessibilityModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<Event> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe(() => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        const interval = setInterval(() => {\n\n            const buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) { }\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList | Array<any> {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : [];\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): Array<TextTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.textTracks) : [];\n    }\n\n    get videoTracks(): Array<VideoTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.videoTracks) : [];\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        if (this._mediaPlayer) {\n            this._mediaPlayer.volume = value;\n        }\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata', label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange() {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n\n    hideSubtitleTracks(): void {\n        for (let index = 0; index < this.textTracks.length; index++) {\n            this.textTracks[index].mode = 'hidden';\n        }\n    }\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    templateUrl: './slider.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb?: string;\n    lowerThumb?: string;\n    upperThumb?: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { timer } from 'rxjs/observable/timer';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SliderOptions, SliderSize } from '../../../slider/index';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-media-player-controls',\n    templateUrl: './controls.component.html',\n    host: {\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    volumeActive: boolean = false;\n    volumeFocus: boolean = false;\n    returnFocus: boolean = true;\n    subtitlesId: string = `ux-media-player-subtitle-popover-${uniqueId++}`;\n    subtitlesOpen: boolean = false;\n    mouseEnterVolume = new Subject<void>();\n    mouseLeaveVolume = new Subject<void>();\n\n    options: SliderOptions = {\n        handles: {\n            aria: {\n                thumb: 'Volume'\n            }\n        },\n        track: {\n            colors: {\n                lower: '#666'\n            },\n            height: SliderSize.Narrow,\n            ticks: {\n                major: {\n                    show: false\n                },\n                minor: {\n                    show: false\n                }\n            }\n        }\n    };\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n\n        this.mouseEnterVolume.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        this.mouseLeaveVolume.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(this.mouseEnterVolume))), takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        this.volume = this.volume === 0 ? this._previousVolume : 0;\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    isSubtitleActive(): boolean {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    setSubtitleTrack(track: TextTrack): void {\n        // hide all tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n\n        // set the position of the subtitle track\n        for (let idx = 0; idx < track.cues.length; idx++) {\n            const cue: any = track.cues[idx];\n            cue.line = -3;\n        }\n\n        // activate the selected one\n        track.mode = 'showing';\n\n    }\n\n    getSubtitleTrack(): string {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return this.mediaPlayerService.textTracks[idx].label;\n            }\n        }\n\n        return 'No subtitles';\n    }\n\n}","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxMediaPlayerCustomControl]',\n})\nexport class MediaPlayerCustomControlDirective {}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    templateUrl: './timeline.component.html',\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.mediaPlayerService.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({\n                    start: (buffered.start(idx) / this.mediaPlayerService.duration) * 100,\n                    end: (buffered.end(idx) / this.mediaPlayerService.duration) * 100\n                });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n\n    /** Skip a number of seconds in any direction */\n    skip(seconds: number): void {\n        let target = this.current + seconds;\n\n        // ensure that the target position is within the bounds of the clip\n        if (target < 0) {\n            target = 0;\n        }\n\n        if (target > this.mediaPlayerService.duration) {\n            target = this.mediaPlayerService.duration;\n        }\n\n        this.mediaPlayerService.currentTime = target;\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: HttpClient) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.get(mediaElement.src, { responseType: 'blob' }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: response.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.get(url, { responseType: 'arraybuffer' }).subscribe(response => {\n                this.getAudioBuffer(response).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpClientModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { debounceTime, takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    templateUrl: './media-player.component.html',\n    providers: [MediaPlayerService],\n    host: {\n        '(keydown.Space)': 'mediaPlayerService.togglePlay(); $event.preventDefault()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering || focused',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange()'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    focused: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    @Input() crossorigin: 'use-credentials' | 'anonymous' = 'use-credentials';\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            tap(() => this.hovering = true),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n\n        // initially hide all text tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { SliderModule } from '../slider/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { MediaPlayerCustomControlDirective } from './extensions/controls/custom-control/custom-control.directive';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerComponent } from './media-player.component';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent,\n    MediaPlayerCustomControlDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule,\n        SliderModule,\n        AccessibilityModule,\n        A11yModule,\n        ClickOutsideModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class MediaPlayerModule { }\n","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators/filter';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    templateUrl: './navigation-item.component.html',\n    host: {\n        '[class.active]': 'active',\n        '[class.selected]': 'expanded',\n    }\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() expanded: boolean = false;\n    @Input() link: string;\n\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional()\n        @SkipSelf()\n        private _parent: NavigationItemComponent,\n        private _router: Router\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n            // Expand this component if it or a descendant is active.\n            this.expanded = this.hasActiveLink(this.link);\n        });\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            let levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy () {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n        // If this component has a link, check if it is active.\n        if (link && this._router.isActive(link, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n            // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationItem } from './navigation-item.inferface';\n\n@Injectable()\nexport class NavigationService {\n\n    items: NavigationItem[];\n\n    autoCollapse: boolean = true;\n\n    setExpanded(source: NavigationItem, expanded: boolean): void {\n        if (expanded && this.autoCollapse) {\n            this.collapseSiblings(source);\n        }\n    }\n\n    private collapseSiblings(source: NavigationItem): void {\n        let siblings = this.items;\n        for (let item of this.items) {\n            const parent = this.getParent(source, item);\n            if (parent) {\n                siblings = parent.children;\n                break;\n            }\n        }\n\n        for (let item of siblings) {\n            if (item !== source) {\n                this.collapseAll(item);\n            }\n        }\n    }\n\n    private collapseAll(item: NavigationItem): void {\n        item.expanded = false;\n        if (item.children) {\n            for (let child of item.children) {\n                this.collapseAll(child);\n            }\n        }\n    }\n\n    private getParent(target: NavigationItem, item: NavigationItem): NavigationItem {\n        if (item.children) {\n            for (let child of item.children) {\n                if (child === target) {\n                    return item;\n                }\n            }\n        }\n\n        return null;\n    }\n}","import { LocationStrategy } from '@angular/common';\nimport { Directive, HostBinding, HostListener, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../../common/index';\nimport { NavigationItem } from '../navigation-item.inferface';\nimport { NavigationService } from '../navigation.service';\n\n@Directive({\n    selector: '[uxNavigationLink]',\n    exportAs: 'uxNavigationLink'\n})\nexport class NavigationLinkDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input()\n    navigationItem: NavigationItem;\n\n    @Input()\n    set expanded(value: boolean) {\n        this._expanded$.next(value);\n    }\n\n    @Input()\n    canExpand: boolean;\n\n    @Input()\n    @HostBinding('class.indent')\n    indent: boolean;\n\n    @HostBinding('attr.href')\n    href: string;\n\n    @HostBinding('attr.role')\n    role: string;\n\n    @HostBinding('attr.aria-expanded')\n    ariaExpanded: string = 'undefined';\n\n    isActive: boolean;\n\n    indentChildren: boolean;\n\n    private _expanded$ = new Subject<boolean>();\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _router: Router,\n        private _locationStrategy: LocationStrategy,\n        private _navigationService: NavigationService\n    ) { }\n\n    ngOnInit(): void {\n\n        this._expanded$.pipe(takeUntil(this._onDestroy), tick()).subscribe(expanded => {\n            if (this.navigationItem.children && this.navigationItem.children.length > 0) {\n                this.ariaExpanded = `${expanded}`;\n                this._navigationService.setExpanded(this.navigationItem, expanded);\n            }\n        });\n\n        this._router.events\n            .pipe(filter(event => event instanceof NavigationEnd), takeUntil(this._onDestroy))\n            .subscribe(this.updateNavigationState.bind(this));\n\n        this.updateNavigationState();\n\n        this.updateAttributes();\n    }\n\n    ngOnChanges(): void {\n        this.updateAttributes();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('keydown.enter', ['$event'])\n    activated(event: Event): boolean {\n\n        if (this.navigationItem.routerLink) {\n            const commands = Array.isArray(this.navigationItem.routerLink) ? this.navigationItem.routerLink : [this.navigationItem.routerLink];\n            this._router.navigate(commands, this.navigationItem.routerExtras);\n        }\n\n        // Toggle expanded state (relevant only if it has children)\n        this.navigationItem.expanded = !this.navigationItem.expanded;\n\n        // Invoke the custom click handler if specified\n        if (this.navigationItem.click) {\n            this.navigationItem.click(event, this.navigationItem);\n        }\n\n        return false;\n    }\n\n    private updateNavigationState(): void {\n        this.isActive = this.isActiveItem(this.navigationItem);\n\n        if (this.navigationItem.children) {\n            const activeChild = this.navigationItem.children.find(child => this.isActiveItem(child));\n            if (activeChild) {\n                this.navigationItem.expanded = true;\n            }\n        }\n    }\n\n    private updateAttributes(): void {\n\n        this.href = this.getHref();\n        this.role = (this.navigationItem.children && this.navigationItem.children.length > 0) ? 'button' : 'treeitem';\n\n        this.indentChildren = this.navigationItem.children && this.navigationItem.children.some(item => item.children && item.children.length > 0);\n    }\n\n    private getHref(): string {\n\n        if (this.navigationItem.routerLink) {\n            const commands = Array.isArray(this.navigationItem.routerLink) ? this.navigationItem.routerLink : [this.navigationItem.routerLink];\n            const urlTree = this._router.createUrlTree(commands, this.navigationItem.routerExtras);\n            return this._locationStrategy.prepareExternalUrl(this._router.serializeUrl(urlTree));\n        }\n\n        return null;\n    }\n\n    private isActiveItem(item: NavigationItem): boolean {\n\n        if (item.routerLink) {\n            const commands = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            const urlTree = this._router.createUrlTree(commands, item.routerExtras);\n            return this._router.isActive(urlTree, true);\n        }\n\n        return false;\n    }\n}","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { NavigationItem } from './navigation-item.inferface';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n    selector: 'ux-navigation',\n    templateUrl: './navigation.component.html',\n    providers: [NavigationService]\n})\nexport class NavigationComponent {\n\n    /** The navigation items to populate the menu with. */\n    @Input()\n    set items(items: NavigationItem[]) {\n        this._navigationService.items = items;\n    }\n    get items(): NavigationItem[] {\n        return this._navigationService.items;\n    }\n\n    /** Whether to present the menu as a hierarchical tree. */\n    @Input()\n    tree: boolean = true;\n\n    /** Whether to collapse other menu items when expanding a menu item. */\n    @Input()\n    set autoCollapse(autoCollapse: boolean) {\n        this._navigationService.autoCollapse = autoCollapse;\n    }\n\n    @ContentChild('uxNavigationItem')\n    navigationItemTemplate: TemplateRef<any>;\n\n    hierarchyClasses = [\n        '',\n        'nav-second-level',\n        'nav-third-level',\n        'nav-fourth-level',\n        'nav-fifth-level',\n    ];\n\n    get depthLimit(): number {\n        return this.tree ? this.hierarchyClasses.length : 2;\n    }\n\n    constructor(private _navigationService: NavigationService) { }\n\n    itemClick(item: NavigationItem, event: Event): void {\n\n        // Toggle expanded state (relevant only if it has children)\n        item.expanded = !item.expanded;\n\n        // Invoke the custom click handler if specified\n        if (item.click) {\n            item.click(event, item);\n        }\n    }\n\n    /**\n     * Returns true if the sets of items needs to be indented to make room for one or more expander.\n     */\n    needsIndent(items: NavigationItem[]): boolean {\n        return items && items.some(item => item.children && item.children.length > 0);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\nimport { NavigationLinkDirective } from './navigation-link/navigation-link.directive';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n    imports: [\n        AccessibilityModule,\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent,\n        NavigationLinkDirective\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ColorService } from '../../services/color/index';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n\r\n    // provide default options\r\n    options: NotificationOptions = {\r\n        duration: 4,\r\n        height: 100,\r\n        spacing: 10,\r\n        backgroundColor: this._colorService.getColor('accent').toHex(),\r\n        iconColor: this._colorService.getColor('accent').toHex()\r\n    };\r\n\r\n    direction: NotificationListDirection = 'above';\r\n\r\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \r\n\r\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\r\n\r\n        options = { ...this.options, ...options };\r\n\r\n        const notificationRef: NotificationRef = {\r\n            templateRef: templateRef,\r\n            duration: options.duration,\r\n            date: new Date(),\r\n            visible: true,\r\n            height: options.height,\r\n            spacing: options.spacing,\r\n            backgroundColor: options.backgroundColor,\r\n            iconColor: options.iconColor,\r\n            data: data\r\n        };\r\n\r\n        const notifications = this.notifications$.getValue();\r\n\r\n        if (this.direction === 'above') {\r\n            notifications.unshift(notificationRef);\r\n        } else {\r\n            notifications.push(notificationRef);\r\n        }\r\n\r\n        this.notifications$.next(notifications);\r\n\r\n        // remove notification after delay\r\n        if (options.duration !== 0) {\r\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\r\n        }\r\n\r\n        return notificationRef;\r\n    }\r\n\r\n    getHistory(): NotificationRef[] {\r\n        return this.notifications$.getValue();\r\n    }\r\n\r\n    dismiss(notificationRef: NotificationRef): void {\r\n        notificationRef.visible = false;\r\n        this.notifications$.next(this.notifications$.getValue());\r\n    }\r\n    \r\n    dismissAll(): void {\r\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\r\n        this.notifications$.next(this.notifications$.getValue());        \r\n    }\r\n\r\n    constructor(private _colorService: ColorService) {\r\n    }\r\n}\r\n\r\nexport interface NotificationRef {\r\n    templateRef: TemplateRef<any>;\r\n    duration: number;\r\n    date: Date;\r\n    visible?: boolean;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n    data: { [key: string]: any };\r\n}\r\n\r\nexport interface NotificationOptions {\r\n    duration?: number;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n}\r\n\r\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    templateUrl: './notification-list.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n    secondaryNavigationAutoselect = false;\n\n    private _onDestroy = new Subject();\n\n    constructor(private _router: Router) {\n\n        this.selected$\n            .pipe(takeUntil(this._onDestroy), map(selected => this.getRoot(selected)))\n            .subscribe(root => this.selectedRoot$.next(root));\n\n        this._router.events\n            .pipe(takeUntil(this._onDestroy), filter(e => e instanceof NavigationEnd))\n            .subscribe(this.updateItemsWithActiveRoute.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        if (!item) {\n            return;\n        }\n\n        if (item.routerLink) {\n\n            // Trigger router navigation\n            const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            this._router.navigate(routerLink, item.routerExtras);\n\n        } else if (this.secondaryNavigationAutoselect && item.children && item.children.length > 0) {\n\n            // Select the first child in secondaryNavigationAutoselect mode\n            this.select(item.children[0]);\n\n        } else {\n\n            // if we are in secondary navigation mode and we click a parent - dont deselect the child\n            if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n                return;\n            }\n\n            // Otherwise select the given item\n            this.selected$.next(item);\n        }\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    updateItem(item: PageHeaderNavigationItem, selected: PageHeaderNavigationItem): void {\n        // Item is selected if it is the selected item, or one of the selected item's ancestors.\n        item.selected = item === selected || this.isParentOf(selected, item);\n\n        if (item === selected) {\n            // call the select function if present\n            if (item.select) {\n                item.select.call(item, item);\n            }\n        }\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n\n        // Set up the initally selected item\n        // If nothing is set as selected, using the initial route\n        const initialSelectedItem = items.find(item => item.selected === true);\n        if (initialSelectedItem) {\n            this.select(initialSelectedItem);\n        } else {\n            this.updateItemsWithActiveRoute();\n        }\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n\n    private updateItemsWithActiveRoute(): void {\n        const activeItem = new PageHeaderActiveNavigationItem();\n        for (var item of this.items$.getValue()) {\n            this.findActiveItem(item, activeItem);\n            if (activeItem.exact) {\n                break;\n            }\n        }\n\n        if (activeItem.item) {\n            this.selected$.next(activeItem.item);\n        }\n    }\n\n    private findActiveItem(item: PageHeaderNavigationItem, activeItem: PageHeaderActiveNavigationItem): void {\n\n        if (item.routerLink) {\n\n            const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            const urlTree = this._router.createUrlTree(routerLink, item.routerExtras);\n\n            if (this._router.isActive(urlTree, true) && !activeItem.exact) {\n\n                // When the item route is an exact match, no need to look any further\n                activeItem.item = item;\n                activeItem.exact = true;\n\n                return;\n            }\n\n            if (this._router.isActive(urlTree, false)) {\n\n                // Store an inexact match and continue looking\n                activeItem.item = item;\n                activeItem.exact = false;\n            }\n        }\n\n        if (item.children) {\n            for (let childItem of item.children) {\n                this.findActiveItem(childItem, activeItem);\n                if (activeItem.exact) {\n                    return;\n                }\n            }\n        }\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;\n\nclass PageHeaderActiveNavigationItem {\n    item: PageHeaderNavigationItem;\n    exact: boolean;\n}\n","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    templateUrl: './icon-menu.component.html'\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    templateUrl: './navigation-dropdown-item.component.html'\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    templateUrl: './navigation-item.component.html'\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _onDestroy = new Subject();\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        this._pageHeaderService.selected$.pipe(takeUntil(this._onDestroy)).subscribe(next => {\n\n            // Update selected state for this item\n            this._pageHeaderService.updateItem(this.item, next);\n\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this.menu.onHidden\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(): void {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { delay, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { PageHeaderService } from '../../page-header.service';\r\nimport { PageHeaderNavigationItem } from '../navigation.component';\r\n\r\n@Directive({\r\n    selector: '[uxPageHeaderNavigationSecondaryItem]'\r\n})\r\nexport class PageHeaderNavigationSecondaryItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('uxPageHeaderNavigationSecondaryItem')\r\n    item: PageHeaderNavigationItem;\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _pageHeaderService: PageHeaderService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this._pageHeaderService.selected$.pipe(delay(0), takeUntil(this._onDestroy)).subscribe(next => {\r\n\r\n            // Update selected state for this item\r\n            this._pageHeaderService.updateItem(this.item, next);\r\n\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    templateUrl: './navigation.component.html',\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Component, ContentChild, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    templateUrl: 'page-header.component.html',\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() title: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: 'left' | 'right' | 'center' = 'center';\n\n    @Input()\n    set secondaryNavigationAutoselect(value: boolean) {\n        this._pageHeaderService.secondaryNavigationAutoselect = value;\n    }\n\n    get secondaryNavigationAutoselect(): boolean {\n        return this._pageHeaderService.secondaryNavigationAutoselect;\n    }\n\n    @Input()\n    set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input()\n    set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input()\n    set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input() crumbsStyle: 'standard' | 'small' = 'standard';\n\n    @Input()\n    set logoBackground(color: string) {\n        this._logoBackground = this._colorService.resolve(color);\n    }\n\n    get logoBackground(): string {\n        return this._logoBackground;\n    }\n\n    @Input()\n    set logoForeground(color: string) {\n        this._logoForeground = this._colorService.resolve(color);\n    }\n\n    get logoForeground(): string {\n        return this._logoForeground;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this.logoBackground = color;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this.logoForeground = color;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChild('title') titleTemplate: TemplateRef<any>;\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _logoBackground: string;\n    private _logoForeground: string;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    templateUrl: './tab.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    templateUrl: './tabset.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetComponent } from './tabset.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationSecondaryItemDirective } from './navigation/navigation-secondary-item/navigation-secondary-item.directive';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderComponent } from './page-header.component';\nimport { TabsetModule } from '../tabset/index';\n\n@NgModule({\n    imports: [\n        BreadcrumbsModule,\n        BsDropdownModule.forRoot(),\n        ColorServiceModule,\n        CommonModule,\n        MenuNavigationModule,\n        ResizeModule,\n        RouterModule,\n        TabsetModule\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent,\n        PageHeaderNavigationSecondaryItemDirective\n    ]\n})\nexport class PageHeaderModule { }\n","import { Component, EventEmitter, forwardRef, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PaginationComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'ux-pagination',\n  templateUrl: './pagination.component.html',\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n})\nexport class PaginationComponent implements OnInit, ControlValueAccessor {\n\n  /** Specify if we should show the next and previous buttons */\n  @Input() directionButtons: boolean = true;\n\n  /** Limit the number of pages shown at any given time */\n  @Input() maxSize: number = 5;\n\n  /** Specify if the component should be disabled */\n  @Input() disabled: boolean = false;\n\n  /** Apply classes to the bootstrap pagination element */\n  @Input('class') classes: string;\n\n  /** Allow custom class to be added to page buttons */\n  @Input() pageBtnClass: string;\n\n  /** Aria Label for the component navigation */\n  @Input('aria-label') ariaLabel: string = 'Pagination Navigation';\n\n  /** Aria label for the previous button */\n  @Input() previousAriaLabel: string = 'Navigate to the previous page';\n\n  /** Aria label for the next button */\n  @Input() nextAriaLabel: string = 'Navigate to the next page';\n\n  /** Specify the index of the active page */\n  @Input() set page(page: number) {\n\n    // do nothing if the page has not changed\n    if (page === this._page) {\n      return;\n    }\n\n    this._page = page;\n    this.pages = this.getPages();\n\n    // mark this component as changed\n    this.onChange(this.page);\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  /** Define a custom template for the previous button */\n  @Input() previousBtnTemplate: TemplateRef<any>;\n\n  /** Define a custom template for the next button */\n  @Input() nextBtnTemplate: TemplateRef<any>;\n\n  /** Specify the page size */\n  @Input() set itemsPerPage(pagesize: number) {\n    this._pagesize = pagesize;\n    this.pages = this.getPages();\n  }\n\n  /** Specify how many items there are in total */\n  @Input() set totalItems(total: number) {\n    this._total = total;\n    this.pages = this.getPages();\n  }\n\n  /** Emit the current page number */\n  @Output() pageChange = new EventEmitter<number>();\n\n  /** Emit the total number of pages */\n  @Output() numPages = new EventEmitter<number>();\n\n  /** Store a list of pages to display in the UI */\n  pages: ReadonlyArray<Page> = [];\n\n  /** ControlValueAccessor functions */\n  onTouched: Function = () => {};\n  onChange: Function = () => {};\n\n  isKeyboardEvent: boolean = false;\n\n  private _page: number = 1;\n  private _total: number = 100;\n  private _pagesize: number = 10;\n\n  get pageCount(): number {\n    return Math.ceil(this._total / this._pagesize);\n  }\n\n  ngOnInit(): void {\n    this.pages = this.getPages();\n  }\n\n  select(index: number): void {\n\n    // find the page we want to go to\n    const target = this.pages.find(page => page.index === index);\n\n    // if the page is out of bounds then do nothing\n    if (!target) {\n      return;\n    }\n\n    // mark this component as touched\n    this.onTouched();\n\n    // set this as the current page\n    this.page = target.index;\n\n    // update the visible pages\n    this.pages = this.getPages();\n\n    // emit the current page\n    this.pageChange.emit(this.page);\n  }\n\n  trackByFn(_index: number, item: Page): number {\n    return item.index;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  writeValue(page: number): void {\n    this.page = page;\n  }\n\n  private getPages(): Page[] {\n\n    // create a new array to store the pages\n    const pages: Page[] = [];\n\n    // create all possible pages\n    for (let index = 1; index <= this.pageCount; index++) {\n      pages.push({ index, visible: this.isPageVisible(index) });\n    }\n\n    // emit the number of pages\n    this.numPages.emit(this.pageCount);\n\n    return pages;\n  }\n\n  private isPageVisible(index: number): boolean {\n\n    // if we do not have a max size specified or the number of pages is less than the max size then it is always visible\n    if (!this.maxSize || this.pageCount <= this.maxSize) {\n      return true;\n    }\n\n    // find the starting position\n    let start = Math.max(1, Math.ceil(this.page - (this.maxSize / 2)));\n    const end = Math.min(start + this.maxSize, this.pageCount + 1);\n\n    // if the range is less than the max size we need to adjust the starting point\n    const range = end - start;\n\n    if (range < this.maxSize) {\n      start = start - (this.maxSize - range);\n    }\n\n    // if the item equals the start position or is less than the end position then show it\n    return index >= start && index < end;\n  }\n}\n\nexport interface Page {\n  index: number;\n  visible: boolean;\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    A11yModule,\n    AccessibilityModule,\n    FocusIfModule\n  ],\n  declarations: [\n    PaginationComponent\n  ],\n  exports: [\n    PaginationComponent\n  ]\n})\nexport class PaginationModule { }\n","import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        role: 'progressbar'\n    }\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() @HostBinding('attr.aria-valuemin') min: number = 0;\n    @Input() @HostBinding('attr.aria-valuemax') max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n\n    /** When indeteminate we should omit the valuenow label */\n    @HostBinding('attr.aria-valuenow') get valueNow() {\n        return this.indeterminate ? null : this.value;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    templateUrl: './radiobutton.component.html',\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst UNSET_FOCUS: SearchBuilderFocus = { groupId: null, index: -1 };\n\n@Injectable()\nexport class SearchBuilderFocusService {\n\n    focus$ = new BehaviorSubject<SearchBuilderFocus>(UNSET_FOCUS);\n\n    /**\n     * Set focus on a search builder component.\n     * @param groupId The `id` of the group containing the component.\n     * @param index The (zero-based) index of the component.\n     */\n    setFocus(groupId: string, index: number): void {\n        this.focus$.next({ groupId: groupId, index: index });\n    }\n\n    /**\n     * Removes focus from all components. If focus is not on a search builder component, this does nothing.\n     */\n    clearFocus(): void {\n        this.focus$.next(UNSET_FOCUS);\n    }\n}\n\nexport interface SearchBuilderFocus {\n    groupId: string;\n    index: number;\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(\n    private _searchBuilderService: SearchBuilderService,\n    private _searchBuilderFocusService: SearchBuilderFocusService\n  ) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query and return focus to the previous field.\n   */\n  removeAtIndex(index: number): void {\n\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(index, 1);\n\n    // Focus the previous item if available\n    this._searchBuilderFocusService.setFocus(this._id, index <= 0 ? 0 : index - 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  templateUrl: './search-builder-group.component.html',\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit, OnDestroy {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  focusIndex: number = -1;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(\n    public searchBuilderGroupService: SearchBuilderGroupService,\n    private _searchBuilderFocusService: SearchBuilderFocusService\n  ) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have an id attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n\n    // Track focus for child components\n    this._searchBuilderFocusService.focus$.pipe(takeUntil(this._onDestroy)).subscribe(focus => {\n      this.focusIndex = (focus.groupId === this.id) ? focus.index : -1;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  addField(event: MouseEvent): void {\n    this.add.emit(event);\n  }\n\n  removeFieldAtIndex(index: number, field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.removeAtIndex(index);\n    this.remove.emit(field);\n  }\n\n  setFocus(index: number): void {\n    this._searchBuilderFocusService.setFocus(this.id, index);\n  }\n\n  clearFocus(): void {\n    this._searchBuilderFocusService.clearFocus();\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { delay, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { BaseSearchComponent } from '../search-components/base-search.component';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit, OnDestroy {\n\n    @Input('uxSearchBuilderOutlet') outlet: string;\n    @Input('uxSearchBuilderOutletContext') context: any;\n    @Input('uxSearchBuilderOutletGroupId') groupId: string;\n    @Input('uxSearchBuilderOutletIndex') index: number;\n\n    private _componentRef: ComponentRef<BaseSearchComponent>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderFocusService: SearchBuilderFocusService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.outlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory<BaseSearchComponent>(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.context.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.context;\n        this._componentRef.instance.config = config;\n\n        this._searchBuilderFocusService.focus$\n            .pipe(distinctUntilChanged(), delay(0), takeUntil(this._onDestroy))\n            .subscribe(focus => {\n                this._componentRef.instance.focus = (focus.groupId === this.groupId && focus.index === this.index);\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  templateUrl: './search-builder.component.html',\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, delay, distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TagInputComponent } from '../tag-input/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    templateUrl: 'select.component.html',\r\n    providers: [SELECT_VALUE_ACCESSOR],\r\n    host: {\r\n        'tabindex': '0'\r\n    }\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    set value(value: any) {\r\n        this._value$.next(value);\r\n    }\r\n    get value() {\r\n        return this._value$.value;\r\n    }\r\n\r\n    @Input()\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n    }\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n\r\n    @Input()\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n    @Input() autocomplete: string = 'off';\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('tagInput') tagInput: TagInputComponent;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value$ = new BehaviorSubject<any>(null);\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Emit change events\r\n        this._value$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.valueChange.emit(value);\r\n            this.propagateChange(value);\r\n        });\r\n\r\n        this._input$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.inputChange.emit(value);\r\n        });\r\n\r\n        // Changes to the input field\r\n        this._input$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        this.filter$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => value && value.length > 0)\r\n        ).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // Update the single-select input when the model changes\r\n        this._value$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            distinctUntilChanged(),\r\n            delay(0),\r\n            filter(value => value !== null && !this.multiple)\r\n        ).subscribe(value => {\r\n            this.input = this.getDisplay(value);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('focus')\r\n    onfocus(): void {\r\n        if (this.singleInput) {\r\n            this.singleInput.nativeElement.focus();\r\n        } else if (this.tagInput) {\r\n            this.tagInput.focus();\r\n        }\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this.value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { BACKSPACE, DELETE, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { tick } from '../../common/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    exportAs: 'ux-tag-input',\r\n    templateUrl: 'tag-input.component.html',\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input() autocomplete: string = 'off';\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Workaround for EL-3224 - No longer needed\r\n     */\r\n    @Input() trackAriaDescendant: boolean = true;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n    typeahead: TypeaheadComponent;\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _subscription: Subscription;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n\r\n        this.typeaheadQuery.changes.pipe(takeUntil(this._onDestroy))\r\n            .subscribe((query) => this.connectTypeahead(query.first));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    writeValue(value: any[]): void {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    /**\r\n     * Set focus on the input field.\r\n     */\r\n    focus(): void {\r\n        if (this.tagInput) {\r\n            this.tagInput.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate(): void {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.which) {\r\n            case ENTER:\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n\r\n            case BACKSPACE:\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            case DELETE:\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n\r\n            case LEFT_ARROW:\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            case RIGHT_ARROW:\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout')\r\n    focusOutHandler(): void {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler(): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput(): void {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any): void {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param delta Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(delta: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += delta;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number): void {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible(): boolean {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent): void {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n            this._subscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._subscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            // Set up event handler for the highlighted element\r\n            // Added a delay to move it out of the current change detection cycle\r\n            this._subscription.add(\r\n                this.typeahead.highlightedElementChange.pipe(tick())\r\n                    .subscribe((element: HTMLElement) => this.highlightedElement = element)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.which) {\r\n            case SPACE:\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    get id(): string {\n        return `ux-search-builder-search-component-${this._id}`;\n    }\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n    focus: boolean;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    constructor(private _searchBuilderService: SearchBuilderService) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    templateUrl: './date-range.component.html'\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  templateUrl: './date.component.html'\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  templateUrl: './select.component.html'\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  templateUrl: './text.component.html'\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { PopoverModule } from '../popover/index';\nimport { SelectModule } from '../select/index';\nimport { SearchBuilderFocusService } from './search-builder-focus.service';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\n\n@NgModule({\n  imports: [\n    AccessibilityModule,\n    CommonModule,\n    DateTimePickerModule,\n    FocusIfModule,\n    FormsModule,\n    PopoverModule,\n    SelectModule,\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ],\n  providers: [\n    SearchBuilderFocusService\n  ]\n})\nexport class SearchBuilderModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy<T = any> {\n\n  constructor(protected selectionService?: SelectionService<T>) { }\n\n  setSelectionService(selectionService: SelectionService<T>): void {\n    this.selectionService = selectionService;\n  }\n\n  mousedown(event: MouseEvent, data: T): void { }\n\n  click(event: MouseEvent, data: T): void { }\n\n  keydown(event: KeyboardEvent, data: T): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: T[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: T[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: T[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n\n    // call deselect on all items in the dataset\n    this.selectionService.deselectAll();\n  }\n\n  destroy(): void { }\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy<T> extends SelectionStrategy<T> {\n\n  // store the most recently selected row\n  private _selection: Selection<T> = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: T): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: T): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n      case DOWN_ARROW:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n\n      case SPACE:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data);\n\n        // also activate the item\n        this.selectionService.activate(data);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: T): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: T): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  protected multipleSelect(data: T): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: T): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: T): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  protected clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): T[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: T): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.which === UP_ARROW);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection<T> {\n  start: T;\n  end: T;\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { RowSelectionStrategy } from './row-selection.strategy';\r\n\r\nexport class RowAltSelectionStrategy<T> extends RowSelectionStrategy<T> {\r\n    keydown(event: KeyboardEvent, data: T): void {\r\n        switch (event.which) {\r\n            case UP_ARROW:\r\n            case DOWN_ARROW:\r\n                event.preventDefault();\r\n                this.handleCursorKey(event, data);\r\n                break;\r\n\r\n            case SPACE:\r\n                event.preventDefault();\r\n                this.selectionService.strategy.toggle(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the sibling item when arrow keys are pressed\r\n     */\r\n    private handleCursorKey(event: KeyboardEvent, data: T): void {\r\n        // determine which modifier keys are pressed\r\n        const { ctrlKey, shiftKey } = event;\r\n\r\n        // if no modifier keys are pressed then deselect all and clear the selection\r\n        if (!ctrlKey && !shiftKey) {\r\n            this.deselectAll();\r\n            this.clearSelection(false);\r\n        }\r\n\r\n        if (ctrlKey) {\r\n            this.selectionService.activateSibling(event.which === UP_ARROW);\r\n        } else {\r\n            const sibling = this.selectionService.getSibling(event.which === UP_ARROW);\r\n            this.multipleSelect(sibling ? sibling : data);\r\n        }\r\n    }\r\n}\r\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy<T> extends SelectionStrategy<T> {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(_event: MouseEvent, data: T): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: T): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n        event.preventDefault();\n        this.selectionService.activateSibling(true);\n        return;\n\n      case DOWN_ARROW:\n        event.preventDefault();\n        this.selectionService.activateSibling(false);\n        return;\n\n      case SPACE:\n        event.preventDefault();\n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: T): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowAltSelectionStrategy } from './strategies/row-alt-selection.strategy';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService<T> implements OnDestroy {\n\n  set dataset(dataset: ReadonlyArray<T>) {\n    this._dataset = dataset;\n    if (this._dataset.indexOf(this._active) === -1) {\n      this.setFirstItemFocusable();\n    }\n  }\n\n  get dataset(): ReadonlyArray<T> {\n    return this._dataset;\n  }\n\n  strategy: SelectionStrategy<T> = new SimpleSelectionStrategy<T>(this);\n  isEnabled: boolean = true;\n  isClickEnabled: boolean = true;\n  isKeyboardEnabled: boolean = true;\n\n  focus$ = new BehaviorSubject<T>(null);\n  active$ = new BehaviorSubject<T>(null);\n  selection$ = new BehaviorSubject<T[]>([]);\n\n  private _active: T;\n  private _dataset: ReadonlyArray<T> = [];\n  private _selection = new Set();\n  private _strategyToDestroy: SelectionStrategy<T> = this.strategy;\n\n  ngOnDestroy(): void {\n    if (this._strategyToDestroy) {\n      this._strategyToDestroy.destroy();\n    }\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: T[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: T[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove all items from the list of selected items\n   */\n  deselectAll(): void {\n    // remove all items in the array\n    this.deselect(...this._dataset);\n\n    // clear the set in case any items have been removed from the DOM but are still selected\n    this._selection.clear();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: T[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: T): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  getSelectionState(data: T): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setStrategy(mode: SelectionMode | SelectionStrategy<T>): void {\n\n    if (this._strategyToDestroy) {\n      // Destroy previous strategy if it was created internally\n      this._strategyToDestroy.destroy();\n      this._strategyToDestroy = null;\n    }\n\n    if (mode instanceof SelectionStrategy) {\n\n      // Custom strategy - pass in the service instance\n      this.strategy = mode;\n      this.strategy.setSelectionService(this);\n\n    } else {\n\n      switch (mode.toLowerCase().trim()) {\n\n        case 'simple':\n          this.strategy = this._strategyToDestroy = new SimpleSelectionStrategy<T>(this);\n          break;\n\n        case 'row':\n          this.strategy = this._strategyToDestroy = new RowSelectionStrategy<T>(this);\n          break;\n\n        case 'row-alt':\n          this.strategy = this._strategyToDestroy = new RowAltSelectionStrategy<T>(this);\n          break;\n\n        default:\n          throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple', 'row', or 'row-alt'.`);\n      }\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: T): void {\n    this._active = data;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this._active = null;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Return the next or previous sibling of the current active item.\n   * @param previous If true, the previous sibling will be returned.\n   */\n  getSibling(previous: boolean = false): T {\n\n    // check if there is a current active item\n    if (!this._active) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(this._active);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    return target;\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): T {\n\n    const target = this.getSibling(previous);\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.isEnabled = !disabled;\n\n    // clear any stateful data\n    this._active = null;\n    this.active$.next(this._active);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n\n  private setFirstItemFocusable(): void {\n    if (this._dataset.length > 0) {\n      this.focus$.next(this._dataset[0]);\n      this._active = this._dataset[0];\n    } else {\n      this._active = null;\n    }\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row' | 'row-alt';","import { Component, ElementRef, HostBinding, HostListener, Input, OnDestroy } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../../common/index';\nimport { SelectionService } from '../../../directives/selection/selection.service';\n\n@Component({\n    selector: 'ux-select-list-item',\n    templateUrl: './select-list-item.component.html',\n    host: {\n        role: 'listitem'\n    }\n})\nexport class SelectListItemComponent<T> implements OnDestroy {\n\n    @Input() data: T;\n    @HostBinding('tabindex') tabindex: number = -1;\n\n    @HostBinding('class.selected')\n    @HostBinding('attr.aria-selected')\n    set selected(isSelected: boolean) {\n        isSelected ? this._selection.select(this.data) : this._selection.deselect(this.data);\n    }\n\n    get selected(): boolean {\n        return this._selection.isSelected(this.data);\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _selection: SelectionService<T>, elementRef: ElementRef) {\n\n        _selection.active$.pipe(takeUntil(this._onDestroy), filter(data => data === this.data)).subscribe(active => {\n            _selection.focus$.next(active);\n            elementRef.nativeElement.focus();\n        });\n\n        // make this item tabbable or not based on the focused element\n        _selection.focus$.pipe(takeUntil(this._onDestroy), tick())\n            .subscribe(focused => this.tabindex = focused === this.data ? 0 : -1);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMouseDown(event: MouseEvent): void {\n        this._selection.strategy.mousedown(event, this.data);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent): void {\n        this._selection.strategy.click(event, this.data);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._selection.strategy.keydown(event, this.data);\n    }\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class MultipleSelectListStrategy<T> extends SelectionStrategy<T> {\n\n    private _lastSelection: T;\n\n    /** Prevent the browser from highlighting text on shift click */\n    mousedown(event: MouseEvent): void {\n        event.preventDefault();\n    }\n\n    click(event: MouseEvent, data: T): void {\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // if the shift key is pressed we want to perform a multiple selection\n        if (event.shiftKey) {\n            return this.multipleSelect(data);\n        }\n\n        // otherwise perform a single toggle selection\n        if (this.selectionService.isSelected(data)) {\n            this.deselect(data);\n            this._lastSelection = null;\n        } else {\n            this.select(data);\n            this._lastSelection = data;\n        }\n    }\n\n    keydown(event: KeyboardEvent, data: T): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(true);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(false);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.toggle(data);\n                this._lastSelection = this.selectionService.isSelected(data) ? data : null;\n                break;\n        }\n    }\n\n    multipleSelect(data: T): void {\n\n        // if there is no start item selected\n        if (!this._lastSelection) {\n            this.select(data);\n            this._lastSelection = data;\n            return;\n        }\n\n        // if there already is a start item then find the items in the range\n        this.select(...this.getSelectedItems(this._lastSelection, data));\n\n        // store the selection end point\n        this._lastSelection = data;\n    }\n\n    private getSelectedItems(start: T, end: T): T[] {\n\n        // get the latest dataset\n        const { dataset } = this.selectionService;\n\n        // get the indexes of the start and end point\n        const startIdx = dataset.indexOf(start);\n        const endIdx = dataset.indexOf(end);\n\n        // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n        return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n    }\n\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class SingleSelectListStrategy<T> extends SelectionStrategy<T> {\n\n    click(_event: MouseEvent, data: T): void {\n\n        if (!this.selectionService.isSelected(data)) {\n            // deselect all other items\n            this.deselectAll();\n        }\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // toggle the selected state of the item\n        this.toggle(data);\n    }\n\n    keydown(event: KeyboardEvent, data: T): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(true);\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(false);\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.click(null, data);\n                break;\n        }\n    }\n\n}","import { AfterContentInit, Component, ContentChildren, EventEmitter, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionService } from '../../directives/selection/selection.service';\nimport { MultipleSelectListStrategy } from './multiple-select-list.strategy';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SingleSelectListStrategy } from './single-select-list.strategy';\n\n@Component({\n    selector: 'ux-select-list',\n    templateUrl: './select-list.component.html',\n    providers: [SelectionService],\n    host: {\n        role: 'list'\n    }\n})\nexport class SelectListComponent<T> implements AfterContentInit, OnDestroy {\n\n    /** Determine if we allow multiple items to be selected */\n    @Input() set multiple(multiple: boolean) {\n        this._selection.strategy.deselectAll();\n        this._selection.setStrategy(multiple ? new MultipleSelectListStrategy<T>() : new SingleSelectListStrategy<T>());\n    }\n\n    /** Set the selected items */\n    @Input() set selected(selected: T | T[]) {\n\n        // deselect all currently selected items\n        this._selection.deselectAll();\n\n        // select only the specified items\n        if (Array.isArray(selected)) {\n            this._selection.select(...selected);\n        } else {\n            this._selection.select(selected);\n        }\n    }\n\n    /** Emit when the selection changes */\n    @Output() selectedChange = new EventEmitter<T[]>();\n\n    /** Find all select list items */\n    @ContentChildren(SelectListItemComponent) items: QueryList<SelectListItemComponent<T>>;\n\n    /** Automatically unsubscribe all observables */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _selection: SelectionService<T>) {\n        // set the selection strategy to single by default\n        this._selection.setStrategy(new SingleSelectListStrategy<T>());\n\n        // emit the selection changes when they occur\n        this._selection.selection$.pipe(takeUntil(this._onDestroy))\n            .subscribe(selection => this.selectedChange.emit(selection));\n    }\n\n    ngAfterContentInit(): void {\n\n        // supply the initial item set\n        this._selection.dataset = this.items.map(item => item.data);\n\n        // if the item set changes update the list\n        this.items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this._selection.dataset = this.items.map(item => item.data));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { NgModule } from '@angular/core';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SelectListComponent } from './select-list.component';\n\n@NgModule({\n    declarations: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n    exports: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n})\nexport class SelectListModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\nimport { SidePanelComponent } from './side-panel.component';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        FocusIfModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    templateUrl: './spark.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n    @Input('aria-label') ariaLabel: string;\n    @Input('aria-description') ariaDescription: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';\n    private _barColor: string | string[] = [];\n\n    @Input()\n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input()\n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input()\n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable, OnDestroy, QueryList } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { ResizableTableColumnComponent } from './resizable-table-column.component';\n\n@Injectable()\nexport class ResizableTableService implements OnDestroy {\n\n  /** Indicate when the columns are ready */\n  isInitialised$ = new BehaviorSubject<boolean>(false);\n\n  /** Determine if we are currently resizing */\n  isResizing: boolean = false;\n\n  /** Store the percentage widths of each column */\n  columns: ReadonlyArray<number> = [];\n\n  /** Store the current width of the table */\n  tableWidth: number = 0;\n\n  /** Emit an event whenever a column is resized */\n  onResize$ = new Subject<void>();\n\n  /** Store the QueryList of columns */\n  private _columns: QueryList<ResizableTableColumnComponent>;\n\n  /** Cleanup when service is disposed */\n  ngOnDestroy(): void {\n    this.onResize$.complete();\n  }\n\n  /** Store the size of each column */\n  setColumns(columns: QueryList<ResizableTableColumnComponent>): void {\n\n    // store the current columns\n    this._columns = columns;\n\n    // store the sizes\n    this.columns = columns.map(column => (column.getNaturalWidth() / this.tableWidth) * 100);\n\n    // indicate we are now initialised\n    if (this.isInitialised$.value === false) {\n      this.isInitialised$.next(true);\n    }\n  }\n\n  /** Update the resizing state */\n  setResizing(isResizing: boolean): void {\n    this.isResizing = isResizing;\n  }\n\n  /** Get the width of a column in a specific unit */\n  getColumnWidth(index: number, unit: ColumnUnit, columns: ReadonlyArray<number> = this.columns): number {\n\n    switch (unit) {\n\n      case ColumnUnit.Percentage:\n        return columns[index];\n\n      case ColumnUnit.Pixel:\n        return (this.tableWidth / 100) * columns[index];\n    }\n\n  }\n\n  /** Allow setting the column size in any unit */\n  setColumnWidth(index: number, value: number, unit: ColumnUnit, columns: ReadonlyArray<number> = this.columns): ReadonlyArray<number> {\n\n    // create a new array so we keep the instance array immutable\n    const sizes = [...columns];\n\n    switch (unit) {\n\n      case ColumnUnit.Percentage:\n        sizes[index] = value;\n        break;\n\n      case ColumnUnit.Pixel:\n        sizes[index] = (value / this.tableWidth) * 100;\n        break;\n    }\n\n    // update the instance variable\n    return sizes;\n  }\n\n  /** Resize a column by a specific pixel amount */\n  resizeColumn(index: number, delta: number, isDragging: boolean = true): void {\n\n    // get the sibling column that will also be resized\n    const sibling = this.getSiblingColumn(index);\n\n    // if there is no sibling that can be resized then stop here\n    if (!sibling) {\n      return;\n    }\n\n    // create a new array for the sizes\n    let columns = [...this.columns] as number[];\n\n    // resize the column to the desired size\n    columns = this.setColumnWidth(index, Math.round(this.getColumnWidth(index, ColumnUnit.Pixel) + delta), ColumnUnit.Pixel, columns) as number[];\n    columns = this.setColumnWidth(sibling, Math.round(this.getColumnWidth(sibling, ColumnUnit.Pixel) - delta), ColumnUnit.Pixel, columns) as number[];\n\n    // if the move is not possible then stop here\n    if (!this.isWidthValid(index, this.getColumnWidth(index, ColumnUnit.Pixel, columns)) || !this.isWidthValid(sibling, this.getColumnWidth(sibling, ColumnUnit.Pixel, columns))) {\n      return;\n    }\n\n    // check that we add up to exactly 100%\n    const total = columns.reduce((count, column) => column + count, 0);\n\n    // if the columns to not add to 100 ensure we make them\n    if (total !== 100) {\n\n      // get the column with a variable width\n      const target = this.getVariableColumn(100 - total);\n\n      if (target && !isDragging) {\n        columns[this._columns.toArray().indexOf(target)] += (100 - total);\n      } else {\n        columns[index] += (100 - total);\n      }\n    }\n\n    // store the new sizes\n    this.columns = columns;\n\n    // emit the resize event for each column\n    this.onResize$.next();\n  }\n\n  getVariableColumn(delta: number): ResizableTableColumnComponent | null {\n\n    // get all variable width columns that are not disabled\n    const variableColumns = this._columns.filter(column => !column.isFixedWidth && !column.disabled);\n\n    // find one that is greater than its min width by enough\n    return variableColumns.reverse().find(column => this.getColumnWidth(column.getCellIndex(), ColumnUnit.Pixel) >= column.minWidth + delta);\n  }\n\n  getColumn(index: number): ResizableTableColumnComponent | null {\n    return this._columns ? this._columns.toArray()[index] : null;\n  }\n\n  getColumnDisabled(index: number): boolean {\n    return this.getColumn(index) ? this.getColumn(index).disabled : false;\n  }\n\n  /** Determine whether a column is above or below its minimum width */\n  private isWidthValid(index: number, width: number): boolean {\n\n    // get the column at a given position\n    const column = this.getColumnInstance(index);\n\n    // determine if the specified width is greater than the min width\n    return column && width >= column.minWidth;\n  }\n\n  /** Get the next column in the sequence of columns */\n  private getSiblingColumn(index: number): number | null {\n\n    // find the first sibling that is not disabled\n    for (let idx = index + 1; idx < this.columns.length; idx++) {\n\n      const sibling = this.getColumnInstance(idx);\n\n      if (!sibling || !sibling.disabled) {\n        return idx;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the column class from our query list */\n  private getColumnInstance(index: number): ResizableTableColumnComponent | null {\n    return this._columns ? this._columns.toArray()[index] : null;\n  }\n\n}\n\nexport enum ColumnUnit {\n  Pixel,\n  Percentage\n}","import { Directive, ElementRef, HostBinding } from '@angular/core';\nimport { ColumnUnit, ResizableTableService } from './resizable-table.service';\n\n@Directive({\n  selector: '[uxResizableTableCell]'\n})\nexport class ResizableTableCellDirective {\n\n\n  /** The percentage width of the column */\n  @HostBinding('style.width') get width(): string {\n\n    return this._table.isResizing || this._table.getColumnDisabled(this.getCellIndex()) ?\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)}px` :\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%`;\n  }\n\n  /** The flex width of the column */\n  @HostBinding('style.flex') get flex(): string {\n\n    // if we are resizing then always return 'none' to allow free movement\n    if (this._table.isResizing || this._table.getColumnDisabled(this.getCellIndex())) {\n      return 'none';\n    }\n\n    return this._table.isInitialised$.value ? `0 1 ${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%` : '';\n  }\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService) { }\n\n  /** Get the column index this cell is part of */\n  private getCellIndex(): number {\n    return (this._elementRef.nativeElement as HTMLTableCellElement).cellIndex;\n  }\n}\n","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Component, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ColumnUnit, ResizableTableService } from './resizable-table.service';\n\n@Component({\n  selector: '[uxResizableTableColumn]',\n  templateUrl: './resizable-table-column.component.html',\n  host: {\n    class: 'ux-resizable-table-column'\n  }\n})\nexport class ResizableTableColumnComponent implements OnDestroy {\n\n  /** Disabled the column resizing */\n  @Input() disabled: boolean = false;\n\n  /** Define the width of a column */\n  @Input() set width(width: number) {\n\n    // ensure width is a valid number\n    this._width = coerceNumberProperty(width);\n\n    // note that this column has a fixed width\n    this.isFixedWidth = true;\n\n    // if we have not initialised then set the element width\n    if (!this._table.isInitialised$.value) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'width', `${this._width}px`);\n    } else {\n\n      // if it is initialised then resize the column\n      const currentWidth = this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel);\n\n      // resize the column by the difference in size\n      this._table.resizeColumn(this.getCellIndex(), this._width - currentWidth, false);\n    }\n  }\n\n  /** Emit the current column width */\n  @Output() widthChange = new EventEmitter<number>();\n\n  /** The percentage width of the column */\n  @HostBinding('style.width') get columnWidth(): string {\n\n    if (!this._table.isInitialised$.value) {\n      return;\n    }\n\n    if (this.disabled) {\n      return `${this._width}px`;\n    }\n\n    return this._table.isResizing ?\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)}px` :\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%`;\n  }\n\n  /** The flex width of the column */\n  @HostBinding('style.flex') get flex(): string {\n\n    // if we are resizing then always return 'none' to allow free movement\n    if (this._table.isResizing || this.disabled) {\n      return 'none';\n    }\n\n    return this._table.isInitialised$.value ? `0 1 ${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%` : '';\n  }\n\n  /** Get the minimum width allowed by the column */\n  get minWidth(): number {\n    // determine the minimum width of the column based on its computed CSS value\n    const computed = parseFloat(getComputedStyle(this._elementRef.nativeElement).minWidth);\n\n    // if it is disabled use its current width - otherwise use its CSS min width if it is valid\n    return this.disabled ? this._elementRef.nativeElement.offsetWidth : isNaN(computed) ? 0 : computed;\n  }\n\n  /** Determine if this column is a variable width column */\n  isFixedWidth: boolean = false;\n\n  /** Store the width specifically set by the input */\n  private _width: number;\n\n  /** Store the position of the mouse within the drag hanlde */\n  private _offset: number;\n\n  /** Emit when all observables should be unsubscribed */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService, private _renderer: Renderer2) {\n\n    // initially emit the size when we have initialised\n    _table.isInitialised$.pipe(takeUntil(this._onDestroy), filter(isInitialised => isInitialised))\n      .subscribe(() => this.widthChange.emit(_table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)));\n\n    // ensure the correct width gets emitted on column size change\n    _table.onResize$.pipe(takeUntil(this._onDestroy))\n      .subscribe(() => this.widthChange.emit(_table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)));\n  }\n\n  /** Cleanup when component is destroyed */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Get the natural pixel width of the column */\n  getNaturalWidth(): number {\n    return this._width || this._elementRef.nativeElement.offsetWidth;\n  }\n\n  /** When the dragging starts */\n  onDragStart(event: MouseEvent): void {\n\n    // determine the mouse position within the handle\n    this._offset = event.clientX - (event.target as HTMLElement).getBoundingClientRect().left;\n  }\n\n  /** When the mouse is moved */\n  onDragMove(event: MouseEvent, handle: HTMLDivElement): void {\n\n    // get the current mouse position\n    const mouseX = event.pageX - pageXOffset;\n\n    // position of the drag handle\n    const { left } = handle.getBoundingClientRect();\n\n    // determine how much the mouse has moved since the last update\n    const delta = mouseX - (left + this._offset);\n\n    // perform resizing\n    this._table.resizeColumn(this.getCellIndex(), delta);\n\n    // set the resizing state\n    this._table.setResizing(true);\n  }\n\n  /** When the dragging ends */\n  onDragEnd(): void {\n    this._table.setResizing(false);\n  }\n\n  /** Shrink the column when the left arrow key is pressed */\n  onMoveLeft(): void {\n    this._table.resizeColumn(this.getCellIndex(), -10);\n  }\n\n  /** Grow the column when the right arrow key is pressed */\n  onMoveRight(): void {\n    this._table.resizeColumn(this.getCellIndex(), 10);\n  }\n\n  /** Get the column index this cell is part of */\n  getCellIndex(): number {\n    return (this._elementRef.nativeElement as HTMLTableCellElement).cellIndex;\n  }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, OnDestroy, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { ResizableTableColumnComponent } from './resizable-table-column.component';\nimport { ResizableTableService } from './resizable-table.service';\n\n@Directive({\n  selector: '[uxResizableTable]',\n  providers: [ResizableTableService],\n  host: {\n    class: 'ux-resizable-table'\n  }\n})\nexport class ResizableTableDirective implements AfterViewInit, OnDestroy {\n\n  /** Get all the column headers */\n  @ContentChildren(ResizableTableColumnComponent, { descendants: true }) columns: QueryList<ResizableTableColumnComponent>;\n\n  /** Unsubscribe from the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService, resize: ResizeService) {\n    // watch for the table being resized\n    resize.addResizeListener(this._elementRef.nativeElement)\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => _table.tableWidth = this.getScrollWidth());\n  }\n\n  /** Once we have the columns make them resizable and watch for changes to columns */\n  ngAfterViewInit(): void {\n\n    // ensure we initially set the table width\n    this._table.tableWidth = this.getScrollWidth();\n\n    // set the columns - prevent expression changed error\n    requestAnimationFrame(() => this._table.setColumns(this.columns));\n\n    // watch for any future changes to the columns\n    this.columns.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this._table.setColumns(this.columns));\n  }\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Get the smallest tbody width taking into account scrollbars (uxFixedHeaderTable) */\n  private getScrollWidth(): number {\n    return Array.from((this._elementRef.nativeElement as HTMLTableElement).tBodies)\n      .reduce((width, tbody) => Math.min(width, tbody.scrollWidth), (this._elementRef.nativeElement as HTMLTableElement).offsetWidth);\n  }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DragModule } from '../../directives/drag/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ResizableTableCellDirective } from './table-column-resize/resizable-table-cell.directive';\nimport { ResizableTableColumnComponent } from './table-column-resize/resizable-table-column.component';\nimport { ResizableTableDirective } from './table-column-resize/resizable-table.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        DragModule,\n        ResizeModule,\n        A11yModule\n    ],\n    declarations: [\n        ResizableTableDirective,\n        ResizableTableColumnComponent,\n        ResizableTableCellDirective\n    ],\n    exports: [\n        ResizableTableDirective,\n        ResizableTableColumnComponent,\n        ResizableTableCellDirective\n    ]\n})\nexport class TableModule {}\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    templateUrl: './timeline.component.html'\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\nlet uniqueId: number = 0;\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    templateUrl: './timeline-event.component.html'\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() id: string = `ux-timeline-event-${uniqueId++}`;\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    templateUrl: './toggleswitch.component.html',\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolbarSearchComponent } from './toolbar-search.component';\r\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\r\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\r\n\r\nconst DECLARATIONS = [\r\n    ToolbarSearchComponent,\r\n    ToolbarSearchFieldDirective,\r\n    ToolbarSearchButtonDirective\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: DECLARATIONS,\r\n    declarations: DECLARATIONS,\r\n    providers: [],\r\n})\r\nexport class ToolbarSearchModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    templateUrl: './virtual-scroll.component.html'\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\r\n\r\nimport { AutoGrowDirective } from './auto-grow.directive';\r\n\r\n@NgModule({\r\n    exports: [AutoGrowDirective],\r\n    declarations: [AutoGrowDirective]\r\n})\r\nexport class AutoGrowModule { }\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n  selector: '[uxOverflowObserver], [uxOverflowHorizontalObserver], [uxOverflowVerticalObserver]',\n  exportAs: 'ux-overflow-observer'\n})\nexport class OverflowDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  /** Allow a observable to be used to check for overflow */\n  @Input() trigger: Observable<void>;\n\n  /** Allow overflow to be within a range before emitting */\n  @Input() tolerance: number = 0;\n\n  /** Emit when there is a change to the overflow state - horizontal or vertical */\n  @Output() uxOverflowObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the horizontal axis */\n  @Output() uxOverflowHorizontalObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the vertical axis */\n  @Output() uxOverflowVerticalObserver = new EventEmitter<boolean>();\n\n  /** Store the overflow state on both axis */\n  private _state = { horizontalOverflow: false, verticalOverflow: false };\n\n  /** Unsubscribe from all the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** Set up the trigger if specified */\n  ngOnInit(): void {\n    if (this.trigger) {\n      this.trigger.pipe(takeUntil(this._onDestroy)).subscribe(() => this.checkForOverflow());\n    }\n  }\n\n  /** Perform an intial check for overflow */\n  ngAfterViewInit(): void {\n    requestAnimationFrame(() => this.checkForOverflow());\n  }\n\n  /** Unsubscribe from the trigger */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Programmatically trigger check for overflow */\n  checkForOverflow(): void {\n\n    const { offsetWidth, offsetHeight, scrollWidth, scrollHeight } = this._elementRef.nativeElement;\n    const horizontalOverflow = (scrollWidth - offsetWidth) > this.tolerance;\n    const verticalOverflow = (scrollHeight - offsetHeight) > this.tolerance;\n\n    if (horizontalOverflow !== this._state.horizontalOverflow) {\n      this.uxOverflowHorizontalObserver.emit(horizontalOverflow);\n    }\n\n    if (verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowVerticalObserver.emit(verticalOverflow);\n    }\n\n    if (horizontalOverflow !== this._state.horizontalOverflow || verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowObserver.emit((horizontalOverflow || verticalOverflow));\n    }\n\n    // store the state\n    this._state = { horizontalOverflow, verticalOverflow };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OverflowDirective } from './overflow/overflow-observer.directive';\n\n@NgModule({\n  exports: [OverflowDirective],\n  declarations: [OverflowDirective]\n})\nexport class ObserversModule { }\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { SelectionService } from './selection.service';\r\n\r\n@Directive({\r\n    selector: '[uxSelectionItem]',\r\n    exportAs: 'ux-selection-item'\r\n})\r\nexport class SelectionItemDirective<T> implements OnInit, OnDestroy {\r\n\r\n    @Input() uxSelectionItem: T;\r\n\r\n    @Input()\r\n    @HostBinding('class.ux-selection-selected')\r\n    @HostBinding('attr.aria-selected')\r\n    set selected(selected: boolean) {\r\n        selected ? this.select() : this.deselect();\r\n    }\r\n\r\n    get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    @Input() tabindex: number = null;\r\n\r\n    @Output() selectedChange = new EventEmitter<boolean>();\r\n\r\n    @HostBinding('class.ux-selection-focused') active: boolean = false;\r\n\r\n    @HostBinding('attr.tabindex')\r\n    get attrTabIndex(): number {\r\n        return (this.tabindex !== null) ? this.tabindex : this._managedTabIndex;\r\n    }\r\n\r\n    private _selected: boolean = false;\r\n    private _managedTabIndex: number = -1;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _selectionService: SelectionService<T>, private _elementRef: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        // if there is no associated data then throw an error\r\n        if (!this.uxSelectionItem) {\r\n            throw new Error('The uxSelectionItem directive must have data associated with it.');\r\n        }\r\n\r\n        // subscribe to selection changes on this item\r\n        this._selectionService.getSelectionState(this.uxSelectionItem).pipe(takeUntil(this._onDestroy)).subscribe(selected => {\r\n\r\n            // store the selected state\r\n            this._selected = selected;\r\n\r\n            // emit the selected state\r\n            this.selectedChange.emit(selected);\r\n        });\r\n\r\n        this._selected = this._selectionService.isSelected(this.uxSelectionItem);\r\n\r\n        this.selectedChange.emit(this._selected);\r\n\r\n        // subscribe to changes to the active state\r\n        this._selectionService.active$.pipe(takeUntil(this._onDestroy), map(active => active === this.uxSelectionItem)).subscribe(active => {\r\n\r\n            // store the focus state\r\n            this.active = active;\r\n\r\n            // if it is active then focus the element\r\n            if (active === true) {\r\n                this._selectionService.focus$.next(this.uxSelectionItem);\r\n                this._elementRef.nativeElement.focus();\r\n            }\r\n        });\r\n\r\n        // Subscribe to changes to the focus target\r\n        // This is mostly the same as active$, except that it has an initial value of the first item in the collection.\r\n        this._selectionService.focus$.pipe(takeUntil(this._onDestroy)).subscribe(focusTarget => {\r\n            this._managedTabIndex = (focusTarget === this.uxSelectionItem) ? 0 : -1;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    click(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.click(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    mousedown(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keydown(event: KeyboardEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isKeyboardEnabled) {\r\n            this._selectionService.strategy.keydown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('focus')\r\n    focus(): void {\r\n        // If tabbed to from outside the component, activate.\r\n        if (this._selectionService.active$.getValue() !== this.uxSelectionItem) {\r\n            this._selectionService.activate(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select this item using the current strategy\r\n     */\r\n    select(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.select(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselect this item using the current strategy\r\n     */\r\n    deselect(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.deselect(this.uxSelectionItem);\r\n        }\r\n    }\r\n}\r\n","import { AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\nimport { SelectionStrategy } from './strategies/selection.strategy';\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective<T> implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: T[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode | SelectionStrategy<T>) {\n    this._selectionService.setStrategy(mode);\n  }\n\n  @Input() set clickSelection(isClickEnabled: boolean) {\n    this._selectionService.isClickEnabled = isClickEnabled;\n  }\n\n  @Input() set keyboardSelection(isKeyboardEnabled: boolean) {\n    this._selectionService.isKeyboardEnabled = isKeyboardEnabled;\n  }\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number = null;\n\n  @Output() uxSelectionChange = new EventEmitter<T[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective<T>>;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _selectionService: SelectionService<T>, private _cdRef: ChangeDetectorRef) {\n    _selectionService.selection$.pipe(takeUntil(this._onDestroy)).subscribe(items => this.uxSelectionChange.emit(items));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this.items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.update());\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n\n    // Make sure that a tab target has been defined so that the component can be tabbed to.\n    if (this._selectionService.focus$.getValue() === null && this._selectionService.dataset.length > 0) {\n      this._selectionService.focus$.next(this._selectionService.dataset[0]);\n    }\n\n    // The above could trigger a change in the computed tabindex for selection items\n    this._cdRef.detectChanges();\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nexport class TreeGridState {\n    readonly loading$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        public readonly level: number,\n        public readonly setSize: number,\n        public readonly positionInSet: number) {}\n}\n","import { ChangeDetectorRef, Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridLoadFunction } from './tree-grid-load-function.type';\nimport { TreeGridState } from './tree-grid-state.class';\n\n@Injectable()\nexport class TreeGridService implements OnDestroy {\n\n    /** The raw table data */\n    data$ = new BehaviorSubject<TreeGridItem[]>([]);\n\n    /** The flattened table data */\n    rows$ = new BehaviorSubject<TreeGridItem[]>([]);\n\n    /** The function to load child items */\n    loadChildren: TreeGridLoadFunction;\n\n    /** Ensure we destroy all observables correctly */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        this.data$.pipe(takeUntil(this._onDestroy)).subscribe(data => this.rows$.next(this.getFlattenedTree(data)));\n    }\n\n    /** Unsubscribe from all observables */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Set the expanded state of a row */\n    async setExpanded(item: TreeGridItem, expanded: boolean) {\n        if (expanded) {\n            await this.getChildren(item);\n            this.insertChildren(item);\n        } else {\n            this.removeChildren(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /** A function to flatten tree data */\n    private getFlattenedTree(data: TreeGridItem[], parent?: TreeGridItem): TreeGridItem[] {\n        // flatten the nodes at this level\n        return data.reduce((previous, item, index) => {\n\n            item.state = new TreeGridState(parent ? parent.state.level + 1 : 0, data.length, index + 1);\n\n            // Convert any child nodes\n            const children = (item.children && item.expanded) ? this.getFlattenedTree(item.children, item) : [];\n\n            // return the nodes in a flattened array\n            return [...previous, item, ...children];\n        }, []);\n    }\n\n    /** Load any children dynamically */\n    private async getChildren(item: TreeGridItem): Promise<void> {\n        if (!item.children && this.loadChildren) {\n            item.state.loading$.next(true);\n\n            try {\n                item.children = await this.getNormalizedChildren(this.loadChildren(item));\n            }\n            finally {\n                item.state.loading$.next(false);\n            }\n        }\n    }\n\n    /** We want to support an array, a promise and an observable. This will return all types as a promise */\n    private async getNormalizedChildren(response: TreeGridItem[] | Promise<TreeGridItem[]> | Observable<TreeGridItem[]>): Promise<TreeGridItem[]> {\n\n        // if it is already an observable do nothing\n        if (response instanceof Observable) {\n            return await response.toPromise();\n        }\n\n        // if it is a promise wrap it as an observable\n        if (response instanceof Promise) {\n            return await response;\n        }\n\n        // if it is an array then make it an observable\n        return response;\n    }\n\n    /** Insert the children into the flattened tree at the correct location */\n    private insertChildren(parent: TreeGridItem): void {\n        if (!parent.children) {\n            return;\n        }\n\n        const row = this.rows$.getValue();\n\n        const index = row.indexOf(parent);\n\n        if (index < 0) {\n            return;\n        }\n\n        // Skip duplicates - this could happen if an already expanded child has been inserted\n        const uniqueChildren = parent.children.filter(child => row.indexOf(child) === -1);\n\n        const childRows = this.getFlattenedTree(uniqueChildren, parent);\n\n        row.splice(index + 1, 0, ...childRows);\n    }\n\n    /** Remove all rows from the flattened tree */\n    private removeChildren(parent: TreeGridItem): void {\n\n        const rows = this.rows$.getValue();\n        const index = rows.indexOf(parent);\n\n        if (index < 0) {\n            return;\n        }\n\n        while (index + 1 < rows.length && rows[index + 1].state.level > parent.state.level) {\n            rows.splice(index + 1, 1);\n        }\n    }\n}\n","import { Directive, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { distinctUntilChanged, skip, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../common/operators/tick.operator';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridService } from './tree-grid.service';\n\n@Directive({\n    selector: '[uxTreeGridRow]',\n    exportAs: 'uxTreeGridRow',\n    host: {\n        '[class.treegrid-row]': 'true'\n    }\n})\nexport class TreeGridRowDirective implements OnInit, OnDestroy {\n\n    @Input('uxTreeGridRow')\n    item: TreeGridItem;\n\n    @Input()\n    canExpand: boolean;\n\n    @Input()\n    set expanded(expanded: boolean) {\n        this._expanded$.next(!!expanded);\n    }\n    get expanded(): boolean {\n        return this._expanded$.getValue();\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @HostBinding('class.treegrid-row-loading')\n    loading: boolean = false;\n\n    @HostBinding('class.treegrid-row-expanded')\n    isExpanded: boolean = false;\n\n    private _expanded$ = new BehaviorSubject(false);\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _treeGridService: TreeGridService) {\n        this._expanded$.pipe(skip(1), tick(), distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe(expanded => {\n            this.expandedChange.emit(expanded);\n            this._treeGridService.setExpanded(this.item, expanded);\n            this.isExpanded = expanded;\n        });\n    }\n\n    ngOnInit(): void {\n\n        if (!this.item || !this.item.state) {\n            throw new Error('uxTreeGridRow should be configured with an object emitted by uxTreeGrid.rows.');\n        }\n\n        this.item.state.loading$.pipe(takeUntil(this._onDestroy))\n            .subscribe(loading => this.loading = loading);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('keydown.ArrowLeft', ['$event'])\n    collapse(event?: Event): void {\n\n        this.expanded = false;\n\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.ArrowRight', ['$event'])\n    expand(event?: Event): void {\n\n        // take into account whether or not the item can expanded\n        this.expanded = this.canExpand && true;\n\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    toggle(): void {\n        this.expanded ? this.collapse() : this.expand();\n    }\n}\n","import { Directive, HostBinding, Input } from '@angular/core';\nimport { TreeGridRowDirective } from './tree-grid-row.directive';\n\n@Directive({\n    selector: '[uxTreeGridIndent]',\n})\nexport class TreeGridIndentDirective {\n\n    /** The amount each level should be indented by */\n    @Input() uxTreeGridIndent: number;\n\n    /** The padding value applied to each level */\n    @HostBinding('style.padding-left.px')\n    get indentation(): number {\n        return this._row && this._row.item ? 7 + (this._row.item.state.level * (this.uxTreeGridIndent || 25)) : 7;\n    }\n\n    constructor(private _row: TreeGridRowDirective) {}\n}","import { Directive, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridLoadFunction } from './tree-grid-load-function.type';\nimport { TreeGridService } from './tree-grid.service';\nimport { Subject } from 'rxjs/Subject';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n    selector: '[uxTreeGrid]',\n    providers: [TreeGridService],\n    host: {\n        class: 'treegrid'\n    }\n})\nexport class TreeGridDirective implements OnInit, OnDestroy {\n    @Input('uxTreeGrid')\n    set data(data: TreeGridItem[]) {\n        this._treeGridService.data$.next(data);\n    }\n\n    @Input()\n    set loadChildren(loadChildren: TreeGridLoadFunction) {\n        this._treeGridService.loadChildren = loadChildren;\n    }\n\n    @Input()\n    rows: TreeGridItem[];\n\n    @Output()\n    rowsChange = new EventEmitter<TreeGridItem[]>();\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _treeGridService: TreeGridService) {}\n\n    ngOnInit(): void {\n        this._treeGridService.rows$.pipe(takeUntil(this._onDestroy)).subscribe(rows => this.rowsChange.emit(rows));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { TreeGridIndentDirective } from './tree-grid-indent.directive';\nimport { TreeGridRowDirective } from './tree-grid-row.directive';\nimport { TreeGridDirective } from './tree-grid.directive';\n\n@NgModule({\n    declarations: [\n        TreeGridDirective,\n        TreeGridRowDirective,\n        TreeGridIndentDirective\n    ],\n    exports: [\n        TreeGridDirective,\n        TreeGridRowDirective,\n        TreeGridIndentDirective\n    ]\n})\nexport class TreeGridModule {}\n","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() template: string;\n    @Input() templateUrl: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: any[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange = new EventEmitter<any[]>();\n    @Output() currentRowChange = new EventEmitter<any>();\n    @Output() treeDataChange = new EventEmitter<TreeGridData[]>();\n    @Output() selectionManager: EventEmitter<any>;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}\n","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}"]}