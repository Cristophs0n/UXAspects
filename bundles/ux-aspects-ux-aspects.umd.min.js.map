{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.service.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.module.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","null","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.component.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/focus-within/focus-within.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.service.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/accessibility.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-subject.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-utils.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.service.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/interfaces/conduit-properties.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.decorator.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/check-list-item/facet-check-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/custom-control/custom-control.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-secondary-item/navigation-secondary-item.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-alt-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list-item/select-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/multiple-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/single-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/observers/overflow/overflow-observer.directive.ts","ng://@ux-aspects/ux-aspects/directives/observers/observers.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts"],"names":["AccordionPanelHeadingDirective","Directive","args","selector","AccordionService","Subject","prototype","collapseAll","this","collapse","next","Injectable","uniqueId","AccordionPanelComponent","accordion","_this","panelId","EventEmitter","subscribe","toggle","expanded","collapseOthers","expand","disabled","expandedChange","Component","template","host","class","role","Input","type","HostBinding","Output","AccordionComponent","_accordion","Object","defineProperty","providers","aria-multiselectable","AccordionModule","NgModule","imports","CommonModule","declarations","exports","BreadcrumbsComponent","clickCrumb","event","crumb","onClick","call","BreadcrumbsModule","RouterModule","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","__values","o","m","Symbol","iterator","value","done","__read","r","e","ar","push","error","__spread","concat","ResizeService","_zone","ResizeObserver","elementDidResize","bind","WeakMap","ngOnDestroy","_observer","disconnect","addResizeListener","target","runOutsideAngular","observe","_targets","has","get","emitter","ReplaySubject","set","removeResizeListener","unobserve","entries","run","entries_1","tslib_1.__values","entries_1_1","entry","width","offsetWidth","height","offsetHeight","NgZone","ResizeDirective","_elementRef","_resizeService","_ngZone","ngOnInit","_subscription","nativeElement","pipe","debounceTime","throttle","uxResize","emit","unsubscribe","ElementRef","ResizeModule","CardTabContentDirective","CardTabsService","BehaviorSubject","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","getComputedStyle","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","id","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","key","colorValueSet","_colors","getColorValueByHex","_html","_element","document","createElement","className","innerHTML","body","appendChild","getColorValue","parentNode","removeChild","color","hex","replace","parseInt","substring","toString","g","ThemeColor","querySelector","Error","rgba","window","backgroundColor","match","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","resolve","colorName","toLowerCase","toRgba","a","_r","_g","_b","undefined","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","primary","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","BUTTON_WIDTHS","sm","md","lg","ColorPickerComponent","colors","normalizedColors","isArray","row","ColorPickerColor","selected","selected$","columns","columns$","buttonSize","buttonSize$","pairwise","takeUntil","_onDestroy","prev","curr","selectedChange","combineLatest","w","cssWidth","complete","updateColorValue","input","mode","inputPatterns","test","toggleColorEntryType","inputMode","exportAs","name","_color","_originalHexValue","_originalRgbaValue","FocusWithinDirective","_focusMonitor","ngZone","monitor","origin","uxFocusWithin","uxBlurWithin","stopMonitoring","FocusMonitor","TabbableListService","initialize","items","wrap","_items","focusKeyManager","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","withWrap","setFirstItemTabbable","forEach","item","onInit","changes","initialized","ensureTabbableItem","activate","index","toArray","indexOf","activeItemIndex","setActiveItem","isItemActive","setTimeout","first","tabindex","focusTabbableItem","findIndex","TabbableListItemDirective","_tabbableList","change","active","focus","onKeydown","allowAltModifier","altKey","allowCtrlModifier","ctrlKey","HostListener","TabbableListDirective","ngAfterContentInit","_focusedElement","focusOnShow","setFirstItemActive","returnFocus","HTMLElement","activeItem","ContentChildren","descendants","AccessibilityModule","A11yModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","Infinity","_","_propagateChange","_min","_max","_step","_disabled","increment","preventDefault","step","decrement","isValid","valid","onScroll","deltaY","wheelDelta","[class.has-error]","NumberPickerModule","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_renderer","_tooltipService","fromEvent","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","firstChange","currentValue","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","delay","clearTimeout","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","includes","array","showTriggers","hideTriggers","isFocused","activeElement","removeAttribute","setAttribute","ViewContainerRef","Overlay","ScrollDispatcher","Renderer2","TooltipModule","OverlayModule","ObserversModule","entryComponents","ColorPickerModule","ColumnSortingDirective","events","toggleColumn","sorting","order","singleSort","toggleSingleColumn","toggleMultipleColumn","state","ColumnSortingState","NoSort","column","Ascending","Descending","_column","ColumnSortingComponent","_columnSorter","columnIdx","stateChange","changeState","ColumnSortingModule","ConduitSubject","conduit","zoneId","_subject","subject","getInitialValue","distinctUntilChanged","onOutput","getEvents","onInput","acceptsInput","subjects","getSubjects","sort","subjectOne","subjectTwo","lastModified","getTime","producesOutput","zone","outputValue","Date","destroy","invokeSuperFunction","functionName","functionList","_i","func","apply","ConduitZone","_zoneId","unregisterConduit","registerConduit","getConduitSubject","setZoneId","setConduitProperties","properties","conduitSubject","_conduit","prop","createConduit","registerConduits","component","_conduits","propertyKey","unregisterConduits","ConduitComponent","decorators","Optional","ConduitZoneComponent","_super","tslib_1.__extends","defaultConduitProps","CONDUITS","DashboardService","defaultOptions","dimensions$","visible","x","y","layout$","setLayoutData","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","idx","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","reduce","forEachBlock","onResizeStart","action","_mouseEvent","bringToFront","onResizeDrag","mousePosX","pageX","pageXOffset","mousePosY","pageY","pageYOffset","handle","getBoundingClientRect","mouseX","left","mouseY","top","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","onDragStart","setWidgetOrigin","cacheWidgets","onDragEnd","_widgetOrigin","onDrag","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","wgt","widgetsToMove","this_1","space","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","splice","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","Rounding","RoundDownBelowHalf","RoundUpOverHalf","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundUp","getRowCount","emptyRow","sendToBack","stable","callback","DashboardComponent","dashboardService","layout","layoutChange","ngAfterViewInit","dashboardElement","onResize","DashboardWidgetComponent","regular","update","_columnSpan","_rowSpan","console","warn","random","getStackableValue","_row","setStackableValue","zIndex","dragstart","drag","dragend","property","DragDirective","_mousedown$","draggable","dragStart","clone","cloneNode","addClass","_mousemove$","_mouseup$","dragMove","dragEnd","_clone","updateNodePosition","removeClass","_offset","clientX","clientY","inlineStyles","setStyle","source","styles","style","children","DashboardDragHandleDirective","elementRef","renderer","DragModule","DECLARATIONS","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","triggerDecrement","triggerIncrement","encapsulation","ViewEncapsulation","None","SpinButtonModule","TimeFormatPipe","transform","pad","Pipe","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","value$","date","getHours","hour","showMeridian","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","hourChange","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","aria-label","TimePickerModule","gridify","range","start","end","list","compareDays","day1","day2","getDate","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","weekdaysShort","weekday","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showSpinners","weekdays","nowBtnText","timezones","ModeDirection","setViewportMonth","setViewportYear","date$","month$","year$","year","setDate","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","Subscription","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","DayViewService","_datepicker","createDayGrid","setFocus","focused$","getDay","dates","dateRange","isToday","isActive","isCurrentMonth","grid$","selectedDay","DayViewComponent","datePicker","dayService","trackWeekByFn","trackDayByFn","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","decrementTimezone","YearViewService","_year","createYearGrid","_event","goToNextDecade","goToPreviousDecade","add","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","_timeout","preventScroll","focusIfScroll","focusIfDelay","FocusIfModule","DateTimePickerModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","TypeaheadOptionEvent","option","TypeaheadKeyService","handleKey","typeahead","open","moveHighlight","selectOnEnter","selectHighlighted","TypeaheadService","TypeaheadComponent","typeaheadElement","_changeDetector","_service","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","pageSize","arrayOrPromise","Promise","then","newOptions","open$","openChange","initOptions","highlighted$","highlightedKey","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","displayHtml","length_1","matchIndex","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","InfiniteScrollLoadButtonDirective","_template","_viewContainer","load","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","_updateRequests","filterOperator","request","check","auditTime","doRequest","enabled","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","loading","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","reset","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","_subscriptions","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","MutationObserver","childList","subtree","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","of","from","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","scrollTop","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","current","data","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","scrollIntoView","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","TypeaheadModule","ReorderableHandleDirective","ReorderableModelDirective","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","group","isEmpty","getGroup","moves","canMove","_containers","getModelForElement","model","getModelFromElement","containers","c","mirrorContainer","on","sibling","drop","cancel","cloned","containerElement","isSameNode","ReorderableDirective","reorderableGroup","_container","onDrop","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","reorderEnd","setTableCellWidths","captureCanvases","reorderingDisabled","handles","_handle","tagName","sourceCells","targetCells","cell","getPropertyValue","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","ReorderableModule","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","_announcer","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","tag","selectedFacet","announce","title","previousElementSibling","nextElementSibling","deselectAllFacets","trackBy","_index","shiftRight","facetsReorderable","shiftFacet","requestAnimationFrame","shiftLeft","LiveAnnouncer","FacetBaseComponent","facetContainer","deselectAll","toggleFacetSelection","isFacetSelected","Host","FacetHeaderComponent","toggleExpand","canExpand","(click)","(keyup.enter)","[attr.aria-expanded]","[attr.aria-label]","FacetCheckListItemComponent","getLabel","FacetCheckListComponent","_focusKeyManager","activeIndex","toggleFacet","ViewChildren","FacetTypeaheadListItemComponent","FacetTypeaheadListComponent","typeaheadKeyService","maxResults","minCharacters","config","query$","tap","typeaheadOptions","mergeMap","getFacetObservable","updateTypeahead","query","typeaheadOpen","Observable","FacetTypeaheadHighlight","searchQuery","regex","RegExp","Facet","count","MenuNavigationService","MenuNavigationItemDirective","service","active$","setActive","activated","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","keyEnter","focusFirst","moveFirst","keydownHandler","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","navigatedOut","stopPropagation","nextIndex","menuOpen","Inject","DOCUMENT","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","isKeyMatch","menuPosition","EXPORTS","FilterContainerComponent","addFilter","filters","FilterAddEvent","filtersChange","removeFilter","FilterRemoveEvent","removeAll","FilterRemoveAllEvent","FilterBaseComponent","filtersContainer","_filter","initial","FilterDropdownComponent","selectFilter","FilterDynamicComponent","announcer","getItems","typeaheadItems","maxIndividualItems","showTypeahead","selectOption","typeaheadOption","dropdown","clickOff","hideDropdown","nodeName","parentElement","(document:click)","BsDropdownDirective","FilterTypeaheadHighlight","BsDropdownModule","forRoot","MenuNavigationModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","onKeyDown","[class.horizontal]","[class.vertical]","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","close","FloatingActionButtonsComponent","fab","tooltips","preserveWhitespaces","animations","transition","opacity","stagger","animate","FloatingActionButtonComponent","Attribute","FloatingActionButtonsModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","node","getChildren","children$","observer","parent","child","nodes","_child","HierarchyBarComponent","hierarchyBar","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","ClickOutsideDirective","_initialised","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","keyCode","ESCAPE","PopoverModule","HierarchyBarModule","SidePanelService","SidePanelComponent","inline","attachTo","openPanel","closePanel","clickHandler","closeOnExternalClick","ItemDisplayPanelComponent","visibleChange","panel","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","WizardComponent","QueryList","stepChange","invalidIndicator","stepChanging","StepChangingEvent","getCurrentStep","steps","onNext","onPrevious","finish","onFinishing","onFinish","onCancel","gotoStep","stepIndex","stp","isLastStep","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","MarqueeWizardModule","WizardModule","FrameExtractionService","createVideoPlayer","videoPlayer","preload","src","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","skip","frames","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","duration","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","readyState","seekable","seeking","textTracks","videoTracks","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","canPlayType","addTextTrack","kind","label","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","hideSubtitleTracks","MediaPlayerBaseExtensionDirective","mediaPlayerService","ColorServiceModule","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","size","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","thumb","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","tick","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","diff","clamp","updateThumbPosition","eventPosition","MouseEvent","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","Number","toFixed","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","join","getSteps","output","showLabels","tk","t1","t2","destination","value1","value2","isSliderValue","obj1","obj2","SliderModule","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","volumeChangeEvent","mouseEnterVolume","volumeActive","mouseLeaveVolume","switchMap","timer","toggleMute","goToStart","goToEnd","isSubtitleActive","setSubtitleTrack","cues","line","getSubtitleTrack","[class.quiet]","MediaPlayerCustomControlDirective","MediaPlayerTimelineExtensionComponent","scrub","timeUpdateEvent","progressEvent","mousedown$","mousemove$","mouseup$","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","AudioService","_http","getAudioFileMetadata","mediaElement","responseType","response","filename","lastIndexOf","extension","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","getAudioBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","waveform","points","channel","arrayBuffer","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","createAnalyser","HttpClient","AudioServiceModule","HttpClientModule","MediaPlayerComponent","_audioService","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","DurationPipe","minutes","hours","days","DurationPipeModule","FileSizePipe","log","pow","FileSizePipeModule","NavigationComponent","NavigationItemComponent","_parent","_router","_activatedRoute","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","levelClass","getLevelClass","setIndentWithoutArrow","_childrenChanges","tree","createUrlTree","relativeTo","queryParams","snapshot","fragment","some","indentWithoutArrow","SkipSelf","Router","ActivatedRoute","NavigationModule","NotificationService","_colorService","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","updateItemsWithActiveRoute","routerLink","navigate","routerExtras","secondaryNavigationAutoselect","secondary$","isParentOf","deselect","items$","updateItem","setItems","setParent","initialSelectedItem","setSecondaryNavigation","findActiveItem","items_1","items_1_1","isRouterLinkActive","urlTree","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","menuNavigationToggle","PageHeaderNavigationDropdownItemComponent","_pageHeaderService","_hover$","dropdownOpen","button","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationSecondaryItemDirective","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","indicatorX","indicatorWidth","PageHeaderComponent","condensed","_crumbs","crumbs","_logoBackground","_logoForeground","logoBackground","logoForeground","goBack","backClick","PageHeaderModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","RadioButtonModule","SearchBuilderService","registerComponent","_components","cmp","registerComponents","components","getComponent","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","init","_id","remove","field","SearchBuilderGroupComponent","searchBuilderGroupService","removeField","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","uxSearchBuilderOutlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","uxSearchBuilderOutletContext","ComponentFactoryResolver","BaseSearchComponent","_searchBuilderGroupService","validate","validation","SearchTextComponent","SearchDateComponent","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchSelectComponent","multiple","dropDirection","allowNull","maxHeight","SearchBuilderComponent","_querySubscription","_validSubscription","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","_value$","_input$","_dropdownOpen","dropdownOpenChange","propagateChange","inputChange","filter$","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","singleInput","inputKeyHandler","singleOptionSelected","TagInputEvent","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","tags","_onTouchedHandler","_typeaheadSubscription","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","tagInput","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","commitTypeahead","commitInput","backspace","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","isSelected","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","trackAriaDescendant","tagValue","inputPattern","inputValid","tagPattern","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","SearchBuilderModule","SelectionStrategy","selectionService","setSelectionService","mousedown","keydown","selectAll","dataset","RowSelectionStrategy","shiftKey","multipleSelect","singleSelect","which","UP_ARROW","DOWN_ARROW","SPACE","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","deactivate","startIdx","endIdx","activateSibling","RowAltSelectionStrategy","handleCursorKey","getSibling","SimpleSelectionStrategy","SelectionService","Set","_dataset","setFirstItemFocusable","_strategyToDestroy","selections","selection","selectionHasMutated","delete","getSelectionState","selection$","setStrategy","trim","setDisabled","isEnabled","focus$","SelectListItemComponent","onMouseDown","MultipleSelectListStrategy","_lastSelection","ENTER","SingleSelectListStrategy","SelectListComponent","SelectListModule","SidePanelCloseDirective","SparkComponent","_theme","_trackColor","_barColor","values","total","val","SparkModule","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","tabIndex","TabFocusDirective","_tabset","uxTabFocus","uniqueTabId","TabComponent","TabHeadingDirective","headingRef","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","TabsetModule","TimelineComponent","TimelineEventComponent","TimelineModule","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","blur","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","_embeddedView","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","OverflowDirective","horizontalOverflow","verticalOverflow","checkForOverflow","tolerance","_state","uxOverflowHorizontalObserver","uxOverflowVerticalObserver","uxOverflowObserver","SelectionItemDirective","_selectionService","_selected","_managedTabIndex","uxSelectionItem","focusTarget","isClickEnabled","isKeyboardEnabled","SelectionDirective","_cdRef","uxSelectionChange","SelectionModule","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","TreeGridNg1Component","ThumbnailNg1Component","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","navigationMenuServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","rows","pdfServiceFactory","pdfServiceProvider","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","err","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","Conduit","tslib_1.__assign"],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'ux-accordion-panel-header'\n})\nexport class AccordionPanelHeadingDirective {\n\n}","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class AccordionService {\n\n    collapseOthers: boolean = false;\n    collapse = new Subject<void>();\n\n    collapseAll(): void {\n        this.collapse.next();\n    }\n}","import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { AccordionService } from '../accordion.service';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-accordion-panel',\n    templateUrl: './accordion-panel.component.html',\n    host: {\n        'class': 'panel panel-default',\n        'role': 'tab'\n    }\n})\nexport class AccordionPanelComponent {\n\n    @Input() panelId: string = `ux-accordion-panel-${uniqueId++}`;\n    @Input() headingId: string = `${this.panelId}-heading`;\n\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() @HostBinding('class.panel-open') expanded: boolean = false;\n\n    @Output() expandedChange = new EventEmitter<boolean>();\n\n    constructor(public accordion: AccordionService) {\n        accordion.collapse.subscribe(() => this.collapse());\n    }\n\n    toggle(): void {\n\n        if (this.expanded) {\n            this.collapse();\n            return;\n        }\n\n        // check if we should collapse others\n        if (this.accordion.collapseOthers) {\n            this.accordion.collapseAll();\n        }\n\n        // store the new expanded state\n        this.expand();\n    }\n\n    expand(): void {\n        if (this.disabled === false && this.expanded === false) {\n            this.expanded = true;\n            this.expandedChange.next(true);\n        }\n    }\n\n    collapse(): void {\n        if (this.disabled === false && this.expanded === true) {\n            this.expanded = false;\n            this.expandedChange.next(false);\n        }\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { AccordionService } from './accordion.service';\n\n@Component({\n    selector: 'ux-accordion',\n    templateUrl: './accordion.component.html',\n    providers: [ AccordionService ],\n    host: {\n        'class': 'panel-group',\n        'role': 'tablist',\n        'aria-multiselectable': 'true'\n    }\n})\nexport class AccordionComponent {\n\n    @Input() set collapseOthers(collapseOthers: boolean) {\n        this._accordion.collapseOthers = collapseOthers;\n    }\n\n    constructor(private _accordion: AccordionService) { }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccordionPanelHeadingDirective } from './accordion-panel/accordion-panel-heading.directive';\nimport { AccordionPanelComponent } from './accordion-panel/accordion-panel.component';\nimport { AccordionComponent } from './accordion.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ],\n    exports: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ]\n})\nexport class AccordionModule { }","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    templateUrl: 'breadcrumbs.component.html'\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _observer = new ResizeObserver(this.elementDidResize.bind(this));\n    private _targets = new WeakMap<HTMLElement, ReplaySubject<ResizeDimensions>>();\n\n    constructor(private _zone: NgZone) {}\n\n    ngOnDestroy(): void {\n        this._observer.disconnect();\n    }\n\n    addResizeListener(target: HTMLElement): ReplaySubject<ResizeDimensions> {\n        this._zone.runOutsideAngular(() => this._observer.observe(target));\n\n        if (this._targets.has(target)) {\n            return this._targets.get(target);\n        } else {\n            const emitter = new ReplaySubject<ResizeDimensions>();\n            this._targets.set(target, emitter);\n            return emitter;\n        }\n    }\n\n    removeResizeListener(target: HTMLElement): void {\n        this._observer.unobserve(target);\n    }\n\n    private elementDidResize(entries: ResizeObserverEntry[]): void {\n        this._zone.run(() => {\n            for (const entry of entries) {\n                if (this._targets.has(entry.target as HTMLElement)) {\n                    const emitter = this._targets.get(entry.target as HTMLElement);\n                    emitter.next({ width: (entry.target as HTMLElement).offsetWidth, height: (entry.target as HTMLElement).offsetHeight });\n                }\n            }\n        });\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._resizeService.removeResizeListener(this._elementRef.nativeElement);\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  templateUrl: './card-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  templateUrl: './card-tabset.component.html',\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ResizeModule } from '../../directives/resize/index';\r\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\r\nimport { CardTabComponent } from './card-tab/card-tab.component';\r\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResizeModule\r\n  ],\r\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\r\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\r\n})\r\nexport class CardTabsModule { }\r\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    templateUrl: './checkbox.component.html',\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { pairwise, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ThemeColor } from '../../services/color/color.service';\n\n// Values corresponding to stylesheet\nconst BUTTON_MARGIN = 8;\nconst BUTTON_WIDTHS = {\n    'sm': 26,\n    'md': 32,\n    'lg': 40\n};\n\nlet uniqueId = 0;\n\n@Component({\n    selector: 'ux-color-picker',\n    exportAs: 'ux-color-picker',\n    templateUrl: 'color-picker.component.html'\n})\nexport class ColorPickerComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('attr.id')\n    id: string = `ux-color-picker-${uniqueId++}`;\n\n    @Input('colors')\n    set inputColors(colors: ColorPickerInputColors[] | ColorPickerInputColors[][]) {\n\n        let normalizedColors: ColorPickerInputColors[][];\n\n        // If it's a 1d array, convert it to 2d\n        if (colors.length === 0 || !Array.isArray(colors[0])) {\n            normalizedColors = [<ColorPickerInputColors[]>colors];\n        } else {\n            normalizedColors = <ColorPickerInputColors[][]>colors;\n        }\n\n        // Convert any string colors to ColorPickerColor\n        this.colors = normalizedColors.map(row => {\n            return row.map(color => color instanceof ColorPickerColor ? color : new ColorPickerColor(color, color));\n        });\n    }\n\n    @Input()\n    set selected(selected: ColorPickerColor) {\n        this.selected$.next(selected);\n    }\n\n    @Input()\n    set columns(columns: number) {\n        this.columns$.next(columns);\n    }\n\n    @Input()\n    buttonStyle: ColorPickerButtonStyle = 'circle';\n\n    @Input()\n    set buttonSize(buttonSize: ColorPickerButtonSize) {\n        this.buttonSize$.next(buttonSize);\n    }\n\n    @Input()\n    showTooltips: boolean = false;\n\n    @Input()\n    showInput: boolean = false;\n\n    @Input()\n    inputMode: ColorPickerInputMode = 'hex';\n\n    @Output()\n    selectedChange = new EventEmitter<ColorPickerColor>();\n\n    @Output()\n    inputSubmit = new EventEmitter<void>();\n\n    @HostBinding('style.width')\n    cssWidth = 'auto';\n\n    colors: ColorPickerColor[][] = [];\n    selected$ = new BehaviorSubject<ColorPickerColor>(null);\n    columns$ = new BehaviorSubject<number>(-1);\n    buttonSize$ = new BehaviorSubject<ColorPickerButtonSize>('md');\n    inputPatterns = {\n        'hex': /^#(?:[\\da-fA-F]{3}){1,2}$/,\n        'rgba': /^(?:rgb\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3}\\))|(?:rgba\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3},\\s*\\d(\\.\\d+)?\\))$/\n    };\n\n    private _onDestroy = new Subject();\n\n    ngOnInit(): void {\n\n        // Skip emitting the initial selectedChange\n        this.selected$.pipe(pairwise(), takeUntil(this._onDestroy)).subscribe(([prev, curr]) => {\n            if (prev) {\n                this.selectedChange.emit(curr);\n            }\n        });\n\n        // Set the width based on column count and button size\n        combineLatest(this.columns$, this.buttonSize$)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(([columns, buttonSize]) => {\n                if (columns > 0) {\n                    const w = columns * (BUTTON_WIDTHS[buttonSize] + (2 * BUTTON_MARGIN));\n                    this.cssWidth = `${w}px`;\n                } else {\n                    this.cssWidth = 'auto';\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateColorValue(input: string, mode: ColorPickerInputMode): void {\n        if (this.inputPatterns[mode].test(input)) {\n            this.selected$.next(new ColorPickerColor('Custom', input, mode));\n        }\n    }\n\n    toggleColorEntryType(): void {\n        this.inputMode = (this.inputMode === 'hex') ? 'rgba' : 'hex';\n    }\n}\n\nexport type ColorPickerInputColors = ColorPickerColor | string;\nexport type ColorPickerButtonStyle = 'square' | 'circle';\nexport type ColorPickerButtonSize = 'sm' | 'md' | 'lg';\nexport type ColorPickerInputMode = 'hex' | 'rgba';\n\n/**\n * Type representing a color, including its descriptive name.\n */\nexport class ColorPickerColor {\n\n    /**\n     * Human-readable name of the color.\n     */\n    name: string;\n\n    /**\n     * Hex value of the color, e.g. `#ffffff`.\n     */\n    get hex(): string {\n        return this._originalHexValue ? this._originalHexValue : this._color.toHex();\n    }\n\n    /**\n     * RGBA value of the color, e.g. `rgba(255, 255, 255, 1)`.\n     */\n    get rgba(): string {\n        return this._originalRgbaValue ? this._originalRgbaValue : this._color.toRgba();\n    }\n\n    get r(): number {\n        return parseInt(this._color.getRed());\n    }\n\n    get g(): number {\n        return parseInt(this._color.getGreen());\n    }\n\n    get b(): number {\n        return parseInt(this._color.getBlue());\n    }\n\n    get a(): number {\n        return parseFloat(this._color.getAlpha());\n    }\n\n    private _color: ThemeColor;\n    private _originalHexValue: string;\n    private _originalRgbaValue: string;\n\n    constructor(name: string, value: string, inputMode?: ColorPickerInputMode) {\n        this.name = name;\n        this._color = ThemeColor.parse(value);\n\n        // Preserve the format entered by the user if it's valid\n        if (inputMode === 'hex') {\n            this._originalHexValue = value;\n        } else if (inputMode === 'rgba') {\n            this._originalRgbaValue = value;\n        }\n    }\n\n    toString(): string {\n        return this._color.toRgba();\n    }\n}","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxFocusWithin],[uxBlurWithin]',\n})\nexport class FocusWithinDirective implements OnDestroy {\n\n    @Output() uxFocusWithin = new EventEmitter<void>();\n    @Output() uxBlurWithin = new EventEmitter<void>();\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor, ngZone: NgZone) {\n        _focusMonitor.monitor(this._elementRef.nativeElement, true)\n            .subscribe(origin => ngZone.run(() => origin ? this.uxFocusWithin.emit() : this.uxBlurWithin.emit()));\n    }\n\n    ngOnDestroy(): void {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n}","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Injectable, OnDestroy, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\n\n@Injectable()\nexport class TabbableListService implements OnDestroy {\n\n    allowAltModifier: boolean = true;\n    allowCtrlModifier: boolean = true;\n    focusKeyManager: FocusKeyManager<TabbableListItemDirective>;\n\n    private _items: QueryList<TabbableListItemDirective>;\n    private _onDestroy = new Subject<void>();\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    initialize(items: QueryList<TabbableListItemDirective>, direction: 'horizontal' | 'vertical', wrap: boolean): void {\n\n        // store the items\n        this._items = items;\n\n        // create the new focus key manager\n        this.focusKeyManager = new FocusKeyManager(items);\n\n        // set the direction of the list\n        direction === 'vertical' ? this.focusKeyManager.withVerticalOrientation() : this.focusKeyManager.withHorizontalOrientation('ltr');\n\n        // enable wrapping if required\n        if (wrap) {\n            this.focusKeyManager.withWrap();\n        }\n\n        // make sure the first item in the list is tabbable\n        this.setFirstItemTabbable();\n\n        // call the init function on each item\n        this._items.forEach(item => item.onInit());\n\n        // if the list changes we need to ensure there is always at least one tabbable item\n        this._items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n\n            // call the on init function on any new items\n            this._items.filter(item => !item.initialized).forEach(item => item.onInit());\n\n            // ensure there is at least one item tabbable at all times\n            this.ensureTabbableItem();\n        });\n    }\n\n    activate(item: TabbableListItemDirective): void {\n\n        // get the item index\n        const index = this._items.toArray().indexOf(item);\n\n        // active the item if it is not already active\n        if (this.focusKeyManager.activeItemIndex !== index) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    isItemActive(item: TabbableListItemDirective): boolean {\n\n        // get the item index\n        const index = this._items.toArray().indexOf(item);\n\n        // active the item if it is not already active\n        return this.focusKeyManager.activeItemIndex === index;\n    }\n\n    setFirstItemTabbable(): void {\n        // delay to prevent expression changed after check error\n        setTimeout(() => {\n            if (this._items.first) {\n                this._items.first.tabindex = 0;\n            }\n        });\n    }\n\n    ensureTabbableItem(): void {\n        // check to see if any item is tabbable\n        const active = this._items.find(item => item.tabindex === 0);\n\n        if (!active) {\n            this.setFirstItemTabbable();\n        }\n    }\n\n    focusTabbableItem(): void {\n\n        if (!this._items) {\n            return;\n        }\n\n        // find the item in the list with a tab index\n        const index = this._items.toArray().findIndex(item => item.tabindex === 0);\n\n        // if an item was found then focus it\n        if (index !== -1) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, HostBinding, HostListener, Input, OnDestroy } from '@angular/core';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TabbableListService } from './tabbable-list.service';\n\n@Directive({\n    selector: '[uxTabbableListItem]',\n    exportAs: 'ux-tabbable-list-item'\n})\nexport class TabbableListItemDirective implements FocusableOption, OnDestroy {\n    @Input() disabled: boolean = false;\n    @HostBinding() tabindex: number = -1;\n    initialized: boolean = false;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _tabbableList: TabbableListService, private _elementRef: ElementRef) {}\n\n    ngOnDestroy(): void {\n\n        // check if this is the currently focused item - if so we need to make another item tabbable\n        if (this.tabindex === 0) {\n            this._tabbableList.setFirstItemTabbable();\n        }\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    onInit(): void {\n        this.initialized = true;\n\n        this._tabbableList.focusKeyManager.change.pipe(takeUntil(this._onDestroy), map(() => this._tabbableList.isItemActive(this)))\n            .subscribe(active => this.tabindex = active ? 0 : -1);\n    }\n\n    @HostListener('focus')\n    focus(): void {\n\n        // apply focus to the element\n        this._elementRef.nativeElement.focus();\n\n        // ensure the focus key manager updates the active item correctly\n        this._tabbableList.activate(this);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n\n        // prevent anything happening when modifier keys are pressed if they have been disabled\n        if (!this._tabbableList.allowAltModifier && event.altKey || !this._tabbableList.allowCtrlModifier && event.ctrlKey) {\n            return;\n        }\n\n        this._tabbableList.focusKeyManager.onKeydown(event);\n    }\n}","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, ContentChildren, Directive, Input, OnDestroy, QueryList } from '@angular/core';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\nimport { TabbableListService } from './tabbable-list.service';\n\n@Directive({\n    selector: '[uxTabbableList]',\n    exportAs: 'ux-tabbable-list',\n    providers: [TabbableListService]\n})\nexport class TabbableListDirective implements AfterContentInit, OnDestroy {\n\n    /** Determine whether the up/down arrows should be used or the left/right arrows */\n    @Input() direction: 'horizontal' | 'vertical' = 'vertical';\n\n    /** Indicate whether or not focus should loop back to the first element after the last */\n    @Input() wrap: boolean = true;\n\n    /** Indicate whether or not the first item should receive focus on show - useful for modals and popovers */\n    @Input() focusOnShow: boolean = false;\n\n    /** Indicate whether or not focus should be returned to the previous element (only applicable when using focusOnShow) */\n    @Input() returnFocus: boolean = false;\n\n    /** Prevent keyboard interaction when alt modifier key is pressed */\n    @Input() set allowAltModifier(value: boolean) { this._tabbableList.allowAltModifier = value; }\n\n    /** Prevent keyboard interaction when ctrl modifier key is pressed */\n    @Input() set allowCtrlModifier(value: boolean) { this._tabbableList.allowCtrlModifier = value; }\n\n    /** Find all tabbable list items */\n    @ContentChildren(TabbableListItemDirective, { descendants: true }) items: QueryList<TabbableListItemDirective>;\n\n    private _focusedElement: HTMLElement;\n\n    get focusKeyManager(): FocusKeyManager<TabbableListItemDirective> {\n        return this._tabbableList.focusKeyManager;\n    }\n\n    constructor(private _tabbableList: TabbableListService) { }\n\n    ngAfterContentInit(): void {\n\n        // store the currently focused element\n        this._focusedElement = document.activeElement as HTMLElement;\n\n        // Set up the focus monitoring\n        this._tabbableList.initialize(this.items, this.direction, this.wrap);\n\n        // focus the first element if specified\n        if (this.focusOnShow) {\n            this._tabbableList.focusKeyManager.setFirstItemActive();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.returnFocus && this._focusedElement instanceof HTMLElement) {\n            setTimeout(() => this._focusedElement.focus());\n        }\n    }\n\n    focus(): void {\n        if (this._tabbableList.focusKeyManager && this._tabbableList.focusKeyManager.activeItem) {\n            this._tabbableList.focusKeyManager.activeItem.focus();\n        }\n    }\n\n    focusTabbableItem(): void {\n        this._tabbableList.focusTabbableItem();\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { NgModule } from '@angular/core';\nimport { FocusWithinDirective } from './focus-within/focus-within.directive';\nimport { TabbableListItemDirective } from './tabbable-list/tabbable-list-item.directive';\nimport { TabbableListDirective } from './tabbable-list/tabbable-list.directive';\n\n@NgModule({\n    declarations: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective\n    ],\n    imports: [\n        A11yModule\n    ],\n    exports: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective\n    ]\n})\nexport class AccessibilityModule {}","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    templateUrl: './number-picker.component.html',\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  templateUrl: './tooltip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { NumberPickerModule } from '../number-picker/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { ColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n    imports: [\n        AccessibilityModule,\n        CommonModule,\n        FormsModule,\n        NumberPickerModule,\n        TooltipModule,\n    ],\n    exports: [ColorPickerComponent],\n    declarations: [ColorPickerComponent],\n    providers: [],\n})\nexport class ColorPickerModule { }\n","import { Directive, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective implements OnDestroy {\n\n    @Input() singleSort: boolean;\n    events = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    toggleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n\n        // apply sorting based on the single or multiple sort\n        this.order = this.singleSort ? this.toggleSingleColumn(sorting) : this.toggleMultipleColumn(sorting);\n\n        // emit the latest order\n        this.events.next(this.order);\n\n        return this.order;\n    }\n\n    private toggleSingleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        return sorting.state === ColumnSortingState.NoSort ? [] : [{ key: sorting.key, state: sorting.state }];\n    }\n\n    private toggleMultipleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        // reorder columns here\n        const idx = this.order.findIndex(column => column.key === sorting.key);\n\n        // if wasnt previously selected add to list\n        if (idx === -1) {\n            return [...this.order, { key: sorting.key, state: sorting.state }];\n        }\n\n        // if we are sorting it change the sorting order\n        if (sorting.state === ColumnSortingState.Ascending || sorting.state === ColumnSortingState.Descending) {\n            return [...this.order.filter(_column => _column.key !== sorting.key), { key: sorting.key, state: sorting.state }];\n        }\n\n        // Otherwise remove the item\n        return this.order.filter(_column => _column.key !== sorting.key);\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState;\n}\n\nexport enum ColumnSortingState {\n    Ascending = 'ascending',\n    Descending = 'descending',\n    NoSort = 'none'\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ColumnSortingDirective, ColumnSortingOrder, ColumnSortingState } from './column-sorting.directive';\n\n@Component({\n    selector: 'ux-column-sorting',\n    templateUrl: './column-sorting.component.html',\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent implements OnDestroy {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Output() stateChange = new EventEmitter<ColumnSortingState>();\n\n    order: number;\n    columnSortingState = ColumnSortingState;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _columnSorter: ColumnSortingDirective) {\n        this._columnSorter.events.pipe(takeUntil(this._onDestroy)).subscribe(event => {\n\n            // if we are sorting this column then find the matching data\n            const columnIdx = event.findIndex(_column => _column.key === this.key);\n\n            // if we are not sorting this column then mark it as NoSort\n            if (columnIdx === -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            this.order = event.length < 2 || columnIdx === -1 ? null : columnIdx + 1;\n\n            // Emit the latest change\n            this.stateChange.emit(this.state);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        switch (this.state) {\n\n            case ColumnSortingState.Ascending:\n                this.state = ColumnSortingState.Descending;\n                break;\n\n            case ColumnSortingState.Descending:\n                this.state = ColumnSortingState.NoSort;\n                break;\n\n            default:\n                this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._columnSorter.toggleColumn({ key: this.key, state: this.state });\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\n\nexport class ConduitSubject {\n\n    private _subject: Subject<any>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(public conduit: ConduitMetadata, private _zone: ConduitZone, public zoneId: string) {\n\n        // store the target subject object\n        this._subject = conduit.subject;\n\n        // check if there are any conduits that have supplied an initial value\n        this.getInitialValue();\n\n        // subscribe to changes to the source subject\n        this._subject.pipe(distinctUntilChanged(conduit.changeDetection), takeUntil(this._onDestroy))\n            .subscribe(this.onOutput.bind(this));\n\n        // subscribe to the zone events and root zone events\n        _zone.getEvents().pipe(filter(event => event.conduit.id === conduit.id), takeUntil(this._onDestroy)).subscribe(this.onInput.bind(this));\n    }\n\n    /** Check all allow inputs to see if there is a value we should initially set the conduit to */\n    getInitialValue(): void {\n\n        // if we do not accept inputs then do nothing\n        if (this.conduit.acceptsInput === false) {\n            return;\n        }\n\n        // return all subjects that are 1) Not itself 2) In a zone that is listed in acceptsInput 3) Have a currentValue set\n        const subjects = this._zone.getSubjects().filter(subject => {\n\n            // If this is itself or if it has not value to give us then do nothing\n            if (subject === this || subject.conduit.id !== this.conduit.id || !subject.conduit.hasOwnProperty('currentValue')) {\n                return false;\n            }\n\n            // if acceptsInput is true then we return every time\n            if (this.conduit.acceptsInput === true) {\n                return true;\n            }\n\n            if (Array.isArray(this.conduit.acceptsInput)) {\n                return this.conduit.acceptsInput.indexOf(subject.zoneId) !== -1;\n            }\n        });\n\n        // if there are no matches then do nothing\n        if (subjects.length === 0) {\n            return;\n        }\n\n        // otherwise sort by the last modified field\n        subjects.sort((subjectOne, subjectTwo) => subjectOne.conduit.lastModified.getTime() < subjectTwo.conduit.lastModified.getTime() ? 1 : -1);\n\n        // get the most recent value\n        this._subject.next(subjects[0].conduit.currentValue);\n    }\n\n    /** This will be triggered when a conduits value has changed */\n    onInput(event: ConduitEvent): void {\n        // if we dont accept input or we emitted this value then do nothing\n        if (this.conduit.acceptsInput === false || event.conduit === this.conduit) {\n            return;\n        }\n\n        // check if the conduit produces output - if not we only do something if we are in the same zone\n        if (event.conduit.producesOutput === false && event.zoneId !== this.zoneId) {\n            return;\n        }\n\n        // check if we only accept inputs from specific zones\n        if (Array.isArray(this.conduit.acceptsInput)) {\n            // check if the event came from an acceptable zone\n            if (!this.conduit.acceptsInput.find(zone => zone === event.zoneId)) {\n                return;\n            }\n        }\n\n        // if required transform the value\n        const outputValue = this.conduit.map ? this.conduit.map(event.value) : event.value;\n\n        // update the subject\n        this._subject.next(outputValue);\n    }\n\n    /** This will be fired when this conduit emits a new value */\n    onOutput(value: any): void {\n\n        // store the most recent value and when it was modified - can be used for any new conduits to lookup a value\n        this.conduit.currentValue = value;\n        this.conduit.lastModified = new Date();\n\n        // check if this should produce output\n        if (this.conduit.producesOutput) {\n            this._zone.emit({ conduit: this.conduit, zoneId: this.zoneId, value });\n        }\n    }\n\n    /** Unsubscribe once this subject is destroyed */\n    destroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","/** This utility is to ensure a all functions with the specified name are called in all super classes */\nexport function invokeSuperFunction(target: object, functionName: string): void {\n    // get all instances of the function\n    const functionList: Function[] = [];\n\n    // store the current prototype we are checking\n    let prototype: any = target;\n\n    // look through every base class and check it\n    do {\n        if (prototype.hasOwnProperty(functionName)) {\n            functionList.push(prototype[functionName]);\n        }\n\n        prototype = prototype.__proto__;\n    } while (prototype.__proto__);\n\n    // augment the top level function to call all the functions\n    target[functionName] = function (...args: any[]) {\n        functionList.forEach(func => func.call(target, ...args));\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitSubject } from './conduit-subject';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\n@Injectable()\nexport class ConduitZone implements OnDestroy {\n\n    /** Create a global subject store */\n    static subjects: ConduitSubject[] = [];\n\n    /** Expose an event stream of new values */\n    static events = new Subject<ConduitEvent>();\n\n    /** Store the zone name */\n    private _zoneId: string;\n\n    ngOnDestroy(): void {\n        // find all conduit subjects that are part of this zone\n        ConduitZone.subjects.filter(_subject => _subject.zoneId === this._zoneId)\n            .forEach(_subject => this.unregisterConduit(_subject.conduit));\n    }\n\n    /** Store reference to the repository and begin watching for and emitting changes */\n    registerConduit(conduit: ConduitMetadata): void {\n        ConduitZone.subjects.push(new ConduitSubject(conduit, this, this._zoneId));\n    }\n\n    /** Destroy a conduit */\n    unregisterConduit(conduit: ConduitMetadata): void {\n        const subject = this.getConduitSubject(conduit.subject);\n\n        if (subject) {\n            // remove the subject from the internal list of conduit subjects\n            ConduitZone.subjects = ConduitZone.subjects.filter(_subject => _subject !== subject);\n\n            // perform all unsubscriptions\n            subject.destroy();\n        }\n    }\n\n    /** Provide the zone with an ID */\n    setZoneId(zoneId: string): void {\n        this._zoneId = zoneId;\n    }\n\n    /** Emit a value to all zones for checking */\n    emit(event: ConduitEvent): void {\n        ConduitZone.events.next(event);\n    }\n\n    /** Retrieve a conduit subsject object from the rxjs subject */\n    getConduitSubject(subject: Subject<any>): ConduitSubject | null {\n        return ConduitZone.subjects.find(_subject => _subject.conduit.subject === subject);\n    }\n\n    /** Get all subjects from all zones */\n    getSubjects(): ConduitSubject[] {\n        return ConduitZone.subjects;\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n\n        // find the conduit with the matching subject\n        const conduitSubject = this.getSubjects().find(_conduit => _conduit.conduit.subject === subject);\n\n        // if a match was found update the properties\n        if (conduitSubject) {\n\n            // update each specified property\n            for (const prop in properties) {\n                conduitSubject.conduit[prop] = properties[prop];\n            }\n        }\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n\n        // register the conduit with the zone\n        this.registerConduit({ ...properties, subject });\n    }\n\n    /** Register all conduits in a component */\n    registerConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.registerConduit({ ...conduit, subject: component[conduit.propertyKey] }));\n        }\n    }\n\n    /** Register all conduits in a component */\n    unregisterConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.unregisterConduit(conduit));\n        }\n    }\n\n    /** Return the global event stream */\n    getEvents(): Subject<ConduitEvent> {\n        return ConduitZone.events;\n    }\n}\n","import { OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { invokeSuperFunction } from './conduit-utils';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\nexport class ConduitComponent implements OnInit, OnDestroy {\n\n    constructor(@Optional() protected _zone: ConduitZone) {\n        // we want to ensure these functions get called even if a class overrides them\n        invokeSuperFunction(this, 'ngOnInit');\n        invokeSuperFunction(this, 'ngOnDestroy');\n    }\n\n    /** We need to register the conduits with the zone when the component is initialised */\n    ngOnInit(): void {\n        // register the conduit in the zone and ensure it gets the correct instance of the target\n        this._zone.registerConduits(this);\n    }\n\n    /** We need to unregister the conduits when the component is destroyed */\n    ngOnDestroy(): void {\n        this._zone.unregisterConduits(this);\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n        this._zone.setConduitProperties(subject, properties);\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n        this._zone.createConduit(subject, properties);\n    }\n\n}\n","import { OnInit } from '@angular/core';\nimport { ConduitComponent } from './conduit.component';\n\nexport abstract class ConduitZoneComponent extends ConduitComponent implements OnInit {\n    abstract zoneId: string;\n\n    ngOnInit(): void {\n        this._zone.setZoneId(this.zoneId);\n    }\n}\n","export interface ConduitProperties {\n    id: number | string;\n    acceptsInput?: boolean | string[];\n    producesOutput?: boolean;\n    changeDetection?: (x: any, y: any) => boolean;\n    map?: any;\n}\n\nexport const defaultConduitProps: Partial<ConduitProperties> = {\n    acceptsInput: true,\n    producesOutput: true,\n};\n","import { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties, defaultConduitProps } from './interfaces/conduit-properties';\n\n/** Expose the property that conduits will be stored in */\nexport const CONDUITS = '_conduits';\n\n/** Create the conduit property decorator */\nexport function Conduit(properties: ConduitProperties | Function): PropertyDecorator {\n    return (target: Object, propertyKey: string) => {\n\n        if (typeof properties === 'function') {\n            properties = properties.call(null);\n        }\n\n        // if the target does not already have a conduit list then create one\n        if (!target.hasOwnProperty(CONDUITS)) {\n            Object.defineProperty(target, CONDUITS, { value: [] });\n        }\n\n        // add the conduit to the list ensuring all required properties are provided\n        target[CONDUITS].push({ ...defaultConduitProps, ...properties, target, propertyKey } as ConduitMetadata);\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _mouseEvent: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(delay(0), map((dimensions: DashboardDimensions) => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n\n    get options() {\n        return this.options$.getValue();\n    }\n\n    get widgets() {\n        return this.widgets$.getValue();\n    }\n\n    get stacked() {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions() {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth() {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    constructor() {\n        this.layout$.subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() * w1.getRow();\n            const w2Position = w2.getColumn() * w2.getRow();\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._mouseEvent = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._mouseEvent.pageX - pageXOffset;\n        const mousePosY = this._mouseEvent.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._mouseEvent = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._mouseEvent = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._mouseEvent.pageX && action.event.pageY === this._mouseEvent.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._mouseEvent.pageX;\n        const mouseY = action.event.pageY - this._mouseEvent.pageY;\n\n        // store the latest event\n        this._mouseEvent = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): void {\n        this._cache = this.widgets.map(widget => ({ id: widget.id, column: widget.getColumn(), row: widget.getRow() }));\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false): void {\n        this._cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    let requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    let available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            let distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() - 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveRight(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        const rounding = this._actionWidget.direction === ActionDirection.Left ||\n            this._actionWidget.direction === ActionDirection.Top ? Rounding.RoundDownBelowHalf : Rounding.RoundUpOverHalf;\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard',\n    templateUrl: './dashboard.component.html',\n    providers: [DashboardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements AfterViewInit {\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    constructor(public dashboardService: DashboardService) {\n        dashboardService.layout$.subscribe(layout => this.layoutChange.emit(layout));\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Component, Input, OnInit, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    templateUrl: './dashboard-widget.component.html'\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _subscription: Subscription;\n\n    constructor(public dashboardService: DashboardService) {\n        this._subscription = dashboardService.options$.subscribe(() => this.update());\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time \n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeStart({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    /** Detemine if we should show a clone when dragging */\n    @Input() clone: boolean = false;\n\n    /** Allow the dragging to be enabled/disabled */\n    @Input() draggable: boolean = true;\n\n    /** Emit an event when dragging starts */\n    @Output() dragstart = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the mouse moves while dragging */\n    @Output() drag = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the dragging finishes */\n    @Output() dragend = new EventEmitter<void>();\n\n    /** Store the element we have cloned */\n    private _clone: Element;\n\n    /** Store the mouse offset for the cloned element position */\n    private _offset: { x: number, y: number };\n\n    /** Create an observable from the mouse down event */\n    private _mousedown$ = fromEvent<MouseEvent>(this._elementRef.nativeElement, 'mousedown');\n\n    /** Create an observable from the mouse move event */\n    private _mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n\n    /** Create an observable from the mouse up event */\n    private _mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n    /** Use an observable to unsubscribe from all subscriptions */\n    protected _onDestroy = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, private _ngZone: NgZone, private _renderer: Renderer2) {\n        this._mousedown$.pipe(filter(() => this.draggable), takeUntil(this._onDestroy)).subscribe(this.dragStart.bind(this));\n    }\n\n    /** Emit events and create clone when drag starts */\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this.clone) {\n            // clone the node\n            this.cloneNode(event);\n        }\n\n        // apply a class to the element being dragged\n        this._renderer.addClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // emit the drag start event\n        this._ngZone.run(() => this.dragstart.emit(event));\n\n        this._mousemove$.pipe(takeUntil(this._mouseup$), takeUntil(this._onDestroy))\n            .subscribe(this.dragMove.bind(this), null, this.dragEnd.bind(this));\n    }\n\n    /** Emit event and update clone position when dragging moves */\n    dragMove(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this._clone) {\n            this.updateNodePosition(event);\n        }\n\n        // emit the drag start event\n        this._ngZone.run(() => this.drag.emit(event));\n    }\n\n    /** Emit event and destroy clone when dragging ends */\n    dragEnd(): void {\n        // if there was a clone, remove it\n        if (this._clone) {\n            this._renderer.removeChild(document.body, this._clone);\n            this._clone = null;\n        }\n\n        // remove the dragging class\n        this._renderer.removeClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        this._ngZone.run(() => this.dragend.emit());\n    }\n\n    /** Create an exact clone of an element */\n    cloneNode(event: MouseEvent): void {\n\n        // duplicate the node\n        this._clone = this._elementRef.nativeElement.cloneNode(true);\n\n        // store the position within the draggable element\n        const { top, left } = this._elementRef.nativeElement.getBoundingClientRect();\n        this._offset = { x: event.clientX - left, y: event.clientY - top };\n\n        // inline all styles so it looks identical regardless of its position in the DOM\n        this.inlineStyles(this._elementRef.nativeElement, this._clone);\n\n        // ensure we can easily position the node an it is above all other elements\n        this._renderer.setAttribute(this._clone, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._clone, 'position', 'absolute');\n        this._renderer.setStyle(this._clone, 'z-index', '99999');\n\n        // apply a class to allow custom styling\n        this._renderer.addClass(this._clone, 'ux-drag-dragging-clone');\n\n        // insert the cloned element\n        this._renderer.appendChild(document.body, this._clone);\n\n        // set the cloned element initial position\n        this.updateNodePosition(event);\n    }\n\n    /** Position the clone relative to the mouse */\n    updateNodePosition(event: MouseEvent): void {\n        this._renderer.setStyle(this._clone, 'left', (event.pageX - this._offset.x) + 'px');\n        this._renderer.setStyle(this._clone, 'top', (event.pageY - this._offset.y) + 'px');\n    }\n\n    /** Inline all styles to ensure styling is consistent regardless of its position in the dom */\n    inlineStyles(source: Element, target: Element): void {\n        // get all the computed styles from the source element\n        const styles = getComputedStyle(source);\n\n        // inline every specified style\n        for (let idx = 0; idx < styles.length; idx++) {\n            const style = styles.item(idx);\n\n            if (style !== undefined) {\n                this._renderer.setStyle(target, styles[idx], styles[style]);\n            }\n        }\n\n        // ensure we dont capture any move events\n        this._renderer.setStyle(target, 'pointer-events', 'none');\n\n        // do the same for all the child elements\n        for (let idx = 0; idx < source.children.length; idx++) {\n            this.inlineStyles(source.children[idx], target.children[idx]);\n        }\n    }\n\n    /** Unsubscribe from all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n        super(elementRef, ngZone, renderer);\n\n        this.dragstart.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.drag.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.dragend.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DragDirective } from './drag.directive';\n\n@NgModule({\n    exports: [DragDirective],\n    declarations: [DragDirective]\n})\nexport class DragModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DragModule } from '../../directives/drag/index';\n\nconst DECLARATIONS: any[] = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    templateUrl: './spin-button.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n    transform(value: number, pad: boolean): string | number {\n        return value < 10 && pad ? '0' + value : value;\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, OnDestroy, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    templateUrl: './time-picker.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { DateTimePickerTimezone } from './date-time-picker.service';\n\n\n/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort } from './date-time-picker.utils';\nimport { DateTimePickerTimezone } from './date-time-picker.service';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n\n    timezones: DateTimePickerTimezone[] = [\n        { name: 'GMT-11', offset: 660 },\n        { name: 'GMT-10', offset: 600 },\n        { name: 'GMT-9', offset: 540 },\n        { name: 'GMT-8', offset: 480 },\n        { name: 'GMT-7', offset: 420 },\n        { name: 'GMT-6', offset: 360 },\n        { name: 'GMT-5', offset: 300 },\n        { name: 'GMT-4', offset: 240 },\n        { name: 'GMT-3', offset: 180 },\n        { name: 'GMT-2', offset: 120 },\n        { name: 'GMT-1', offset: 60 },\n        { name: 'GMT', offset: 0 },\n        { name: 'GMT+1', offset: -60 },\n        { name: 'GMT+2', offset: -120 },\n        { name: 'GMT+3', offset: -180 },\n        { name: 'GMT+4', offset: -240 },\n        { name: 'GMT+5', offset: -300 },\n        { name: 'GMT+6', offset: -360 },\n        { name: 'GMT+7', offset: -420 },\n        { name: 'GMT+8', offset: -480 },\n        { name: 'GMT+9', offset: -540 },\n        { name: 'GMT+10', offset: -600 },\n        { name: 'GMT+11', offset: -660 },\n        { name: 'GMT+12', offset: -720 }\n    ];\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config.showDate);\n    showTime$ = new BehaviorSubject<boolean>(this._config.showTime);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config.showTimezone);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config.showSeconds);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config.showMeridian);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config.showSpinners);\n    weekdays$ = new BehaviorSubject<string[]>(this._config.weekdays);\n    nowBtnText$ = new BehaviorSubject<string>(this._config.nowBtnText);\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config.timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    private _subscription: Subscription;\n\n    constructor(private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        return this._config.timezones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService, DateTimePickerTimezone } from './date-time-picker.service';\nimport { dateComparator, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  templateUrl: './date-time-picker.component.html',\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  private _timezone: DateTimePickerTimezone;\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _subscription = new Subscription();\n\n  constructor(public datepicker: DateTimePickerService) {\n    const valueChange = datepicker.selected$.pipe(distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    const timezoneChange = datepicker.timezone$.pipe(distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify, months } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n    \n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  templateUrl: './day-view.component.html',\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    templateUrl: './header.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, monthsShort, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n            \n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    templateUrl: './month-view.component.html',\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    templateUrl: './time-view.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  templateUrl: './year-view.component.html',\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n    @Input() focusIfScroll: boolean = true;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus({ preventScroll: !this.focusIfScroll });\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent],\n    providers: [\n        DateTimePickerConfig\n    ]\n})\nexport class DateTimePickerModule { }\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    templateUrl: './ebox.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { Injectable } from '@angular/core';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n\n                case 'Enter':\n                    if (typeahead.selectOnEnter) {\n                        typeahead.selectHighlighted();\n                    }\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    templateUrl: 'typeahead.component.html',\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input()\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n    @Input() selectOnEnter: boolean = false;\r\n    @Input() loading = false;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n    highlightedKey: string = null;\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _changeDetector: ChangeDetectorRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n\r\n                // Invoke the callback which may return an array or a promise.\r\n                const arrayOrPromise = this.options(pageNum, pageSize, filter);\r\n\r\n                // Map the results to an array of TypeaheadVisibleOption.\r\n                return Promise.resolve(arrayOrPromise).then(newOptions => {\r\n\r\n                    if (!Array.isArray(newOptions)) {\r\n                        return newOptions;\r\n                    }\r\n\r\n                    return newOptions.map((option: any) => {\r\n                        return {\r\n                            value: option,\r\n                            key: this.getKey(option)\r\n                        };\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.openChange.emit(next);\r\n\r\n            if (next) {\r\n                this.initOptions();\r\n            }\r\n        });\r\n\r\n        this.highlighted$.pipe(takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.highlightedKey = next ? next.key : null;\r\n            this.highlightedChange.emit(next ? next.value : null);\r\n        });\r\n\r\n        combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n            });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        const displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n            this._changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlight(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    selectHighlighted(): void {\r\n        if (this.highlighted) {\r\n            this.select({ value: this.highlighted, key: this.getKey(this.highlighted)});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n\r\n        this._changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableHandle]'\r\n})\r\nexport class ReorderableHandleDirective { }\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableModel]'\r\n})\r\nexport class ReorderableModelDirective {\r\n\r\n    // allow the user to specify a model for the item - allows use with ngFor\r\n    @Input() uxReorderableModel: any;\r\n\r\n    // this can be used to identify which instance of the directive relates to which element\r\n    constructor(public elementRef: ElementRef) { }\r\n}\r\n","// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport { Drake } from 'dragula';\n// @ts-ignore\nimport * as dragulaNamespace from 'dragula/dist/dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ReorderEvent } from '../../directives/reorderable/index';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    templateUrl: './facet-container.component.html'\n})\nexport class FacetContainerComponent implements OnDestroy {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    constructor(private _announcer: LiveAnnouncer) { }\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet, tag?: HTMLElement): void {\n\n        // find the index of the item in the selected array\n        const idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n\n        // announce the facet removal\n        this._announcer.announce(`Option ${facet.title} deselected.`, 'assertive');\n\n        // focus another tag if there is one\n        if (tag) {\n            const sibling = tag.previousElementSibling || tag.nextElementSibling;\n\n            // if there is a sibling then focus it\n            if (sibling) {\n                (sibling as HTMLElement).focus();\n            }\n        }\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n\n        // announce the facet removal\n        this._announcer.announce(`All options deselected.`, 'assertive');\n    }\n\n    trackBy(_index: number, facet: Facet): string | number {\n        return facet.id || facet.title;\n    }\n\n    shiftRight(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, 1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved down.`);\n    }\n\n    shiftLeft(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, -1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved up.`);\n    }\n\n    private shiftFacet(facet: Facet, distance: number) {\n        const index = this.facets.indexOf(facet);\n        const target = index + distance;\n\n        // Ensure the move is valid\n        if (target < 0 || target === this.facets.length) {\n            return;\n        }\n\n        // Perform the move\n        this.facets.splice(index, 1);\n        this.facets.splice(target, 0, facet);\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}\n\nexport interface FacetReorderEvent extends ReorderEvent {\n    index: number;\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        const index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    templateUrl: './facet-header.component.html',\n    host: {\n        'role': 'button',\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()',\n        '[attr.aria-expanded]': 'expanded',\n        '[attr.aria-label]': 'header + \\' Facet: Activate to \\' + (expanded ? \\'collapse\\' : \\'expand\\')'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;\n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list-item',\n    templateUrl: './facet-check-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetCheckListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet = null;\n    @Input() selected: boolean = false;\n    @Input() tabbable: boolean = false;\n    @Output() selectedChange = new EventEmitter<Facet>();\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() itemBlur = new EventEmitter<void>();\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : '';\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, QueryList, ViewChildren } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\nimport { FacetCheckListItemComponent } from './check-list-item/facet-check-list-item.component';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    templateUrl: './facet-check-list.component.html'\n})\nexport class FacetCheckListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n\n    @ViewChildren(FacetCheckListItemComponent) options: QueryList<FacetCheckListItemComponent>;\n\n    isFocused: boolean = false;\n    activeIndex: number = 0;\n\n    private _focusKeyManager: FocusKeyManager<FacetCheckListItemComponent>;\n\n    ngAfterViewInit(): void {\n        this._focusKeyManager = new FocusKeyManager(this.options)\n            .withVerticalOrientation();\n\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list-item',\n    templateUrl: './facet-typeahead-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetTypeaheadListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet;\n    @Input() selected: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() tabbable: boolean = false;\n\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() selectedChange = new EventEmitter<Facet>();\n\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : null;\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, ElementRef, Input, Pipe, PipeTransform, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map, mergeMap, takeUntil, tap } from 'rxjs/operators';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { FacetContainerComponent } from '../facet-container.component';\nimport { Facet } from '../models/facet';\nimport { FacetTypeaheadListItemComponent } from './typeahead-list-item/facet-typeahead-list-item.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    templateUrl: './facet-typeahead-list.component.html'\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    @Input()\n    set typeaheadConfig(config: FacetTypeaheadListConfig) {\n        this._config = { placeholder: '', maxResults: 50, minCharacters: 1, ...config };\n    }\n\n    get typeaheadConfig(): FacetTypeaheadListConfig {\n        return this._config;\n    }\n\n    @ViewChildren(FacetTypeaheadListItemComponent) options: QueryList<FacetTypeaheadListItemComponent>;\n\n    query$ = new BehaviorSubject<string>('');\n    loading: boolean = false;\n    activeIndex: number = 0;\n    typeaheadId: string = `ux-facet-typeahead-${uniqueId++}`;\n    typeaheadOpen: boolean = false;\n    typeaheadOptions: Facet[] = [];\n    highlightedElement: HTMLElement;\n\n    private _config: FacetTypeaheadListConfig = { placeholder: '', maxResults: 50, minCharacters: 1 };\n    private _focusKeyManager: FocusKeyManager<FacetTypeaheadListItemComponent>;\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, facetContainer: FacetContainerComponent, elementRef: ElementRef, private _announcer: LiveAnnouncer) {\n        super(facetContainer, elementRef);\n    }\n\n    ngAfterViewInit(): void {\n\n        // set up search query subscription\n        this.query$.pipe(\n            takeUntil(this._onDestroy),\n            tap(() => {\n                this.loading = true;\n                this.typeaheadOptions = [];\n            }),\n            mergeMap(() => this.getFacetObservable().pipe(map(facets => {\n                return facets.filter(facet => !facet.disabled && !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .slice(0, this._config.maxResults);\n            })))\n        ).subscribe(facets => {\n            this.loading = false;\n            this.typeaheadOptions = facets;\n        });\n\n        this._focusKeyManager = new FocusKeyManager(this.options).withVerticalOrientation();\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n\n    /** Only show typeahead if we have enough characters */\n    updateTypeahead(query: string = ''): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n    }\n\n    getFacetObservable(): Observable<Facet[]> {\n        return this.facets instanceof Observable ? this.facets : of(this.facets);\n    }\n\n    select(event: TypeaheadOptionEvent) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === event.option)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(event.option);\n\n        // clear the typeahead\n        this.query$.next('');\n\n        // announce the selected facet\n        this._announcer.announce(`${(event.option as Facet).title} selected.`);\n    }\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListItemComponent } from './facet-check-list/check-list-item/facet-check-list-item.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetTypeaheadHighlight, FacetTypeaheadListComponent } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FacetTypeaheadListItemComponent } from './facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetCheckListItemComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadListItemComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        A11yModule,\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.subscribe((next) => {\n            if (next === this) {\n                this.setActive();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n\n    private _document: any;\n\n    private _subscription = new Subscription();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) document: any\n    ) {\n        this._document = document;\n    }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this._subscription.add(\n                this.toggleButton.keyEnter.subscribe(this.focusFirst.bind(this))\n            );\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this._subscription.add(\n            this.items.changes.subscribe(() => {\n                this._itemsOrdered = this.items.toArray();\n            })\n        );\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.key) {\n\n            case 'ArrowUp':\n            case 'Up':\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case 'ArrowDown':\n            case 'Down':\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case 'ArrowLeft':\n            case 'Left':\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'ArrowRight':\n            case 'Right':\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'Home':\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case 'End':\n                this.moveLast();\n                handled = true;\n                break;\n\n            case 'Escape':\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.key)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => {\n                this.keyEnter.emit();\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: string): boolean {\n        switch (key) {\n            case 'Enter':\n            case ' ':\n                return true;\n\n            case 'ArrowUp':\n            case 'Up':\n                return this.menuPosition === 'top';\n\n            case 'ArrowDown':\n            case 'Down':\n                return this.menuPosition === 'bottom';\n\n            case 'ArrowLeft':\n            case 'Left':\n                return this.menuPosition === 'left';\n\n            case 'ArrowRight':\n            case 'Right':\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-filter-container',\n    templateUrl: './filter-container.component.html'\n})\nexport class FilterContainerComponent {\n\n    @Input() filters: Filter[] = [];\n    @Input() clearTooltip: string;\n    @Output() filtersChange: EventEmitter<Filter[]> = new EventEmitter<Filter[]>();\n    @Output() events: EventEmitter<FilterEvent> = new EventEmitter<FilterEvent>();\n\n\n    addFilter(filter: Filter): void {\n        this.filters.push(filter);\n        this.events.next(new FilterAddEvent(filter));\n        this.filtersChange.emit(this.filters);\n    }\n\n    removeFilter(filter: Filter): void {\n        let idx = this.filters.findIndex(filters => filters === filter);\n\n        if (idx !== -1) {\n            this.filters.splice(idx, 1);\n            this.events.next(new FilterRemoveEvent(filter));\n            this.filtersChange.emit(this.filters);\n        }\n    }\n\n    removeAll(): void {\n        this.events.next(new FilterRemoveAllEvent());\n    }\n\n}\n\nexport interface Filter {\n    group: string;\n    title: string;\n    name: string;\n    initial?: boolean;\n}\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveAllEvent {\n}\n\nexport type FilterEvent = FilterAddEvent | FilterRemoveEvent | FilterRemoveAllEvent;","\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Filter, FilterContainerComponent, FilterRemoveAllEvent } from '../filter-container.component';\n\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent, private _announcer: LiveAnnouncer) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.addFilter(_filter);\n            this._announcer.announce(`Filter ${_filter.name} selected.`);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.removeFilter(_filter);\n        this._announcer.announce(`Filter ${_filter.name} deselected.`);\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    templateUrl: './filter-dropdown.component.html',\n})\nexport class FilterDropdownComponent extends FilterBaseComponent {\n\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    removeFilter(): void {\n        super.removeFilter(this.selected);\n        this.selected = this.initial;\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n    }\n\n    selectFilter(filter: Filter, event: MouseEvent) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n}","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, Input, Pipe, PipeTransform, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter, FilterContainerComponent } from '../filter-container.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    templateUrl: './filter-dynamic.component.html',\n    host: {\n        '(document:click)': 'clickOff($event)',\n    }\n})\nexport class FilterDynamicComponent extends FilterBaseComponent {\n\n    @Input() filters: Filter[];\n    @Input() initial: Filter;\n\n    @Input() set options(options: FilterDynamicListConfig) {\n        this._config = {... this.defaultOptions, ...options };\n    }\n\n    get options(): FilterDynamicListConfig {\n        return this._config;\n    }\n\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    defaultOptions: FilterDynamicListConfig = {\n        placeholder: '',\n        minCharacters: 3,\n        maxResults: Infinity\n    };\n\n    typeaheadId: string = `ux-filter-dynamic-typeahead-${uniqueId++}`;\n    query$ = new BehaviorSubject<string>('');\n    selected: Filter;\n    showTypeahead: boolean = true;\n    typeaheadItems: string[] = [];\n    highlightedElement: HTMLElement;\n    typeaheadOpen: boolean = false;\n\n    private _config: FilterDynamicListConfig = { ...this.defaultOptions };\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, container: FilterContainerComponent, announcer: LiveAnnouncer) {\n        super(container, announcer);\n    }\n\n    getItems(): string[] {\n        const query = this.query$.value.toLowerCase();\n\n        return this.filters.filter(item => item !== this.initial && item.name.toLowerCase().indexOf(query) !== -1)\n            .map(item => item.name)\n            .slice(0, this._config.maxResults);\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n        this.typeaheadItems = this.getItems();\n\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n        this.removeFilter();\n        const idx = this.filters.findIndex(filter => filter.name === typeaheadOption.value);\n        this.selected = this.filters[idx];\n        this.addFilter(this.selected);\n        this.query$.next('');\n        this.dropdown.hide();\n    }\n\n    clickOff(event: MouseEvent) {\n\n        let target = event.target as HTMLElement;\n        let hideDropdown = true;\n\n        while (target && target.nodeName !== 'BODY') {\n            if (target.classList.contains('ux-dynamic-filter')) {\n                hideDropdown = false;\n                break;\n            } else {\n                target = target.parentElement;\n            }\n        }\n\n        if (hideDropdown) {\n            this.query$.next('');\n            this.dropdown.hide();\n        }\n\n    }\n\n    removeFilter(): void {\n        if (this.selected !== this.initial) {\n            super.removeFilter(this.selected);\n            this.selected = this.initial;\n        }\n        this.query$.next('');\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n    updateTypeahead(query: string): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n        this.typeaheadItems = this.getItems();\n    }\n\n    select(event: TypeaheadOptionEvent): void {\n        // find the filter with the matching name\n        const filter = this.filters.find(_filter => _filter.name === event.option);\n\n        if (filter) {\n            this.selectFilter(filter);\n        }\n    }\n\n}\n\nexport interface FilterDynamicListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    maxIndividualItems?: number;\n}\n\n@Pipe({\n    name: 'filterTypeaheadHighlight'\n})\nexport class FilterTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        const regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"filter-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/typeahead.module';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent, FilterTypeaheadHighlight } from './filter-dynamic/filter-dynamic.component';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent,\n    FilterTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        MenuNavigationModule,\n        CommonModule,\n        TypeaheadModule,\n        A11yModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    templateUrl: './flippable-card.component.html',\n    host: {\n        'tabindex': '0',\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean): void {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped(): void {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click')\n    clickTrigger(): void {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter')\n    hoverEnter(): void {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave')\n    hoverExit(): void {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    @HostListener('keydown.spacebar', ['$event']) // IE uses different naming\n    onKeyDown(event: KeyboardEvent): void {\n        if (this.trigger !== 'manual') {\n            this.toggleFlipped();\n            event.preventDefault();\n        }\n    }\n}\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, HostListener, Input, OnDestroy, QueryList, Output, EventEmitter } from '@angular/core';\nimport { TooltipDirective } from 'ngx-bootstrap/tooltip';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    templateUrl: './floating-action-buttons.component.html',\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    @Input() direction: FloatingActionButtonDirection = 'top';\n    @ContentChildren(TooltipDirective) tooltips: QueryList<TooltipDirective>;\n    @Output() openChange = new EventEmitter<boolean>();\n\n    private _subscription: Subscription = new Subscription();\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) {\n        this._subscription.add(this.fab.open$.subscribe(value => this.openChange.emit(value)));\n    }\n\n    ngAfterViewInit(): void {\n        this._subscription.add(this.fab.open$.pipe(filter(open => open === false))\n            .subscribe(() => this.tooltips.forEach(tooltip => tooltip.hide())));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';","import { Attribute, ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    templateUrl: './floating-action-button.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent {\n\n    @Input() icon: string;\n    @HostBinding() tabindex = 1;\n\n    primary: boolean = false;\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService) {\n        this.primary = primary !== null;\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HierarchyBarService {\r\n\r\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _root: HierarchyBarNode;\r\n    private _nodes: HierarchyBarNode[] = [];\r\n\r\n    /**\r\n     * Store the root node of the hierarchy tree\r\n     */\r\n    setRootNode(root: HierarchyBarNode) {\r\n\r\n        // store the root node\r\n        this._root = root;\r\n\r\n        // create a flat structure of nodes\r\n        this._nodes = this.getNodeList(root);\r\n\r\n        // flatten the array - based on the selected node\r\n        this.nodes$.next(this.getSelectedChildren(root));\r\n    }\r\n\r\n    /**\r\n     * Select a node. This causes all nodes to be\r\n     * deselected and the path to the selected node\r\n     * to be selected\r\n     */\r\n    selectNode(node: HierarchyBarNode): void {\r\n\r\n        // deselect all nodes\r\n        this.deselectAll();\r\n\r\n        // ensure the current node is selected and its parents\r\n        this.select(node);\r\n\r\n        // emit a new node list to trigger change detection\r\n        this.nodes$.next(this.getSelectedChildren(this._root));\r\n    }\r\n\r\n    /**\r\n     * Handles getting children with support for both arrays and observables\r\n     */\r\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\r\n\r\n        if (Array.isArray(node.children)) {\r\n            return of({ loading: false, children: node.children });\r\n        }\r\n\r\n        const children$: Observable<HierarchyBarNode[]> = node.children;\r\n\r\n        // if it is an observable then handle loading\r\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\r\n            // emit initial value\r\n            observer.next({ loading: true, children: [] });\r\n\r\n            // now wait until the children observable completes\r\n            children$.pipe(first()).subscribe(children => {\r\n\r\n                // replace the observable with an array for future loading\r\n                node.children = children;\r\n\r\n                // rebuild the node tree\r\n                this.setRootNode(this._root);\r\n\r\n                // emit the latest value\r\n                observer.next({ loading: false, children: children });\r\n\r\n                // close the observable stream\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Traverses all the parents to ensure they are selected\r\n     */\r\n    private select(node: HierarchyBarNode): void {\r\n        node.selected = true;\r\n\r\n        if (node.parent) {\r\n            this.select(node.parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselects all nodes\r\n     */\r\n    private deselectAll(): void {\r\n        this._nodes.forEach(node => node.selected = false);\r\n    }\r\n\r\n    /**\r\n     * Gets all the nodes in the tree as a flat array.\r\n     * It also stores the parent node in a parent property\r\n     * on the node for easy traversal in both directions\r\n     */\r\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        // if there are no children then return only itself\r\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\r\n            return [node];\r\n        }\r\n\r\n        // store the parent property\r\n        node.children.forEach(child => child.parent = node);\r\n\r\n        // get all descendants of this node\r\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\r\n\r\n        return [node, ...descendants];\r\n    }\r\n\r\n    /**\r\n     * Gets all selected nodes from the parent node.\r\n     */\r\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        if (node.children instanceof Observable) {\r\n            return [node];\r\n        }\r\n\r\n        // get the children - and account for when there is none\r\n        const children = node.children || [];\r\n\r\n        // check if any child is selected\r\n        const child = children.find(_child => _child.selected);\r\n\r\n        // return the remaining chain of selected items\r\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\r\n    }\r\n}\r\n\r\nexport interface HierarchyBarNode {\r\n    icon?: string;\r\n    title: string;\r\n    selected?: boolean;\r\n    parent?: HierarchyBarNode;\r\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\r\n}\r\n\r\nexport interface HierarchyBarNodeChildren {\r\n    loading: boolean;\r\n    children: HierarchyBarNode[];\r\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\r\n\r\n@Component({\r\n    selector: 'ux-hierarchy-bar',\r\n    templateUrl: './hierarchy-bar.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    viewProviders: [HierarchyBarService]\r\n})\r\nexport class HierarchyBarComponent implements OnDestroy {\r\n\r\n    @Input() set root(node: HierarchyBarNode) {\r\n        this.hierarchyBar.setRootNode(node);\r\n    }\r\n\r\n    @Input() set selected(node: HierarchyBarNode) {\r\n        this.hierarchyBar.selectNode(node);\r\n    }\r\n\r\n    @Input() loadingIndicator: TemplateRef<any>;\r\n\r\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\r\n    @ViewChild('nodelist') nodelist: ElementRef;\r\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\r\n\r\n    overflow$ = new BehaviorSubject<boolean>(false);\r\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(public hierarchyBar: HierarchyBarService) {\r\n\r\n        // subscribe to changes in the selected node\r\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\r\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\r\n\r\n        // store subscriptions\r\n        this._subscription.add(selected);\r\n        this._subscription.add(changed);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * When there is overflow ensure that the rightmost\r\n     * node remains in view at all times. The nodes no longer\r\n     * visible be be displayed in a popover available on the\r\n     * overflow indicator\r\n     */\r\n    scrollIntoView(): void {\r\n\r\n        if (!this.nodelist) {\r\n            return;\r\n        }\r\n\r\n        // get the native element\r\n        const { nativeElement } = this.nodelist;\r\n\r\n        // emit whether or not there is overflow\r\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\r\n\r\n        // if the hierarchy bar contents do not overflow then do nothing\r\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\r\n\r\n            // determine the amount of overflow\r\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\r\n\r\n            // determine which nodes are not fully visible\r\n            this.overflowNodes$.next(\r\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\r\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\r\n            );\r\n\r\n            // move the scroll position to always show the last itme\r\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\r\n        }\r\n    }\r\n}","import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    /** Often a click event makes the element appear - if so we can end up closing it immediately */\n    private _initialised: boolean = false;\n\n    constructor(private _elementRef: ElementRef) {\n        setTimeout(() => this._initialised = true);\n    }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._initialised && this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  templateUrl: './popover.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SidePanelService } from './side-panel.service';\n\n@Component({\n    selector: 'ux-side-panel',\n    exportAs: 'ux-side-panel',\n    templateUrl: 'side-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel'\n    }\n})\nexport class SidePanelComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('class.open')\n    get open(): boolean {\n        return this.service.open$.value;\n    }\n\n    set open(value: boolean) {\n        this.service.open$.next(value);\n    }\n\n    @Input()\n    @HostBinding('class.inline')\n    inline = false;\n\n    @Input()\n    attachTo: 'window' | 'container' = 'window';\n\n    @Input()\n    width: string | number = '50%';\n\n    @Input()\n    top: string | number = '0';\n\n    @Input()\n    @HostBinding('attr.aria-modal')\n    modal = false;\n\n    @Input()\n    @HostBinding('class.animate')\n    animate = false;\n\n    @Input()\n    closeOnExternalClick = false;\n\n    @Input()\n    focusOnShow: boolean = false;\n\n    @Output()\n    openChange = new EventEmitter<boolean>();\n\n    get position() {\n        if (this.inline) {\n            return 'static';\n        }\n        if (this.attachTo === 'container') {\n            return 'absolute';\n        }\n        return 'fixed';\n    }\n\n    get cssWidth(): string {\n        if (typeof this.width === 'number') {\n            return this.width === 0 ? '0' : this.width + 'px';\n        }\n        return this.width;\n    }\n\n    get cssTop(): string {\n        if (typeof this.top === 'number') {\n            return this.top === 0 ? '0' : this.top + 'px';\n        }\n        return this.top;\n    }\n\n    @HostBinding('style.width')\n    get componentWidth(): string {\n        if (this.inline) {\n            return this.open ? this.cssWidth : '0';\n        }\n        return null;\n    }\n\n    get hostWidth() {\n        return this.inline ? '100%' : this.cssWidth;\n    }\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor(\n        protected service: SidePanelService,\n        private _elementRef: ElementRef\n    ) { }\n\n    ngOnInit() {\n        this.service.open$.pipe(takeUntil(this._onDestroy)).subscribe(isOpen => this.openChange.emit(isOpen));\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    openPanel() {\n        this.service.open();\n    }\n\n    @HostListener('document:keyup.escape')\n    closePanel() {\n        this.service.close();\n    }\n\n    @HostListener('document:click', ['$event'])\n    clickHandler(event: MouseEvent) {\n        if (!this.open || !this.closeOnExternalClick) {\n            return;\n        }\n\n        const target = event.target as HTMLElement;\n\n        if (!this._elementRef.nativeElement.contains(target) ||\n            (target && target.classList.contains('modal-backdrop'))) {\n            this.closePanel();\n        }\n    }\n}","import { Component, ContentChild, Directive, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\nimport { SidePanelService } from '../side-panel/side-panel.service';\n\n@Directive({\n    selector: '[uxItemDisplayPanelContent]'\n})\nexport class ItemDisplayPanelContentDirective { }\n\n@Directive({\n    selector: '[uxItemDisplayPanelFooter]'\n})\nexport class ItemDisplayPanelFooterDirective { }\n\n@Component({\n    selector: 'ux-item-display-panel',\n    templateUrl: './item-display-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel ux-item-display-panel'\n    }\n})\nexport class ItemDisplayPanelComponent extends SidePanelComponent implements OnInit {\n\n    @Input() header: string;\n\n    @Input() boxShadow: boolean = true;\n\n    @Input() closeVisible: boolean = true;\n\n    get preventClose(): boolean {\n        return !this.closeOnExternalClick;\n    }\n\n    @Input()\n    set preventClose(value: boolean) {\n        this.closeOnExternalClick = !value;\n    }\n\n    @Input() shadow: boolean = false;\n\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\n    @ViewChild('panel') panel: ElementRef;\n\n    /**\n     * @deprecated\n     * Title used for adding tooltips and shouldn't be used as an input\n     * instead header will be used. This is here to support backward compatibility only\n     * this property should not be used.\n     */\n    @Input()\n    set title(value: string) {\n        this.header = value;\n    }\n\n    get title() {\n        return this.header;\n    }\n\n    @Input()\n    set visible(visible: boolean) {\n        this.open = visible;\n    }\n\n    get visible() {\n        return this.open;\n    }\n\n    constructor(service: SidePanelService, elementRef: ElementRef) {\n        super(service, elementRef);\n\n        this.animate = false;\n        this.closeOnExternalClick = true;\n    }\n\n    ngOnInit() {\n        this.service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe(isVisible => this.visibleChange.emit(isVisible));\n    }\n\n    focus(): void {\n        if (this.panel) {\n            this.panel.nativeElement.focus();\n        }\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FocusIfModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    templateUrl: './wizard-step.component.html'\n})\nexport class WizardStepComponent {\n    \n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input() \n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n        \n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    get active(): boolean {\n        return this._active;\n    }\n\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { WizardStepComponent } from './wizard-step.component';\n\n@Component({\n    selector: 'ux-wizard',\n    templateUrl: './wizard.component.html',\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit {\n\n    private _step: number = 0;\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();        \n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    templateUrl: './marquee-wizard-step.component.html'\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    templateUrl: './marquee-wizard.component.html',\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(\n            filter((event: MarqueeWizardValidEvent) => !event.valid)\n        ).subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<Event> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe(() => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        const interval = setInterval(() => {\n\n            const buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) { }\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList | Array<any> {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : [];\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): Array<TextTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.textTracks) : [];\n    }\n\n    get videoTracks(): Array<VideoTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.videoTracks) : [];\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        if (this._mediaPlayer) {\n            this._mediaPlayer.volume = value;\n        }\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata', label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange() {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n\n    hideSubtitleTracks(): void {\n        for (let index = 0; index < this.textTracks.length; index++) {\n            this.textTracks[index].mode = 'hidden';\n        }\n    }\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    templateUrl: './slider.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb?: string;\n    lowerThumb?: string;\n    upperThumb?: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { timer } from 'rxjs/observable/timer';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SliderOptions, SliderSize } from '../../../slider/index';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-media-player-controls',\n    templateUrl: './controls.component.html',\n    host: {\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    volumeActive: boolean = false;\n    volumeFocus: boolean = false;\n    returnFocus: boolean = true;\n    subtitlesId: string = `ux-media-player-subtitle-popover-${uniqueId++}`;\n    subtitlesOpen: boolean = false;\n    mouseEnterVolume = new Subject<void>();\n    mouseLeaveVolume = new Subject<void>();\n\n    options: SliderOptions = {\n        handles: {\n            aria: {\n                thumb: 'Volume'\n            }\n        },\n        track: {\n            colors: {\n                lower: '#666'\n            },\n            height: SliderSize.Narrow,\n            ticks: {\n                major: {\n                    show: false\n                },\n                minor: {\n                    show: false\n                }\n            }\n        }\n    };\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n\n        this.mouseEnterVolume.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        this.mouseLeaveVolume.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(this.mouseEnterVolume))), takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        this.volume = this.volume === 0 ? this._previousVolume : 0;\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    isSubtitleActive(): boolean {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    setSubtitleTrack(track: TextTrack): void {\n        // hide all tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n\n        // set the position of the subtitle track\n        for (let idx = 0; idx < track.cues.length; idx++) {\n            const cue: any = track.cues[idx];\n            cue.line = -3;\n        }\n\n        // activate the selected one\n        track.mode = 'showing';\n\n    }\n\n    getSubtitleTrack(): string {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return this.mediaPlayerService.textTracks[idx].label;\n            }\n        }\n\n        return 'No subtitles';\n    }\n\n}","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxMediaPlayerCustomControl]',\n})\nexport class MediaPlayerCustomControlDirective {}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    templateUrl: './timeline.component.html',\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.mediaPlayerService.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({\n                    start: (buffered.start(idx) / this.mediaPlayerService.duration) * 100,\n                    end: (buffered.end(idx) / this.mediaPlayerService.duration) * 100\n                });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n\n    /** Skip a number of seconds in any direction */\n    skip(seconds: number): void {\n        let target = this.current + seconds;\n\n        // ensure that the target position is within the bounds of the clip\n        if (target < 0) {\n            target = 0;\n        }\n\n        if (target > this.mediaPlayerService.duration) {\n            target = this.mediaPlayerService.duration;\n        }\n\n        this.mediaPlayerService.currentTime = target;\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: HttpClient) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.get(mediaElement.src, { responseType: 'blob' }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: response.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.get(url, { responseType: 'arraybuffer' }).subscribe(response => {\n                this.getAudioBuffer(response).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpClientModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { debounceTime, takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    templateUrl: './media-player.component.html',\n    providers: [MediaPlayerService],\n    host: {\n        '(keydown.Space)': 'mediaPlayerService.togglePlay(); $event.preventDefault()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering || focused',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange()'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    focused: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    @Input() crossorigin: 'use-credentials' | 'anonymous' = 'use-credentials';\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            tap(() => this.hovering = true),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n\n        // initially hide all text tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { SliderModule } from '../slider/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { MediaPlayerCustomControlDirective } from './extensions/controls/custom-control/custom-control.directive';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerComponent } from './media-player.component';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent,\n    MediaPlayerCustomControlDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule,\n        SliderModule,\n        AccessibilityModule,\n        A11yModule,\n        ClickOutsideModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class MediaPlayerModule { }\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-navigation',\n    templateUrl: './navigation.component.html'\n})\nexport class NavigationComponent {\n\n}","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, HostBinding, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    templateUrl: './navigation-item.component.html',\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() link: string;\n    @Input() @HostBinding('class.selected') expanded: boolean = false;\n\n    @HostBinding('class.active')\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional() @SkipSelf() private _parent: NavigationItemComponent,\n        private _router: Router,\n        private _activatedRoute: ActivatedRoute\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd))\n            .subscribe(() => this.expanded = this.hasActiveLink(this.link));\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            const levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy(): void {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n\n        const tree = this._router.createUrlTree([link], {\n            relativeTo: this._activatedRoute,\n            queryParams: this._activatedRoute.snapshot.queryParams,\n            fragment: this._activatedRoute.snapshot.fragment\n        });\n\n        if (link && this._router.isActive(tree, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n           // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ColorService } from '../../services/color/index';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n\r\n    // provide default options\r\n    options: NotificationOptions = {\r\n        duration: 4,\r\n        height: 100,\r\n        spacing: 10,\r\n        backgroundColor: this._colorService.getColor('accent').toHex(),\r\n        iconColor: this._colorService.getColor('accent').toHex()\r\n    };\r\n\r\n    direction: NotificationListDirection = 'above';\r\n\r\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \r\n\r\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\r\n\r\n        options = { ...this.options, ...options };\r\n\r\n        const notificationRef: NotificationRef = {\r\n            templateRef: templateRef,\r\n            duration: options.duration,\r\n            date: new Date(),\r\n            visible: true,\r\n            height: options.height,\r\n            spacing: options.spacing,\r\n            backgroundColor: options.backgroundColor,\r\n            iconColor: options.iconColor,\r\n            data: data\r\n        };\r\n\r\n        const notifications = this.notifications$.getValue();\r\n\r\n        if (this.direction === 'above') {\r\n            notifications.unshift(notificationRef);\r\n        } else {\r\n            notifications.push(notificationRef);\r\n        }\r\n\r\n        this.notifications$.next(notifications);\r\n\r\n        // remove notification after delay\r\n        if (options.duration !== 0) {\r\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\r\n        }\r\n\r\n        return notificationRef;\r\n    }\r\n\r\n    getHistory(): NotificationRef[] {\r\n        return this.notifications$.getValue();\r\n    }\r\n\r\n    dismiss(notificationRef: NotificationRef): void {\r\n        notificationRef.visible = false;\r\n        this.notifications$.next(this.notifications$.getValue());\r\n    }\r\n    \r\n    dismissAll(): void {\r\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\r\n        this.notifications$.next(this.notifications$.getValue());        \r\n    }\r\n\r\n    constructor(private _colorService: ColorService) {\r\n    }\r\n}\r\n\r\nexport interface NotificationRef {\r\n    templateRef: TemplateRef<any>;\r\n    duration: number;\r\n    date: Date;\r\n    visible?: boolean;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n    data: { [key: string]: any };\r\n}\r\n\r\nexport interface NotificationOptions {\r\n    duration?: number;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n}\r\n\r\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    templateUrl: './notification-list.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n    secondaryNavigationAutoselect = false;\n\n    private _onDestroy = new Subject();\n\n    constructor(private _router: Router) {\n\n        this.selected$\n            .pipe(takeUntil(this._onDestroy), map(selected => this.getRoot(selected)))\n            .subscribe(root => this.selectedRoot$.next(root));\n\n        this._router.events\n            .pipe(takeUntil(this._onDestroy), filter(e => e instanceof NavigationEnd))\n            .subscribe(this.updateItemsWithActiveRoute.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        if (!item) {\n            return;\n        }\n\n        if (item.routerLink) {\n\n            // Trigger router navigation\n            const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            this._router.navigate(routerLink, item.routerExtras);\n\n        } else if (this.secondaryNavigationAutoselect && item.children && item.children.length > 0) {\n\n            // Select the first child in secondaryNavigationAutoselect mode\n            this.select(item.children[0]);\n\n        } else {\n\n            // if we are in secondary navigation mode and we click a parent - dont deselect the child\n            if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n                return;\n            }\n\n            // Otherwise select the given item\n            this.selected$.next(item);\n        }\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    updateItem(item: PageHeaderNavigationItem, selected: PageHeaderNavigationItem): void {\n        // Item is selected if it is the selected item, or one of the selected item's ancestors.\n        item.selected = item === selected || this.isParentOf(selected, item);\n\n        if (item === selected) {\n            // call the select function if present\n            if (item.select) {\n                item.select.call(item, item);\n            }\n        }\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n\n        // Set up the initally selected item\n        // If nothing is set as selected, using the initial route\n        const initialSelectedItem = items.find(item => item.selected === true);\n        if (initialSelectedItem) {\n            this.select(initialSelectedItem);\n        } else {\n            this.updateItemsWithActiveRoute();\n        }\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n\n    private updateItemsWithActiveRoute(): void {\n        const selected = this.findActiveItem(this.items$.getValue());\n        if (selected) {\n            this.selected$.next(selected);\n        }\n    }\n\n    private findActiveItem(items: PageHeaderNavigationItem[]): PageHeaderNavigationItem {\n        for (var item of items) {\n            if (item.routerLink && this.isRouterLinkActive(item)) {\n                return item;\n            }\n            if (item.children) {\n                const activeItem = this.findActiveItem(item.children);\n                if (activeItem) {\n                    return activeItem;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    private isRouterLinkActive(item: PageHeaderNavigationItem): boolean {\n        const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n        const urlTree = this._router.createUrlTree(routerLink, item.routerExtras);\n\n        return this._router.isActive(urlTree, true);\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;\n","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    templateUrl: './icon-menu.component.html'\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    templateUrl: './navigation-dropdown-item.component.html'\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    templateUrl: './navigation-item.component.html'\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _onDestroy = new Subject();\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        this._pageHeaderService.selected$.pipe(takeUntil(this._onDestroy)).subscribe(next => {\n\n            // Update selected state for this item\n            this._pageHeaderService.updateItem(this.item, next);\n\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this.menu.onHidden\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(): void {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { delay, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { PageHeaderService } from '../../page-header.service';\r\nimport { PageHeaderNavigationItem } from '../navigation.component';\r\n\r\n@Directive({\r\n    selector: '[uxPageHeaderNavigationSecondaryItem]'\r\n})\r\nexport class PageHeaderNavigationSecondaryItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('uxPageHeaderNavigationSecondaryItem')\r\n    item: PageHeaderNavigationItem;\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _pageHeaderService: PageHeaderService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this._pageHeaderService.selected$.pipe(delay(0), takeUntil(this._onDestroy)).subscribe(next => {\r\n\r\n            // Update selected state for this item\r\n            this._pageHeaderService.updateItem(this.item, next);\r\n\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    templateUrl: './navigation.component.html',\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Component, ContentChild, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    templateUrl: 'page-header.component.html',\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() title: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: 'left' | 'right' | 'center' = 'center';\n\n    @Input()\n    set secondaryNavigationAutoselect(value: boolean) {\n        this._pageHeaderService.secondaryNavigationAutoselect = value;\n    }\n\n    get secondaryNavigationAutoselect(): boolean {\n        return this._pageHeaderService.secondaryNavigationAutoselect;\n    }\n\n    @Input()\n    set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input()\n    set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input()\n    set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input() crumbsStyle: 'standard' | 'small' = 'standard';\n\n    @Input()\n    set logoBackground(color: string) {\n        this._logoBackground = this._colorService.resolve(color);\n    }\n\n    get logoBackground(): string {\n        return this._logoBackground;\n    }\n\n    @Input()\n    set logoForeground(color: string) {\n        this._logoForeground = this._colorService.resolve(color);\n    }\n\n    get logoForeground(): string {\n        return this._logoForeground;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this.logoBackground = color;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this.logoForeground = color;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChild('title') titleTemplate: TemplateRef<any>;\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _logoBackground: string;\n    private _logoForeground: string;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationSecondaryItemDirective } from './navigation/navigation-secondary-item/navigation-secondary-item.directive';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderComponent } from './page-header.component';\n\n\n@NgModule({\n    imports: [\n        BreadcrumbsModule,\n        BsDropdownModule.forRoot(),\n        ColorServiceModule,\n        CommonModule,\n        MenuNavigationModule,\n        ResizeModule,\n        RouterModule,\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent,\n        PageHeaderNavigationSecondaryItemDirective\n    ]\n})\nexport class PageHeaderModule { }\n","import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        role: 'progressbar'\n    }\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() @HostBinding('attr.aria-valuemin') min: number = 0;\n    @Input() @HostBinding('attr.aria-valuemax') max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n\n    /** When indeteminate we should omit the valuenow label */\n    @HostBinding('attr.aria-valuenow') get valueNow() {\n        return this.indeterminate ? null : this.value;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    templateUrl: './radiobutton.component.html',\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(private _searchBuilderService: SearchBuilderService) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query\n   */\n  remove(field: SearchBuilderGroupQuery): void {\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(query.indexOf(field), 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  templateUrl: './search-builder-group.component.html',\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  constructor(public searchBuilderGroupService: SearchBuilderGroupService, private _searchBuilderService: SearchBuilderService) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have a name attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n  }\n\n  removeField(field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.remove(field);\n    this.remove.emit(field);\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit {\n\n    @Input() uxSearchBuilderOutlet: string;\n    @Input() uxSearchBuilderOutletContext: any;\n\n    private _componentRef: ComponentRef<any>;\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.uxSearchBuilderOutlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.uxSearchBuilderOutletContext.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.uxSearchBuilderOutletContext;\n        this._componentRef.instance.config = config;\n    }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderGroupService } from '../search-builder-group/search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    constructor(\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderGroupService: SearchBuilderGroupService\n    ) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  templateUrl: './text.component.html'\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  templateUrl: './date.component.html'\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    templateUrl: './date-range.component.html'\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  templateUrl: './select.component.html'\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  templateUrl: './search-builder.component.html',\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, forwardRef, HostBinding, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, delay, distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    templateUrl: 'select.component.html',\r\n    providers: [SELECT_VALUE_ACCESSOR]\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    set value(value: any) {\r\n        this._value$.next(value);\r\n    }\r\n    get value() {\r\n        return this._value$.value;\r\n    }\r\n\r\n    @Input()\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n    }\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n\r\n    @Input()\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value$ = new BehaviorSubject<any>(null);\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Emit change events\r\n        this._value$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.valueChange.emit(value);\r\n            this.propagateChange(value);\r\n        });\r\n\r\n        this._input$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.inputChange.emit(value);\r\n        });\r\n\r\n        // Changes to the input field\r\n        this._input$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        this.filter$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => value && value.length > 0)\r\n        ).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // Update the single-select input when the model changes\r\n        this._value$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            distinctUntilChanged(),\r\n            delay(0),\r\n            filter(value => value !== null && !this.multiple)\r\n        ).subscribe(value => {\r\n            this.input = this.getDisplay(value);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this.value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { DOCUMENT } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    templateUrl: 'tag-input.component.html',\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    // Workaround for EL-3224 until the issue can be diagnosed.\r\n    @Input() trackAriaDescendant: boolean = true;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n\r\n    typeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _typeaheadSubscription: Subscription;\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n        this.typeaheadQuery.changes.subscribe((query) => {\r\n            this.connectTypeahead(query.first);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    writeValue(value: any[]) {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any) {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any) {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate() {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'Delete':\r\n            case 'Del':\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n            case 'ArrowLeft':\r\n            case 'Left':\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'ArrowRight':\r\n            case 'Right':\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout', ['$event'])\r\n    focusOutHandler(event: FocusEvent) {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput() {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any) {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param d Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(d: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += d;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible() {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent) {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n            this._typeaheadSubscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._typeaheadSubscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            // Set up event handler for the highlighted element\r\n            // Added a delay to move it out of the current change detection cycle\r\n            if (this.trackAriaDescendant) {\r\n                this._typeaheadSubscription.add(\r\n                    this.typeahead.highlightedElementChange.subscribe((element: HTMLElement) => {\r\n                        this.highlightedElement = element;\r\n                    })\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.key) {\r\n            case 'Spacebar':\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SelectModule } from '../select/index';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    DateTimePickerModule,\n    PopoverModule,\n    SelectModule\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ]\n})\nexport class SearchBuilderModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy {\n\n  constructor(protected selectionService?: SelectionService) { }\n\n  setSelectionService(selectionService: SelectionService): void {\n    this.selectionService = selectionService;\n  }\n\n  mousedown(event: MouseEvent, data: any): void { }\n\n  click(event: MouseEvent, data: any): void { }\n\n  keydown(event: KeyboardEvent, data: any): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: any[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: any[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: any[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n    this.deselect(...this.selectionService.dataset);\n  }\n\n  destroy(): void { }\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy extends SelectionStrategy {\n\n  // store the most recently selected row\n  private _selection: Selection = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n      case DOWN_ARROW:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n\n      case SPACE:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data, true);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: any, activate: boolean = false): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n\n    // if we want to keep the item activated then activate\n    if (activate) {\n      this.selectionService.activate(data);\n    }\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: any): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  protected multipleSelect(data: any): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: any): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: any): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  protected clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): any[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.which === UP_ARROW);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection {\n  start: any;\n  end: any;\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { RowSelectionStrategy } from './row-selection.strategy';\r\n\r\nexport class RowAltSelectionStrategy extends RowSelectionStrategy {\r\n    keydown(event: KeyboardEvent, data: any): void {\r\n        switch (event.which) {\r\n            case UP_ARROW:\r\n            case DOWN_ARROW:\r\n                event.preventDefault();\r\n                this.handleCursorKey(event, data);\r\n                break;\r\n\r\n            case SPACE:\r\n                event.preventDefault();\r\n                this.selectionService.strategy.toggle(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the sibling item when arrow keys are pressed\r\n     */\r\n    private handleCursorKey(event: KeyboardEvent, data: any): void {\r\n        // determine which modifier keys are pressed\r\n        const { ctrlKey, shiftKey } = event;\r\n\r\n        // if no modifier keys are pressed then deselect all and clear the selection\r\n        if (!ctrlKey && !shiftKey) {\r\n            this.deselectAll();\r\n            this.clearSelection(false);\r\n        }\r\n\r\n        if (ctrlKey) {\r\n            this.selectionService.activateSibling(event.which === UP_ARROW);\r\n        } else {\r\n            const sibling = this.selectionService.getSibling(event.which === UP_ARROW);\r\n            this.multipleSelect(sibling ? sibling : data);\r\n        }\r\n    }\r\n}\r\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy extends SelectionStrategy {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(_event: MouseEvent, data: any): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n        event.preventDefault();\n        return this.selectionService.activateSibling(true);\n\n      case DOWN_ARROW:\n        event.preventDefault();\n        return this.selectionService.activateSibling(false);\n\n      case SPACE:\n        event.preventDefault();\n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: any): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowAltSelectionStrategy } from './strategies/row-alt-selection.strategy';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n\n  set dataset(dataset: ReadonlyArray<any>) {\n    this._dataset = dataset;\n    this.setFirstItemFocusable();\n  }\n\n  get dataset(): ReadonlyArray<any> {\n    return this._dataset;\n  }\n\n  strategy: SelectionStrategy = new SimpleSelectionStrategy(this);\n  isEnabled: boolean = true;\n  isClickEnabled: boolean = true;\n  isKeyboardEnabled: boolean = true;\n\n  focus$ = new BehaviorSubject<any>(null);\n  active$ = new BehaviorSubject<any>(null);\n  selection$ = new BehaviorSubject<any[]>([]);\n\n  private _active: any;\n  private _dataset: ReadonlyArray<any> = [];\n  private _selection = new Set();\n  private _strategyToDestroy: SelectionStrategy = this.strategy;\n\n  ngOnDestroy(): void {\n    if (this._strategyToDestroy) {\n      this._strategyToDestroy.destroy();\n    }\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: any[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: any[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: any[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: any): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  getSelectionState(data: any): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setStrategy(mode: SelectionMode | SelectionStrategy): void {\n\n    if (this._strategyToDestroy) {\n      // Destroy previous strategy if it was created internally\n      this._strategyToDestroy.destroy();\n      this._strategyToDestroy = null;\n    }\n\n    if (mode instanceof SelectionStrategy) {\n\n      // Custom strategy - pass in the service instance\n      this.strategy = mode;\n      this.strategy.setSelectionService(this);\n\n    } else {\n\n      switch (mode.toLowerCase().trim()) {\n\n        case 'simple':\n          this.strategy = this._strategyToDestroy = new SimpleSelectionStrategy(this);\n          break;\n\n        case 'row':\n          this.strategy = this._strategyToDestroy = new RowSelectionStrategy(this);\n          break;\n\n        case 'row-alt':\n          this.strategy = this._strategyToDestroy = new RowAltSelectionStrategy(this);\n          break;\n\n        default:\n          throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple', 'row', or 'row-alt'.`);\n      }\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: any): void {\n    this._active = data;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this._active = null;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Return the next or previous sibling of the current active item.\n   * @param previous If true, the previous sibling will be returned.\n   */\n  getSibling(previous: boolean = false): any {\n\n    // check if there is a current active item\n    if (!this._active) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(this._active);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    return target;\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): any {\n\n    const target = this.getSibling(previous);\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.isEnabled = !disabled;\n\n    // clear any stateful data\n    this._active = null;\n    this.active$.next(this._active);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n\n  private setFirstItemFocusable(): void {\n    if (this._dataset.length > 0) {\n      this.focus$.next(this._dataset[0]);\n      this._active = this._dataset[0];\n    } else {\n      this._active = null;\n    }\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row' | 'row-alt';","import { Component, ElementRef, HostBinding, HostListener, Input, OnDestroy } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionService } from '../../../directives/selection/selection.service';\n\n@Component({\n    selector: 'ux-select-list-item',\n    templateUrl: './select-list-item.component.html',\n    host: {\n        role: 'listitem'\n    }\n})\nexport class SelectListItemComponent implements OnDestroy {\n\n    @Input() data: any;\n    @HostBinding('tabindex') tabindex: number = -1;\n\n    @HostBinding('class.selected')\n    @HostBinding('attr.aria-selected')\n    set selected(isSelected: boolean) {\n        isSelected ? this._selection.select(this.data) : this._selection.deselect(this.data);\n    }\n\n    get selected(): boolean {\n        return this._selection.isSelected(this.data);\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _selection: SelectionService, elementRef: ElementRef) {\n\n        _selection.active$.pipe(takeUntil(this._onDestroy), filter(data => data === this.data)).subscribe(active => {\n            _selection.focus$.next(active);\n            elementRef.nativeElement.focus();\n        });\n\n        // make this item tabbable or not based on the focused element\n        _selection.focus$.pipe(takeUntil(this._onDestroy))\n            .subscribe(focused => this.tabindex = focused === this.data ? 0 : -1);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMouseDown(event: MouseEvent): void {\n        this._selection.strategy.mousedown(event, this.data);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent): void {\n        this._selection.strategy.click(event, this.data);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._selection.strategy.keydown(event, this.data);\n    }\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class MultipleSelectListStrategy extends SelectionStrategy {\n\n    private _lastSelection: any;\n\n    /** Prevent the browser from highlighting text on shift click */\n    mousedown(event: MouseEvent): void {\n        event.preventDefault();\n    }\n\n    click(event: MouseEvent, data: any): void {\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // if the shift key is pressed we want to perform a multiple selection\n        if (event.shiftKey) {\n            return this.multipleSelect(data);\n        }\n\n        // otherwise perform a single toggle selection\n        if (this.selectionService.isSelected(data)) {\n            this.deselect(data);\n            this._lastSelection = null;\n        } else {\n            this.select(data);\n            this._lastSelection = data;\n        }\n    }\n\n    keydown(event: KeyboardEvent, data: any): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(true);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(false);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.toggle(data);\n                this._lastSelection = this.selectionService.isSelected(data) ? data : null;\n                break;\n        }\n    }\n\n    multipleSelect(data: any): void {\n\n        // if there is no start item selected\n        if (!this._lastSelection) {\n            this.select(data);\n            return this._lastSelection = data;\n        }\n\n        // if there already is a start item then find the items in the range\n        this.select(...this.getSelectedItems(this._lastSelection, data));\n\n        // store the selection end point\n        this._lastSelection = data;\n    }\n\n    private getSelectedItems(start: any, end: any): any[] {\n\n        // get the latest dataset\n        const { dataset } = this.selectionService;\n\n        // get the indexes of the start and end point\n        const startIdx = dataset.indexOf(start);\n        const endIdx = dataset.indexOf(end);\n\n        // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n        return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n    }\n\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class SingleSelectListStrategy extends SelectionStrategy {\n\n    click(_event: MouseEvent, data: any): void {\n\n        if (!this.selectionService.isSelected(data)) {\n            // deselect all other items\n            this.deselectAll();\n        }\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // toggle the selected state of the item\n        this.toggle(data);\n    }\n\n    keydown(event: KeyboardEvent, data: any): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(true);\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(false);\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.click(null, data);\n                break;\n        }\n    }\n\n}","import { AfterContentInit, Component, ContentChildren, EventEmitter, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SelectionService } from '../../directives/selection/selection.service';\nimport { MultipleSelectListStrategy } from './multiple-select-list.strategy';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SingleSelectListStrategy } from './single-select-list.strategy';\n\n@Component({\n    selector: 'ux-select-list',\n    templateUrl: './select-list.component.html',\n    providers: [SelectionService],\n    host: {\n        role: 'list'\n    }\n})\nexport class SelectListComponent implements AfterContentInit, OnDestroy {\n\n    @Input() set multiple(multiple: boolean) {\n        this._selection.strategy.deselectAll();\n        this._selection.setStrategy(multiple ? new MultipleSelectListStrategy() : new SingleSelectListStrategy());\n    }\n\n    @Input() selected: any[] = [];\n    @Output() selectedChange = new EventEmitter<any[]>();\n\n    @ContentChildren(SelectListItemComponent) items: QueryList<SelectListItemComponent>;\n\n    private _subscription: Subscription;\n\n    constructor(private _selection: SelectionService) {\n        // set the selection strategy to single by default\n        this._selection.setStrategy(new SingleSelectListStrategy());\n\n        // emit the selection changes when they occur\n        this._subscription = this._selection.selection$.subscribe(selection => this.selectedChange.emit(selection));\n    }\n\n    ngAfterContentInit(): void {\n\n        // supply the initial item set\n        this._selection.dataset = this.items.map(item => item.data);\n\n        // if the item set changes update the list\n        this.items.changes.subscribe(() => this._selection.dataset = this.items.map(item => item.data));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SelectListComponent } from './select-list.component';\n\n@NgModule({\n    declarations: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n    exports: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n})\nexport class SelectListModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\nimport { SidePanelComponent } from './side-panel.component';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        FocusIfModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    templateUrl: './spark.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';    \n    private _barColor: string | string[] = [];\n    \n    @Input() \n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input() \n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input() \n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    templateUrl: './tab.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    templateUrl: './tabset.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetComponent } from './tabset.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    templateUrl: './timeline.component.html'\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    templateUrl: './timeline-event.component.html'\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    templateUrl: './toggleswitch.component.html',\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolbarSearchComponent } from './toolbar-search.component';\r\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\r\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\r\n\r\nconst DECLARATIONS = [\r\n    ToolbarSearchComponent,\r\n    ToolbarSearchFieldDirective,\r\n    ToolbarSearchButtonDirective\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: DECLARATIONS,\r\n    declarations: DECLARATIONS,\r\n    providers: [],\r\n})\r\nexport class ToolbarSearchModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    templateUrl: './virtual-scroll.component.html'\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\r\n\r\nimport { AutoGrowDirective } from './auto-grow.directive';\r\n\r\n@NgModule({\r\n    exports: [AutoGrowDirective],\r\n    declarations: [AutoGrowDirective]\r\n})\r\nexport class AutoGrowModule { }\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n  selector: '[uxOverflowObserver], [uxOverflowHorizontalObserver], [uxOverflowVerticalObserver]',\n  exportAs: 'ux-overflow-observer'\n})\nexport class OverflowDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  /** Allow a observable to be used to check for overflow */\n  @Input() trigger: Observable<void>;\n\n  /** Allow overflow to be within a range before emitting */\n  @Input() tolerance: number = 0;\n\n  /** Emit when there is a change to the overflow state - horizontal or vertical */\n  @Output() uxOverflowObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the horizontal axis */\n  @Output() uxOverflowHorizontalObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the vertical axis */\n  @Output() uxOverflowVerticalObserver = new EventEmitter<boolean>();\n\n  /** Store the overflow state on both axis */\n  private _state = { horizontalOverflow: false, verticalOverflow: false };\n\n  /** Unsubscribe from all the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** Set up the trigger if specified */\n  ngOnInit(): void {\n    if (this.trigger) {\n      this.trigger.pipe(takeUntil(this._onDestroy)).subscribe(() => this.checkForOverflow());\n    }\n  }\n\n  /** Perform an intial check for overflow */\n  ngAfterViewInit(): void {\n    requestAnimationFrame(() => this.checkForOverflow());\n  }\n\n  /** Unsubscribe from the trigger */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Programmatically trigger check for overflow */\n  checkForOverflow(): void {\n\n    const { offsetWidth, offsetHeight, scrollWidth, scrollHeight } = this._elementRef.nativeElement;\n    const horizontalOverflow = (scrollWidth - offsetWidth) > this.tolerance;\n    const verticalOverflow = (scrollHeight - offsetHeight) > this.tolerance;\n\n    if (horizontalOverflow !== this._state.horizontalOverflow) {\n      this.uxOverflowHorizontalObserver.emit(horizontalOverflow);\n    }\n\n    if (verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowVerticalObserver.emit(verticalOverflow);\n    }\n\n    if (horizontalOverflow !== this._state.horizontalOverflow || verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowObserver.emit((horizontalOverflow || verticalOverflow));\n    }\n\n    // store the state\n    this._state = { horizontalOverflow, verticalOverflow };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OverflowDirective } from './overflow/overflow-observer.directive';\n\n@NgModule({\n  exports: [OverflowDirective],\n  declarations: [OverflowDirective]\n})\nexport class ObserversModule { }\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { SelectionService } from './selection.service';\r\n\r\n@Directive({\r\n    selector: '[uxSelectionItem]',\r\n    exportAs: 'ux-selection-item'\r\n})\r\nexport class SelectionItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input() uxSelectionItem: any;\r\n\r\n    @Input() @HostBinding('class.ux-selection-selected')\r\n    set selected(selected: boolean) {\r\n        selected ? this.select() : this.deselect();\r\n    }\r\n\r\n    get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    @Input() tabindex: number = null;\r\n\r\n    @Output() selectedChange = new EventEmitter<boolean>();\r\n\r\n    @HostBinding('class.ux-selection-focused') active: boolean = false;\r\n\r\n    @HostBinding('attr.tabindex')\r\n    get attrTabIndex(): number {\r\n        return (this.tabindex !== null) ? this.tabindex : this._managedTabIndex;\r\n    }\r\n\r\n    private _selected: boolean = false;\r\n    private _managedTabIndex: number = -1;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _selectionService: SelectionService, private _elementRef: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        // if there is no associated data then throw an error\r\n        if (!this.uxSelectionItem) {\r\n            throw new Error('The uxSelectionItem directive must have data associated with it.');\r\n        }\r\n\r\n        // subscribe to selection changes on this item\r\n        this._selectionService.getSelectionState(this.uxSelectionItem).pipe(takeUntil(this._onDestroy)).subscribe(selected => {\r\n\r\n            // store the selected state\r\n            this._selected = selected;\r\n\r\n            // emit the selected state\r\n            this.selectedChange.emit(selected);\r\n        });\r\n\r\n        // subscribe to changes to the active state\r\n        this._selectionService.active$.pipe(takeUntil(this._onDestroy), map(active => active === this.uxSelectionItem)).subscribe(active => {\r\n\r\n            // store the focus state\r\n            this.active = active;\r\n\r\n            // if it is active then focus the element\r\n            if (active === true) {\r\n                this._selectionService.focus$.next(this.uxSelectionItem);\r\n                this._elementRef.nativeElement.focus();\r\n            }\r\n        });\r\n\r\n        // Subscribe to changes to the focus target\r\n        // This is mostly the same as active$, except that it has an initial value of the first item in the collection.\r\n        this._selectionService.focus$.pipe(takeUntil(this._onDestroy)).subscribe(focusTarget => {\r\n            this._managedTabIndex = (focusTarget === this.uxSelectionItem) ? 0 : -1;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    click(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.click(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    mousedown(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keydown(event: KeyboardEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isKeyboardEnabled) {\r\n            this._selectionService.strategy.keydown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('focus')\r\n    focus(): void {\r\n        // If tabbed to from outside the component, activate.\r\n        if (this._selectionService.active$.getValue() !== this.uxSelectionItem) {\r\n            this._selectionService.activate(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select this item using the current strategy\r\n     */\r\n    select(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.select(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselect this item using the current strategy\r\n     */\r\n    deselect(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.deselect(this.uxSelectionItem);\r\n        }\r\n    }\r\n}\r\n","import { AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\nimport { SelectionStrategy } from './strategies/selection.strategy';\n\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: any[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode | SelectionStrategy) {\n    this._selectionService.setStrategy(mode);\n  }\n\n  @Input() set clickSelection(isClickEnabled: boolean) {\n    this._selectionService.isClickEnabled = isClickEnabled;\n  }\n\n  @Input() set keyboardSelection(isKeyboardEnabled: boolean) {\n    this._selectionService.isKeyboardEnabled = isKeyboardEnabled;\n  }\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number = null;\n\n  @Output() uxSelectionChange = new EventEmitter<any[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective>;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _selectionService: SelectionService, private _cdRef: ChangeDetectorRef) {\n    _selectionService.selection$.pipe(takeUntil(this._onDestroy)).subscribe(items => this.uxSelectionChange.emit(items));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this.items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.update());\n\n    // The above could trigger a change in the computed tabindex for selection items\n    this._cdRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n\n    // Make sure that a tab target has been defined so that the component can be tabbed to.\n    if (this._selectionService.focus$.getValue() === null && this._selectionService.dataset.length > 0) {\n      this._selectionService.focus$.next(this._selectionService.dataset[0]);\n    }\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() template: string;\n    @Input() templateUrl: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: any[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange: EventEmitter<TreeGridOptions> = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n    @Output() currentRowChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() treeDataChange: EventEmitter<TreeGridData[]> = new EventEmitter<TreeGridData[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}\n","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}"]}