{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","null","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-subject.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-utils.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.service.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/interfaces/conduit-properties.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.decorator.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/check-list-item/facet-check-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/custom-control/custom-control.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/focus-within/focus-within.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.service.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/accessibility.module.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-secondary-item/navigation-secondary-item.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/observers/overflow/overflow-observer.directive.ts","ng://@ux-aspects/ux-aspects/directives/observers/observers.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-alt-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts"],"names":["BreadcrumbsComponent","prototype","clickCrumb","event","crumb","onClick","call","Component","args","selector","template","Input","BreadcrumbsModule","NgModule","imports","CommonModule","RouterModule","exports","declarations","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","this","constructor","create","__assign","assign","t","s","i","n","arguments","length","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","ResizeService","_zone","ResizeObserver","elementDidResize","bind","WeakMap","ngOnDestroy","_observer","disconnect","addResizeListener","target","_this","runOutsideAngular","observe","_targets","has","get","emitter","ReplaySubject","set","removeResizeListener","unobserve","entries","run","entries_1","tslib_1.__values","entries_1_1","entry","width","offsetWidth","height","offsetHeight","Injectable","NgZone","ResizeDirective","_elementRef","_resizeService","_ngZone","EventEmitter","ngOnInit","_subscription","nativeElement","pipe","debounceTime","throttle","subscribe","uxResize","emit","unsubscribe","Directive","providers","ElementRef","Output","ResizeModule","CardTabContentDirective","CardTabsService","BehaviorSubject","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","defineProperty","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","getComputedStyle","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","HostBinding","type","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","id","toggle","disabled","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","Subject","ColumnSortingDirective","events","complete","toggleColumn","sorting","order","singleSort","toggleSingleColumn","toggleMultipleColumn","state","ColumnSortingState","NoSort","key","findIndex","column","Ascending","Descending","_column","ColumnSortingComponent","_columnSorter","takeUntil","_onDestroy","columnIdx","stateChange","changeState","exportAs","ColumnSortingModule","ConduitSubject","conduit","zoneId","_subject","subject","getInitialValue","distinctUntilChanged","onOutput","getEvents","onInput","acceptsInput","subjects","getSubjects","isArray","indexOf","sort","subjectOne","subjectTwo","lastModified","getTime","currentValue","producesOutput","zone","outputValue","Date","destroy","invokeSuperFunction","functionName","functionList","_i","forEach","func","apply","ConduitZone","_zoneId","unregisterConduit","registerConduit","getConduitSubject","setZoneId","setConduitProperties","properties","conduitSubject","_conduit","prop","createConduit","registerConduits","component","_conduits","propertyKey","unregisterConduits","ConduitComponent","decorators","Optional","ConduitZoneComponent","_super","tslib_1.__extends","defaultConduitProps","CONDUITS","DashboardService","defaultOptions","dimensions$","delay","visible","x","y","layout$","setLayoutData","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","columns","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","row","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","undefined","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","idx","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","Error","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","reduce","forEachBlock","onResizeStart","action","_mouseEvent","bringToFront","onResizeDrag","mousePosX","pageX","pageXOffset","mousePosY","pageY","pageYOffset","handle","getBoundingClientRect","mouseX","left","mouseY","top","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","onDragStart","setWidgetOrigin","cacheWidgets","onDragEnd","_widgetOrigin","onDrag","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","match","wgt","widgetsToMove","this_1","space","array","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","splice","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","Rounding","RoundDownBelowHalf","RoundUpOverHalf","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundUp","getRowCount","emptyRow","sendToBack","stable","callback","DashboardComponent","dashboardService","layout","layoutChange","ngAfterViewInit","dashboardElement","onResize","DashboardWidgetComponent","regular","update","_columnSpan","_rowSpan","console","warn","random","toString","getStackableValue","_row","setStackableValue","zIndex","dragstart","drag","dragend","property","DragDirective","_renderer","fromEvent","document","_mousedown$","draggable","dragStart","preventDefault","clone","cloneNode","addClass","_mousemove$","_mouseup$","dragMove","dragEnd","_clone","updateNodePosition","removeChild","body","removeClass","_offset","clientX","clientY","inlineStyles","setAttribute","setStyle","appendChild","source","styles","style","item","children","Renderer2","DashboardDragHandleDirective","elementRef","ngZone","renderer","DragModule","DECLARATIONS","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","deltaY","triggerDecrement","triggerIncrement","increment","decrement","encapsulation","ViewEncapsulation","None","SpinButtonModule","TimeFormatPipe","transform","pad","Pipe","name","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","value$","date","getHours","hour","showMeridian","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","valid","isValid","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","hourChange","parseInt","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","host","aria-label","TimePickerModule","gridify","items","range","start","end","list","compareDays","day1","day2","getDate","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","substring","weekdaysShort","weekday","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showSpinners","weekdays","nowBtnText","timezones","ModeDirection","selected$","setViewportMonth","setViewportYear","date$","month$","year$","year","setDate","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","Subscription","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","DayViewService","_datepicker","combineLatest","_b","createDayGrid","setFocus","focused$","getDay","dates","dateRange","isToday","isActive","isCurrentMonth","grid$","selectedDay","first","DayViewComponent","datePicker","dayService","trackWeekByFn","index","trackDayByFn","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","decrementTimezone","YearViewService","_year","createYearGrid","_event","goToNextDecade","goToPreviousDecade","add","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","focus","_timeout","clearTimeout","window","setTimeout","focusIfDelay","FocusIfModule","DateTimePickerModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","role","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_tooltipService","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","changes","firstChange","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","includes","showTriggers","hideTriggers","isFocused","activeElement","removeAttribute","ViewContainerRef","Overlay","ScrollDispatcher","TooltipModule","OverlayModule","ObserversModule","entryComponents","TypeaheadOptionEvent","option","TypeaheadKeyService","handleKey","typeahead","open","moveHighlight","selectOnEnter","selectHighlighted","TypeaheadService","uniqueId","TypeaheadComponent","typeaheadElement","_changeDetector","_service","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","pageSize","arrayOrPromise","Promise","resolve","then","newOptions","open$","openChange","initOptions","highlighted$","highlightedKey","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","replace","displayHtml","length_1","matchIndex","toLowerCase","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","HostListener","InfiniteScrollLoadButtonDirective","_element","_template","_viewContainer","load","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","ngAfterContentInit","_updateRequests","filterOperator","request","check","auditTime","doRequest","enabled","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","loading","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","reset","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","_subscriptions","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","MutationObserver","childList","subtree","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","of","from","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","scrollTop","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","current","data","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","ContentChildren","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","scrollIntoView","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","TypeaheadModule","ReorderableHandleDirective","ReorderableModelDirective","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","group","isEmpty","initialize","getGroup","moves","canMove","_containers","getModelForElement","model","getModelFromElement","containers","c","mirrorContainer","on","sibling","drop","cancel","cloned","containerElement","isSameNode","ReorderableDirective","reorderableGroup","_container","onDrop","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","reorderEnd","setTableCellWidths","captureCanvases","reorderingDisabled","handles","_handle","tagName","sourceCells","targetCells","cell","getPropertyValue","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","descendants","ReorderableModule","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","_announcer","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","tag","selectedFacet","announce","title","previousElementSibling","nextElementSibling","deselectAllFacets","trackBy","_index","shiftRight","facetsReorderable","shiftFacet","requestAnimationFrame","shiftLeft","LiveAnnouncer","FacetBaseComponent","facetContainer","selected","_","deselectAll","selectedChange","toggleFacetSelection","isFacetSelected","Host","FacetHeaderComponent","toggleExpand","canExpand","expanded","expandedChange","tabindex","(click)","(keyup.enter)","[attr.aria-expanded]","[attr.aria-label]","FacetCheckListItemComponent","getLabel","FacetCheckListComponent","_focusKeyManager","FocusKeyManager","withVerticalOrientation","change","activeIndex","activeItemIndex","setActiveItem","onKeydown","toggleFacet","ViewChildren","FacetTypeaheadListItemComponent","FacetTypeaheadListComponent","typeaheadKeyService","maxResults","minCharacters","config","query$","tap","typeaheadOptions","mergeMap","getFacetObservable","updateTypeahead","query","typeaheadOpen","Observable","FacetTypeaheadHighlight","searchQuery","regex","RegExp","A11yModule","Facet","count","MenuNavigationService","MenuNavigationItemDirective","service","active$","setActive","activated","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","keyEnter","focusFirst","toArray","moveFirst","keydownHandler","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","navigatedOut","stopPropagation","nextIndex","menuOpen","Inject","DOCUMENT","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","isKeyMatch","menuPosition","EXPORTS","FilterContainerComponent","addFilter","filters","FilterAddEvent","filtersChange","removeFilter","FilterRemoveEvent","removeAll","FilterRemoveAllEvent","FilterBaseComponent","filtersContainer","_filter","initial","FilterDropdownComponent","selectFilter","FilterDynamicComponent","announcer","Infinity","getItems","typeaheadItems","maxIndividualItems","showTypeahead","selectOption","typeaheadOption","dropdown","clickOff","hideDropdown","nodeName","parentElement","(document:click)","BsDropdownDirective","FilterTypeaheadHighlight","BsDropdownModule","forRoot","MenuNavigationModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","onKeyDown","[class.horizontal]","[class.vertical]","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","close","FloatingActionButtonsComponent","fab","tooltips","preserveWhitespaces","animations","transition","opacity","stagger","animate","FloatingActionButtonComponent","primary","Attribute","FloatingActionButtonsModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","node","getChildren","children$","observer","parent","child","nodes","_child","HierarchyBarComponent","hierarchyBar","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","ClickOutsideDirective","_initialised","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","keyCode","ESCAPE","PopoverModule","HierarchyBarModule","SidePanelService","SidePanelComponent","inline","attachTo","cssWidth","openPanel","closePanel","clickHandler","closeOnExternalClick","class","ItemDisplayPanelComponent","_itemDisplayPanelSubscription","visibleChange","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","WizardComponent","QueryList","_step","stepChange","step","invalidIndicator","stepChanging","StepChangingEvent","getCurrentStep","steps","onNext","onPrevious","finish","onFinishing","onFinish","onCancel","active","gotoStep","stepIndex","stp","isLastStep","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","MarqueeWizardModule","WizardModule","FrameExtractionService","createVideoPlayer","videoPlayer","createElement","preload","src","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","skip","frames","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","duration","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","readyState","seekable","seeking","textTracks","videoTracks","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","canPlayType","addTextTrack","kind","label","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","hideSubtitleTracks","MediaPlayerBaseExtensionDirective","mediaPlayerService","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","colorValueSet","_colors","getColorValueByHex","_html","className","innerHTML","getColorValue","parentNode","color","hex","g","ThemeColor","querySelector","rgba","backgroundColor","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","colorName","toRgba","a","_r","_g","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","ColorServiceModule","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","size","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","thumb","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","colors","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","tick","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","diff","clamp","updateThumbPosition","eventPosition","MouseEvent","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","Number","toFixed","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","join","getSteps","output","showLabels","tk","t1","t2","destination","value1","value2","isSliderValue","obj1","obj2","SliderModule","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","volumeChangeEvent","mouseEnterVolume","volumeActive","mouseLeaveVolume","switchMap","timer","toggleMute","goToStart","goToEnd","isSubtitleActive","setSubtitleTrack","cues","line","getSubtitleTrack","[class.quiet]","MediaPlayerCustomControlDirective","MediaPlayerTimelineExtensionComponent","scrub","timeUpdateEvent","progressEvent","mousedown$","mousemove$","mouseup$","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","AudioService","_http","getAudioFileMetadata","mediaElement","responseType","response","filename","lastIndexOf","extension","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","getAudioBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","waveform","points","channel","arrayBuffer","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","createAnalyser","HttpClient","AudioServiceModule","HttpClientModule","MediaPlayerComponent","_audioService","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","FocusWithinDirective","_focusMonitor","monitor","origin","focusWithin","blurWithin","stopMonitoring","FocusMonitor","TabbableListService","wrap","_items","focusKeyManager","withHorizontalOrientation","withWrap","onInit","activate","isItemActive","TabbableListItemDirective","_tabbableList","TabbableListDirective","_focusedElement","focusOnShow","setFirstItemActive","returnFocus","HTMLElement","AccessibilityModule","DurationPipe","minutes","hours","days","DurationPipeModule","FileSizePipe","log","pow","FileSizePipeModule","NavigationComponent","NavigationItemComponent","_parent","_router","_activatedRoute","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","levelClass","getLevelClass","setIndentWithoutArrow","_childrenChanges","tree","createUrlTree","relativeTo","queryParams","snapshot","fragment","some","indentWithoutArrow","SkipSelf","Router","ActivatedRoute","NavigationModule","NotificationService","_colorService","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","_propagateChange","_min","_max","_disabled","onScroll","wheelDelta","[class.has-error]","NumberPickerModule","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","secondaryNavigationAutoselect","secondary$","isParentOf","deselect","items$","updateItem","setItems","setParent","initialSelectedItem","setSecondaryNavigation","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","menuNavigationToggle","PageHeaderNavigationDropdownItemComponent","_pageHeaderService","_hover$","dropdownOpen","button","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationSecondaryItemDirective","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","indicatorX","indicatorWidth","PageHeaderComponent","condensed","_crumbs","crumbs","_familyBackground","_familyForeground","goBack","backClick","PageHeaderModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","RadioButtonModule","SearchBuilderService","registerComponent","_components","cmp","registerComponents","components","getComponent","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","init","_id","remove","field","SearchBuilderGroupComponent","searchBuilderGroupService","removeField","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","uxSearchBuilderOutlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","uxSearchBuilderOutletContext","ComponentFactoryResolver","BaseSearchComponent","_searchBuilderGroupService","validate","validation","SearchTextComponent","SearchDateComponent","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchSelectComponent","multiple","dropDirection","allowNull","maxHeight","SearchBuilderComponent","_querySubscription","_validSubscription","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","_value$","_input$","_dropdownOpen","dropdownOpenChange","propagateChange","inputChange","filter$","input","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","singleInput","inputKeyHandler","singleOptionSelected","TagInputEvent","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","tags","_onTouchedHandler","_typeaheadSubscription","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","tagInput","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","commitTypeahead","commitInput","backspace","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","isSelected","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","tagValue","inputPattern","inputValid","tagPattern","test","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","SearchBuilderModule","SidePanelCloseDirective","SparkComponent","_theme","_trackColor","_barColor","values","total","val","SparkModule","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","tabIndex","TabFocusDirective","_tabset","uxTabFocus","uniqueTabId","TabComponent","TabHeadingDirective","headingRef","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","TabsetModule","TimelineComponent","TimelineEventComponent","TimelineModule","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","blur","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","_embeddedView","deactivate","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","OverflowDirective","horizontalOverflow","verticalOverflow","checkForOverflow","tolerance","_state","uxOverflowHorizontalObserver","uxOverflowVerticalObserver","uxOverflowObserver","SelectionStrategy","selectionService","setSelectionService","mousedown","keydown","selectAll","dataset","RowSelectionStrategy","ctrlKey","shiftKey","multipleSelect","singleSelect","KeyCode","UpArrow","DownArrow","navigate","Spacebar","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","startIdx","endIdx","activateSibling","RowAltSelectionStrategy","handleCursorKey","getSibling","SimpleSelectionStrategy","SelectionService","Set","_strategyToDestroy","selections","selection","selectionHasMutated","delete","selection$","setMode","trim","setDisabled","SelectionItemDirective","_selectionService","_selected","_managedTabIndex","uxSelectionItem","focusTarget$","focusTarget","clickEnabled","keyboardEnabled","SelectionDirective","_cdRef","uxSelectionChange","SelectionModule","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","TreeGridNg1Component","ThumbnailNg1Component","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","navigationMenuServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","rows","pdfServiceFactory","pdfServiceProvider","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","err","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","Conduit","tslib_1.__assign"],"mappings":"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","sourcesContent":["import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    templateUrl: 'breadcrumbs.component.html'\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _observer = new ResizeObserver(this.elementDidResize.bind(this));\n    private _targets = new WeakMap<HTMLElement, ReplaySubject<ResizeDimensions>>();\n\n    constructor(private _zone: NgZone) {}\n\n    ngOnDestroy(): void {\n        this._observer.disconnect();\n    }\n\n    addResizeListener(target: HTMLElement): ReplaySubject<ResizeDimensions> {\n        this._zone.runOutsideAngular(() => this._observer.observe(target));\n\n        if (this._targets.has(target)) {\n            return this._targets.get(target);\n        } else {\n            const emitter = new ReplaySubject<ResizeDimensions>();\n            this._targets.set(target, emitter);\n            return emitter;\n        }\n    }\n\n    removeResizeListener(target: HTMLElement): void {\n        this._observer.unobserve(target);\n    }\n\n    private elementDidResize(entries: ResizeObserverEntry[]): void {\n        this._zone.run(() => {\n            for (const entry of entries) {\n                if (this._targets.has(entry.target as HTMLElement)) {\n                    const emitter = this._targets.get(entry.target as HTMLElement);\n                    emitter.next({ width: (entry.target as HTMLElement).offsetWidth, height: (entry.target as HTMLElement).offsetHeight });\n                }\n            }\n        });\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._resizeService.removeResizeListener(this._elementRef.nativeElement);\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  templateUrl: './card-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  templateUrl: './card-tabset.component.html',\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ResizeModule } from '../../directives/resize/index';\r\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\r\nimport { CardTabComponent } from './card-tab/card-tab.component';\r\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResizeModule\r\n  ],\r\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\r\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\r\n})\r\nexport class CardTabsModule { }\r\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    templateUrl: './checkbox.component.html',\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { Directive, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective implements OnDestroy {\n\n    @Input() singleSort: boolean;\n    events = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    toggleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n\n        // apply sorting based on the single or multiple sort\n        this.order = this.singleSort ? this.toggleSingleColumn(sorting) : this.toggleMultipleColumn(sorting);\n\n        // emit the latest order\n        this.events.next(this.order);\n\n        return this.order;\n    }\n\n    private toggleSingleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        return sorting.state === ColumnSortingState.NoSort ? [] : [{ key: sorting.key, state: sorting.state }];\n    }\n\n    private toggleMultipleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        // reorder columns here\n        const idx = this.order.findIndex(column => column.key === sorting.key);\n\n        // if wasnt previously selected add to list\n        if (idx === -1) {\n            return [...this.order, { key: sorting.key, state: sorting.state }];\n        }\n\n        // if we are sorting it change the sorting order\n        if (sorting.state === ColumnSortingState.Ascending || sorting.state === ColumnSortingState.Descending) {\n            return [...this.order.filter(_column => _column.key !== sorting.key), { key: sorting.key, state: sorting.state }];\n        }\n\n        // Otherwise remove the item\n        return this.order.filter(_column => _column.key !== sorting.key);\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState;\n}\n\nexport enum ColumnSortingState {\n    Ascending = 'ascending',\n    Descending = 'descending',\n    NoSort = 'none'\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ColumnSortingDirective, ColumnSortingOrder, ColumnSortingState } from './column-sorting.directive';\n\n@Component({\n    selector: 'ux-column-sorting',\n    templateUrl: './column-sorting.component.html',\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent implements OnDestroy {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Output() stateChange = new EventEmitter<ColumnSortingState>();\n\n    order: number;\n    columnSortingState = ColumnSortingState;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _columnSorter: ColumnSortingDirective) {\n        this._columnSorter.events.pipe(takeUntil(this._onDestroy)).subscribe(event => {\n\n            // if we are sorting this column then find the matching data\n            const columnIdx = event.findIndex(_column => _column.key === this.key);\n\n            // if we are not sorting this column then mark it as NoSort\n            if (columnIdx === -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            this.order = event.length < 2 || columnIdx === -1 ? null : columnIdx + 1;\n\n            // Emit the latest change\n            this.stateChange.emit(this.state);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        switch (this.state) {\n\n            case ColumnSortingState.Ascending:\n                this.state = ColumnSortingState.Descending;\n                break;\n\n            case ColumnSortingState.Descending:\n                this.state = ColumnSortingState.NoSort;\n                break;\n\n            default:\n                this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._columnSorter.toggleColumn({ key: this.key, state: this.state });\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\n\nexport class ConduitSubject {\n\n    private _subject: Subject<any>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(public conduit: ConduitMetadata, private _zone: ConduitZone, public zoneId: string) {\n\n        // store the target subject object\n        this._subject = conduit.subject;\n\n        // check if there are any conduits that have supplied an initial value\n        this.getInitialValue();\n\n        // subscribe to changes to the source subject\n        this._subject.pipe(distinctUntilChanged(conduit.changeDetection), takeUntil(this._onDestroy))\n            .subscribe(this.onOutput.bind(this));\n\n        // subscribe to the zone events and root zone events\n        _zone.getEvents().pipe(filter(event => event.conduit.id === conduit.id), takeUntil(this._onDestroy)).subscribe(this.onInput.bind(this));\n    }\n\n    /** Check all allow inputs to see if there is a value we should initially set the conduit to */\n    getInitialValue(): void {\n\n        // if we do not accept inputs then do nothing\n        if (this.conduit.acceptsInput === false) {\n            return;\n        }\n\n        // return all subjects that are 1) Not itself 2) In a zone that is listed in acceptsInput 3) Have a currentValue set\n        const subjects = this._zone.getSubjects().filter(subject => {\n\n            // If this is itself or if it has not value to give us then do nothing\n            if (subject === this || subject.conduit.id !== this.conduit.id || !subject.conduit.hasOwnProperty('currentValue')) {\n                return false;\n            }\n\n            // if acceptsInput is true then we return every time\n            if (this.conduit.acceptsInput === true) {\n                return true;\n            }\n\n            if (Array.isArray(this.conduit.acceptsInput)) {\n                return this.conduit.acceptsInput.indexOf(subject.zoneId) !== -1;\n            }\n        });\n\n        // if there are no matches then do nothing\n        if (subjects.length === 0) {\n            return;\n        }\n\n        // otherwise sort by the last modified field\n        subjects.sort((subjectOne, subjectTwo) => subjectOne.conduit.lastModified.getTime() < subjectTwo.conduit.lastModified.getTime() ? 1 : -1);\n\n        // get the most recent value\n        this._subject.next(subjects[0].conduit.currentValue);\n    }\n\n    /** This will be triggered when a conduits value has changed */\n    onInput(event: ConduitEvent): void {\n        // if we dont accept input or we emitted this value then do nothing\n        if (this.conduit.acceptsInput === false || event.conduit === this.conduit) {\n            return;\n        }\n\n        // check if the conduit produces output - if not we only do something if we are in the same zone\n        if (event.conduit.producesOutput === false && event.zoneId !== this.zoneId) {\n            return;\n        }\n\n        // check if we only accept inputs from specific zones\n        if (Array.isArray(this.conduit.acceptsInput)) {\n            // check if the event came from an acceptable zone\n            if (!this.conduit.acceptsInput.find(zone => zone === event.zoneId)) {\n                return;\n            }\n        }\n\n        // if required transform the value\n        const outputValue = this.conduit.map ? this.conduit.map(event.value) : event.value;\n\n        // update the subject\n        this._subject.next(outputValue);\n    }\n\n    /** This will be fired when this conduit emits a new value */\n    onOutput(value: any): void {\n\n        // store the most recent value and when it was modified - can be used for any new conduits to lookup a value\n        this.conduit.currentValue = value;\n        this.conduit.lastModified = new Date();\n\n        // check if this should produce output\n        if (this.conduit.producesOutput) {\n            this._zone.emit({ conduit: this.conduit, zoneId: this.zoneId, value });\n        }\n    }\n\n    /** Unsubscribe once this subject is destroyed */\n    destroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","/** This utility is to ensure a all functions with the specified name are called in all super classes */\nexport function invokeSuperFunction(target: object, functionName: string): void {\n    // get all instances of the function\n    const functionList: Function[] = [];\n\n    // store the current prototype we are checking\n    let prototype: any = target;\n\n    // look through every base class and check it\n    do {\n        if (prototype.hasOwnProperty(functionName)) {\n            functionList.push(prototype[functionName]);\n        }\n\n        prototype = prototype.__proto__;\n    } while (prototype.__proto__);\n\n    // augment the top level function to call all the functions\n    target[functionName] = function (...args: any[]) {\n        functionList.forEach(func => func.call(target, ...args));\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitSubject } from './conduit-subject';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\n@Injectable()\nexport class ConduitZone implements OnDestroy {\n\n    /** Create a global subject store */\n    static subjects: ConduitSubject[] = [];\n\n    /** Expose an event stream of new values */\n    static events = new Subject<ConduitEvent>();\n\n    /** Store the zone name */\n    private _zoneId: string;\n\n    ngOnDestroy(): void {\n        // find all conduit subjects that are part of this zone\n        ConduitZone.subjects.filter(_subject => _subject.zoneId === this._zoneId)\n            .forEach(_subject => this.unregisterConduit(_subject.conduit));\n    }\n\n    /** Store reference to the repository and begin watching for and emitting changes */\n    registerConduit(conduit: ConduitMetadata): void {\n        ConduitZone.subjects.push(new ConduitSubject(conduit, this, this._zoneId));\n    }\n\n    /** Destroy a conduit */\n    unregisterConduit(conduit: ConduitMetadata): void {\n        const subject = this.getConduitSubject(conduit.subject);\n\n        if (subject) {\n            // remove the subject from the internal list of conduit subjects\n            ConduitZone.subjects = ConduitZone.subjects.filter(_subject => _subject !== subject);\n\n            // perform all unsubscriptions\n            subject.destroy();\n        }\n    }\n\n    /** Provide the zone with an ID */\n    setZoneId(zoneId: string): void {\n        this._zoneId = zoneId;\n    }\n\n    /** Emit a value to all zones for checking */\n    emit(event: ConduitEvent): void {\n        ConduitZone.events.next(event);\n    }\n\n    /** Retrieve a conduit subsject object from the rxjs subject */\n    getConduitSubject(subject: Subject<any>): ConduitSubject | null {\n        return ConduitZone.subjects.find(_subject => _subject.conduit.subject === subject);\n    }\n\n    /** Get all subjects from all zones */\n    getSubjects(): ConduitSubject[] {\n        return ConduitZone.subjects;\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n\n        // find the conduit with the matching subject\n        const conduitSubject = this.getSubjects().find(_conduit => _conduit.conduit.subject === subject);\n\n        // if a match was found update the properties\n        if (conduitSubject) {\n\n            // update each specified property\n            for (const prop in properties) {\n                conduitSubject.conduit[prop] = properties[prop];\n            }\n        }\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n\n        // register the conduit with the zone\n        this.registerConduit({ ...properties, subject });\n    }\n\n    /** Register all conduits in a component */\n    registerConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.registerConduit({ ...conduit, subject: component[conduit.propertyKey] }));\n        }\n    }\n\n    /** Register all conduits in a component */\n    unregisterConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.unregisterConduit(conduit));\n        }\n    }\n\n    /** Return the global event stream */\n    getEvents(): Subject<ConduitEvent> {\n        return ConduitZone.events;\n    }\n}\n","import { OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { invokeSuperFunction } from './conduit-utils';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\nexport class ConduitComponent implements OnInit, OnDestroy {\n\n    constructor(@Optional() protected _zone: ConduitZone) {\n        // we want to ensure these functions get called even if a class overrides them\n        invokeSuperFunction(this, 'ngOnInit');\n        invokeSuperFunction(this, 'ngOnDestroy');\n    }\n\n    /** We need to register the conduits with the zone when the component is initialised */\n    ngOnInit(): void {\n        // register the conduit in the zone and ensure it gets the correct instance of the target\n        this._zone.registerConduits(this);\n    }\n\n    /** We need to unregister the conduits when the component is destroyed */\n    ngOnDestroy(): void {\n        this._zone.unregisterConduits(this);\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n        this._zone.setConduitProperties(subject, properties);\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n        this._zone.createConduit(subject, properties);\n    }\n\n}\n","import { OnInit } from '@angular/core';\nimport { ConduitComponent } from './conduit.component';\n\nexport abstract class ConduitZoneComponent extends ConduitComponent implements OnInit {\n    abstract zoneId: string;\n\n    ngOnInit(): void {\n        this._zone.setZoneId(this.zoneId);\n    }\n}\n","export interface ConduitProperties {\n    id: number | string;\n    acceptsInput?: boolean | string[];\n    producesOutput?: boolean;\n    changeDetection?: (x: any, y: any) => boolean;\n    map?: any;\n}\n\nexport const defaultConduitProps: Partial<ConduitProperties> = {\n    acceptsInput: true,\n    producesOutput: true,\n};\n","import { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties, defaultConduitProps } from './interfaces/conduit-properties';\n\n/** Expose the property that conduits will be stored in */\nexport const CONDUITS = '_conduits';\n\n/** Create the conduit property decorator */\nexport function Conduit(properties: ConduitProperties | Function): PropertyDecorator {\n    return (target: Object, propertyKey: string) => {\n\n        if (typeof properties === 'function') {\n            properties = properties.call(null);\n        }\n\n        // if the target does not already have a conduit list then create one\n        if (!target.hasOwnProperty(CONDUITS)) {\n            Object.defineProperty(target, CONDUITS, { value: [] });\n        }\n\n        // add the conduit to the list ensuring all required properties are provided\n        target[CONDUITS].push({ ...defaultConduitProps, ...properties, target, propertyKey } as ConduitMetadata);\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _mouseEvent: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(delay(0), map((dimensions: DashboardDimensions) => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n\n    get options() {\n        return this.options$.getValue();\n    }\n\n    get widgets() {\n        return this.widgets$.getValue();\n    }\n\n    get stacked() {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions() {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth() {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    constructor() {\n        this.layout$.subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() * w1.getRow();\n            const w2Position = w2.getColumn() * w2.getRow();\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._mouseEvent = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._mouseEvent.pageX - pageXOffset;\n        const mousePosY = this._mouseEvent.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._mouseEvent = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._mouseEvent = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._mouseEvent.pageX && action.event.pageY === this._mouseEvent.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._mouseEvent.pageX;\n        const mouseY = action.event.pageY - this._mouseEvent.pageY;\n\n        // store the latest event\n        this._mouseEvent = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): void {\n        this._cache = this.widgets.map(widget => ({ id: widget.id, column: widget.getColumn(), row: widget.getRow() }));\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false): void {\n        this._cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    let requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    let available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            let distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() - 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveRight(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        const rounding = this._actionWidget.direction === ActionDirection.Left ||\n            this._actionWidget.direction === ActionDirection.Top ? Rounding.RoundDownBelowHalf : Rounding.RoundUpOverHalf;\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard',\n    templateUrl: './dashboard.component.html',\n    providers: [DashboardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements AfterViewInit {\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    constructor(public dashboardService: DashboardService) {\n        dashboardService.layout$.subscribe(layout => this.layoutChange.emit(layout));\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Component, Input, OnInit, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    templateUrl: './dashboard-widget.component.html'\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _subscription: Subscription;\n\n    constructor(public dashboardService: DashboardService) {\n        this._subscription = dashboardService.options$.subscribe(() => this.update());\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time \n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeStart({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    /** Detemine if we should show a clone when dragging */\n    @Input() clone: boolean = false;\n\n    /** Allow the dragging to be enabled/disabled */\n    @Input() draggable: boolean = true;\n\n    /** Emit an event when dragging starts */\n    @Output() dragstart = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the mouse moves while dragging */\n    @Output() drag = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the dragging finishes */\n    @Output() dragend = new EventEmitter<void>();\n\n    /** Store the element we have cloned */\n    private _clone: Element;\n\n    /** Store the mouse offset for the cloned element position */\n    private _offset: { x: number, y: number };\n\n    /** Create an observable from the mouse down event */\n    private _mousedown$ = fromEvent<MouseEvent>(this._elementRef.nativeElement, 'mousedown');\n\n    /** Create an observable from the mouse move event */\n    private _mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n\n    /** Create an observable from the mouse up event */\n    private _mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n    /** Use an observable to unsubscribe from all subscriptions */\n    protected _onDestroy = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, private _ngZone: NgZone, private _renderer: Renderer2) {\n        this._mousedown$.pipe(filter(() => this.draggable), takeUntil(this._onDestroy)).subscribe(this.dragStart.bind(this));\n    }\n\n    /** Emit events and create clone when drag starts */\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this.clone) {\n            // clone the node\n            this.cloneNode(event);\n        }\n\n        // apply a class to the element being dragged\n        this._renderer.addClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // emit the drag start event\n        this._ngZone.run(() => this.dragstart.emit(event));\n\n        this._mousemove$.pipe(takeUntil(this._mouseup$), takeUntil(this._onDestroy))\n            .subscribe(this.dragMove.bind(this), null, this.dragEnd.bind(this));\n    }\n\n    /** Emit event and update clone position when dragging moves */\n    dragMove(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this._clone) {\n            this.updateNodePosition(event);\n        }\n\n        // emit the drag start event\n        this._ngZone.run(() => this.drag.emit(event));\n    }\n\n    /** Emit event and destroy clone when dragging ends */\n    dragEnd(): void {\n        // if there was a clone, remove it\n        if (this._clone) {\n            this._renderer.removeChild(document.body, this._clone);\n            this._clone = null;\n        }\n\n        // remove the dragging class\n        this._renderer.removeClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        this._ngZone.run(() => this.dragend.emit());\n    }\n\n    /** Create an exact clone of an element */\n    cloneNode(event: MouseEvent): void {\n\n        // duplicate the node\n        this._clone = this._elementRef.nativeElement.cloneNode(true);\n\n        // store the position within the draggable element\n        const { top, left } = this._elementRef.nativeElement.getBoundingClientRect();\n        this._offset = { x: event.clientX - left, y: event.clientY - top };\n\n        // inline all styles so it looks identical regardless of its position in the DOM\n        this.inlineStyles(this._elementRef.nativeElement, this._clone);\n\n        // ensure we can easily position the node an it is above all other elements\n        this._renderer.setAttribute(this._clone, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._clone, 'position', 'absolute');\n        this._renderer.setStyle(this._clone, 'z-index', '99999');\n\n        // apply a class to allow custom styling\n        this._renderer.addClass(this._clone, 'ux-drag-dragging-clone');\n\n        // insert the cloned element\n        this._renderer.appendChild(document.body, this._clone);\n\n        // set the cloned element initial position\n        this.updateNodePosition(event);\n    }\n\n    /** Position the clone relative to the mouse */\n    updateNodePosition(event: MouseEvent): void {\n        this._renderer.setStyle(this._clone, 'left', (event.pageX - this._offset.x) + 'px');\n        this._renderer.setStyle(this._clone, 'top', (event.pageY - this._offset.y) + 'px');\n    }\n\n    /** Inline all styles to ensure styling is consistent regardless of its position in the dom */\n    inlineStyles(source: Element, target: Element): void {\n        // get all the computed styles from the source element\n        const styles = getComputedStyle(source);\n\n        // inline every specified style\n        for (let idx = 0; idx < styles.length; idx++) {\n            const style = styles.item(idx);\n\n            if (style !== undefined) {\n                this._renderer.setStyle(target, styles[idx], styles[style]);\n            }\n        }\n\n        // ensure we dont capture any move events\n        this._renderer.setStyle(target, 'pointer-events', 'none');\n\n        // do the same for all the child elements\n        for (let idx = 0; idx < source.children.length; idx++) {\n            this.inlineStyles(source.children[idx], target.children[idx]);\n        }\n    }\n\n    /** Unsubscribe from all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n        super(elementRef, ngZone, renderer);\n\n        this.dragstart.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.drag.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.dragend.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DragDirective } from './drag.directive';\n\n@NgModule({\n    exports: [DragDirective],\n    declarations: [DragDirective]\n})\nexport class DragModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DragModule } from '../../directives/drag/index';\n\nconst DECLARATIONS: any[] = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    templateUrl: './spin-button.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n    transform(value: number, pad: boolean): string | number {\n        return value < 10 && pad ? '0' + value : value;\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, OnDestroy, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    templateUrl: './time-picker.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { DateTimePickerTimezone } from './date-time-picker.service';\n\n\n/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort } from './date-time-picker.utils';\nimport { DateTimePickerTimezone } from './date-time-picker.service';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n\n    timezones: DateTimePickerTimezone[] = [\n        { name: 'GMT-11', offset: 660 },\n        { name: 'GMT-10', offset: 600 },\n        { name: 'GMT-9', offset: 540 },\n        { name: 'GMT-8', offset: 480 },\n        { name: 'GMT-7', offset: 420 },\n        { name: 'GMT-6', offset: 360 },\n        { name: 'GMT-5', offset: 300 },\n        { name: 'GMT-4', offset: 240 },\n        { name: 'GMT-3', offset: 180 },\n        { name: 'GMT-2', offset: 120 },\n        { name: 'GMT-1', offset: 60 },\n        { name: 'GMT', offset: 0 },\n        { name: 'GMT+1', offset: -60 },\n        { name: 'GMT+2', offset: -120 },\n        { name: 'GMT+3', offset: -180 },\n        { name: 'GMT+4', offset: -240 },\n        { name: 'GMT+5', offset: -300 },\n        { name: 'GMT+6', offset: -360 },\n        { name: 'GMT+7', offset: -420 },\n        { name: 'GMT+8', offset: -480 },\n        { name: 'GMT+9', offset: -540 },\n        { name: 'GMT+10', offset: -600 },\n        { name: 'GMT+11', offset: -660 },\n        { name: 'GMT+12', offset: -720 }\n    ];\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config.showDate);\n    showTime$ = new BehaviorSubject<boolean>(this._config.showTime);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config.showTimezone);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config.showSeconds);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config.showMeridian);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config.showSpinners);\n    weekdays$ = new BehaviorSubject<string[]>(this._config.weekdays);\n    nowBtnText$ = new BehaviorSubject<string>(this._config.nowBtnText);\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config.timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    private _subscription: Subscription;\n\n    constructor(private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        return this._config.timezones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService, DateTimePickerTimezone } from './date-time-picker.service';\nimport { dateComparator, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  templateUrl: './date-time-picker.component.html',\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  private _timezone: DateTimePickerTimezone;\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _subscription = new Subscription();\n\n  constructor(public datepicker: DateTimePickerService) {\n    const valueChange = datepicker.selected$.pipe(distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    const timezoneChange = datepicker.timezone$.pipe(distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify, months } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n    \n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  templateUrl: './day-view.component.html',\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    templateUrl: './header.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, monthsShort, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n            \n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    templateUrl: './month-view.component.html',\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    templateUrl: './time-view.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  templateUrl: './year-view.component.html',\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus();\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent],\n    providers: [\n        DateTimePickerConfig\n    ]\n})\nexport class DateTimePickerModule { }\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    templateUrl: './ebox.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  templateUrl: './tooltip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { Injectable } from '@angular/core';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n\n                case 'Enter':\n                    if (typeahead.selectOnEnter) {\n                        typeahead.selectHighlighted();\n                    }\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    templateUrl: 'typeahead.component.html',\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input()\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n    @Input() selectOnEnter: boolean = false;\r\n    @Input() loading = false;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n    highlightedKey: string = null;\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _changeDetector: ChangeDetectorRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n\r\n                // Invoke the callback which may return an array or a promise.\r\n                const arrayOrPromise = this.options(pageNum, pageSize, filter);\r\n\r\n                // Map the results to an array of TypeaheadVisibleOption.\r\n                return Promise.resolve(arrayOrPromise).then(newOptions => {\r\n\r\n                    if (!Array.isArray(newOptions)) {\r\n                        return newOptions;\r\n                    }\r\n\r\n                    return newOptions.map((option: any) => {\r\n                        return {\r\n                            value: option,\r\n                            key: this.getKey(option)\r\n                        };\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.openChange.emit(next);\r\n\r\n            if (next) {\r\n                this.initOptions();\r\n            }\r\n        });\r\n\r\n        this.highlighted$.pipe(takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.highlightedKey = next ? next.key : null;\r\n            this.highlightedChange.emit(next ? next.value : null);\r\n        });\r\n\r\n        combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n            });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        const displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n            this._changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlight(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    selectHighlighted(): void {\r\n        if (this.highlighted) {\r\n            this.select({ value: this.highlighted, key: this.getKey(this.highlighted)});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n\r\n        this._changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableHandle]'\r\n})\r\nexport class ReorderableHandleDirective { }\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableModel]'\r\n})\r\nexport class ReorderableModelDirective {\r\n\r\n    // allow the user to specify a model for the item - allows use with ngFor\r\n    @Input() uxReorderableModel: any;\r\n\r\n    // this can be used to identify which instance of the directive relates to which element\r\n    constructor(public elementRef: ElementRef) { }\r\n}\r\n","// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport { Drake } from 'dragula';\n// @ts-ignore\nimport * as dragulaNamespace from 'dragula/dist/dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ReorderEvent } from '../../directives/reorderable/index';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    templateUrl: './facet-container.component.html'\n})\nexport class FacetContainerComponent implements OnDestroy {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    constructor(private _announcer: LiveAnnouncer) { }\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet, tag?: HTMLElement): void {\n\n        // find the index of the item in the selected array\n        const idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n\n        // announce the facet removal\n        this._announcer.announce(`Option ${facet.title} deselected.`, 'assertive');\n\n        // focus another tag if there is one\n        if (tag) {\n            const sibling = tag.previousElementSibling || tag.nextElementSibling;\n\n            // if there is a sibling then focus it\n            if (sibling) {\n                (sibling as HTMLElement).focus();\n            }\n        }\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n\n        // announce the facet removal\n        this._announcer.announce(`All options deselected.`, 'assertive');\n    }\n\n    trackBy(_index: number, facet: Facet): string | number {\n        return facet.id || facet.title;\n    }\n\n    shiftRight(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, 1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved down.`);\n    }\n\n    shiftLeft(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, -1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved up.`);\n    }\n\n    private shiftFacet(facet: Facet, distance: number) {\n        const index = this.facets.indexOf(facet);\n        const target = index + distance;\n\n        // Ensure the move is valid\n        if (target < 0 || target === this.facets.length) {\n            return;\n        }\n\n        // Perform the move\n        this.facets.splice(index, 1);\n        this.facets.splice(target, 0, facet);\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}\n\nexport interface FacetReorderEvent extends ReorderEvent {\n    index: number;\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        const index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    templateUrl: './facet-header.component.html',\n    host: {\n        'role': 'button',\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()',\n        '[attr.aria-expanded]': 'expanded',\n        '[attr.aria-label]': 'header + \\' Facet: Activate to \\' + (expanded ? \\'collapse\\' : \\'expand\\')'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;\n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list-item',\n    templateUrl: './facet-check-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetCheckListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet = null;\n    @Input() selected: boolean = false;\n    @Input() tabbable: boolean = false;\n    @Output() selectedChange = new EventEmitter<Facet>();\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() itemBlur = new EventEmitter<void>();\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : '';\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, QueryList, ViewChildren } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\nimport { FacetCheckListItemComponent } from './check-list-item/facet-check-list-item.component';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    templateUrl: './facet-check-list.component.html'\n})\nexport class FacetCheckListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n\n    @ViewChildren(FacetCheckListItemComponent) options: QueryList<FacetCheckListItemComponent>;\n\n    isFocused: boolean = false;\n    activeIndex: number = 0;\n\n    private _focusKeyManager: FocusKeyManager<FacetCheckListItemComponent>;\n\n    ngAfterViewInit(): void {\n        this._focusKeyManager = new FocusKeyManager(this.options)\n            .withVerticalOrientation();\n\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list-item',\n    templateUrl: './facet-typeahead-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetTypeaheadListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet;\n    @Input() selected: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() tabbable: boolean = false;\n\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() selectedChange = new EventEmitter<Facet>();\n\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : null;\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, ElementRef, Input, Pipe, PipeTransform, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map, mergeMap, takeUntil, tap } from 'rxjs/operators';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { FacetContainerComponent } from '../facet-container.component';\nimport { Facet } from '../models/facet';\nimport { FacetTypeaheadListItemComponent } from './typeahead-list-item/facet-typeahead-list-item.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    templateUrl: './facet-typeahead-list.component.html'\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    @Input()\n    set typeaheadConfig(config: FacetTypeaheadListConfig) {\n        this._config = { placeholder: '', maxResults: 50, minCharacters: 1, ...config };\n    }\n\n    get typeaheadConfig(): FacetTypeaheadListConfig {\n        return this._config;\n    }\n\n    @ViewChildren(FacetTypeaheadListItemComponent) options: QueryList<FacetTypeaheadListItemComponent>;\n\n    query$ = new BehaviorSubject<string>('');\n    loading: boolean = false;\n    activeIndex: number = 0;\n    typeaheadId: string = `ux-facet-typeahead-${uniqueId++}`;\n    typeaheadOpen: boolean = false;\n    typeaheadOptions: Facet[] = [];\n    highlightedElement: HTMLElement;\n\n    private _config: FacetTypeaheadListConfig = { placeholder: '', maxResults: 50, minCharacters: 1 };\n    private _focusKeyManager: FocusKeyManager<FacetTypeaheadListItemComponent>;\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, facetContainer: FacetContainerComponent, elementRef: ElementRef, private _announcer: LiveAnnouncer) {\n        super(facetContainer, elementRef);\n    }\n\n    ngAfterViewInit(): void {\n\n        // set up search query subscription\n        this.query$.pipe(\n            takeUntil(this._onDestroy),\n            tap(() => {\n                this.loading = true;\n                this.typeaheadOptions = [];\n            }),\n            mergeMap(() => this.getFacetObservable().pipe(map(facets => {\n                return facets.filter(facet => !facet.disabled && !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .slice(0, this._config.maxResults);\n            })))\n        ).subscribe(facets => {\n            this.loading = false;\n            this.typeaheadOptions = facets;\n        });\n\n        this._focusKeyManager = new FocusKeyManager(this.options).withVerticalOrientation();\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n\n    /** Only show typeahead if we have enough characters */\n    updateTypeahead(query: string = ''): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n    }\n\n    getFacetObservable(): Observable<Facet[]> {\n        return this.facets instanceof Observable ? this.facets : of(this.facets);\n    }\n\n    select(event: TypeaheadOptionEvent) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === event.option)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(event.option);\n\n        // clear the typeahead\n        this.query$.next('');\n\n        // announce the selected facet\n        this._announcer.announce(`${(event.option as Facet).title} selected.`);\n    }\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListItemComponent } from './facet-check-list/check-list-item/facet-check-list-item.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetTypeaheadHighlight, FacetTypeaheadListComponent } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FacetTypeaheadListItemComponent } from './facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetCheckListItemComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadListItemComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        A11yModule,\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.subscribe((next) => {\n            if (next === this) {\n                this.setActive();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n\n    private _document: any;\n\n    private _subscription = new Subscription();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) document: any\n    ) {\n        this._document = document;\n    }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this._subscription.add(\n                this.toggleButton.keyEnter.subscribe(this.focusFirst.bind(this))\n            );\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this._subscription.add(\n            this.items.changes.subscribe(() => {\n                this._itemsOrdered = this.items.toArray();\n            })\n        );\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.key) {\n\n            case 'ArrowUp':\n            case 'Up':\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case 'ArrowDown':\n            case 'Down':\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case 'ArrowLeft':\n            case 'Left':\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'ArrowRight':\n            case 'Right':\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'Home':\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case 'End':\n                this.moveLast();\n                handled = true;\n                break;\n\n            case 'Escape':\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.key)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => {\n                this.keyEnter.emit();\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: string): boolean {\n        switch (key) {\n            case 'Enter':\n            case ' ':\n                return true;\n\n            case 'ArrowUp':\n            case 'Up':\n                return this.menuPosition === 'top';\n\n            case 'ArrowDown':\n            case 'Down':\n                return this.menuPosition === 'bottom';\n\n            case 'ArrowLeft':\n            case 'Left':\n                return this.menuPosition === 'left';\n\n            case 'ArrowRight':\n            case 'Right':\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-filter-container',\n    templateUrl: './filter-container.component.html'\n})\nexport class FilterContainerComponent {\n\n    @Input() filters: Filter[] = [];\n    @Input() clearTooltip: string;\n    @Output() filtersChange: EventEmitter<Filter[]> = new EventEmitter<Filter[]>();\n    @Output() events: EventEmitter<FilterEvent> = new EventEmitter<FilterEvent>();\n\n\n    addFilter(filter: Filter): void {\n        this.filters.push(filter);\n        this.events.next(new FilterAddEvent(filter));\n        this.filtersChange.emit(this.filters);\n    }\n\n    removeFilter(filter: Filter): void {\n        let idx = this.filters.findIndex(filters => filters === filter);\n\n        if (idx !== -1) {\n            this.filters.splice(idx, 1);\n            this.events.next(new FilterRemoveEvent(filter));\n            this.filtersChange.emit(this.filters);\n        }\n    }\n\n    removeAll(): void {\n        this.events.next(new FilterRemoveAllEvent());\n    }\n\n}\n\nexport interface Filter {\n    group: string;\n    title: string;\n    name: string;\n    initial?: boolean;\n}\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveAllEvent {\n}\n\nexport type FilterEvent = FilterAddEvent | FilterRemoveEvent | FilterRemoveAllEvent;","\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Filter, FilterContainerComponent, FilterRemoveAllEvent } from '../filter-container.component';\n\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent, private _announcer: LiveAnnouncer) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.addFilter(_filter);\n            this._announcer.announce(`Filter ${_filter.name} selected.`);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.removeFilter(_filter);\n        this._announcer.announce(`Filter ${_filter.name} deselected.`);\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    templateUrl: './filter-dropdown.component.html',\n})\nexport class FilterDropdownComponent extends FilterBaseComponent {\n\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    removeFilter(): void {\n        super.removeFilter(this.selected);\n        this.selected = this.initial;\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n    }\n\n    selectFilter(filter: Filter, event: MouseEvent) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n}","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, Input, Pipe, PipeTransform, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter, FilterContainerComponent } from '../filter-container.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    templateUrl: './filter-dynamic.component.html',\n    host: {\n        '(document:click)': 'clickOff($event)',\n    }\n})\nexport class FilterDynamicComponent extends FilterBaseComponent {\n\n    @Input() filters: Filter[];\n    @Input() initial: Filter;\n\n    @Input() set options(options: FilterDynamicListConfig) {\n        this._config = {... this.defaultOptions, ...options };\n    }\n\n    get options(): FilterDynamicListConfig {\n        return this._config;\n    }\n\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    defaultOptions: FilterDynamicListConfig = {\n        placeholder: '',\n        minCharacters: 3,\n        maxResults: Infinity\n    };\n\n    typeaheadId: string = `ux-filter-dynamic-typeahead-${uniqueId++}`;\n    query$ = new BehaviorSubject<string>('');\n    selected: Filter;\n    showTypeahead: boolean = true;\n    typeaheadItems: string[] = [];\n    highlightedElement: HTMLElement;\n    typeaheadOpen: boolean = false;\n\n    private _config: FilterDynamicListConfig = { ...this.defaultOptions };\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, container: FilterContainerComponent, announcer: LiveAnnouncer) {\n        super(container, announcer);\n    }\n\n    getItems(): string[] {\n        const query = this.query$.value.toLowerCase();\n\n        return this.filters.filter(item => item !== this.initial && item.name.toLowerCase().indexOf(query) !== -1)\n            .map(item => item.name)\n            .slice(0, this._config.maxResults);\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n        this.typeaheadItems = this.getItems();\n\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n        this.removeFilter();\n        const idx = this.filters.findIndex(filter => filter.name === typeaheadOption.value);\n        this.selected = this.filters[idx];\n        this.addFilter(this.selected);\n        this.query$.next('');\n        this.dropdown.hide();\n    }\n\n    clickOff(event: MouseEvent) {\n\n        let target = event.target as HTMLElement;\n        let hideDropdown = true;\n\n        while (target && target.nodeName !== 'BODY') {\n            if (target.classList.contains('ux-dynamic-filter')) {\n                hideDropdown = false;\n                break;\n            } else {\n                target = target.parentElement;\n            }\n        }\n\n        if (hideDropdown) {\n            this.query$.next('');\n            this.dropdown.hide();\n        }\n\n    }\n\n    removeFilter(): void {\n        if (this.selected !== this.initial) {\n            super.removeFilter(this.selected);\n            this.selected = this.initial;\n        }\n        this.query$.next('');\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n    updateTypeahead(query: string): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n        this.typeaheadItems = this.getItems();\n    }\n\n    select(event: TypeaheadOptionEvent): void {\n        // find the filter with the matching name\n        const filter = this.filters.find(_filter => _filter.name === event.option);\n\n        if (filter) {\n            this.selectFilter(filter);\n        }\n    }\n\n}\n\nexport interface FilterDynamicListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    maxIndividualItems?: number;\n}\n\n@Pipe({\n    name: 'filterTypeaheadHighlight'\n})\nexport class FilterTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        const regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"filter-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/typeahead.module';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent, FilterTypeaheadHighlight } from './filter-dynamic/filter-dynamic.component';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent,\n    FilterTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        MenuNavigationModule,\n        CommonModule,\n        TypeaheadModule,\n        A11yModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    templateUrl: './flippable-card.component.html',\n    host: {\n        'tabindex': '0',\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean): void {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped(): void {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click')\n    clickTrigger(): void {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter')\n    hoverEnter(): void {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave')\n    hoverExit(): void {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    @HostListener('keydown.spacebar', ['$event']) // IE uses different naming\n    onKeyDown(event: KeyboardEvent): void {\n        if (this.trigger !== 'manual') {\n            this.toggleFlipped();\n            event.preventDefault();\n        }\n    }\n}\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, HostListener, Input, OnDestroy, QueryList, Output, EventEmitter } from '@angular/core';\nimport { TooltipDirective } from 'ngx-bootstrap/tooltip';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    templateUrl: './floating-action-buttons.component.html',\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    @Input() direction: FloatingActionButtonDirection = 'top';\n    @ContentChildren(TooltipDirective) tooltips: QueryList<TooltipDirective>;\n    @Output() openChange = new EventEmitter<boolean>();\n\n    private _subscription: Subscription = new Subscription();\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) {\n        this._subscription.add(this.fab.open$.subscribe(value => this.openChange.emit(value)));\n    }\n\n    ngAfterViewInit(): void {\n        this._subscription.add(this.fab.open$.pipe(filter(open => open === false))\n            .subscribe(() => this.tooltips.forEach(tooltip => tooltip.hide())));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';","import { Attribute, ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    templateUrl: './floating-action-button.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent {\n\n    @Input() icon: string;\n    @HostBinding() tabindex = 1;\n\n    primary: boolean = false;\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService) {\n        this.primary = primary !== null;\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HierarchyBarService {\r\n\r\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _root: HierarchyBarNode;\r\n    private _nodes: HierarchyBarNode[] = [];\r\n\r\n    /**\r\n     * Store the root node of the hierarchy tree\r\n     */\r\n    setRootNode(root: HierarchyBarNode) {\r\n\r\n        // store the root node\r\n        this._root = root;\r\n\r\n        // create a flat structure of nodes\r\n        this._nodes = this.getNodeList(root);\r\n\r\n        // flatten the array - based on the selected node\r\n        this.nodes$.next(this.getSelectedChildren(root));\r\n    }\r\n\r\n    /**\r\n     * Select a node. This causes all nodes to be\r\n     * deselected and the path to the selected node\r\n     * to be selected\r\n     */\r\n    selectNode(node: HierarchyBarNode): void {\r\n\r\n        // deselect all nodes\r\n        this.deselectAll();\r\n\r\n        // ensure the current node is selected and its parents\r\n        this.select(node);\r\n\r\n        // emit a new node list to trigger change detection\r\n        this.nodes$.next(this.getSelectedChildren(this._root));\r\n    }\r\n\r\n    /**\r\n     * Handles getting children with support for both arrays and observables\r\n     */\r\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\r\n\r\n        if (Array.isArray(node.children)) {\r\n            return of({ loading: false, children: node.children });\r\n        }\r\n\r\n        const children$: Observable<HierarchyBarNode[]> = node.children;\r\n\r\n        // if it is an observable then handle loading\r\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\r\n            // emit initial value\r\n            observer.next({ loading: true, children: [] });\r\n\r\n            // now wait until the children observable completes\r\n            children$.pipe(first()).subscribe(children => {\r\n\r\n                // replace the observable with an array for future loading\r\n                node.children = children;\r\n\r\n                // rebuild the node tree\r\n                this.setRootNode(this._root);\r\n\r\n                // emit the latest value\r\n                observer.next({ loading: false, children: children });\r\n\r\n                // close the observable stream\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Traverses all the parents to ensure they are selected\r\n     */\r\n    private select(node: HierarchyBarNode): void {\r\n        node.selected = true;\r\n\r\n        if (node.parent) {\r\n            this.select(node.parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselects all nodes\r\n     */\r\n    private deselectAll(): void {\r\n        this._nodes.forEach(node => node.selected = false);\r\n    }\r\n\r\n    /**\r\n     * Gets all the nodes in the tree as a flat array.\r\n     * It also stores the parent node in a parent property\r\n     * on the node for easy traversal in both directions\r\n     */\r\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        // if there are no children then return only itself\r\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\r\n            return [node];\r\n        }\r\n\r\n        // store the parent property\r\n        node.children.forEach(child => child.parent = node);\r\n\r\n        // get all descendants of this node\r\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\r\n\r\n        return [node, ...descendants];\r\n    }\r\n\r\n    /**\r\n     * Gets all selected nodes from the parent node.\r\n     */\r\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        if (node.children instanceof Observable) {\r\n            return [node];\r\n        }\r\n\r\n        // get the children - and account for when there is none\r\n        const children = node.children || [];\r\n\r\n        // check if any child is selected\r\n        const child = children.find(_child => _child.selected);\r\n\r\n        // return the remaining chain of selected items\r\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\r\n    }\r\n}\r\n\r\nexport interface HierarchyBarNode {\r\n    icon?: string;\r\n    title: string;\r\n    selected?: boolean;\r\n    parent?: HierarchyBarNode;\r\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\r\n}\r\n\r\nexport interface HierarchyBarNodeChildren {\r\n    loading: boolean;\r\n    children: HierarchyBarNode[];\r\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\r\n\r\n@Component({\r\n    selector: 'ux-hierarchy-bar',\r\n    templateUrl: './hierarchy-bar.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    viewProviders: [HierarchyBarService]\r\n})\r\nexport class HierarchyBarComponent implements OnDestroy {\r\n\r\n    @Input() set root(node: HierarchyBarNode) {\r\n        this.hierarchyBar.setRootNode(node);\r\n    }\r\n\r\n    @Input() set selected(node: HierarchyBarNode) {\r\n        this.hierarchyBar.selectNode(node);\r\n    }\r\n\r\n    @Input() loadingIndicator: TemplateRef<any>;\r\n\r\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\r\n    @ViewChild('nodelist') nodelist: ElementRef;\r\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\r\n\r\n    overflow$ = new BehaviorSubject<boolean>(false);\r\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(public hierarchyBar: HierarchyBarService) {\r\n\r\n        // subscribe to changes in the selected node\r\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\r\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\r\n\r\n        // store subscriptions\r\n        this._subscription.add(selected);\r\n        this._subscription.add(changed);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * When there is overflow ensure that the rightmost\r\n     * node remains in view at all times. The nodes no longer\r\n     * visible be be displayed in a popover available on the\r\n     * overflow indicator\r\n     */\r\n    scrollIntoView(): void {\r\n\r\n        if (!this.nodelist) {\r\n            return;\r\n        }\r\n\r\n        // get the native element\r\n        const { nativeElement } = this.nodelist;\r\n\r\n        // emit whether or not there is overflow\r\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\r\n\r\n        // if the hierarchy bar contents do not overflow then do nothing\r\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\r\n\r\n            // determine the amount of overflow\r\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\r\n\r\n            // determine which nodes are not fully visible\r\n            this.overflowNodes$.next(\r\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\r\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\r\n            );\r\n\r\n            // move the scroll position to always show the last itme\r\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\r\n        }\r\n    }\r\n}","import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    /** Often a click event makes the element appear - if so we can end up closing it immediately */\n    private _initialised: boolean = false;\n\n    constructor(private _elementRef: ElementRef) {\n        setTimeout(() => this._initialised = true);\n    }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._initialised && this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  templateUrl: './popover.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy, HostBinding, HostListener, ElementRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SidePanelService } from './side-panel.service';\r\n\r\n@Component({\r\n    selector: 'ux-side-panel',\r\n    exportAs: 'ux-side-panel',\r\n    templateUrl: 'side-panel.component.html',\r\n    providers: [SidePanelService],\r\n    host: {\r\n        'class': 'ux-side-panel'\r\n    }\r\n})\r\nexport class SidePanelComponent implements OnInit, OnDestroy {\r\n\r\n    @Input()\r\n    @HostBinding('class.open')\r\n    get open(): boolean {\r\n        return this.service.open$.value;\r\n    }\r\n\r\n    set open(value: boolean) {\r\n        this.service.open$.next(value);\r\n    }\r\n\r\n    @Input()\r\n    @HostBinding('class.inline')\r\n    inline = false;\r\n\r\n    @Input()\r\n    attachTo: 'window' | 'container' = 'window';\r\n\r\n    @Input()\r\n    width: string | number = '50%';\r\n\r\n    @Input()\r\n    top: string | number = '0';\r\n\r\n    @Input()\r\n    @HostBinding('attr.aria-modal')\r\n    modal = false;\r\n\r\n    @Input()\r\n    @HostBinding('class.animate')\r\n    animate = false;\r\n\r\n    @Input()\r\n    closeOnExternalClick = false;\r\n\r\n    @Output()\r\n    openChange = new EventEmitter<boolean>();\r\n\r\n    get position() {\r\n        if (this.inline) {\r\n            return 'static';\r\n        }\r\n        if (this.attachTo === 'container') {\r\n            return 'absolute';\r\n        }\r\n        return 'fixed';\r\n    }\r\n\r\n    get cssWidth(): string {\r\n        if (typeof this.width === 'number') {\r\n            return this.width === 0 ? '0' : this.width + 'px';\r\n        }\r\n        return this.width;\r\n    }\r\n\r\n    get cssTop(): string {\r\n        if (typeof this.top === 'number') {\r\n            return this.top === 0 ? '0' : this.top + 'px';\r\n        }\r\n        return this.top;\r\n    }\r\n\r\n    @HostBinding('style.width')\r\n    get componentWidth(): string {\r\n        if (this.inline) {\r\n            return this.open ? this.cssWidth : '0';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    get hostWidth() {\r\n        return this.inline ? '100%' : this.cssWidth;\r\n    }\r\n\r\n    private _subscription: Subscription;\r\n\r\n    constructor(\r\n        protected service: SidePanelService,\r\n        private _elementRef: ElementRef\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this._subscription = this.service.open$.subscribe((next) => {\r\n            this.openChange.emit(next);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    openPanel() {\r\n        this.service.open();\r\n    }\r\n\r\n    @HostListener('document:keyup.escape')\r\n    closePanel() {\r\n        this.service.close();\r\n    }\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    clickHandler(event: MouseEvent) {\r\n        if (!this.open || !this.closeOnExternalClick) {\r\n            return;\r\n        }\r\n\r\n        const target = event.target as HTMLElement;\r\n\r\n        if (!this._elementRef.nativeElement.contains(target) ||\r\n            (target && target.classList.contains('modal-backdrop'))) {\r\n            this.closePanel();\r\n        }\r\n    }\r\n}","import { Component, Directive, Input, Output, EventEmitter, ContentChild, ElementRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\r\nimport { SidePanelService } from '../side-panel/side-panel.service';\r\n\r\n@Directive({\r\n    selector: '[uxItemDisplayPanelContent]'\r\n})\r\nexport class ItemDisplayPanelContentDirective { }\r\n\r\n@Directive({\r\n    selector: '[uxItemDisplayPanelFooter]'\r\n})\r\nexport class ItemDisplayPanelFooterDirective { }\r\n\r\n@Component({\r\n    selector: 'ux-item-display-panel',\r\n    templateUrl: './item-display-panel.component.html',\r\n    providers: [SidePanelService],\r\n    host: {\r\n        'class': 'ux-side-panel ux-item-display-panel'\r\n    }\r\n})\r\nexport class ItemDisplayPanelComponent extends SidePanelComponent {\r\n\r\n    @Input() header: string;\r\n\r\n    @Input() boxShadow: boolean = true;\r\n\r\n    @Input() closeVisible: boolean = true;\r\n\r\n    get preventClose(): boolean {\r\n        return !this.closeOnExternalClick;\r\n    }\r\n\r\n    @Input()\r\n    set preventClose(value: boolean) {\r\n        this.closeOnExternalClick = !value;\r\n    }\r\n\r\n    @Input() shadow: boolean = false;\r\n\r\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\r\n\r\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    /**\r\n     * @deprecated\r\n     * Title used for adding tooltips and shouldn't be used as an input\r\n     * instead header will be used. This is here to support backward compatibility only\r\n     * this property should not be used.\r\n     */\r\n    @Input()\r\n    set title(value: string) {\r\n        this.header = value;\r\n    }\r\n\r\n    get title() {\r\n        return this.header;\r\n    }\r\n\r\n    @Input()\r\n    set visible(visible: boolean) {\r\n        this.open = visible;\r\n    }\r\n\r\n    get visible() {\r\n        return this.open;\r\n    }\r\n\r\n    private _itemDisplayPanelSubscription: Subscription;\r\n\r\n    constructor(service: SidePanelService, elementRef: ElementRef) {\r\n        super(service, elementRef);\r\n\r\n        this.animate = false;\r\n        this.closeOnExternalClick = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._itemDisplayPanelSubscription = this.service.open$.subscribe((next) => {\r\n            this.visibleChange.emit(next);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._itemDisplayPanelSubscription.unsubscribe();\r\n    }\r\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    templateUrl: './wizard-step.component.html'\n})\nexport class WizardStepComponent {\n    \n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input() \n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n        \n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    get active(): boolean {\n        return this._active;\n    }\n\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { WizardStepComponent } from './wizard-step.component';\n\n@Component({\n    selector: 'ux-wizard',\n    templateUrl: './wizard.component.html',\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit {\n\n    private _step: number = 0;\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();        \n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    templateUrl: './marquee-wizard-step.component.html'\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    templateUrl: './marquee-wizard.component.html',\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(\n            filter((event: MarqueeWizardValidEvent) => !event.valid)\n        ).subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<Event> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe(() => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        const interval = setInterval(() => {\n\n            const buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) { }\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList | Array<any> {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : [];\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): Array<TextTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.textTracks) : [];\n    }\n\n    get videoTracks(): Array<VideoTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.videoTracks) : [];\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        if (this._mediaPlayer) {\n            this._mediaPlayer.volume = value;\n        }\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata', label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange() {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n\n    hideSubtitleTracks(): void {\n        for (let index = 0; index < this.textTracks.length; index++) {\n            this.textTracks[index].mode = 'hidden';\n        }\n    }\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    templateUrl: './slider.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb?: string;\n    lowerThumb?: string;\n    upperThumb?: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { timer } from 'rxjs/observable/timer';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SliderOptions, SliderSize } from '../../../slider/index';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-media-player-controls',\n    templateUrl: './controls.component.html',\n    host: {\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    volumeActive: boolean = false;\n    volumeFocus: boolean = false;\n    returnFocus: boolean = true;\n    subtitlesId: string = `ux-media-player-subtitle-popover-${uniqueId++}`;\n    subtitlesOpen: boolean = false;\n    mouseEnterVolume = new Subject<void>();\n    mouseLeaveVolume = new Subject<void>();\n\n    options: SliderOptions = {\n        handles: {\n            aria: {\n                thumb: 'Volume'\n            }\n        },\n        track: {\n            colors: {\n                lower: '#666'\n            },\n            height: SliderSize.Narrow,\n            ticks: {\n                major: {\n                    show: false\n                },\n                minor: {\n                    show: false\n                }\n            }\n        }\n    };\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n\n        this.mouseEnterVolume.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        this.mouseLeaveVolume.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(this.mouseEnterVolume))), takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        this.volume = this.volume === 0 ? this._previousVolume : 0;\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    isSubtitleActive(): boolean {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    setSubtitleTrack(track: TextTrack): void {\n        // hide all tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n\n        // set the position of the subtitle track\n        for (let idx = 0; idx < track.cues.length; idx++) {\n            const cue: any = track.cues[idx];\n            cue.line = -3;\n        }\n\n        // activate the selected one\n        track.mode = 'showing';\n\n    }\n\n    getSubtitleTrack(): string {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return this.mediaPlayerService.textTracks[idx].label;\n            }\n        }\n\n        return 'No subtitles';\n    }\n\n}","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxMediaPlayerCustomControl]',\n})\nexport class MediaPlayerCustomControlDirective {}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    templateUrl: './timeline.component.html',\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.mediaPlayerService.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({\n                    start: (buffered.start(idx) / this.mediaPlayerService.duration) * 100,\n                    end: (buffered.end(idx) / this.mediaPlayerService.duration) * 100\n                });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n\n    /** Skip a number of seconds in any direction */\n    skip(seconds: number): void {\n        let target = this.current + seconds;\n\n        // ensure that the target position is within the bounds of the clip\n        if (target < 0) {\n            target = 0;\n        }\n\n        if (target > this.mediaPlayerService.duration) {\n            target = this.mediaPlayerService.duration;\n        }\n\n        this.mediaPlayerService.currentTime = target;\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: HttpClient) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.get(mediaElement.src, { responseType: 'blob' }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: response.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.get(url, { responseType: 'arraybuffer' }).subscribe(response => {\n                this.getAudioBuffer(response).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpClientModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { debounceTime, takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    templateUrl: './media-player.component.html',\n    providers: [MediaPlayerService],\n    host: {\n        '(keydown.Space)': 'mediaPlayerService.togglePlay(); $event.preventDefault()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering || focused',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange()'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    focused: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    @Input() crossorigin: 'use-credentials' | 'anonymous' = 'use-credentials';\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            tap(() => this.hovering = true),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n\n        // initially hide all text tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, Output } from '@angular/core';\n\n@Directive({\n    selector: '[focusWithin],[blurWithin]',\n})\nexport class FocusWithinDirective implements OnDestroy {\n\n    @Output() focusWithin = new EventEmitter<void>();\n    @Output() blurWithin = new EventEmitter<void>();\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor, ngZone: NgZone) {\n        _focusMonitor.monitor(this._elementRef.nativeElement, true)\n            .subscribe(origin => ngZone.run(() => origin ? this.focusWithin.emit() : this.blurWithin.emit()));\n    }\n\n    ngOnDestroy(): void {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n}","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Injectable, QueryList } from '@angular/core';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\n\n@Injectable()\nexport class TabbableListService {\n\n    focusKeyManager: FocusKeyManager<TabbableListItemDirective>;\n\n    private _items: QueryList<TabbableListItemDirective>;\n\n    initialize(items: QueryList<TabbableListItemDirective>, direction: 'horizontal' | 'vertical', wrap: boolean): void {\n\n        // store the items\n        this._items = items;\n\n        // create the new focus key manager\n        this.focusKeyManager = new FocusKeyManager(items);\n\n        // set the direction of the list\n        direction === 'vertical' ? this.focusKeyManager.withVerticalOrientation() : this.focusKeyManager.withHorizontalOrientation('ltr');\n\n        // enable wrapping if required\n        if (wrap) {\n            this.focusKeyManager.withWrap();\n        }\n\n        // make sure the first item in the list is tabbable\n        if (this._items.first) {\n            this._items.first.tabindex = 0;\n        }\n\n        // call the init function on each item\n        this._items.forEach(item => item.onInit());\n    }\n\n    activate(item: TabbableListItemDirective): void {\n\n        // get the item index\n        const index = this._items.toArray().indexOf(item);\n\n        // active the item if it is not already active\n        if (this.focusKeyManager.activeItemIndex !== index) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    isItemActive(item: TabbableListItemDirective): boolean {\n\n        // get the item index\n        const index = this._items.toArray().indexOf(item);\n\n        // active the item if it is not already active\n        return this.focusKeyManager.activeItemIndex === index;\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, HostBinding, HostListener, Input, OnDestroy } from '@angular/core';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TabbableListService } from './tabbable-list.service';\n\n@Directive({\n    selector: '[uxTabbableListItem]',\n})\nexport class TabbableListItemDirective implements FocusableOption, OnDestroy {\n    @Input() disabled: boolean = false;\n    @HostBinding() tabindex: number = -1;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _tabbableList: TabbableListService, private _elementRef: ElementRef) {}\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    onInit(): void {\n        this._tabbableList.focusKeyManager.change.pipe(takeUntil(this._onDestroy), map(index => this._tabbableList.isItemActive(this)))\n            .subscribe(active => this.tabindex = active ? 0 : -1);\n    }\n\n    @HostListener('focus')\n    focus(): void {\n\n        // apply focus to the element\n        this._elementRef.nativeElement.focus();\n\n        // ensure the focus key manager updates the active item correctly\n        this._tabbableList.activate(this);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._tabbableList.focusKeyManager.onKeydown(event);\n    }\n}","import { AfterContentInit, ContentChildren, Directive, Input, OnDestroy, QueryList } from '@angular/core';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\nimport { TabbableListService } from './tabbable-list.service';\n\n@Directive({\n    selector: '[uxTabbableList]',\n    providers: [TabbableListService]\n})\nexport class TabbableListDirective implements AfterContentInit, OnDestroy {\n\n    /** Determine whether the up/down arrows should be used or the left/right arrows */\n    @Input() direction: 'horizontal' | 'vertical' = 'vertical';\n\n    /** Indicate whether or not focus should loop back to the first element after the last */\n    @Input() wrap: boolean = true;\n\n    /** Indicate whether or not the first item should receive focus on show - useful for modals and popovers */\n    @Input() focusOnShow: boolean = false;\n\n    /** Indicate whether or not focus should be returned to the previous element (only applicable when using focusOnShow) */\n    @Input() returnFocus: boolean = false;\n\n    /** Find all tabbable list items */\n    @ContentChildren(TabbableListItemDirective) items: QueryList<TabbableListItemDirective>;\n\n    private _focusedElement: HTMLElement;\n\n    constructor(private _tabbableList: TabbableListService) {}\n\n    ngAfterContentInit(): void {\n\n        // store the currently focused element\n        this._focusedElement = document.activeElement as HTMLElement;\n\n        // Set up the focus monitoring\n        this._tabbableList.initialize(this.items, this.direction, this.wrap);\n\n        // focus the first element if specified\n        if (this.focusOnShow) {\n            this._tabbableList.focusKeyManager.setFirstItemActive();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.returnFocus && this._focusedElement instanceof HTMLElement) {\n            setTimeout(() => this._focusedElement.focus());\n        }\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { NgModule } from '@angular/core';\nimport { FocusWithinDirective } from './focus-within/focus-within.directive';\nimport { TabbableListItemDirective } from './tabbable-list/tabbable-list-item.directive';\nimport { TabbableListDirective } from './tabbable-list/tabbable-list.directive';\n\n@NgModule({\n    declarations: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective\n    ],\n    imports: [\n        A11yModule\n    ],\n    exports: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective\n    ]\n})\nexport class AccessibilityModule {}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { SliderModule } from '../slider/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { MediaPlayerCustomControlDirective } from './extensions/controls/custom-control/custom-control.directive';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerComponent } from './media-player.component';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent,\n    MediaPlayerCustomControlDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule,\n        SliderModule,\n        AccessibilityModule,\n        A11yModule,\n        ClickOutsideModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class MediaPlayerModule { }\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-navigation',\n    templateUrl: './navigation.component.html'\n})\nexport class NavigationComponent {\n\n}","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, HostBinding, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    templateUrl: './navigation-item.component.html',\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() link: string;\n    @Input() @HostBinding('class.selected') expanded: boolean = false;\n\n    @HostBinding('class.active')\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional() @SkipSelf() private _parent: NavigationItemComponent,\n        private _router: Router,\n        private _activatedRoute: ActivatedRoute\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd))\n            .subscribe(() => this.expanded = this.hasActiveLink(this.link));\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            const levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy(): void {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n\n        const tree = this._router.createUrlTree([link], {\n            relativeTo: this._activatedRoute,\n            queryParams: this._activatedRoute.snapshot.queryParams,\n            fragment: this._activatedRoute.snapshot.fragment\n        });\n\n        if (link && this._router.isActive(tree, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n           // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ColorService } from '../../services/color/index';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n\r\n    // provide default options\r\n    options: NotificationOptions = {\r\n        duration: 4,\r\n        height: 100,\r\n        spacing: 10,\r\n        backgroundColor: this._colorService.getColor('accent').toHex(),\r\n        iconColor: this._colorService.getColor('accent').toHex()\r\n    };\r\n\r\n    direction: NotificationListDirection = 'above';\r\n\r\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \r\n\r\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\r\n\r\n        options = { ...this.options, ...options };\r\n\r\n        const notificationRef: NotificationRef = {\r\n            templateRef: templateRef,\r\n            duration: options.duration,\r\n            date: new Date(),\r\n            visible: true,\r\n            height: options.height,\r\n            spacing: options.spacing,\r\n            backgroundColor: options.backgroundColor,\r\n            iconColor: options.iconColor,\r\n            data: data\r\n        };\r\n\r\n        const notifications = this.notifications$.getValue();\r\n\r\n        if (this.direction === 'above') {\r\n            notifications.unshift(notificationRef);\r\n        } else {\r\n            notifications.push(notificationRef);\r\n        }\r\n\r\n        this.notifications$.next(notifications);\r\n\r\n        // remove notification after delay\r\n        if (options.duration !== 0) {\r\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\r\n        }\r\n\r\n        return notificationRef;\r\n    }\r\n\r\n    getHistory(): NotificationRef[] {\r\n        return this.notifications$.getValue();\r\n    }\r\n\r\n    dismiss(notificationRef: NotificationRef): void {\r\n        notificationRef.visible = false;\r\n        this.notifications$.next(this.notifications$.getValue());\r\n    }\r\n    \r\n    dismissAll(): void {\r\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\r\n        this.notifications$.next(this.notifications$.getValue());        \r\n    }\r\n\r\n    constructor(private _colorService: ColorService) {\r\n    }\r\n}\r\n\r\nexport interface NotificationRef {\r\n    templateRef: TemplateRef<any>;\r\n    duration: number;\r\n    date: Date;\r\n    visible?: boolean;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n    data: { [key: string]: any };\r\n}\r\n\r\nexport interface NotificationOptions {\r\n    duration?: number;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n}\r\n\r\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    templateUrl: './notification-list.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    templateUrl: './number-picker.component.html',\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n    secondaryNavigationAutoselect = false;\n\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.selected$.pipe(map(selected => this.getRoot(selected))).subscribe(root => this.selectedRoot$.next(root));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        if (this.secondaryNavigationAutoselect && item && item.children && item.children.length > 0) {\n\n            // Select the first child in secondaryNavigationAutoselect mode\n            this.selected$.next(item.children[0]);\n\n        } else {\n\n            // if we are in secondary navigation mode and we click a parent - dont deselect the child\n            if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n                return;\n            }\n\n            // Otherwise select the given item\n            this.selected$.next(item);\n        }\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    updateItem(item: PageHeaderNavigationItem, selected: PageHeaderNavigationItem): void {\n\n        // Item is selected if it is the selected item, or one of the selected item's ancestors.\n        item.selected = (item === selected) || this.isParentOf(selected, item);\n\n        if (item === selected) {\n            // call the select function if present\n            if (item.select) {\n                item.select.call(item, item);\n            }\n        }\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n\n        // Set up the initally selected item\n        const initialSelectedItem = items.find(item => item.selected === true);\n        this.select(initialSelectedItem);\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    templateUrl: './icon-menu.component.html'\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    templateUrl: './navigation-dropdown-item.component.html'\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    templateUrl: './navigation-item.component.html'\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _subscription: Subscription;\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        this._subscription = this._pageHeaderService.selected$.subscribe(next => {\n\n            // Update selected state for this item\n            this._pageHeaderService.updateItem(this.item, next);\n\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this._subscription.add(\n                this.menu.onHidden.subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()))\n            );\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select() {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { delay, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { PageHeaderService } from '../../page-header.service';\r\nimport { PageHeaderNavigationItem } from '../navigation.component';\r\n\r\n@Directive({\r\n    selector: '[uxPageHeaderNavigationSecondaryItem]'\r\n})\r\nexport class PageHeaderNavigationSecondaryItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('uxPageHeaderNavigationSecondaryItem')\r\n    item: PageHeaderNavigationItem;\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _pageHeaderService: PageHeaderService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this._pageHeaderService.selected$.pipe(delay(0), takeUntil(this._onDestroy)).subscribe(next => {\r\n\r\n            // Update selected state for this item\r\n            this._pageHeaderService.updateItem(this.item, next);\r\n\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    templateUrl: './navigation.component.html',\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    templateUrl: 'page-header.component.html',\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: string = 'center';\n\n    @Input() set secondaryNavigationAutoselect(value: boolean) {\n        this._pageHeaderService.secondaryNavigationAutoselect = value;\n    }\n\n    get secondaryNavigationAutoselect(): boolean {\n        return this._pageHeaderService.secondaryNavigationAutoselect;\n    }\n\n    @Input() set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input() set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input() set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this._familyBackground = this._colorService.resolve(color);\n    }\n\n    get familyBackground(): string {\n        return this._familyBackground;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this._familyForeground = this._colorService.resolve(color);\n    }\n\n    get familyForeground(): string {\n        return this._familyForeground;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _familyBackground: string;\n    private _familyForeground: string;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationSecondaryItemDirective } from './navigation/navigation-secondary-item/navigation-secondary-item.directive';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderComponent } from './page-header.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BreadcrumbsModule,\n        ColorServiceModule,\n        ResizeModule,\n        MenuNavigationModule,\n        BsDropdownModule.forRoot()\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent,\n        PageHeaderNavigationSecondaryItemDirective\n    ]\n})\nexport class PageHeaderModule { }\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    templateUrl: './radiobutton.component.html',\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(private _searchBuilderService: SearchBuilderService) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query\n   */\n  remove(field: SearchBuilderGroupQuery): void {\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(query.indexOf(field), 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  templateUrl: './search-builder-group.component.html',\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  constructor(public searchBuilderGroupService: SearchBuilderGroupService, private _searchBuilderService: SearchBuilderService) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have a name attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n  }\n\n  removeField(field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.remove(field);\n    this.remove.emit(field);\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit {\n\n    @Input() uxSearchBuilderOutlet: string;\n    @Input() uxSearchBuilderOutletContext: any;\n\n    private _componentRef: ComponentRef<any>;\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.uxSearchBuilderOutlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.uxSearchBuilderOutletContext.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.uxSearchBuilderOutletContext;\n        this._componentRef.instance.config = config;\n    }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderGroupService } from '../search-builder-group/search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    constructor(\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderGroupService: SearchBuilderGroupService\n    ) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  templateUrl: './text.component.html'\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  templateUrl: './date.component.html'\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    templateUrl: './date-range.component.html'\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  templateUrl: './select.component.html'\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  templateUrl: './search-builder.component.html',\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, forwardRef, HostBinding, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, delay, distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    templateUrl: 'select.component.html',\r\n    providers: [SELECT_VALUE_ACCESSOR]\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    set value(value: any) {\r\n        this._value$.next(value);\r\n    }\r\n    get value() {\r\n        return this._value$.value;\r\n    }\r\n\r\n    @Input()\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n    }\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n\r\n    @Input()\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value$ = new BehaviorSubject<any>(null);\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Emit change events\r\n        this._value$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.valueChange.emit(value);\r\n            this.propagateChange(value);\r\n        });\r\n\r\n        this._input$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.inputChange.emit(value);\r\n        });\r\n\r\n        // Changes to the input field\r\n        this._input$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        this.filter$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => value && value.length > 0)\r\n        ).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // Update the single-select input when the model changes\r\n        this._value$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            distinctUntilChanged(),\r\n            delay(0),\r\n            filter(value => value !== null && !this.multiple)\r\n        ).subscribe(value => {\r\n            this.input = this.getDisplay(value);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this.value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { DOCUMENT } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { delay } from 'rxjs/operators/delay';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    templateUrl: 'tag-input.component.html',\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n\r\n    typeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _typeaheadSubscription: Subscription;\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n        this.typeaheadQuery.changes.subscribe((query) => {\r\n            this.connectTypeahead(query.first);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    writeValue(value: any[]) {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any) {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any) {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate() {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'Delete':\r\n            case 'Del':\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n            case 'ArrowLeft':\r\n            case 'Left':\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'ArrowRight':\r\n            case 'Right':\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout', ['$event'])\r\n    focusOutHandler(event: FocusEvent) {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput() {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any) {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param d Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(d: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += d;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible() {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent) {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n            this._typeaheadSubscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._typeaheadSubscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            // Set up event handler for the highlighted element\r\n            // Added a delay to move it out of the current change detection cycle\r\n            this._typeaheadSubscription.add(\r\n                this.typeahead.highlightedElementChange.subscribe((element: HTMLElement) => {\r\n                    this.highlightedElement = element;\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.key) {\r\n            case 'Spacebar':\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SelectModule } from '../select/index';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    DateTimePickerModule,\n    PopoverModule,\n    SelectModule\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ]\n})\nexport class SearchBuilderModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SidePanelComponent } from './side-panel.component';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    templateUrl: './spark.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';    \n    private _barColor: string | string[] = [];\n    \n    @Input() \n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input() \n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input() \n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    templateUrl: './tab.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    templateUrl: './tabset.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetComponent } from './tabset.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    templateUrl: './timeline.component.html'\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    templateUrl: './timeline-event.component.html'\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    templateUrl: './toggleswitch.component.html',\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolbarSearchComponent } from './toolbar-search.component';\r\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\r\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\r\n\r\nconst DECLARATIONS = [\r\n    ToolbarSearchComponent,\r\n    ToolbarSearchFieldDirective,\r\n    ToolbarSearchButtonDirective\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: DECLARATIONS,\r\n    declarations: DECLARATIONS,\r\n    providers: [],\r\n})\r\nexport class ToolbarSearchModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    templateUrl: './virtual-scroll.component.html'\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\r\n\r\nimport { AutoGrowDirective } from './auto-grow.directive';\r\n\r\n@NgModule({\r\n    exports: [AutoGrowDirective],\r\n    declarations: [AutoGrowDirective]\r\n})\r\nexport class AutoGrowModule { }\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n  selector: '[uxOverflowObserver], [uxOverflowHorizontalObserver], [uxOverflowVerticalObserver]',\n  exportAs: 'ux-overflow-observer'\n})\nexport class OverflowDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  /** Allow a observable to be used to check for overflow */\n  @Input() trigger: Observable<void>;\n\n  /** Allow overflow to be within a range before emitting */\n  @Input() tolerance: number = 0;\n\n  /** Emit when there is a change to the overflow state - horizontal or vertical */\n  @Output() uxOverflowObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the horizontal axis */\n  @Output() uxOverflowHorizontalObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the vertical axis */\n  @Output() uxOverflowVerticalObserver = new EventEmitter<boolean>();\n\n  /** Store the overflow state on both axis */\n  private _state = { horizontalOverflow: false, verticalOverflow: false };\n\n  /** Unsubscribe from all the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** Set up the trigger if specified */\n  ngOnInit(): void {\n    if (this.trigger) {\n      this.trigger.pipe(takeUntil(this._onDestroy)).subscribe(() => this.checkForOverflow());\n    }\n  }\n\n  /** Perform an intial check for overflow */\n  ngAfterViewInit(): void {\n    requestAnimationFrame(() => this.checkForOverflow());\n  }\n\n  /** Unsubscribe from the trigger */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Programmatically trigger check for overflow */\n  checkForOverflow(): void {\n\n    const { offsetWidth, offsetHeight, scrollWidth, scrollHeight } = this._elementRef.nativeElement;\n    const horizontalOverflow = (scrollWidth - offsetWidth) > this.tolerance;\n    const verticalOverflow = (scrollHeight - offsetHeight) > this.tolerance;\n\n    if (horizontalOverflow !== this._state.horizontalOverflow) {\n      this.uxOverflowHorizontalObserver.emit(horizontalOverflow);\n    }\n\n    if (verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowVerticalObserver.emit(verticalOverflow);\n    }\n\n    if (horizontalOverflow !== this._state.horizontalOverflow || verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowObserver.emit((horizontalOverflow || verticalOverflow));\n    }\n\n    // store the state\n    this._state = { horizontalOverflow, verticalOverflow };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OverflowDirective } from './overflow/overflow-observer.directive';\n\n@NgModule({\n  exports: [OverflowDirective],\n  declarations: [OverflowDirective]\n})\nexport class ObserversModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy {\n\n  constructor(protected selectionService?: SelectionService) { }\n\n  setSelectionService(selectionService: SelectionService): void {\n    this.selectionService = selectionService;\n  }\n\n  mousedown(event: MouseEvent, data: any): void { }\n\n  click(event: MouseEvent, data: any): void { }\n\n  keydown(event: KeyboardEvent, data: any): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: any[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: any[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: any[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n    this.deselect(...this.selectionService.dataset);\n  }\n\n  destroy(): void { }\n}\n","import { KeyCode } from './keycode.enum';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy extends SelectionStrategy {\n\n  // store the most recently selected row\n  private _selection: Selection = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n\n      case KeyCode.UpArrow:\n      case KeyCode.DownArrow:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n\n      case KeyCode.Spacebar:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data, true);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: any, activate: boolean = false): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n\n    // if we want to keep the item activated then activate\n    if (activate) {\n      this.selectionService.activate(data);\n    }\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: any): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  protected multipleSelect(data: any): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: any): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: any): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  protected clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): any[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.keyCode === KeyCode.UpArrow);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection {\n  start: any;\n  end: any;\n}\n","import { KeyCode } from './keycode.enum';\r\nimport { RowSelectionStrategy } from './row-selection.strategy';\r\n\r\nexport class RowAltSelectionStrategy extends RowSelectionStrategy {\r\n    keydown(event: KeyboardEvent, data: any): void {\r\n        switch (event.keyCode) {\r\n            case KeyCode.UpArrow:\r\n            case KeyCode.DownArrow:\r\n                event.preventDefault();\r\n                this.handleCursorKey(event, data);\r\n                break;\r\n\r\n            case KeyCode.Spacebar:\r\n                event.preventDefault();\r\n                this.selectionService.strategy.toggle(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the sibling item when arrow keys are pressed\r\n     */\r\n    private handleCursorKey(event: KeyboardEvent, data: any): void {\r\n        // determine which modifier keys are pressed\r\n        const { ctrlKey, shiftKey } = event;\r\n\r\n        // if no modifier keys are pressed then deselect all and clear the selection\r\n        if (!ctrlKey && !shiftKey) {\r\n            this.deselectAll();\r\n            this.clearSelection(false);\r\n        }\r\n\r\n        if (ctrlKey) {\r\n            this.selectionService.activateSibling(event.keyCode === KeyCode.UpArrow);\r\n        } else {\r\n            const sibling = this.selectionService.getSibling(event.keyCode === KeyCode.UpArrow);\r\n            this.multipleSelect(sibling ? sibling : data);\r\n        }\r\n    }\r\n}\r\n","import { KeyCode } from './keycode.enum';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy extends SelectionStrategy {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(event: MouseEvent, data: any): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n\n      case KeyCode.UpArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(true);\n\n      case KeyCode.DownArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(false);\n\n      case KeyCode.Spacebar:\n        event.preventDefault();\n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: any): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowAltSelectionStrategy } from './strategies/row-alt-selection.strategy';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n\n  private _selection = new Set();\n  private _strategyToDestroy: SelectionStrategy;\n\n  dataset: any[] = [];\n  enabled: boolean = true;\n  clickEnabled: boolean = true;\n  keyboardEnabled: boolean = true;\n  strategy: SelectionStrategy = new SimpleSelectionStrategy(this);\n\n  active$ = new BehaviorSubject<any>(null);\n  focusTarget$ = new BehaviorSubject<any>(null);\n  selection$ = new BehaviorSubject<any[]>([]);\n\n  constructor() {\n    this._strategyToDestroy = this.strategy;\n  }\n\n  ngOnDestroy(): void {\n    if (this._strategyToDestroy) {\n      this._strategyToDestroy.destroy();\n    }\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: any[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: any[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: any[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: any): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  selected$(data: any): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setMode(mode: SelectionMode | SelectionStrategy): void {\n\n    if (this._strategyToDestroy) {\n      // Destroy previous strategy if it was created internally\n      this._strategyToDestroy.destroy();\n      this._strategyToDestroy = null;\n    }\n\n    if (mode instanceof SelectionStrategy) {\n\n      // Custom strategy - pass in the service instance\n      this.strategy = mode;\n      this.strategy.setSelectionService(this);\n\n    } else {\n\n      switch (mode.toLowerCase().trim()) {\n\n        case 'simple':\n          this.strategy = this._strategyToDestroy = new SimpleSelectionStrategy(this);\n          break;\n\n        case 'row':\n          this.strategy = this._strategyToDestroy = new RowSelectionStrategy(this);\n          break;\n\n        case 'row-alt':\n          this.strategy = this._strategyToDestroy = new RowAltSelectionStrategy(this);\n          break;\n\n        default:\n          throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple', 'row', or 'row-alt'.`);\n      }\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: any): void {\n    this.active$.next(data);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this.active$.next(null);\n  }\n\n  /**\n   * Return the next or previous sibling of the current active item.\n   * @param previous If true, the previous sibling will be returned.\n   */\n  getSibling(previous: boolean = false): any {\n\n    // get the currently active item\n    const current = this.active$.getValue();\n\n    // check if there is a current active item\n    if (!current) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(current);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    return target;\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): any {\n\n    const target = this.getSibling(previous);\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.enabled = !disabled;\n\n    // clear any stateful data\n    this.active$.next(null);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row' | 'row-alt';\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SelectionService } from './selection.service';\r\n\r\n@Directive({\r\n  selector: '[uxSelectionItem]',\r\n  exportAs: 'ux-selection-item'\r\n})\r\nexport class SelectionItemDirective implements OnInit, OnDestroy {\r\n\r\n  @Input() uxSelectionItem: any;\r\n\r\n  @Input() @HostBinding('class.ux-selection-selected')\r\n  set selected(selected: boolean) {\r\n    selected ? this.select() : this.deselect();\r\n  }\r\n\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  @Input() tabindex: number = null;\r\n\r\n  @Output() selectedChange = new EventEmitter<boolean>();\r\n\r\n  @HostBinding('class.ux-selection-focused') active: boolean = false;\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get attrTabIndex(): number {\r\n    return (this.tabindex !== null) ? this.tabindex : this._managedTabIndex;\r\n  }\r\n\r\n  private _selected: boolean = false;\r\n  private _managedTabIndex: number = -1;\r\n  private _subscriptions = new Subscription();\r\n\r\n  constructor(private _selectionService: SelectionService, private _elementRef: ElementRef) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // if there is no associated data then throw an error\r\n    if (!this.uxSelectionItem) {\r\n      throw new Error('The uxSelectionItem directive must have data associated with it.');\r\n    }\r\n\r\n    // subscribe to selection changes on this item\r\n    this._subscriptions.add(this._selectionService.selected$(this.uxSelectionItem).subscribe(selected => {\r\n\r\n      // store the selected state\r\n      this._selected = selected;\r\n\r\n      // emit the selected state\r\n      this.selectedChange.emit(selected);\r\n    }));\r\n\r\n    // subscribe to changes to the active state\r\n    this._subscriptions.add(this._selectionService.active$.pipe(map(active => active === this.uxSelectionItem)).subscribe(active => {\r\n\r\n      // store the focus state\r\n      this.active = active;\r\n\r\n      // if it is active then focus the element\r\n      if (active === true) {\r\n        this._selectionService.focusTarget$.next(this.uxSelectionItem);\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    }));\r\n\r\n    // Subscribe to changes to the focus target\r\n    // This is mostly the same as active$, except that it has an initial value of the first item in the collection.\r\n    this._subscriptions.add(this._selectionService.focusTarget$.subscribe(focusTarget => {\r\n      this._managedTabIndex = (focusTarget === this.uxSelectionItem) ? 0 : -1;\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._subscriptions.unsubscribe();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\r\n      this._selectionService.strategy.click(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event']) mousedown(event: MouseEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\r\n      this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event']) keydown(event: KeyboardEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.keyboardEnabled) {\r\n      this._selectionService.strategy.keydown(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('focus') focus(): void {\r\n    // If tabbed to from outside the component, activate.\r\n    if (this._selectionService.active$.getValue() !== this.uxSelectionItem) {\r\n      this._selectionService.activate(this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select this item using the current strategy\r\n   */\r\n  select(): void {\r\n    if (this._selectionService.enabled) {\r\n      this._selectionService.strategy.select(this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deselect this item using the current strategy\r\n   */\r\n  deselect(): void {\r\n    if (this._selectionService.enabled) {\r\n      this._selectionService.strategy.deselect(this.uxSelectionItem);\r\n    }\r\n  }\r\n}\r\n","import { AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\nimport { SelectionStrategy } from './strategies/selection.strategy';\n\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: any[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode | SelectionStrategy) {\n    this._selectionService.setMode(mode);\n  }\n\n  @Input() set clickSelection(enabled: boolean) {\n    this._selectionService.clickEnabled = enabled;\n  }\n\n  @Input() set keyboardSelection(enabled: boolean) {\n    this._selectionService.keyboardEnabled = enabled;\n  }\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number = null;\n\n  @Output() uxSelectionChange = new EventEmitter<any[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective>;\n\n  private _subscriptions = new Subscription();\n\n  constructor(private _selectionService: SelectionService, private _cdRef: ChangeDetectorRef) {\n    this._subscriptions.add(_selectionService.selection$.subscribe(items => this.uxSelectionChange.emit(items)));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this._subscriptions.add(this.items.changes.subscribe(() => this.update()));\n\n    // The above could trigger a change in the computed tabindex for selection items\n    this._cdRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this._subscriptions.unsubscribe();\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n\n    // Make sure that a tab target has been defined so that the component can be tabbed to.\n    if (this._selectionService.focusTarget$.getValue() === null && this._selectionService.dataset.length > 0) {\n      this._selectionService.focusTarget$.next(this._selectionService.dataset[0]);\n    }\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: any[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange: EventEmitter<TreeGridOptions> = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n    @Output() currentRowChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() treeDataChange: EventEmitter<TreeGridData[]> = new EventEmitter<TreeGridData[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}\n","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}"]}