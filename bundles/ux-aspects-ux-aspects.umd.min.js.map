{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","null","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-subject.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-utils.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.service.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/interfaces/conduit-properties.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.decorator.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/check-list-item/facet-check-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-secondary-item/navigation-secondary-item.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/observers/overflow/overflow-observer.directive.ts","ng://@ux-aspects/ux-aspects/directives/observers/observers.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-alt-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts"],"names":["BreadcrumbsComponent","prototype","clickCrumb","event","crumb","onClick","call","Component","args","selector","template","Input","BreadcrumbsModule","NgModule","imports","CommonModule","RouterModule","exports","declarations","ResizeService","rendererFactory","_ngZone","this","Subscription","_renderer","createRenderer","ngOnDestroy","_subscription","unsubscribe","addResizeListener","nativeElement","_this","subject","BehaviorSubject","width","offsetWidth","height","offsetHeight","displayMode","window","getComputedStyle","getPropertyValue","iframe","createElement","setStyle","setAttribute","appendChild","waitUntilReady","iframeDoc","contentDocument","contentWindow","attachListener","add","fromEvent","subscribe","run","next","readyState","addEventListener","callback","setTimeout","Injectable","RendererFactory2","NgZone","ResizeDirective","_elementRef","_resizeService","EventEmitter","ngOnInit","pipe","debounceTime","throttle","uxResize","emit","Directive","providers","ElementRef","Output","ResizeModule","CardTabContentDirective","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","__values","o","m","Symbol","iterator","value","done","__read","r","e","ar","push","error","__spread","concat","CardTabsService","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","HostBinding","type","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","defineProperty","id","toggle","disabled","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","Subject","ColumnSortingDirective","events","complete","toggleColumn","sorting","order","singleSort","toggleSingleColumn","toggleMultipleColumn","state","ColumnSortingState","NoSort","key","findIndex","column","Ascending","Descending","_column","ColumnSortingComponent","_columnSorter","takeUntil","_onDestroy","columnIdx","stateChange","changeState","exportAs","ColumnSortingModule","ConduitSubject","conduit","_zone","zoneId","_subject","getInitialValue","distinctUntilChanged","onOutput","bind","getEvents","onInput","acceptsInput","subjects","getSubjects","isArray","indexOf","sort","subjectOne","subjectTwo","lastModified","getTime","currentValue","producesOutput","zone","outputValue","Date","destroy","invokeSuperFunction","target","functionName","functionList","_i","forEach","func","apply","ConduitZone","_zoneId","unregisterConduit","registerConduit","getConduitSubject","setZoneId","setConduitProperties","properties","conduitSubject","_conduit","prop","createConduit","registerConduits","component","_conduits","propertyKey","unregisterConduits","ConduitComponent","decorators","Optional","ConduitZoneComponent","_super","tslib_1.__extends","defaultConduitProps","CONDUITS","DashboardService","defaultOptions","dimensions$","delay","visible","x","y","layout$","setLayoutData","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","columns","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","row","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","undefined","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","idx","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","Error","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","reduce","forEachBlock","onResizeStart","action","_mouseEvent","bringToFront","onResizeDrag","mousePosX","pageX","pageXOffset","mousePosY","pageY","pageYOffset","handle","getBoundingClientRect","mouseX","left","mouseY","top","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","onDragStart","setWidgetOrigin","cacheWidgets","onDragEnd","_widgetOrigin","onDrag","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","match","wgt","widgetsToMove","this_1","space","array","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","splice","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","Rounding","RoundDownBelowHalf","RoundUpOverHalf","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundUp","getRowCount","emptyRow","sendToBack","stable","DashboardComponent","dashboardService","layout","layoutChange","ngAfterViewInit","dashboardElement","onResize","DashboardWidgetComponent","regular","update","_columnSpan","_rowSpan","console","warn","random","toString","getStackableValue","_row","setStackableValue","zIndex","dragstart","drag","dragend","property","DragDirective","document","_mousedown$","draggable","dragStart","preventDefault","clone","cloneNode","addClass","_mousemove$","_mouseup$","dragMove","dragEnd","_clone","updateNodePosition","removeChild","body","removeClass","_offset","clientX","clientY","inlineStyles","source","styles","style","item","children","Renderer2","DashboardDragHandleDirective","elementRef","ngZone","renderer","DragModule","DECLARATIONS","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","deltaY","triggerDecrement","triggerIncrement","increment","decrement","encapsulation","ViewEncapsulation","None","SpinButtonModule","TimeFormatPipe","transform","Pipe","name","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","value$","date","getHours","hour","showMeridian","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","valid","isValid","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","hourChange","parseInt","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","host","aria-label","TimePickerModule","gridify","items","range","start","end","list","compareDays","day1","day2","getDate","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","substring","weekdaysShort","weekday","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showSpinners","weekdays","nowBtnText","timezones","ModeDirection","selected$","setViewportMonth","setViewportYear","date$","month$","year$","year","setDate","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","DayViewService","_datepicker","combineLatest","_b","createDayGrid","setFocus","focused$","getDay","dates","dateRange","isToday","isActive","isCurrentMonth","grid$","selectedDay","first","DayViewComponent","datePicker","dayService","trackWeekByFn","index","trackDayByFn","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","decrementTimezone","YearViewService","_year","createYearGrid","_event","goToNextDecade","goToPreviousDecade","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","focus","_timeout","clearTimeout","focusIfDelay","FocusIfModule","DateTimePickerModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","role","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_tooltipService","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","changes","firstChange","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","includes","showTriggers","hideTriggers","isFocused","activeElement","removeAttribute","ViewContainerRef","Overlay","ScrollDispatcher","TooltipModule","OverlayModule","ObserversModule","entryComponents","TypeaheadOptionEvent","option","TypeaheadKeyService","handleKey","typeahead","open","moveHighlight","selectOnEnter","selectHighlighted","TypeaheadService","uniqueId","TypeaheadComponent","typeaheadElement","_service","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","pageSize","arrayOrPromise","Promise","resolve","then","newOptions","open$","openChange","initOptions","highlighted$","highlightedKey","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","replace","displayHtml","length_1","matchIndex","toLowerCase","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","HostListener","InfiniteScrollLoadButtonDirective","_element","_template","_viewContainer","load","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","ngAfterContentInit","_updateRequests","filterOperator","request","check","auditTime","doRequest","enabled","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","loading","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","reset","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","_subscriptions","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","MutationObserver","observe","childList","subtree","disconnect","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","of","from","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","scrollTop","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","current","data","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","ContentChildren","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","scrollIntoView","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","TypeaheadModule","ReorderableHandleDirective","ReorderableModelDirective","global","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","group","isEmpty","initialize","getGroup","moves","canMove","_containers","getModelForElement","tslib_1.__values","model","getModelFromElement","containers","c","mirrorContainer","on","sibling","drop","cancel","cloned","containerElement","isSameNode","ReorderableDirective","reorderableGroup","_container","onDrop","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","reorderEnd","setTableCellWidths","captureCanvases","reorderingDisabled","handles","_handle","tagName","sourceCells","targetCells","cell","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","descendants","ReorderableModule","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","_announcer","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","tag","selectedFacet","announce","title","previousElementSibling","nextElementSibling","deselectAllFacets","trackBy","_index","shiftRight","facetsReorderable","shiftFacet","requestAnimationFrame","shiftLeft","LiveAnnouncer","FacetBaseComponent","facetContainer","selected","_","deselectAll","selectedChange","toggleFacetSelection","isFacetSelected","Host","FacetHeaderComponent","toggleExpand","canExpand","expanded","expandedChange","tabindex","(click)","(keyup.enter)","[attr.aria-expanded]","[attr.aria-label]","FacetCheckListItemComponent","getLabel","FacetCheckListComponent","_focusKeyManager","FocusKeyManager","withVerticalOrientation","change","activeIndex","activeItemIndex","setActiveItem","onKeydown","toggleFacet","ViewChildren","FacetTypeaheadListItemComponent","FacetTypeaheadListComponent","typeaheadKeyService","maxResults","minCharacters","config","query$","tap","typeaheadOptions","mergeMap","getFacetObservable","updateTypeahead","query","typeaheadOpen","Observable","FacetTypeaheadHighlight","searchQuery","regex","RegExp","A11yModule","Facet","count","MenuNavigationService","MenuNavigationItemDirective","service","active$","setActive","activated","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","keyEnter","focusFirst","toArray","moveFirst","keydownHandler","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","navigatedOut","stopPropagation","nextIndex","menuOpen","Inject","DOCUMENT","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","isKeyMatch","menuPosition","EXPORTS","FilterContainerComponent","addFilter","filters","FilterAddEvent","filtersChange","removeFilter","FilterRemoveEvent","removeAll","FilterRemoveAllEvent","FilterBaseComponent","filtersContainer","_filter","initial","FilterDropdownComponent","selectFilter","FilterDynamicComponent","announcer","Infinity","getItems","typeaheadItems","maxIndividualItems","showTypeahead","selectOption","typeaheadOption","dropdown","clickOff","hideDropdown","nodeName","parentElement","(document:click)","BsDropdownDirective","FilterTypeaheadHighlight","BsDropdownModule","forRoot","MenuNavigationModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","onKeyDown","[class.horizontal]","[class.vertical]","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","close","FloatingActionButtonsComponent","fab","tooltips","preserveWhitespaces","animations","transition","opacity","stagger","animate","FloatingActionButtonComponent","primary","Attribute","FloatingActionButtonsModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","node","getChildren","children$","observer","parent","child","nodes","_child","HierarchyBarComponent","hierarchyBar","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","ClickOutsideDirective","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","keyCode","ESCAPE","PopoverModule","HierarchyBarModule","SidePanelService","SidePanelComponent","inline","attachTo","cssWidth","openPanel","closePanel","clickHandler","closeOnExternalClick","class","ItemDisplayPanelComponent","_itemDisplayPanelSubscription","visibleChange","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","WizardComponent","QueryList","_step","stepChange","step","invalidIndicator","stepChanging","StepChangingEvent","getCurrentStep","steps","onNext","onPrevious","finish","onFinishing","onFinish","onCancel","active","gotoStep","stepIndex","stp","isLastStep","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","MarqueeWizardModule","WizardModule","AudioService","_http","getAudioFileMetadata","mediaElement","src","responseType","ResponseContentType","Blob","response","filename","lastIndexOf","extension","blob","size","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","ArrayBuffer","getAudioBuffer","arrayBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","skip","waveform","duration","points","channel","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","destination","createAnalyser","Http","AudioServiceModule","HttpModule","FrameExtractionService","createVideoPlayer","videoPlayer","preload","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","frames","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","seekable","seeking","textTracks","TextTrackList","videoTracks","VideoTrackList","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","canPlayType","addTextTrack","kind","label","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","MediaPlayerComponent","mediaPlayerService","_audioService","switchMap","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.quiet]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","MediaPlayerBaseExtensionDirective","MediaPlayerTimelineExtensionComponent","durationChangeEvent","scrub","timeUpdateEvent","progressEvent","mousedown$","thumb","mousemove$","mouseup$","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","playEvent","volumeChangeEvent","init","mouseenter$","volumeIcon","mouseenterContainer$","volumeContainer","mouseleaveContainer$","volumeActive","timer","toggleMute","setFullscreen","goToStart","goToEnd","volumeDragging","volumeSlider","DurationPipe","minutes","hours","days","pad","DurationPipeModule","FileSizePipe","log","pow","toFixed","FileSizePipeModule","NavigationComponent","NavigationItemComponent","_parent","_router","_activatedRoute","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","levelClass","getLevelClass","setIndentWithoutArrow","_childrenChanges","tree","createUrlTree","relativeTo","queryParams","snapshot","fragment","some","indentWithoutArrow","SkipSelf","Router","ActivatedRoute","NavigationModule","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","colorValueSet","_colors","getColorValueByHex","_html","className","innerHTML","getColorValue","parentNode","color","hex","g","ThemeColor","querySelector","rgba","backgroundColor","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","colorName","toRgba","a","_r","_g","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","ColorServiceModule","NotificationService","_colorService","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","_propagateChange","_min","_max","_disabled","onScroll","wheelDelta","[class.has-error]","NumberPickerModule","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","secondaryNavigationAutoselect","secondary$","isParentOf","deselect","items$","updateItem","setItems","setParent","initialSelectedItem","setSecondaryNavigation","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","menuNavigationToggle","PageHeaderNavigationDropdownItemComponent","_pageHeaderService","_hover$","dropdownOpen","button","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationSecondaryItemDirective","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","indicatorX","indicatorWidth","PageHeaderComponent","condensed","_crumbs","crumbs","_familyBackground","_familyForeground","goBack","backClick","PageHeaderModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","RadioButtonModule","SearchBuilderService","registerComponent","_components","cmp","registerComponents","components","getComponent","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","_id","remove","field","SearchBuilderGroupComponent","searchBuilderGroupService","removeField","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","uxSearchBuilderOutlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","uxSearchBuilderOutletContext","ComponentFactoryResolver","BaseSearchComponent","_searchBuilderGroupService","validate","validation","SearchTextComponent","SearchDateComponent","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchSelectComponent","multiple","dropDirection","allowNull","maxHeight","SearchBuilderComponent","_querySubscription","_validSubscription","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","propagateChange","input","_input$","inputChange","_dropdownOpen","dropdownOpenChange","filter$","onFilter","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","singleInput","inputKeyHandler","singleOptionSelected","TagInputEvent","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","Number","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","tags","_onTouchedHandler","_typeaheadSubscription","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","tagInput","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","commitTypeahead","commitInput","backspace","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","isSelected","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","tagValue","inputPattern","inputValid","tagPattern","test","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","SearchBuilderModule","SidePanelCloseDirective","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","colors","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","tick","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","diff","clamp","updateThumbPosition","eventPosition","MouseEvent","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","join","getSteps","output","showLabels","tk","t1","t2","value1","value2","isSliderValue","obj1","obj2","SliderModule","SparkComponent","_theme","_trackColor","_barColor","values","total","val","SparkModule","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","tabIndex","TabFocusDirective","_tabset","uxTabFocus","uniqueTabId","TabComponent","TabHeadingDirective","headingRef","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","TabsetModule","TimelineComponent","TimelineEventComponent","TimelineModule","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","blur","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","activate","_embeddedView","deactivate","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","OverflowDirective","horizontalOverflow","verticalOverflow","checkForOverflow","tolerance","_state","uxOverflowHorizontalObserver","uxOverflowVerticalObserver","uxOverflowObserver","SelectionStrategy","selectionService","setSelectionService","mousedown","keydown","selectAll","dataset","RowSelectionStrategy","ctrlKey","shiftKey","multipleSelect","singleSelect","KeyCode","UpArrow","DownArrow","navigate","Spacebar","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","startIdx","endIdx","activateSibling","RowAltSelectionStrategy","handleCursorKey","getSibling","SimpleSelectionStrategy","SelectionService","Set","_strategyToDestroy","selections","selection","selectionHasMutated","delete","has","selection$","setMode","trim","setDisabled","SelectionItemDirective","_selectionService","_selected","_managedTabIndex","uxSelectionItem","focusTarget$","focusTarget","clickEnabled","keyboardEnabled","SelectionDirective","_cdRef","uxSelectionChange","SelectionModule","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","TreeGridNg1Component","ThumbnailNg1Component","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","get","navigationMenuServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","rows","pdfServiceFactory","pdfServiceProvider","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","err","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","tslib_1.__assign"],"mappings":"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","sourcesContent":["import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    template: `<nav aria-label=\"Breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <li *ngFor=\"let crumb of crumbs\">\n\n            <!-- If there is a router link then use a tag -->\n            <a *ngIf=\"crumb.routerLink || crumb.onClick\"\n                tabindex=\"0\"\n                [routerLink]=\"crumb.routerLink\"\n                [fragment]=\"crumb.fragment\"\n                [queryParams]=\"crumb.queryParams\"\n                (click)=\"clickCrumb($event, crumb)\">\n                {{ crumb.title }}\n            </a>\n\n            <!-- If there is not router link then display text in a span -->\n            <span *ngIf=\"!crumb.routerLink && !crumb.onClick\">{{ crumb.title }}</span>\n        </li>\n    </ol>\n</nav>`\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","import { Injectable, NgZone, OnDestroy, Renderer2, RendererFactory2 } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Subscription } from 'rxjs/Subscription';\n\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _renderer: Renderer2;\n    private _subscription = new Subscription();\n\n    constructor(rendererFactory: RendererFactory2, private _ngZone: NgZone) {\n        this._renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addResizeListener(nativeElement: HTMLElement): BehaviorSubject<ResizeDimensions> {\n\n        // create a behavior subject subject\n        const subject = new BehaviorSubject<ResizeDimensions>({ width: nativeElement.offsetWidth, height: nativeElement.offsetHeight });\n\n        // determine the style of the element\n        const displayMode = window.getComputedStyle(nativeElement).getPropertyValue('display');\n\n        // create the iframe element\n        const iframe: HTMLIFrameElement = this._renderer.createElement('iframe');\n\n        // style the iframe to be invisible but fill containing element\n        this._renderer.setStyle(iframe, 'position', 'absolute');\n        this._renderer.setStyle(iframe, 'width', '100%');\n        this._renderer.setStyle(iframe, 'height', '100%');\n        this._renderer.setStyle(iframe, 'top', '0');\n        this._renderer.setStyle(iframe, 'right', '0');\n        this._renderer.setStyle(iframe, 'bottom', '0');\n        this._renderer.setStyle(iframe, 'left', '0');\n        this._renderer.setStyle(iframe, 'z-index', '-1');\n        this._renderer.setStyle(iframe, 'opacity', '0');\n        this._renderer.setStyle(iframe, 'border', 'none');\n        this._renderer.setStyle(iframe, 'margin', '0');\n        this._renderer.setStyle(iframe, 'pointer-events', 'none');\n        this._renderer.setStyle(iframe, 'overflow', 'hidden');\n\n        // ensure the iframe ignores any tabbing\n        this._renderer.setAttribute(iframe, 'tabindex', '-1');\n        this._renderer.setAttribute(iframe, 'aria-hidden', 'true');\n\n        // statically positioned elements need changed to relative for this method to work\n        if (displayMode !== 'relative' && displayMode !== 'absolute' && displayMode !== 'fixed') {\n            this._renderer.setStyle(nativeElement, 'position', 'relative');\n        }\n\n        // add the iframe to the container element\n        this._renderer.appendChild(nativeElement, iframe);\n\n        this.waitUntilReady(iframe, () => {\n            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document as Document;\n\n            const attachListener = () => {\n\n                // watch for any future resizes - run inside ngzone as an iframe event listener is not patched\n                this._subscription.add(fromEvent(iframe.contentWindow, 'resize').subscribe((event: ResizeDimensions) =>\n                    this._ngZone.run(() => subject.next({ width: nativeElement.offsetWidth, height: nativeElement.offsetHeight }))\n                ));\n            };\n\n            if (iframeDoc.readyState === 'complete') {\n                attachListener();\n            } else {\n\n                // wait for iframe to load\n                iframe.addEventListener('load', () => attachListener());\n            }\n        });\n\n\n        return subject;\n    }\n\n    private waitUntilReady(iframe: HTMLIFrameElement, callback: () => void) {\n        if (iframe.contentDocument || iframe.contentWindow) {\n            callback.call(this);\n        } else {\n            setTimeout(() => this.waitUntilReady(iframe, callback));\n        }\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  template: `<ng-content *ngIf=\"active$ | async\"></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  template: `<div class=\"card-tab-content\" role=\"tabpanel\" *ngIf=\"(tabService.tab$ | async)\">\r\n    <ng-content></ng-content>\r\n</div>\r\n\r\n<div class=\"card-tabs\" #tabs>\r\n\r\n    <button class=\"card-tabs-paging-btn card-tabs-paging-btn-previous\" aria-label=\"Previous Tabs\" (click)=\"previous()\" *ngIf=\"offset < bounds.lower\">\r\n        <i class=\"hpe-icon hpe-previous\"></i>\r\n    </button>\r\n\r\n    <div class=\"card-tabs-list\" role=\"tablist\" #tablist (uxResize)=\"resize($event)\" [style.transform]=\"'translateX(' + offset + 'px)'\">\r\n\r\n        <div class=\"card-tab\"\r\n            role=\"tab\"\r\n            tabindex=\"0\" #card\r\n            *ngFor=\"let tab of tabService.tabs$ | async\"\r\n            [ngClass]=\"tabService.position$ | async\"\r\n            [class.active]=\"tab.active$ | async\"\r\n            [attr.aria-selected]=\"tab.active$ | async\"\r\n            (click)=\"select(tab, card)\"\r\n            (focus)=\"tabs.scrollLeft = 0\"\r\n            (keydown.enter)=\"select(tab, card)\">\r\n\r\n            <ng-container [ngTemplateOutlet]=\"tab.content\"></ng-container>\r\n        </div>\r\n\r\n    </div>\r\n\r\n    <button class=\"card-tabs-paging-btn card-tabs-paging-btn-next\" aria-label=\"Next Tabs\" (click)=\"next()\" *ngIf=\"offset > bounds.upper\">\r\n        <i class=\"hpe-icon hpe-next\"></i>\r\n    </button>\r\n</div>`,\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ResizeModule } from '../../directives/resize/index';\r\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\r\nimport { CardTabComponent } from './card-tab/card-tab.component';\r\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResizeModule\r\n  ],\r\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\r\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\r\n})\r\nexport class CardTabsModule { }\r\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    template: `<label [attr.for]=\"inputId\"\n       class=\"ux-checkbox\"\n       [class.ux-checkbox-checked]=\"value === true\"\n       [class.ux-checkbox-indeterminate]=\"indeterminate\"\n       [class.ux-checkbox-simplified]=\"simplified\"\n       [class.ux-checkbox-disabled]=\"disabled\"\n       [class.ux-checkbox-focused]=\"focused\">\n\n    <div class=\"ux-checkbox-container\">\n        <input type=\"checkbox\"\n               class=\"ux-checkbox-input\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"value\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabindex]=\"tabindex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"ariaChecked\"\n               (focus)=\"focused = true\"\n               (blur)=\"focused = false\"\n               (change)=\"$event.stopPropagation()\"\n               (click)=\"toggle()\">\n    </div>\n\n    <span class=\"ux-checkbox-label\">\n        <ng-content></ng-content>\n    </span>\n</label>\n`,\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { Directive, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective implements OnDestroy {\n\n    @Input() singleSort: boolean;\n    events = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    toggleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n\n        // apply sorting based on the single or multiple sort\n        this.order = this.singleSort ? this.toggleSingleColumn(sorting) : this.toggleMultipleColumn(sorting);\n\n        // emit the latest order\n        this.events.next(this.order);\n\n        return this.order;\n    }\n\n    private toggleSingleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        return sorting.state === ColumnSortingState.NoSort ? [] : [{ key: sorting.key, state: sorting.state }];\n    }\n\n    private toggleMultipleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        // reorder columns here\n        const idx = this.order.findIndex(column => column.key === sorting.key);\n\n        // if wasnt previously selected add to list\n        if (idx === -1) {\n            return [...this.order, { key: sorting.key, state: sorting.state }];\n        }\n\n        // if we are sorting it change the sorting order\n        if (sorting.state === ColumnSortingState.Ascending || sorting.state === ColumnSortingState.Descending) {\n            return [...this.order.filter(_column => _column.key !== sorting.key), { key: sorting.key, state: sorting.state }];\n        }\n\n        // Otherwise remove the item\n        return this.order.filter(_column => _column.key !== sorting.key);\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState;\n}\n\nexport enum ColumnSortingState {\n    Ascending = 'ascending',\n    Descending = 'descending',\n    NoSort = 'none'\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ColumnSortingDirective, ColumnSortingOrder, ColumnSortingState } from './column-sorting.directive';\n\n@Component({\n    selector: 'ux-column-sorting',\n    template: `<div class=\"ux-column-sorting\">\n\n    <i class=\"ux-column-sorting-icon hpe-icon\"\n       [class.hpe-ascend]=\"state === columnSortingState.Ascending\"\n       [class.hpe-descend]=\"state === columnSortingState.Descending\"\n       [class.column-sorting-icon-hidden]=\"state === columnSortingState.NoSort\">\n    </i>\n\n    <p class=\"ux-column-sorting-number\" aria-hidden=\"true\">{{ order }}</p>\n</div>`,\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent implements OnDestroy {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Output() stateChange = new EventEmitter<ColumnSortingState>();\n\n    order: number;\n    columnSortingState = ColumnSortingState;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _columnSorter: ColumnSortingDirective) {\n        this._columnSorter.events.pipe(takeUntil(this._onDestroy)).subscribe(event => {\n\n            // if we are sorting this column then find the matching data\n            const columnIdx = event.findIndex(_column => _column.key === this.key);\n\n            // if we are not sorting this column then mark it as NoSort\n            if (columnIdx === -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            this.order = event.length < 2 || columnIdx === -1 ? null : columnIdx + 1;\n\n            // Emit the latest change\n            this.stateChange.emit(this.state);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        switch (this.state) {\n\n            case ColumnSortingState.Ascending:\n                this.state = ColumnSortingState.Descending;\n                break;\n\n            case ColumnSortingState.Descending:\n                this.state = ColumnSortingState.NoSort;\n                break;\n\n            default:\n                this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._columnSorter.toggleColumn({ key: this.key, state: this.state });\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\n\nexport class ConduitSubject {\n\n    private _subject: Subject<any>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(public conduit: ConduitMetadata, private _zone: ConduitZone, public zoneId: string) {\n\n        // store the target subject object\n        this._subject = conduit.subject;\n\n        // check if there are any conduits that have supplied an initial value\n        this.getInitialValue();\n\n        // subscribe to changes to the source subject\n        this._subject.pipe(distinctUntilChanged(conduit.changeDetection), takeUntil(this._onDestroy))\n            .subscribe(this.onOutput.bind(this));\n\n        // subscribe to the zone events and root zone events\n        _zone.getEvents().pipe(filter(event => event.conduit.id === conduit.id), takeUntil(this._onDestroy)).subscribe(this.onInput.bind(this));\n    }\n\n    /** Check all allow inputs to see if there is a value we should initially set the conduit to */\n    getInitialValue(): void {\n\n        // if we do not accept inputs then do nothing\n        if (this.conduit.acceptsInput === false) {\n            return;\n        }\n\n        // return all subjects that are 1) Not itself 2) In a zone that is listed in acceptsInput 3) Have a currentValue set\n        const subjects = this._zone.getSubjects().filter(subject => {\n\n            // If this is itself or if it has not value to give us then do nothing\n            if (subject === this || subject.conduit.id !== this.conduit.id || !subject.conduit.hasOwnProperty('currentValue')) {\n                return false;\n            }\n\n            // if acceptsInput is true then we return every time\n            if (this.conduit.acceptsInput === true) {\n                return true;\n            }\n\n            if (Array.isArray(this.conduit.acceptsInput)) {\n                return this.conduit.acceptsInput.indexOf(subject.zoneId) !== -1;\n            }\n        });\n\n        // if there are no matches then do nothing\n        if (subjects.length === 0) {\n            return;\n        }\n\n        // otherwise sort by the last modified field\n        subjects.sort((subjectOne, subjectTwo) => subjectOne.conduit.lastModified.getTime() < subjectTwo.conduit.lastModified.getTime() ? 1 : -1);\n\n        // get the most recent value\n        this._subject.next(subjects[0].conduit.currentValue);\n    }\n\n    /** This will be triggered when a conduits value has changed */\n    onInput(event: ConduitEvent): void {\n        // if we dont accept input or we emitted this value then do nothing\n        if (this.conduit.acceptsInput === false || event.conduit === this.conduit) {\n            return;\n        }\n\n        // check if the conduit produces output - if not we only do something if we are in the same zone\n        if (event.conduit.producesOutput === false && event.zoneId !== this.zoneId) {\n            return;\n        }\n\n        // check if we only accept inputs from specific zones\n        if (Array.isArray(this.conduit.acceptsInput)) {\n            // check if the event came from an acceptable zone\n            if (!this.conduit.acceptsInput.find(zone => zone === event.zoneId)) {\n                return;\n            }\n        }\n\n        // if required transform the value\n        const outputValue = this.conduit.map ? this.conduit.map(event.value) : event.value;\n\n        // update the subject\n        this._subject.next(outputValue);\n    }\n\n    /** This will be fired when this conduit emits a new value */\n    onOutput(value: any): void {\n\n        // store the most recent value and when it was modified - can be used for any new conduits to lookup a value\n        this.conduit.currentValue = value;\n        this.conduit.lastModified = new Date();\n\n        // check if this should produce output\n        if (this.conduit.producesOutput) {\n            this._zone.emit({ conduit: this.conduit, zoneId: this.zoneId, value });\n        }\n    }\n\n    /** Unsubscribe once this subject is destroyed */\n    destroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","/** This utility is to ensure a all functions with the specified name are called in all super classes */\nexport function invokeSuperFunction(target: object, functionName: string): void {\n    // get all instances of the function\n    const functionList: Function[] = [];\n\n    // store the current prototype we are checking\n    let prototype: any = target;\n\n    // look through every base class and check it\n    do {\n        if (prototype.hasOwnProperty(functionName)) {\n            functionList.push(prototype[functionName]);\n        }\n\n        prototype = prototype.__proto__;\n    } while (prototype.__proto__);\n\n    // augment the top level function to call all the functions\n    target[functionName] = function (...args: any[]) {\n        functionList.forEach(func => func.call(target, ...args));\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitSubject } from './conduit-subject';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\n@Injectable()\nexport class ConduitZone implements OnDestroy {\n\n    /** Create a global subject store */\n    static subjects: ConduitSubject[] = [];\n\n    /** Expose an event stream of new values */\n    static events = new Subject<ConduitEvent>();\n\n    /** Store the zone name */\n    private _zoneId: string;\n\n    ngOnDestroy(): void {\n        // find all conduit subjects that are part of this zone\n        ConduitZone.subjects.filter(_subject => _subject.zoneId === this._zoneId)\n            .forEach(_subject => this.unregisterConduit(_subject.conduit));\n    }\n\n    /** Store reference to the repository and begin watching for and emitting changes */\n    registerConduit(conduit: ConduitMetadata): void {\n        ConduitZone.subjects.push(new ConduitSubject(conduit, this, this._zoneId));\n    }\n\n    /** Destroy a conduit */\n    unregisterConduit(conduit: ConduitMetadata): void {\n        const subject = this.getConduitSubject(conduit.subject);\n\n        if (subject) {\n            // remove the subject from the internal list of conduit subjects\n            ConduitZone.subjects = ConduitZone.subjects.filter(_subject => _subject !== subject);\n\n            // perform all unsubscriptions\n            subject.destroy();\n        }\n    }\n\n    /** Provide the zone with an ID */\n    setZoneId(zoneId: string): void {\n        this._zoneId = zoneId;\n    }\n\n    /** Emit a value to all zones for checking */\n    emit(event: ConduitEvent): void {\n        ConduitZone.events.next(event);\n    }\n\n    /** Retrieve a conduit subsject object from the rxjs subject */\n    getConduitSubject(subject: Subject<any>): ConduitSubject | null {\n        return ConduitZone.subjects.find(_subject => _subject.conduit.subject === subject);\n    }\n\n    /** Get all subjects from all zones */\n    getSubjects(): ConduitSubject[] {\n        return ConduitZone.subjects;\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n\n        // find the conduit with the matching subject\n        const conduitSubject = this.getSubjects().find(_conduit => _conduit.conduit.subject === subject);\n\n        // if a match was found update the properties\n        if (conduitSubject) {\n\n            // update each specified property\n            for (const prop in properties) {\n                conduitSubject.conduit[prop] = properties[prop];\n            }\n        }\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n\n        // register the conduit with the zone\n        this.registerConduit({ ...properties, subject });\n    }\n\n    /** Register all conduits in a component */\n    registerConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.registerConduit({ ...conduit, subject: component[conduit.propertyKey] }));\n        }\n    }\n\n    /** Register all conduits in a component */\n    unregisterConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.unregisterConduit(conduit));\n        }\n    }\n\n    /** Return the global event stream */\n    getEvents(): Subject<ConduitEvent> {\n        return ConduitZone.events;\n    }\n}\n","import { OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { invokeSuperFunction } from './conduit-utils';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\nexport class ConduitComponent implements OnInit, OnDestroy {\n\n    constructor(@Optional() protected _zone: ConduitZone) {\n        // we want to ensure these functions get called even if a class overrides them\n        invokeSuperFunction(this, 'ngOnInit');\n        invokeSuperFunction(this, 'ngOnDestroy');\n    }\n\n    /** We need to register the conduits with the zone when the component is initialised */\n    ngOnInit(): void {\n        // register the conduit in the zone and ensure it gets the correct instance of the target\n        this._zone.registerConduits(this);\n    }\n\n    /** We need to unregister the conduits when the component is destroyed */\n    ngOnDestroy(): void {\n        this._zone.unregisterConduits(this);\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n        this._zone.setConduitProperties(subject, properties);\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n        this._zone.createConduit(subject, properties);\n    }\n\n}\n","import { OnInit } from '@angular/core';\nimport { ConduitComponent } from './conduit.component';\n\nexport abstract class ConduitZoneComponent extends ConduitComponent implements OnInit {\n    abstract zoneId: string;\n\n    ngOnInit(): void {\n        this._zone.setZoneId(this.zoneId);\n    }\n}\n","export interface ConduitProperties {\n    id: number | string;\n    acceptsInput?: boolean | string[];\n    producesOutput?: boolean;\n    changeDetection?: (x: any, y: any) => boolean;\n    map?: any;\n}\n\nexport const defaultConduitProps: Partial<ConduitProperties> = {\n    acceptsInput: true,\n    producesOutput: true,\n};\n","import { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties, defaultConduitProps } from './interfaces/conduit-properties';\n\n/** Expose the property that conduits will be stored in */\nexport const CONDUITS = '_conduits';\n\n/** Create the conduit property decorator */\nexport function Conduit(properties: ConduitProperties | Function): PropertyDecorator {\n    return (target: Object, propertyKey: string) => {\n\n        if (typeof properties === 'function') {\n            properties = properties.call(null);\n        }\n\n        // if the target does not already have a conduit list then create one\n        if (!target.hasOwnProperty(CONDUITS)) {\n            Object.defineProperty(target, CONDUITS, { value: [] });\n        }\n\n        // add the conduit to the list ensuring all required properties are provided\n        target[CONDUITS].push({ ...defaultConduitProps, ...properties, target, propertyKey } as ConduitMetadata);\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _mouseEvent: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(delay(0), map((dimensions: DashboardDimensions) => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n\n    get options() {\n        return this.options$.getValue();\n    }\n\n    get widgets() {\n        return this.widgets$.getValue();\n    }\n\n    get stacked() {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions() {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth() {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    constructor() {\n        this.layout$.subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() * w1.getRow();\n            const w2Position = w2.getColumn() * w2.getRow();\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._mouseEvent = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._mouseEvent.pageX - pageXOffset;\n        const mousePosY = this._mouseEvent.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._mouseEvent = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._mouseEvent = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._mouseEvent.pageX && action.event.pageY === this._mouseEvent.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._mouseEvent.pageX;\n        const mouseY = action.event.pageY - this._mouseEvent.pageY;\n\n        // store the latest event\n        this._mouseEvent = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): void {\n        this._cache = this.widgets.map(widget => ({ id: widget.id, column: widget.getColumn(), row: widget.getRow() }));\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false): void {\n        this._cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    let requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    let available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            let distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() - 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveRight(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        const rounding = this._actionWidget.direction === ActionDirection.Left ||\n            this._actionWidget.direction === ActionDirection.Top ? Rounding.RoundDownBelowHalf : Rounding.RoundUpOverHalf;\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard',\n    template: `<div #dashboard class=\"dashboard-container\" [style.height.px]=\"dashboardService.height$ | async\">\n    <div (uxResize)=\"onResize($event)\" [throttle]=\"16\" class=\"dashboard\">\n        <ng-content></ng-content>\n    </div>\n    \n    <div class=\"position-indicator\" *ngIf=\"(dashboardService.placeholder$ | async).visible\" \n        [style.left.px]=\"(dashboardService.placeholder$ | async).x\" \n        [style.top.px]=\"(dashboardService.placeholder$ | async).y\" \n        [style.width.px]=\"(dashboardService.placeholder$ | async).width\"\n        [style.height.px]=\"(dashboardService.placeholder$ | async).height\"></div>\n</div>`,\n    providers: [DashboardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements AfterViewInit {\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    constructor(public dashboardService: DashboardService) {\n        dashboardService.layout$.subscribe(layout => this.layoutChange.emit(layout));\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Component, Input, OnInit, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    template: `<div class=\"widget-content widget-col-span-{{ getColumnSpan() }} widget-row-span-{{ getRowSpan() }}\">\n    <ng-content></ng-content>\n</div>\n\n<div uxDrag #handleTop class=\"resizer-handle handle-top\" \n    (dragstart)=\"dragstart(handleTop, $event, 0)\"\n    (drag)=\"drag(handleTop, $event, 0)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [hidden]=\"!resizable\">\n</div>\n\n<div uxDrag #handleTopRight class=\"resizer-handle handle-top-right\" \n    (dragstart)=\"dragstart(handleTopRight, $event, 1)\"\n    (drag)=\"drag(handleTopRight, $event, 1)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleRight class=\"resizer-handle handle-right\" \n    (dragstart)=\"dragstart(handleRight, $event, 2)\"\n    (drag)=\"drag(handleRight, $event, 2)\"\n    (dragend)=\"dragend()\"\n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable || (dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleBottomRight class=\"resizer-handle handle-bottom-right\" \n    (dragstart)=\"dragstart(handleBottomRight, $event, 3)\"\n    (drag)=\"drag(handleBottomRight, $event, 3)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleBottom class=\"resizer-handle handle-bottom\" \n    (dragstart)=\"dragstart(handleBottom, $event, 4)\"\n    (drag)=\"drag(handleBottom, $event, 4)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [hidden]=\"!resizable\">\n</div>\n\n<div uxDrag #handleBottomLeft class=\"resizer-handle handle-bottom-left\" \n    (dragstart)=\"dragstart(handleBottomLeft, $event, 5)\"\n    (drag)=\"drag(handleBottomLeft, $event, 5)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleLeft class=\"resizer-handle handle-left\" \n    (dragstart)=\"dragstart(handleLeft, $event, 6)\"\n    (drag)=\"drag(handleLeft, $event, 6)\"\n    (dragend)=\"dragend()\"\n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable || (dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleTopLeft class=\"resizer-handle handle-top-left\" \n    (dragstart)=\"dragstart(handleTopLeft, $event, 7)\"\n    (drag)=\"drag(handleTopLeft, $event, 7)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>`\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _subscription: Subscription;\n\n    constructor(public dashboardService: DashboardService) {\n        this._subscription = dashboardService.options$.subscribe(() => this.update());\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time \n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeStart({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    /** Detemine if we should show a clone when dragging */\n    @Input() clone: boolean = false;\n\n    /** Allow the dragging to be enabled/disabled */\n    @Input() draggable: boolean = true;\n\n    /** Emit an event when dragging starts */\n    @Output() dragstart = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the mouse moves while dragging */\n    @Output() drag = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the dragging finishes */\n    @Output() dragend = new EventEmitter<void>();\n\n    /** Store the element we have cloned */\n    private _clone: Element;\n\n    /** Store the mouse offset for the cloned element position */\n    private _offset: { x: number, y: number };\n\n    /** Create an observable from the mouse down event */\n    private _mousedown$ = fromEvent<MouseEvent>(this._elementRef.nativeElement, 'mousedown');\n\n    /** Create an observable from the mouse move event */\n    private _mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n\n    /** Create an observable from the mouse up event */\n    private _mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n    /** Use an observable to unsubscribe from all subscriptions */\n    protected _onDestroy = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, private _ngZone: NgZone, private _renderer: Renderer2) {\n        this._mousedown$.pipe(filter(() => this.draggable), takeUntil(this._onDestroy)).subscribe(this.dragStart.bind(this));\n    }\n\n    /** Emit events and create clone when drag starts */\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this.clone) {\n            // clone the node\n            this.cloneNode(event);\n        }\n\n        // apply a class to the element being dragged\n        this._renderer.addClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // emit the drag start event\n        this._ngZone.run(() => this.dragstart.emit(event));\n\n        this._mousemove$.pipe(takeUntil(this._mouseup$), takeUntil(this._onDestroy))\n            .subscribe(this.dragMove.bind(this), null, this.dragEnd.bind(this));\n    }\n\n    /** Emit event and update clone position when dragging moves */\n    dragMove(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this._clone) {\n            this.updateNodePosition(event);\n        }\n\n        // emit the drag start event\n        this._ngZone.run(() => this.drag.emit(event));\n    }\n\n    /** Emit event and destroy clone when dragging ends */\n    dragEnd(): void {\n        // if there was a clone, remove it\n        if (this._clone) {\n            this._renderer.removeChild(document.body, this._clone);\n            this._clone = null;\n        }\n\n        // remove the dragging class\n        this._renderer.removeClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        this._ngZone.run(() => this.dragend.emit());\n    }\n\n    /** Create an exact clone of an element */\n    cloneNode(event: MouseEvent): void {\n\n        // duplicate the node\n        this._clone = this._elementRef.nativeElement.cloneNode(true);\n\n        // store the position within the draggable element\n        const { top, left } = this._elementRef.nativeElement.getBoundingClientRect();\n        this._offset = { x: event.clientX - left, y: event.clientY - top };\n\n        // inline all styles so it looks identical regardless of its position in the DOM\n        this.inlineStyles(this._elementRef.nativeElement, this._clone);\n\n        // ensure we can easily position the node an it is above all other elements\n        this._renderer.setAttribute(this._clone, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._clone, 'position', 'absolute');\n        this._renderer.setStyle(this._clone, 'z-index', '99999');\n\n        // apply a class to allow custom styling\n        this._renderer.addClass(this._clone, 'ux-drag-dragging-clone');\n\n        // insert the cloned element\n        this._renderer.appendChild(document.body, this._clone);\n\n        // set the cloned element initial position\n        this.updateNodePosition(event);\n    }\n\n    /** Position the clone relative to the mouse */\n    updateNodePosition(event: MouseEvent): void {\n        this._renderer.setStyle(this._clone, 'left', (event.pageX - this._offset.x) + 'px');\n        this._renderer.setStyle(this._clone, 'top', (event.pageY - this._offset.y) + 'px');\n    }\n\n    /** Inline all styles to ensure styling is consistent regardless of its position in the dom */\n    inlineStyles(source: Element, target: Element): void {\n        // get all the computed styles from the source element\n        const styles = getComputedStyle(source);\n\n        // inline every specified style\n        for (let idx = 0; idx < styles.length; idx++) {\n            const style = styles.item(idx);\n\n            if (style !== undefined) {\n                this._renderer.setStyle(target, styles[idx], styles[style]);\n            }\n        }\n\n        // ensure we dont capture any move events\n        this._renderer.setStyle(target, 'pointer-events', 'none');\n\n        // do the same for all the child elements\n        for (let idx = 0; idx < source.children.length; idx++) {\n            this.inlineStyles(source.children[idx], target.children[idx]);\n        }\n    }\n\n    /** Unsubscribe from all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n        super(elementRef, ngZone, renderer);\n\n        this.dragstart.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.drag.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.dragend.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DragDirective } from './drag.directive';\n\n@NgModule({\n    exports: [DragDirective],\n    declarations: [DragDirective]\n})\nexport class DragModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DragModule } from '../../directives/drag/index';\n\nconst DECLARATIONS: any[] = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    template: `<button class=\"spin-button\"\n        *ngIf=\"spinners\"\n        tabindex=\"-1\"\n        [disabled]=\"disabled\"\n        [attr.aria-label]=\"incrementAriaLabel\"\n        [attr.aria-disabled]=\"disabled\"\n        (click)=\"triggerIncrement()\">\n\n  <span class=\"hpe-icon hpe-up\"></span>\n</button>\n\n<input [type]=\"type\"\n       role=\"spinbutton\"\n       [min]=\"min\"\n       [max]=\"max\"\n       [tabindex]=\"0\"\n       class=\"form-control\"\n       [placeholder]=\"placeholder\"\n       [readOnly]=\"readOnly\"\n       [disabled]=\"disabled\"\n       [attr.aria-label]=\"inputAriaLabel\"\n       [attr.aria-disabled]=\"disabled\"\n       [attr.aria-valuemin]=\"min\"\n       [attr.aria-valuenow]=\"value\"\n       [attr.aria-valuemax]=\"max\"\n       [attr.aria-readonly]=\"readOnly\"\n       [ngModel]=\"value\"\n       (ngModelChange)=\"valueChange.emit($event)\"\n       (wheel)=\"scroll($event)\"\n       (keydown.arrowup)=\"arrowkeys ? triggerIncrement() : null; $event.preventDefault()\"\n       (keydown.arrowdown)=\"arrowkeys ? triggerDecrement() : null; $event.preventDefault()\">\n\n<button class=\"spin-button\"\n        *ngIf=\"spinners\"\n        tabindex=\"-1\"\n        [disabled]=\"disabled\"\n        [attr.aria-label]=\"decrementAriaLabel\"\n        [attr.aria-disabled]=\"disabled\"\n        (click)=\"triggerDecrement()\">\n\n  <span class=\"hpe-icon hpe-down\"></span>\n</button>`,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n\n  transform(value: number): string | number {\n    return value < 10 ? '0' + value : value;\n  }\n\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    template: `<div class=\"time-picker\" aria-label=\"Time picker\">\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showHours\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            placeholder=\"HH\"\n            [min]=\"0\"\n            [max]=\"showMeridian ? 12 : 23\"\n            [value]=\"hour$ | async | timeFormat\"\n            (valueChange)=\"hourChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"hour\"\n            incrementAriaLabel=\"Increment the hour\"\n            decrementAriaLabel=\"Decrement the hour\"\n            (increment)=\"incrementHour()\"\n            (decrement)=\"decrementHour()\">\n        </ux-spin-button>\n\n    </div>\n\n    <div class=\"time-picker-separator\" *ngIf=\"showMinutes\">:</div>\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showMinutes\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            placeholder=\"MM\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [value]=\"minute$ | async | timeFormat\"\n            (valueChange)=\"minuteChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"minute\"\n            incrementAriaLabel=\"Increment the minute\"\n            decrementAriaLabel=\"Decrement the minute\"\n            (increment)=\"incrementMinute()\"\n            (decrement)=\"decrementMinute()\">\n        </ux-spin-button>\n\n    </div>\n\n    <div class=\"time-picker-separator\" *ngIf=\"showSeconds\">:</div>\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showSeconds\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            type=\"number\"\n            placeholder=\"SS\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [value]=\"second$ | async | timeFormat\"\n            (valueChange)=\"secondChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"seconds\"\n            incrementAriaLabel=\"Increment the second\"\n            decrementAriaLabel=\"Decrement the second\"\n            (increment)=\"incrementSecond()\"\n            (decrement)=\"decrementSecond()\">\n        </ux-spin-button>\n\n    </div>\n</div>\n\n<div class=\"time-picker-meridian\" *ngIf=\"showMeridian\">\n\n    <div class=\"btn-group\" role=\"radiogroup\">\n\n        <button class=\"btn button-toggle-accent\"\n                *ngFor=\"let meridian of meridians\"\n                role=\"radio\"\n                tabindex=\"0\"\n                [disabled]=\"disabled\"\n                (click)=\"selectMeridian(meridian)\"\n                [class.active]=\"meridian === (meridian$ | async)\"\n                [attr.aria-label]=\"meridian\"\n                [attr.aria-checked]=\"meridian === (meridian$ | async)\"\n                [attr.aria-disabled]=\"disabled\">\n                {{ meridian }}\n        </button>\n\n    </div>\n</div>`,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { DateTimePickerTimezone } from './date-time-picker.service';\n\n\n/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort } from './date-time-picker.utils';\nimport { DateTimePickerTimezone } from './date-time-picker.service';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n\n    timezones: DateTimePickerTimezone[] = [\n        { name: 'GMT-11', offset: 660 },\n        { name: 'GMT-10', offset: 600 },\n        { name: 'GMT-9', offset: 540 },\n        { name: 'GMT-8', offset: 480 },\n        { name: 'GMT-7', offset: 420 },\n        { name: 'GMT-6', offset: 360 },\n        { name: 'GMT-5', offset: 300 },\n        { name: 'GMT-4', offset: 240 },\n        { name: 'GMT-3', offset: 180 },\n        { name: 'GMT-2', offset: 120 },\n        { name: 'GMT-1', offset: 60 },\n        { name: 'GMT', offset: 0 },\n        { name: 'GMT+1', offset: -60 },\n        { name: 'GMT+2', offset: -120 },\n        { name: 'GMT+3', offset: -180 },\n        { name: 'GMT+4', offset: -240 },\n        { name: 'GMT+5', offset: -300 },\n        { name: 'GMT+6', offset: -360 },\n        { name: 'GMT+7', offset: -420 },\n        { name: 'GMT+8', offset: -480 },\n        { name: 'GMT+9', offset: -540 },\n        { name: 'GMT+10', offset: -600 },\n        { name: 'GMT+11', offset: -660 },\n        { name: 'GMT+12', offset: -720 }\n    ];\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config.showDate);\n    showTime$ = new BehaviorSubject<boolean>(this._config.showTime);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config.showTimezone);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config.showSeconds);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config.showMeridian);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config.showSpinners);\n    weekdays$ = new BehaviorSubject<string[]>(this._config.weekdays);\n    nowBtnText$ = new BehaviorSubject<string>(this._config.nowBtnText);\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config.timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    private _subscription: Subscription;\n\n    constructor(private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        return this._config.timezones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService, DateTimePickerTimezone } from './date-time-picker.service';\nimport { dateComparator, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  template: `<div class=\"calendar-container\">\n\n  <ux-date-time-picker-header></ux-date-time-picker-header>\n\n  <ng-container *ngIf=\"datepicker.showDate$ | async\" [ngSwitch]=\"datepicker.mode$ | async\">\n\n      <!-- Display days in the current month -->\n      <ux-date-time-picker-day-view *ngSwitchCase=\"DatePickerMode.Day\"></ux-date-time-picker-day-view>\n\n      <!-- Display the months in the current year -->\n      <ux-date-time-picker-month-view *ngSwitchCase=\"DatePickerMode.Month\"></ux-date-time-picker-month-view>\n\n      <!-- Display a decade -->\n      <ux-date-time-picker-year-view *ngSwitchCase=\"DatePickerMode.Year\"></ux-date-time-picker-year-view>\n\n  </ng-container>\n\n  <!-- Display a Time Picker -->\n  <ux-date-time-picker-time-view *ngIf=\"datepicker.showTime$ | async\"></ux-date-time-picker-time-view>\n\n</div>\n\n<button class=\"now-button\" aria-label=\"Set date to now\" (click)=\"setToNow()\">{{ datepicker.nowBtnText$ | async }}</button>`,\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  private _timezone: DateTimePickerTimezone;\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _subscription = new Subscription();\n\n  constructor(public datepicker: DateTimePickerService) {\n    const valueChange = datepicker.selected$.pipe(distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    const timezoneChange = datepicker.timezone$.pipe(distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify, months } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n    \n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  template: `<table class=\"calendar\">\n    <thead>\n        <tr>\n            <th *ngFor=\"let day of datePicker.weekdays$ | async\" class=\"weekday\" [attr.aria-label]=\"day\">{{ day }}</th>\n        </tr>\n    </thead>\n\n    <tbody role=\"grid\">\n        <tr role=\"row\" *ngFor=\"let row of dayService.grid$ | async; trackBy: trackWeekByFn\">\n\n            <td *ngFor=\"let item of row; trackBy: trackDayByFn\" class=\"date-cell\" role=\"gridcell\">\n\n                <button class=\"date-button\"\n                        [focusIf]=\"(dayService.focused$ | async)?.day === item.day && (dayService.focused$ | async)?.month === item.month && (dayService.focused$ | async)?.year === item.year\"\n                        [attr.aria-label]=\"item.date | date\"\n                        [attr.aria-selected]=\"item.isActive\"\n                        [attr.aria-hidden]=\"!item.isCurrentMonth\"\n                        [class.current]=\"item.isToday\"\n                        [class.active]=\"item.isActive\"\n                        [class.preview]=\"!item.isCurrentMonth\"\n                        [tabindex]=\"getTabbable(item) ? 0 : -1\"\n                        (click)=\"select(item.date); $event.stopPropagation()\"\n                        (keydown.ArrowLeft)=\"focusDate(item, -1); $event.preventDefault()\"\n                        (keydown.ArrowRight)=\"focusDate(item, 1); $event.preventDefault()\"\n                        (keydown.ArrowUp)=\"focusDate(item, -7); $event.preventDefault()\"\n                        (keydown.ArrowDown)=\"focusDate(item, 7); $event.preventDefault()\">\n\n                    {{ item.date.getDate() }}\n                </button>\n\n            </td>\n        </tr>\n    </tbody>\n</table>`,\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    template: `<header class=\"header\">\n\n  <button class=\"header-navigation\"\n          (click)=\"previous(); $event.stopPropagation()\"\n          [attr.aria-label]=\"previousAria$ | async\"\n          tabindex=\"0\">\n\n    <i class=\"hpe-icon hpe-previous\"></i>\n  </button>\n\n  <button class=\"header-title\"\n          [attr.aria-label]=\"headerAria$ | async\"\n          [class.active]=\"canAscend$ | async\"\n          (click)=\"ascend(); $event.stopPropagation()\"\n          [tabindex]=\"(canAscend$ | async) ? 0 : -1\">\n       {{ datepicker.header$ | async }}\n  </button>\n\n  <button class=\"header-navigation\"\n          (click)=\"next(); $event.stopPropagation()\"\n          [attr.aria-label]=\"nextAria$ | async\"\n          tabindex=\"0\">\n\n    <i class=\"hpe-icon hpe-next\"></i>\n  </button>\n</header>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, monthsShort, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n            \n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    template: `<div class=\"calendar\" role=\"grid\">\n  <div class=\"calendar-row\" *ngFor=\"let row of monthService.grid$ | async; trackBy: trackRowByFn\" role=\"row\">\n\n    <button role=\"gridcell\"\n         class=\"calendar-item\"\n         *ngFor=\"let item of row; trackBy: trackMonthByFn\"\n         [focusIf]=\"(monthService.focused$ | async)?.month === item.month && (monthService.focused$ | async)?.year === item.year\"\n         [tabindex]=\"getTabbable(item) ? 0 : -1\"\n         [attr.aria-label]=\"item.name + ' ' + item.year\"\n         [attr.aria-selected]=\"item.isActiveMonth\"\n         [class.active]=\"item.isActiveMonth\"\n         [class.current]=\"item.isCurrentMonth\"\n         (click)=\"select(item.month); $event.stopPropagation()\"\n         (keydown.ArrowLeft)=\"focusMonth(item, -1); $event.preventDefault()\"\n         (keydown.ArrowRight)=\"focusMonth(item, 1); $event.preventDefault()\"\n         (keydown.ArrowUp)=\"focusMonth(item, -4); $event.preventDefault()\"\n         (keydown.ArrowDown)=\"focusMonth(item, 4); $event.preventDefault()\">\n         {{ item.name }}\n    </button>\n  </div>\n</div>\n`,\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    template: `<ux-time-picker *ngIf=\"datepicker.showTime$ | async\"\n    [value]=\"datepicker.selected$ | async\"\n    (valueChange)=\"datepicker.selected$.next($event)\"\n    [showSeconds]=\"datepicker.showSeconds$ | async\"\n    [showMeridian]=\"datepicker.showMeridian$ | async\"\n    [showSpinners]=\"datepicker.showSpinners$ | async\">\n</ux-time-picker>\n\n<ng-container *ngIf=\"datepicker.showTimezone$ | async\">\n\n    <div class=\"time-zone-picker\" *ngIf=\"datepicker.showSpinners$ | async\">\n\n        <ux-spin-button\n            class=\"time-zone-spinner\"\n            [value]=\"(datepicker.timezone$ | async).name\"\n            [readOnly]=\"true\"\n            (increment)=\"incrementTimezone()\"\n            (decrement)=\"decrementTimezone()\"\n            inputAriaLabel=\"Time Zone\"\n            incrementAriaLabel=\"Switch to the next time zone\"\n            decrementAriaLabel=\"Switch to the previous time zone\">\n        </ux-spin-button>\n    </div>\n\n    <div class=\"time-zone-picker\" *ngIf=\"!(datepicker.showSpinners$ | async)\">\n\n        <select class=\"form-control time-zone-select\"\n                tabindex=\"0\"\n                [ngModel]=\"(datepicker.timezone$ | async).name\"\n                (ngModelChange)=\"selectTimezone($event)\"\n                aria-label=\"Timezone\"\n                [attr.aria-valuenow]=\"(datepicker.timezone$ | async).name\">\n\n            <option *ngFor=\"let zone of datepicker.timezones$ | async\"\n                    [selected]=\"zone.name === (datepicker.timezone$ | async).name\"\n                    [value]=\"zone.name\">\n                {{ zone?.name }}\n            </option>\n\n        </select>\n    </div>\n\n</ng-container>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  template: `<div class=\"calendar\" role=\"grid\">\n  <div class=\"calendar-row\" role=\"row\" *ngFor=\"let row of yearService.grid$ | async; trackBy: trackRowByFn\">\n\n    <button *ngFor=\"let item of row; trackBy: trackYearByFn\"\n         role=\"gridcell\"\n         class=\"calendar-item\"\n         [focusIf]=\"(yearService.focused$ | async) === item.year\"\n         [attr.aria-label]=\"item.year\"\n         [attr.aria-selected]=\"item.isActiveYear\"\n         [class.current]=\"item.isCurrentYear\"\n         [class.active]=\"item.isActiveYear\"\n         (click)=\"select(item.year); $event.stopPropagation()\"\n         (keydown.ArrowLeft)=\"focusYear(item, -1); $event.preventDefault()\"\n         (keydown.ArrowRight)=\"focusYear(item, 1); $event.preventDefault()\"\n         (keydown.ArrowUp)=\"focusYear(item, -4); $event.preventDefault()\"\n         (keydown.ArrowDown)=\"focusYear(item, 4); $event.preventDefault()\"\n         [tabindex]=\"getTabbable(item) ? 0 : -1\">\n         {{ item.year }}\n    </button>\n  </div>\n</div>\n`,\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus();\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent],\n    providers: [\n        DateTimePickerConfig\n    ]\n})\nexport class DateTimePickerModule { }\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    template: `<div class=\"ux-ebox-header\">\n    <ng-content select=\"ux-ebox-header\"></ng-content>\n</div>\n\n<div class=\"ux-ebox-content\">\n    <ng-content select=\"ux-ebox-content\"></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  template: `<div class=\"tooltip in\" [id]=\"id\" [attr.role]=\"role\" [ngClass]=\"[placement, customClass]\">\n    <div class=\"tooltip-arrow\"></div>\n    <div class=\"tooltip-inner\" (cdkObserveContent)=\"reposition()\">\n        <ng-container *ngIf=\"!isTemplateRef\">{{ content }}</ng-container>\n        <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"context\"></ng-container>\n    </div>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { Injectable } from '@angular/core';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n\n                case 'Enter':\n                    if (typeahead.selectOnEnter) {\n                        typeahead.selectHighlighted();\n                    }\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    template: `<div class=\"ux-typeahead-options\"\n    [uxInfiniteScroll]=\"loadOptionsCallback\"\n    [collection]=\"visibleOptions$ | async\"\n    (collectionChange)=\"visibleOptions$.next($event)\"\n    [enabled]=\"isInfiniteScroll()\"\n    [filter]=\"filter\"\n    [loadOnScroll]=\"true\"\n    [pageSize]=\"pageSize\"\n    [scrollElement]=\"typeaheadElement\"\n    (loading)=\"loading = true\"\n    (loaded)=\"loading = false\">\n\n    <ol *ngIf=\"(visibleOptions$ | async).length > 0\">\n        <li *ngFor=\"let option of (visibleOptions$ | async); let i = index\"\n            [attr.id]=\"id + '-option-' + i\"\n            [class.disabled]=\"isDisabled(option)\"\n            [class.highlighted]=\"highlightedKey === option.key\"\n            [attr.aria-selected]=\"multiselectable ? isDisabled(option) : null\"\n            [uxTypeaheadHighlight]=\"highlightedKey === option.key\"\n            [uxScrollIntoViewIf]=\"highlightedKey === option.key\"\n            [scrollParent]=\"typeaheadElement.nativeElement\"\n            (mousedown)=\"optionMousedownHandler($event)\"\n            (click)=\"optionClickHandler($event, option)\"\n            (mouseover)=\"highlight(option)\">\n\n            <ng-container [ngTemplateOutlet]=\"optionTemplate || defaultOptionTemplate\"\n                [ngTemplateOutletContext]=\"{option: option.value, api: optionApi}\">\n            </ng-container>\n\n        </li>\n    </ol>\n\n    <div *uxInfiniteScrollLoading>\n        <ng-container [ngTemplateOutlet]=\"loadingTemplate || defaultLoadingTemplate\"></ng-container>\n    </div>\n\n    <div *ngIf=\"isInfiniteScroll() === false && (visibleOptions$ | async).length === 0 && loading\">\n        <ng-container [ngTemplateOutlet]=\"loadingTemplate || defaultLoadingTemplate\"></ng-container>\n    </div>\n\n</div>\n<div *ngIf=\"(visibleOptions$ | async).length === 0 && !loading\">\n    <ng-container [ngTemplateOutlet]=\"noOptionsTemplate || defaultNoOptionsTemplate\">\n    </ng-container>\n</div>\n\n<ng-template #defaultLoadingTemplate>\n    <div class=\"ux-typeahead-loading\">\n        <div class=\"spinner spinner-accent spinner-bounce-middle\"></div>\n        <div>Loading...</div>\n    </div>\n</ng-template>\n\n<ng-template #defaultOptionTemplate let-option=\"option\" let-api=\"api\">\n    <span class=\"ux-typeahead-option\" [innerHtml]=\"api.getDisplayHtml(option)\"></span>\n</ng-template>\n\n<ng-template #defaultNoOptionsTemplate>\n    <span class=\"ux-typeahead-no-options\">No results</span>\n</ng-template>`,\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input()\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n    @Input() selectOnEnter: boolean = false;\r\n    @Input() loading = false;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n    highlightedKey: string = null;\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n\r\n                // Invoke the callback which may return an array or a promise.\r\n                const arrayOrPromise = this.options(pageNum, pageSize, filter);\r\n\r\n                // Map the results to an array of TypeaheadVisibleOption.\r\n                return Promise.resolve(arrayOrPromise).then(newOptions => {\r\n\r\n                    if (!Array.isArray(newOptions)) {\r\n                        return newOptions;\r\n                    }\r\n\r\n                    return newOptions.map((option: any) => {\r\n                        return {\r\n                            value: option,\r\n                            key: this.getKey(option)\r\n                        };\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.openChange.emit(next);\r\n\r\n            if (next) {\r\n                this.initOptions();\r\n            }\r\n        });\r\n\r\n        this.highlighted$.pipe(takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.highlightedKey = next ? next.key : null;\r\n            this.highlightedChange.emit(next ? next.value : null);\r\n        });\r\n\r\n        combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n            });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        const displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlighted$.next(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    selectHighlighted(): void {\r\n        if (this.highlighted) {\r\n            this.select({ value: this.highlighted, key: this.getKey(this.highlighted)});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableHandle]'\r\n})\r\nexport class ReorderableHandleDirective { }\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableModel]'\r\n})\r\nexport class ReorderableModelDirective {\r\n\r\n    // allow the user to specify a model for the item - allows use with ngFor\r\n    @Input() uxReorderableModel: any;\r\n\r\n    // this can be used to identify which instance of the directive relates to which element\r\n    constructor(public elementRef: ElementRef) { }\r\n}\r\n","// WORKAROUND: Angular Cli 6 has removed the globals patch, dragular requires this to we can patch it here\n(<any>window).global = (<any>window).global || {};\n\n// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport * as dragulaNamespace from 'dragula';\nimport { Drake } from 'dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ReorderEvent } from '../../directives/reorderable/index';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    template: `<!-- Display Any Selected Facets -->\n<div class=\"facets-selected-container\">\n\n    <!-- Display Title an Clear Button -->\n    <div class=\"facets-selected-header-container\">\n\n        <!-- Show The Selected Text -->\n        <span class=\"facets-selected-header-label\">{{ header }}</span>\n\n        <!-- Add a Clear Button -->\n        <button class=\"btn btn-link btn-icon button-secondary\"\n            tabindex=\"0\"\n            [attr.aria-label]=\"clearTooltip\"\n            [uxTooltip]=\"clearTooltip\"\n            placement=\"left\"\n            (click)=\"deselectAllFacets()\"\n            *ngIf=\"facets.length > 0\">\n\n            <svg class=\"facets-selected-clear-graphic\" focusable=\"false\" viewBox=\"0 0 19 12\" shape-rendering=\"geometricPrecision\">\n                <rect class=\"light-grey\" x=\"0\" y=\"2\" width=\"7\" height=\"2\"></rect>\n                <rect class=\"dark-grey\" x=\"0\" y=\"5\" width=\"9\" height=\"2\"></rect>\n                <rect class=\"light-grey\" x=\"0\" y=\"8\" width=\"7\" height=\"2\"></rect>\n                <path class=\"dark-grey\" d=\"M9,1 h1 l9,9 v1 h-1 l-9,-9 v-1 Z\"></path>\n                <path class=\"dark-grey\" d=\"M9,11 v-1 l9,-9 h1 v1 l-9,9 h-1 Z\"></path>\n            </svg>\n        </button>\n\n    </div>\n\n    <!-- Display Tags For Selected Items -->\n    <div class=\"facets-selected-list\"\n        uxReorderable\n        role=\"list\"\n        [reorderingDisabled]=\"!facetsReorderable\"\n        [(reorderableModel)]=\"facets\"\n        (reorderableModelChange)=\"facetsChange.emit(facets)\">\n\n        <!-- Show Selected Tags -->\n        <div #tag\n            class=\"facet-selected-tag\"\n            role=\"listitem\"\n            tabindex=\"0\"\n            uxReorderableHandle\n            *ngFor=\"let facet of facets; trackBy: trackBy\"\n            [attr.aria-label]=\"facet.title\"\n            [uxReorderableModel]=\"facet\"\n            (mousedown)=\"tag.focus()\"\n            (keydown.ArrowRight)=\"shiftRight(facet, tag)\"\n            (keydown.ArrowLeft)=\"shiftLeft(facet, tag)\">\n\n            <!-- Display Label -->\n            <span class=\"facet-selected-tag-label\">{{ facet.title }}</span>\n\n            <!-- Display Remove Icon -->\n            <button class=\"facet-selected-remove-btn\"\n                i18n-aria-label\n                aria-label=\"Deselect Facet\"\n                (click)=\"deselectFacet(facet, tag)\">\n\n                <i class=\"hpe-icon hpe-close\"></i>\n            </button>\n        </div>\n\n    </div>\n\n    <!-- Show Message Here if No Facets Selected -->\n    <p class=\"facets-selected-none-label\" *ngIf=\"emptyText && facets.length === 0\">{{ emptyText }}</p>\n\n</div>\n\n<!-- Any Facet Elements Should be Added Here By User -->\n<div class=\"facets-region\">\n    <ng-content></ng-content>\n</div>`\n})\nexport class FacetContainerComponent implements OnDestroy {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    constructor(private _announcer: LiveAnnouncer) { }\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet, tag?: HTMLElement): void {\n\n        // find the index of the item in the selected array\n        const idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n\n        // announce the facet removal\n        this._announcer.announce(`Option ${facet.title} deselected.`, 'assertive');\n\n        // focus another tag if there is one\n        if (tag) {\n            const sibling = tag.previousElementSibling || tag.nextElementSibling;\n\n            // if there is a sibling then focus it\n            if (sibling) {\n                (sibling as HTMLElement).focus();\n            }\n        }\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n\n        // announce the facet removal\n        this._announcer.announce(`All options deselected.`, 'assertive');\n    }\n\n    trackBy(_index: number, facet: Facet): string | number {\n        return facet.id || facet.title;\n    }\n\n    shiftRight(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, 1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved down.`);\n    }\n\n    shiftLeft(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, -1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved up.`);\n    }\n\n    private shiftFacet(facet: Facet, distance: number) {\n        const index = this.facets.indexOf(facet);\n        const target = index + distance;\n\n        // Ensure the move is valid\n        if (target < 0 || target === this.facets.length) {\n            return;\n        }\n\n        // Perform the move\n        this.facets.splice(index, 1);\n        this.facets.splice(target, 0, facet);\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}\n\nexport interface FacetReorderEvent extends ReorderEvent {\n    index: number;\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        const index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    template: `<span class=\"facet-header-title\">{{ header }}</span>\n<span class=\"hpe-icon\" [class.hpe-down]=\"expanded\" [class.hpe-previous]=\"!expanded\" *ngIf=\"canExpand\"></span>`,\n    host: {\n        'role': 'button',\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()',\n        '[attr.aria-expanded]': 'expanded',\n        '[attr.aria-label]': 'header + \\' Facet: Activate to \\' + (expanded ? \\'collapse\\' : \\'expand\\')'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;\n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list-item',\n    template: `<div #option\n    class=\"facet-check-list-item\"\n    [class.facet-active]=\"selected\"\n    [attr.aria-checked]=\"selected\"\n    role=\"option\"\n    [tabindex]=\"tabbable ? 0 : -1\"\n    (focus)=\"itemFocus.emit()\"\n    (blur)=\"itemBlur.emit()\"\n    (click)=\"selectedChange.emit(facet)\"\n    (keydown.enter)=\"selectedChange.emit(facet)\"\n    (keydown.space)=\"selectedChange.emit(facet); $event.preventDefault()\"\n    (keydown.spacebar)=\"selectedChange.emit(facet); $event.preventDefault()\"\n    [class.disabled]=\"facet?.disabled\">\n\n    <!-- Show check icon to indicate the state -->\n    <span class=\"facet-check-list-item-check\" aria-hidden=\"true\">\n        <span class=\"hpe-icon hpe-active\"></span>\n    </span>\n\n    <!-- Display the title -->\n    <span class=\"facet-check-list-item-title\">\n        {{ facet?.title }}\n    </span>\n\n    <!-- Display the count if specified -->\n    <span class=\"facet-check-list-item-count\"\n        *ngIf=\"facet?.count !== undefined\"\n        attr.aria-label=\"{{ facet?.count }}\"\n        i18n-aria-label>\n        ({{ facet?.count }})\n    </span>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetCheckListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet = null;\n    @Input() selected: boolean = false;\n    @Input() tabbable: boolean = false;\n    @Output() selectedChange = new EventEmitter<Facet>();\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() itemBlur = new EventEmitter<void>();\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : '';\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, QueryList, ViewChildren } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\nimport { FacetCheckListItemComponent } from './check-list-item/facet-check-list-item.component';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    template: `<ux-facet-header [header]=\"header\" [(expanded)]=\"expanded\"></ux-facet-header>\n\n<!-- Create a container which will show when section is expanded -->\n<div class=\"facet-check-list-container\"\n    tabindex=\"-1\"\n    role=\"listbox\"\n    [class.facet-check-list-scrollbar]=\"scrollbar\"\n    [class.facet-check-list-scrollbar-focused]=\"isFocused\"\n    *ngIf=\"expanded\">\n\n    <!-- Iterate through each possible facet -->\n    <ux-facet-check-list-item *ngFor=\"let facet of facets; let index = index\"\n        [facet]=\"facet\"\n        [tabbable]=\"activeIndex === index\"\n        [selected]=\"isFacetSelected(facet)\"\n        (selectedChange)=\"toggleFacet(index, facet)\"\n        (keydown)=\"onKeydown($event)\"\n        (itemFocus)=\"isFocused = true; onFocus(index)\"\n        (itemBlur)=\"isFocused = false\">\n    </ux-facet-check-list-item>\n\n</div>`\n})\nexport class FacetCheckListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n\n    @ViewChildren(FacetCheckListItemComponent) options: QueryList<FacetCheckListItemComponent>;\n\n    isFocused: boolean = false;\n    activeIndex: number = 0;\n\n    private _focusKeyManager: FocusKeyManager<FacetCheckListItemComponent>;\n\n    ngAfterViewInit(): void {\n        this._focusKeyManager = new FocusKeyManager(this.options)\n            .withVerticalOrientation();\n\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list-item',\n    template: `<div #option\n    role=\"option\"\n    class=\"facet-typeahead-list-selected-option\"\n    [attr.aria-checked]=\"selected\"\n    [tabindex]=\"tabbable ? 0 : -1\"\n    (focus)=\"itemFocus.emit()\"\n    (click)=\"selectedChange.emit(facet)\"\n    (keydown.enter)=\"selectedChange.emit(facet)\"\n    (keydown.space)=\"selectedChange.emit(facet); $event.preventDefault()\"\n    (keydown.spacebar)=\"selectedChange.emit(facet); $event.preventDefault()\">\n\n    <ux-checkbox [clickable]=\"false\" [value]=\"selected\" [simplified]=\"simplified\" [tabindex]=\"-1\" [disabled]=\"disabled\">\n        <span class=\"facet-typeahead-list-selected-option-title\">{{ facet?.title }}</span>\n        <span class=\"facet-typeahead-list-selected-option-count\">({{ facet?.count }})</span>\n    </ux-checkbox>\n\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetTypeaheadListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet;\n    @Input() selected: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() tabbable: boolean = false;\n\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() selectedChange = new EventEmitter<Facet>();\n\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : null;\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, ElementRef, Input, Pipe, PipeTransform, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map, mergeMap, takeUntil, tap } from 'rxjs/operators';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { FacetContainerComponent } from '../facet-container.component';\nimport { Facet } from '../models/facet';\nimport { FacetTypeaheadListItemComponent } from './typeahead-list-item/facet-typeahead-list-item.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    template: `<ux-facet-header [header]=\"header\" [(expanded)]=\"expanded\"></ux-facet-header>\n\n<div class=\"facet-typeahead-list-container\" role=\"listbox\" *ngIf=\"expanded\">\n\n    <div class=\"facet-typeahead-list-selected-container\" tabindex=\"-1\" *ngIf=\"suggestions?.length > 0\">\n\n        <ux-facet-typeahead-list-item\n            *ngFor=\"let facet of suggestions; let index = index\"\n            [facet]=\"facet\"\n            [tabbable]=\"activeIndex === index\"\n            [selected]=\"isFacetSelected(facet)\"\n            (selectedChange)=\"toggleFacet(index, facet)\"\n            (keydown)=\"onKeydown($event)\"\n            (itemFocus)=\"onFocus(index)\">\n        </ux-facet-typeahead-list-item>\n\n    </div>\n\n    <div class=\"facet-typeahead-list-control\">\n\n        <!-- Create Typeahead Control -->\n        <input type=\"text\"\n            class=\"form-control\"\n            [placeholder]=\"typeaheadConfig?.placeholder\"\n            [attr.aria-activedescendant]=\"highlightedElement?.id\"\n            aria-autocomplete=\"list\"\n            aria-multiline=\"false\"\n            [attr.aria-controls]=\"typeaheadId\"\n            [ngModel]=\"query$ | async\"\n            (ngModelChange)=\"query$.next($event); updateTypeahead($event)\"\n            (keydown)=\"typeaheadKeyService.handleKey($event, typeahead)\"\n            (blur)=\"typeaheadOpen = false\">\n\n        <ux-typeahead #typeahead\n            [id]=\"typeaheadId\"\n            [(open)]=\"typeaheadOpen\"\n            [loading]=\"loading\"\n            display=\"title\"\n            [options]=\"typeaheadOptions\"\n            [optionTemplate]=\"facetOptionTemplate\"\n            [selectOnEnter]=\"true\"\n            (optionSelected)=\"select($event)\"\n            (highlightedElementChange)=\"highlightedElement = $event\">\n        </ux-typeahead>\n\n    </div>\n\n</div>\n\n<ng-template #facetOptionTemplate let-option=\"option\" let-api=\"api\">\n    <p class=\"facet-typeahead-list-option\" [attr.aria-label]=\"option.title\">\n        <span [innerHTML]=\"option.title | facetTypeaheadHighlight: (query$ | async)\"></span>\n        <span class=\"facet-typeahead-list-option-count\"\n            *ngIf=\"option.count\">\n            ({{ option.count }})\n        </span>\n    </p>\n</ng-template>`\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    @Input()\n    set typeaheadConfig(config: FacetTypeaheadListConfig) {\n        this._config = { placeholder: '', maxResults: 50, minCharacters: 1, ...config };\n    }\n\n    get typeaheadConfig(): FacetTypeaheadListConfig {\n        return this._config;\n    }\n\n    @ViewChildren(FacetTypeaheadListItemComponent) options: QueryList<FacetTypeaheadListItemComponent>;\n\n    query$ = new BehaviorSubject<string>('');\n    loading: boolean = false;\n    activeIndex: number = 0;\n    typeaheadId: string = `ux-facet-typeahead-${uniqueId++}`;\n    typeaheadOpen: boolean = false;\n    typeaheadOptions: Facet[] = [];\n    highlightedElement: HTMLElement;\n\n    private _config: FacetTypeaheadListConfig = { placeholder: '', maxResults: 50, minCharacters: 1 };\n    private _focusKeyManager: FocusKeyManager<FacetTypeaheadListItemComponent>;\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, facetContainer: FacetContainerComponent, elementRef: ElementRef, private _announcer: LiveAnnouncer) {\n        super(facetContainer, elementRef);\n    }\n\n    ngAfterViewInit(): void {\n\n        // set up search query subscription\n        this.query$.pipe(\n            takeUntil(this._onDestroy),\n            tap(() => {\n                this.loading = true;\n                this.typeaheadOptions = [];\n            }),\n            mergeMap(() => this.getFacetObservable().pipe(map(facets => {\n                return facets.filter(facet => !facet.disabled && !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .slice(0, this._config.maxResults);\n            })))\n        ).subscribe(facets => {\n            this.loading = false;\n            this.typeaheadOptions = facets;\n        });\n\n        this._focusKeyManager = new FocusKeyManager(this.options).withVerticalOrientation();\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n\n    /** Only show typeahead if we have enough characters */\n    updateTypeahead(query: string = ''): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n    }\n\n    getFacetObservable(): Observable<Facet[]> {\n        return this.facets instanceof Observable ? this.facets : of(this.facets);\n    }\n\n    select(event: TypeaheadOptionEvent) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === event.option)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(event.option);\n\n        // clear the typeahead\n        this.query$.next('');\n\n        // announce the selected facet\n        this._announcer.announce(`${(event.option as Facet).title} selected.`);\n    }\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListItemComponent } from './facet-check-list/check-list-item/facet-check-list-item.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetTypeaheadHighlight, FacetTypeaheadListComponent } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FacetTypeaheadListItemComponent } from './facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetCheckListItemComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadListItemComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        A11yModule,\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.subscribe((next) => {\n            if (next === this) {\n                this.setActive();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n\n    private _document: any;\n\n    private _subscription = new Subscription();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) document: any\n    ) {\n        this._document = document;\n    }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this._subscription.add(\n                this.toggleButton.keyEnter.subscribe(this.focusFirst.bind(this))\n            );\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this._subscription.add(\n            this.items.changes.subscribe(() => {\n                this._itemsOrdered = this.items.toArray();\n            })\n        );\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.key) {\n\n            case 'ArrowUp':\n            case 'Up':\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case 'ArrowDown':\n            case 'Down':\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case 'ArrowLeft':\n            case 'Left':\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'ArrowRight':\n            case 'Right':\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'Home':\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case 'End':\n                this.moveLast();\n                handled = true;\n                break;\n\n            case 'Escape':\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.key)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => {\n                this.keyEnter.emit();\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: string): boolean {\n        switch (key) {\n            case 'Enter':\n            case ' ':\n                return true;\n\n            case 'ArrowUp':\n            case 'Up':\n                return this.menuPosition === 'top';\n\n            case 'ArrowDown':\n            case 'Down':\n                return this.menuPosition === 'bottom';\n\n            case 'ArrowLeft':\n            case 'Left':\n                return this.menuPosition === 'left';\n\n            case 'ArrowRight':\n            case 'Right':\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-filter-container',\n    template: `<ng-content></ng-content>\n\n<!-- Add a Clear Button -->\n<button class=\"btn btn-link btn-icon btn-secondary m-l-xs\"\n    tabindex=\"0\"\n    aria-label=\"Clear all filters\"\n    i18n-aria-label\n    *ngIf=\"filters.length > 0\"\n    [uxTooltip]=\"clearTooltip || 'Clear All'\"\n    (click)=\"removeAll()\">\n\n    <svg class=\"filter-selected-clear-graphic\" width=\"100%\" viewBox=\"0 0 19 12\" shape-rendering=\"geometricPrecision\">\n        <rect class=\"light-grey\" x=\"0\" y=\"2\" width=\"7\" height=\"2\"></rect>\n        <rect class=\"dark-grey\" x=\"0\" y=\"5\" width=\"9\" height=\"2\"></rect>\n        <rect class=\"light-grey\" x=\"0\" y=\"8\" width=\"7\" height=\"2\"></rect>\n        <path class=\"dark-grey\" d=\"M9,1 h1 l9,9 v1 h-1 l-9,-9 v-1 Z\"></path>\n        <path class=\"dark-grey\" d=\"M9,11 v-1 l9,-9 h1 v1 l-9,9 h-1 Z\"></path>\n    </svg>\n\n</button>`\n})\nexport class FilterContainerComponent {\n\n    @Input() filters: Filter[] = [];\n    @Input() clearTooltip: string;\n    @Output() filtersChange: EventEmitter<Filter[]> = new EventEmitter<Filter[]>();\n    @Output() events: EventEmitter<FilterEvent> = new EventEmitter<FilterEvent>();\n\n\n    addFilter(filter: Filter): void {\n        this.filters.push(filter);\n        this.events.next(new FilterAddEvent(filter));\n        this.filtersChange.emit(this.filters);\n    }\n\n    removeFilter(filter: Filter): void {\n        let idx = this.filters.findIndex(filters => filters === filter);\n\n        if (idx !== -1) {\n            this.filters.splice(idx, 1);\n            this.events.next(new FilterRemoveEvent(filter));\n            this.filtersChange.emit(this.filters);\n        }\n    }\n\n    removeAll(): void {\n        this.events.next(new FilterRemoveAllEvent());\n    }\n\n}\n\nexport interface Filter {\n    group: string;\n    title: string;\n    name: string;\n    initial?: boolean;\n}\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveAllEvent {\n}\n\nexport type FilterEvent = FilterAddEvent | FilterRemoveEvent | FilterRemoveAllEvent;","\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Filter, FilterContainerComponent, FilterRemoveAllEvent } from '../filter-container.component';\n\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent, private _announcer: LiveAnnouncer) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.addFilter(_filter);\n            this._announcer.announce(`Filter ${_filter.name} selected.`);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.removeFilter(_filter);\n        this._announcer.announce(`Filter ${_filter.name} deselected.`);\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    template: `<div class=\"btn-group\" dropdown [autoClose]=\"true\" #dropdown=\"bs-dropdown\">\n\n    <button\n        type=\"button\"\n        tabindex=\"0\"\n        dropdownToggle\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"dropdown.isOpen\"\n        aria-haspopup=\"true\"\n        [attr.aria-expanded]=\"dropdown.isOpen\"\n        class=\"filter-dropdown btn dropdown-toggle\"\n        [class.active]=\"selected !== initial\">\n        {{ selected?.title }}\n        <span class=\"hpe-icon hpe-down\"></span>\n    </button>\n\n    <ul *dropdownMenu\n        uxMenuNavigation\n        [toggleButton]=\"menuNavigationToggle\"\n        class=\"dropdown-menu\" role=\"menu\">\n\n        <li class=\"dropdown-list-item\"\n            *ngFor=\"let filter of filters\"\n            role=\"none\">\n\n            <a class=\"dropdown-item\"\n                role=\"listitem\"\n                tabindex=\"-1\"\n                uxMenuNavigationItem\n                [attr.aria-selected]=\"filter === selected\"\n                (click)=\"selectFilter(filter, $event); dropdown.hide(); menuNavigationToggle.focus()\"\n                (keydown.enter)=\"selectFilter(filter, $event); dropdown.hide(); menuNavigationToggle.focus()\">\n\n                <i class=\"hpe-icon\" [class.hpe-checkmark]=\"filter === selected\"></i>\n                <span class=\"filter-dropdown-title\">{{ filter.name }}</span>\n            </a>\n        </li>\n    </ul>\n</div>`,\n})\nexport class FilterDropdownComponent extends FilterBaseComponent {\n\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    removeFilter(): void {\n        super.removeFilter(this.selected);\n        this.selected = this.initial;\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n    }\n\n    selectFilter(filter: Filter, event: MouseEvent) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n}","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, Input, Pipe, PipeTransform, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter, FilterContainerComponent } from '../filter-container.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    template: `<div class=\"btn-group ux-dynamic-filter\"\n    dropdown\n    [autoClose]=\"true\"\n    #dynamicDropdown=\"bs-dropdown\">\n\n    <button\n        type=\"button\"\n        tabindex=\"0\"\n        dropdownToggle\n        aria-haspopup=\"true\"\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"dynamicDropdown.isOpen\"\n        [attr.aria-expanded]=\"dynamicDropdown.isOpen\"\n        [class.active]=\"selected !== initial\"\n        class=\"filter-dropdown btn dropdown-toggle\">\n        {{ selected?.title }}\n        <span class=\"hpe-icon hpe-down\"></span>\n    </button>\n\n    <ul *dropdownMenu\n        class=\"dropdown-menu\"\n        role=\"menu\"\n        uxMenuNavigation\n        [toggleButton]=\"menuNavigationToggle\">\n\n        <li class=\"dropdown-list-item\"\n            *ngIf=\"showTypeahead\"\n            role=\"none\">\n\n            <a class=\"dropdown-item\"\n                role=\"menuitem\"\n                tabindex=\"-1\"\n                uxMenuNavigationItem\n                [attr.aria-selected]=\"initial === selected\"\n                (click)=\"removeFilter(); $event.stopPropagation(); $event.preventDefault(); dynamicDropdown.hide(); menuNavigationToggle.focus()\"\n                (keydown.enter)=\"removeFilter(); $event.stopPropagation(); $event.preventDefault(); dynamicDropdown.hide(); menuNavigationToggle.focus()\">\n\n                <i class=\"hpe-icon\" [class.hpe-checkmark]=\"initial === selected\"></i>\n                <span class=\"filter-dropdown-title\">{{ initial.name }}</span>\n            </a>\n        </li>\n\n        <li class=\"dropdown-list-item\"\n            *ngIf=\"selected !== initial && showTypeahead\"\n            role=\"none\">\n\n            <a class=\"dropdown-item\"\n                role=\"menuitem\"\n                tabindex=\"-1\"\n                uxMenuNavigationItem>\n                <i class=\"hpe-icon hpe-checkmark\"></i>\n                <span class=\"filter-dropdown-title\">{{ selected.name }}</span>\n            </a>\n        </li>\n\n        <hr>\n\n        <li *ngIf=\"showTypeahead\" class=\"typeahead-box\" role=\"none\">\n\n                <input type=\"text\"\n                    class=\"form-control\"\n                    [placeholder]=\"options?.placeholder || defaultOptions.placeholder\"\n                    [attr.aria-activedescendant]=\"highlightedElement?.id\"\n                    [attr.aria-controls]=\"typeaheadId\"\n                    aria-autocomplete=\"list\"\n                    aria-multiline=\"false\"\n                    [ngModel]=\"query$ | async\"\n                    (ngModelChange)=\"query$.next($event); updateTypeahead($event)\"\n                    (keydown)=\"typeaheadKeyService.handleKey($event, typeahead); $event.stopPropagation();\"\n                    (keydown.enter)=\"$event.preventDefault()\"\n                    (blur)=\"typeaheadOpen = false\"\n                    (click)=\"$event.stopPropagation()\">\n\n                <ux-typeahead #typeahead\n                    [id]=\"typeaheadId\"\n                    [(open)]=\"typeaheadOpen\"\n                    display=\"title\"\n                    [selectOnEnter]=\"true\"\n                    [options]=\"typeaheadItems\"\n                    [optionTemplate]=\"filterOptionTemplate\"\n                    (optionSelected)=\"select($event); dynamicDropdown.hide(); menuNavigationToggle.focus()\"\n                    (highlightedElementChange)=\"highlightedElement = $event\">\n                </ux-typeahead>\n        </li>\n\n        <ng-container *ngIf=\"!showTypeahead\">\n\n            <li class=\"dropdown-list-item\"\n                *ngFor=\"let filter of filters\"\n                role=\"none\">\n\n                <a class=\"dropdown-item\"\n                    role=\"menuitem\"\n                    tabindex=\"-1\"\n                    uxMenuNavigationItem\n                    [attr.aria-selected]=\"filter === selected\"\n                    (click)=\"selectFilter(filter); $event.stopPropagation(); $event.preventDefault(); dynamicDropdown.hide(); menuNavigationToggle.focus()\"\n                    (keydown.enter)=\"selectFilter(filter); $event.stopPropagation(); $event.preventDefault(); dynamicDropdown.hide(); menuNavigationToggle.focus()\">\n\n                    <i class=\"hpe-icon\" [class.hpe-checkmark]=\"filter === selected\"></i>\n                    <span class=\"filter-dropdown-title\">{{ filter.name }}</span>\n                </a>\n            </li>\n\n        </ng-container>\n\n    </ul>\n</div>\n\n<ng-template #filterOptionTemplate let-option=\"option\" let-api=\"api\">\n    <span [attr.aria-label]=\"option\" [innerHTML]=\"option | filterTypeaheadHighlight: (query$ | async)\"></span>\n</ng-template>`,\n    host: {\n        '(document:click)': 'clickOff($event)',\n    }\n})\nexport class FilterDynamicComponent extends FilterBaseComponent {\n\n    @Input() filters: Filter[];\n    @Input() initial: Filter;\n\n    @Input() set options(options: FilterDynamicListConfig) {\n        this._config = {... this.defaultOptions, ...options };\n    }\n\n    get options(): FilterDynamicListConfig {\n        return this._config;\n    }\n\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    defaultOptions: FilterDynamicListConfig = {\n        placeholder: '',\n        minCharacters: 3,\n        maxResults: Infinity\n    };\n\n    typeaheadId: string = `ux-filter-dynamic-typeahead-${uniqueId++}`;\n    query$ = new BehaviorSubject<string>('');\n    selected: Filter;\n    showTypeahead: boolean = true;\n    typeaheadItems: string[] = [];\n    highlightedElement: HTMLElement;\n    typeaheadOpen: boolean = false;\n\n    private _config: FilterDynamicListConfig = { ...this.defaultOptions };\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, container: FilterContainerComponent, announcer: LiveAnnouncer) {\n        super(container, announcer);\n    }\n\n    getItems(): string[] {\n        const query = this.query$.value.toLowerCase();\n\n        return this.filters.filter(item => item !== this.initial && item.name.toLowerCase().indexOf(query) !== -1)\n            .map(item => item.name)\n            .slice(0, this._config.maxResults);\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n        this.typeaheadItems = this.getItems();\n\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n        this.removeFilter();\n        const idx = this.filters.findIndex(filter => filter.name === typeaheadOption.value);\n        this.selected = this.filters[idx];\n        this.addFilter(this.selected);\n        this.query$.next('');\n        this.dropdown.hide();\n    }\n\n    clickOff(event: MouseEvent) {\n\n        let target = event.target as HTMLElement;\n        let hideDropdown = true;\n\n        while (target && target.nodeName !== 'BODY') {\n            if (target.classList.contains('ux-dynamic-filter')) {\n                hideDropdown = false;\n                break;\n            } else {\n                target = target.parentElement;\n            }\n        }\n\n        if (hideDropdown) {\n            this.query$.next('');\n            this.dropdown.hide();\n        }\n\n    }\n\n    removeFilter(): void {\n        if (this.selected !== this.initial) {\n            super.removeFilter(this.selected);\n            this.selected = this.initial;\n        }\n        this.query$.next('');\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n    updateTypeahead(query: string): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n        this.typeaheadItems = this.getItems();\n    }\n\n    select(event: TypeaheadOptionEvent): void {\n        // find the filter with the matching name\n        const filter = this.filters.find(_filter => _filter.name === event.option);\n\n        if (filter) {\n            this.selectFilter(filter);\n        }\n    }\n\n}\n\nexport interface FilterDynamicListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    maxIndividualItems?: number;\n}\n\n@Pipe({\n    name: 'filterTypeaheadHighlight'\n})\nexport class FilterTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        const regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"filter-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/typeahead.module';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent, FilterTypeaheadHighlight } from './filter-dynamic/filter-dynamic.component';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent,\n    FilterTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        MenuNavigationModule,\n        CommonModule,\n        TypeaheadModule,\n        A11yModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    template: `<div class=\"ux-flipper\"\n     [class.ux-flip-card]=\"flipped\"\n     [style.width.px]=\"width\"\n     [style.height.px]=\"height\">\n\n    <div class=\"ux-flippable-card-front\"\n         [style.width.px]=\"width\"\n         [style.height.px]=\"height\"\n         [attr.aria-hidden]=\"flipped\">\n\n        <ng-content select=\"ux-flippable-card-front\"></ng-content>\n    </div>\n\n    <div class=\"ux-flippable-card-back\"\n         [style.width.px]=\"width\"\n         [style.height.px]=\"height\"\n         [attr.aria-hidden]=\"!flipped\">\n\n        <ng-content select=\"ux-flippable-card-back\"></ng-content>\n    </div>\n</div>`,\n    host: {\n        'tabindex': '0',\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean): void {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped(): void {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click')\n    clickTrigger(): void {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter')\n    hoverEnter(): void {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave')\n    hoverExit(): void {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    @HostListener('keydown.spacebar', ['$event']) // IE uses different naming\n    onKeyDown(event: KeyboardEvent): void {\n        if (this.trigger !== 'manual') {\n            this.toggleFlipped();\n            event.preventDefault();\n        }\n    }\n}\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, HostListener, Input, OnDestroy, QueryList, Output, EventEmitter } from '@angular/core';\nimport { TooltipDirective } from 'ngx-bootstrap/tooltip';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    template: `<ng-content select=\"[fab-primary]\"></ng-content>\n\n<div class=\"floating-action-button-list\" [@fabAnimation]=\"fab.open$ | async\" [ngClass]=\"direction\" *ngIf=\"fab.open$ | async\">\n    <ng-content></ng-content>\n</div>`,\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    @Input() direction: FloatingActionButtonDirection = 'top';\n    @ContentChildren(TooltipDirective) tooltips: QueryList<TooltipDirective>;\n    @Output() openChange = new EventEmitter<boolean>();\n\n    private _subscription: Subscription = new Subscription();\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) {\n        this._subscription.add(this.fab.open$.subscribe(value => this.openChange.emit(value)));\n    }\n\n    ngAfterViewInit(): void {\n        this._subscription.add(this.fab.open$.pipe(filter(open => open === false))\n            .subscribe(() => this.tooltips.forEach(tooltip => tooltip.hide())));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';","import { Attribute, ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    template: `<button class=\"btn floating-action-button\" \n        [class.button-primary]=\"primary\" \n        [class.button-secondary]=\"!primary\" \n        (click)=\"primary ? fab.toggle() : fab.close()\">\n\n    <span class=\"hpe-icon floating-action-button-icon\" *ngIf=\"icon\" [ngClass]=\"icon\"></span>\n    <ng-content *ngIf=\"!icon\"></ng-content>\n\n</button>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent {\n\n    @Input() icon: string;\n    @HostBinding() tabindex = 1;\n\n    primary: boolean = false;\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService) {\n        this.primary = primary !== null;\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HierarchyBarService {\r\n\r\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _root: HierarchyBarNode;\r\n    private _nodes: HierarchyBarNode[] = [];\r\n\r\n    /**\r\n     * Store the root node of the hierarchy tree\r\n     */\r\n    setRootNode(root: HierarchyBarNode) {\r\n\r\n        // store the root node\r\n        this._root = root;\r\n\r\n        // create a flat structure of nodes\r\n        this._nodes = this.getNodeList(root);\r\n\r\n        // flatten the array - based on the selected node\r\n        this.nodes$.next(this.getSelectedChildren(root));\r\n    }\r\n\r\n    /**\r\n     * Select a node. This causes all nodes to be\r\n     * deselected and the path to the selected node\r\n     * to be selected\r\n     */\r\n    selectNode(node: HierarchyBarNode): void {\r\n\r\n        // deselect all nodes\r\n        this.deselectAll();\r\n\r\n        // ensure the current node is selected and its parents\r\n        this.select(node);\r\n\r\n        // emit a new node list to trigger change detection\r\n        this.nodes$.next(this.getSelectedChildren(this._root));\r\n    }\r\n\r\n    /**\r\n     * Handles getting children with support for both arrays and observables\r\n     */\r\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\r\n\r\n        if (Array.isArray(node.children)) {\r\n            return of({ loading: false, children: node.children });\r\n        }\r\n\r\n        const children$: Observable<HierarchyBarNode[]> = node.children;\r\n\r\n        // if it is an observable then handle loading\r\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\r\n            // emit initial value\r\n            observer.next({ loading: true, children: [] });\r\n\r\n            // now wait until the children observable completes\r\n            children$.pipe(first()).subscribe(children => {\r\n\r\n                // replace the observable with an array for future loading\r\n                node.children = children;\r\n\r\n                // rebuild the node tree\r\n                this.setRootNode(this._root);\r\n\r\n                // emit the latest value\r\n                observer.next({ loading: false, children: children });\r\n\r\n                // close the observable stream\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Traverses all the parents to ensure they are selected\r\n     */\r\n    private select(node: HierarchyBarNode): void {\r\n        node.selected = true;\r\n\r\n        if (node.parent) {\r\n            this.select(node.parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselects all nodes\r\n     */\r\n    private deselectAll(): void {\r\n        this._nodes.forEach(node => node.selected = false);\r\n    }\r\n\r\n    /**\r\n     * Gets all the nodes in the tree as a flat array.\r\n     * It also stores the parent node in a parent property\r\n     * on the node for easy traversal in both directions\r\n     */\r\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        // if there are no children then return only itself\r\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\r\n            return [node];\r\n        }\r\n\r\n        // store the parent property\r\n        node.children.forEach(child => child.parent = node);\r\n\r\n        // get all descendants of this node\r\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\r\n\r\n        return [node, ...descendants];\r\n    }\r\n\r\n    /**\r\n     * Gets all selected nodes from the parent node.\r\n     */\r\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        if (node.children instanceof Observable) {\r\n            return [node];\r\n        }\r\n\r\n        // get the children - and account for when there is none\r\n        const children = node.children || [];\r\n\r\n        // check if any child is selected\r\n        const child = children.find(_child => _child.selected);\r\n\r\n        // return the remaining chain of selected items\r\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\r\n    }\r\n}\r\n\r\nexport interface HierarchyBarNode {\r\n    icon?: string;\r\n    title: string;\r\n    selected?: boolean;\r\n    parent?: HierarchyBarNode;\r\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\r\n}\r\n\r\nexport interface HierarchyBarNodeChildren {\r\n    loading: boolean;\r\n    children: HierarchyBarNode[];\r\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\r\n\r\n@Component({\r\n    selector: 'ux-hierarchy-bar',\r\n    template: `<!-- Allow content to be placed on the left of the items -->\n<aside class=\"hierarchy-bar-addons\">\n    <ng-content select=\"[uxHierarchyBarLeftAddon]\"></ng-content>\n</aside>\n\n<main #nodelist class=\"hierarchy-bar-nodes\" (uxResize)=\"scrollIntoView()\">\n\n    <div *ngIf=\"overflow$ | async\"\n         #popover=\"ux-popover\"\n         class=\"hierarchy-bar-overflow-indicator\"\n         [style.left.px]=\"nodelist.scrollLeft\"\n         [uxPopover]=\"overflow\"\n         [popoverContext]=\"{ popover: popover }\"\n         placement=\"bottom\"\n         popoverClass=\"hierarchy-bar-popover\">\n        . . .\n    </div>\n\n    <div #nodeElement class=\"hierarchy-bar-node\"\n         *ngFor=\"let node of hierarchyBar.nodes$ | async\">\n\n        <button class=\"hierarchy-bar-node-content\"\n                [attr.aria-label]=\"node.title\"\n                (click)=\"hierarchyBar.selectNode(node)\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"node.icon\" [src]=\"node.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ node.title }}</span>\n\n        </button>\n\n        <!-- Show a dropdown arrow if there are children -->\n        <button *ngIf=\"node.children\"\n              #popover=\"ux-popover\"\n              aria-label=\"Show children\"\n              role=\"button\"\n              class=\"hierarchy-bar-node-arrow hpe-icon hpe-next\"\n              [uxPopover]=\"content\"\n              [popoverContext]=\"{ node: node, popover: popover }\"\n              placement=\"bottom\"\n              popoverClass=\"hierarchy-bar-popover\"\n              tabindex=\"0\">\n        </button>\n\n    </div>\n\n</main>\n\n<!-- Allow content to be placed on the right of the items -->\n<aside class=\"hierarchy-bar-addons\">\n    <ng-content select=\"[uxHierarchyBarRightAddon]\"></ng-content>\n</aside>\n\n<!-- Template for the popover list -->\n<ng-template #content let-node=\"node\" let-popover=\"popover\">\n\n    <!-- Loading Indicator -->\n    <ul class=\"hierarchy-bar-node-list\" *ngIf=\"(hierarchyBar.getChildren(node) | async).loading\">\n\n        <li class=\"hierarchy-bar-node-list-item\">\n            <ng-container [ngTemplateOutlet]=\"loadingIndicator || defaultLoadingIndicator\"></ng-container>\n        </li>\n    </ul>\n\n    <!-- List of children -->\n    <ul class=\"hierarchy-bar-node-list\" *ngIf=\"!(hierarchyBar.getChildren(node) | async).loading\">\n\n        <li *ngFor=\"let child of (hierarchyBar.getChildren(node) | async).children; let first = first\"\n            class=\"hierarchy-bar-node-list-item\"\n            [focusIf]=\"first\"\n            tabindex=\"0\"\n            (keydown.enter)=\"hierarchyBar.selectNode(child); popover.hide()\"\n            (click)=\"hierarchyBar.selectNode(child); popover.hide()\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"child.icon\" [src]=\"child.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ child.title }}</span>\n\n        </li>\n\n    </ul>\n</ng-template>\n\n<!-- Template for the overflow popover list -->\n<ng-template #overflow let-popover=\"popover\">\n\n    <ul class=\"hierarchy-bar-node-list\">\n\n        <li *ngFor=\"let child of overflowNodes$ | async; let first = first\"\n            class=\"hierarchy-bar-node-list-item\"\n            tabindex=\"0\"\n            [focusIf]=\"first\"\n            (click)=\"hierarchyBar.selectNode(child); popover.hide()\"\n            (keydown.enter)=\"hierarchyBar.selectNode(child); popover.hide()\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"child.icon\" [src]=\"child.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ child.title }}</span>\n\n        </li>\n\n    </ul>\n</ng-template>\n\n<!-- Loading Indicator Template -->\n<ng-template #defaultLoadingIndicator>\n    <div class=\"hierarchy-bar-node-icon\" alt=\"Hierarchy Bar Loading Indicator\">\n        <div class=\"spinner spinner-accent spinner-bounce-middle\"></div>\n    </div>\n\n    <!-- Show the name of the current node -->\n    <span class=\"hierarchy-bar-node-title\">Loading...</span>\n</ng-template>`,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    viewProviders: [HierarchyBarService]\r\n})\r\nexport class HierarchyBarComponent implements OnDestroy {\r\n\r\n    @Input() set root(node: HierarchyBarNode) {\r\n        this.hierarchyBar.setRootNode(node);\r\n    }\r\n\r\n    @Input() set selected(node: HierarchyBarNode) {\r\n        this.hierarchyBar.selectNode(node);\r\n    }\r\n\r\n    @Input() loadingIndicator: TemplateRef<any>;\r\n\r\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\r\n    @ViewChild('nodelist') nodelist: ElementRef;\r\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\r\n\r\n    overflow$ = new BehaviorSubject<boolean>(false);\r\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(public hierarchyBar: HierarchyBarService) {\r\n\r\n        // subscribe to changes in the selected node\r\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\r\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\r\n\r\n        // store subscriptions\r\n        this._subscription.add(selected);\r\n        this._subscription.add(changed);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * When there is overflow ensure that the rightmost\r\n     * node remains in view at all times. The nodes no longer\r\n     * visible be be displayed in a popover available on the\r\n     * overflow indicator\r\n     */\r\n    scrollIntoView(): void {\r\n\r\n        if (!this.nodelist) {\r\n            return;\r\n        }\r\n\r\n        // get the native element\r\n        const { nativeElement } = this.nodelist;\r\n\r\n        // emit whether or not there is overflow\r\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\r\n\r\n        // if the hierarchy bar contents do not overflow then do nothing\r\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\r\n\r\n            // determine the amount of overflow\r\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\r\n\r\n            // determine which nodes are not fully visible\r\n            this.overflowNodes$.next(\r\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\r\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\r\n            );\r\n\r\n            // move the scroll position to always show the last itme\r\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\r\n        }\r\n    }\r\n}","import { Directive, Output, EventEmitter, ElementRef, HostListener } from '@angular/core';\n\n@Directive({ \n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  template: `<div class=\"popover show\" [ngClass]=\"[placement, customClass]\" [id]=\"id\" [attr.role]=\"role\" (uxClickOutside)=\"clickOutside$.next($event)\">\n    <div class=\"arrow\"></div>\n    <h3 class=\"popover-title\" *ngIf=\"title\">{{ title }}</h3>\n    <div class=\"popover-content\" (cdkObserveContent)=\"reposition()\">\n        <ng-container *ngIf=\"!isTemplateRef\">{{ content }}</ng-container>\n        <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"context\"></ng-container>\n    </div>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy, HostBinding, HostListener, ElementRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SidePanelService } from './side-panel.service';\r\n\r\n@Component({\r\n    selector: 'ux-side-panel',\r\n    exportAs: 'ux-side-panel',\r\n    template: `<div *ngIf=\"modal && open\" class=\"modal-backdrop\"\r\n    [style.position]=\"position\"\r\n    [style.top]=\"cssTop\"></div>\r\n\r\n<div class=\"ux-side-panel-host\"\r\n    [class.modal-panel]=\"modal\"\r\n    [style.position]=\"position\"\r\n    [style.width]=\"hostWidth\"\r\n    [style.top]=\"cssTop\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`,\r\n    providers: [SidePanelService],\r\n    host: {\r\n        'class': 'ux-side-panel'\r\n    }\r\n})\r\nexport class SidePanelComponent implements OnInit, OnDestroy {\r\n\r\n    @Input()\r\n    @HostBinding('class.open')\r\n    get open(): boolean {\r\n        return this.service.open$.value;\r\n    }\r\n\r\n    set open(value: boolean) {\r\n        this.service.open$.next(value);\r\n    }\r\n\r\n    @Input()\r\n    @HostBinding('class.inline')\r\n    inline = false;\r\n\r\n    @Input()\r\n    attachTo: 'window' | 'container' = 'window';\r\n\r\n    @Input()\r\n    width: string | number = '50%';\r\n\r\n    @Input()\r\n    top: string | number = '0';\r\n\r\n    @Input()\r\n    @HostBinding('attr.aria-modal')\r\n    modal = false;\r\n\r\n    @Input()\r\n    @HostBinding('class.animate')\r\n    animate = false;\r\n\r\n    @Input()\r\n    closeOnExternalClick = false;\r\n\r\n    @Output()\r\n    openChange = new EventEmitter<boolean>();\r\n\r\n    get position() {\r\n        if (this.inline) {\r\n            return 'static';\r\n        }\r\n        if (this.attachTo === 'container') {\r\n            return 'absolute';\r\n        }\r\n        return 'fixed';\r\n    }\r\n\r\n    get cssWidth(): string {\r\n        if (typeof this.width === 'number') {\r\n            return this.width === 0 ? '0' : this.width + 'px';\r\n        }\r\n        return this.width;\r\n    }\r\n\r\n    get cssTop(): string {\r\n        if (typeof this.top === 'number') {\r\n            return this.top === 0 ? '0' : this.top + 'px';\r\n        }\r\n        return this.top;\r\n    }\r\n\r\n    @HostBinding('style.width')\r\n    get componentWidth(): string {\r\n        if (this.inline) {\r\n            return this.open ? this.cssWidth : '0';\r\n        }\r\n        return null;\r\n    }\r\n\r\n    get hostWidth() {\r\n        return this.inline ? '100%' : this.cssWidth;\r\n    }\r\n\r\n    private _subscription: Subscription;\r\n\r\n    constructor(\r\n        protected service: SidePanelService,\r\n        private _elementRef: ElementRef\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this._subscription = this.service.open$.subscribe((next) => {\r\n            this.openChange.emit(next);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    openPanel() {\r\n        this.service.open();\r\n    }\r\n\r\n    @HostListener('document:keyup.escape')\r\n    closePanel() {\r\n        this.service.close();\r\n    }\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    clickHandler(event: MouseEvent) {\r\n        if (!this.open || !this.closeOnExternalClick) {\r\n            return;\r\n        }\r\n\r\n        const target = event.target as HTMLElement;\r\n\r\n        if (!this._elementRef.nativeElement.contains(target) ||\r\n            (target && target.classList.contains('modal-backdrop'))) {\r\n            this.closePanel();\r\n        }\r\n    }\r\n}","import { Component, Directive, Input, Output, EventEmitter, ContentChild, ElementRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\r\nimport { SidePanelService } from '../side-panel/side-panel.service';\r\n\r\n@Directive({\r\n    selector: '[uxItemDisplayPanelContent]'\r\n})\r\nexport class ItemDisplayPanelContentDirective { }\r\n\r\n@Directive({\r\n    selector: '[uxItemDisplayPanelFooter]'\r\n})\r\nexport class ItemDisplayPanelFooterDirective { }\r\n\r\n@Component({\r\n    selector: 'ux-item-display-panel',\r\n    template: `<div class=\"ux-side-panel-host ux-item-display-panel\"\r\n    [class.box-shadow]=\"boxShadow\"\r\n    [style.position]=\"position\"\r\n    [style.width]=\"hostWidth\"\r\n    [style.top]=\"cssTop\">\r\n\r\n    <div class=\"ux-side-panel-header\" [class.item-display-panel-shadow]=\"shadow\">\r\n        <h3>{{ header }}</h3>\r\n        <button *ngIf=\"closeVisible\" type=\"button\" class=\"btn btn-lg btn-link btn-icon button-secondary\" (click)=\"visible = false\">\r\n            <i class=\"hpe-icon hpe-close\"></i>\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"ux-side-panel-content\">\r\n        <ng-content select=\"[uxItemDisplayPanelContent]\"></ng-content>\r\n    </div>\r\n\r\n    <div class=\"ux-side-panel-footer\" *ngIf=\"footer\">\r\n        <ng-content select=\"[uxItemDisplayPanelFooter]\"></ng-content>\r\n    </div>\r\n\r\n</div>\r\n`,\r\n    providers: [SidePanelService],\r\n    host: {\r\n        'class': 'ux-side-panel ux-item-display-panel'\r\n    }\r\n})\r\nexport class ItemDisplayPanelComponent extends SidePanelComponent {\r\n\r\n    @Input() header: string;\r\n\r\n    @Input() boxShadow: boolean = true;\r\n\r\n    @Input() closeVisible: boolean = true;\r\n\r\n    get preventClose(): boolean {\r\n        return !this.closeOnExternalClick;\r\n    }\r\n\r\n    @Input()\r\n    set preventClose(value: boolean) {\r\n        this.closeOnExternalClick = !value;\r\n    }\r\n\r\n    @Input() shadow: boolean = false;\r\n\r\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\r\n\r\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n    /**\r\n     * @deprecated\r\n     * Title used for adding tooltips and shouldn't be used as an input\r\n     * instead header will be used. This is here to support backward compatibility only\r\n     * this property should not be used.\r\n     */\r\n    @Input()\r\n    set title(value: string) {\r\n        this.header = value;\r\n    }\r\n\r\n    get title() {\r\n        return this.header;\r\n    }\r\n\r\n    @Input()\r\n    set visible(visible: boolean) {\r\n        this.open = visible;\r\n    }\r\n\r\n    get visible() {\r\n        return this.open;\r\n    }\r\n\r\n    private _itemDisplayPanelSubscription: Subscription;\r\n\r\n    constructor(service: SidePanelService, elementRef: ElementRef) {\r\n        super(service, elementRef);\r\n\r\n        this.animate = false;\r\n        this.closeOnExternalClick = true;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._itemDisplayPanelSubscription = this.service.open$.subscribe((next) => {\r\n            this.visibleChange.emit(next);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._itemDisplayPanelSubscription.unsubscribe();\r\n    }\r\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    template: `<ng-container *ngIf=\"active\">\n    <ng-content></ng-content>\n</ng-container>`\n})\nexport class WizardStepComponent {\n    \n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input() \n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n        \n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    get active(): boolean {\n        return this._active;\n    }\n\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { WizardStepComponent } from './wizard-step.component';\n\n@Component({\n    selector: 'ux-wizard',\n    template: `<div class=\"wizard-body\">\n\n    <div class=\"wizard-steps\">\n\n        <div class=\"wizard-step\" [class.active]=\"stp.active\" [class.visited]=\"stp.visited\" [class.invalid]=\"stp.active && !stp.valid && invalidIndicator\" (click)=\"gotoStep(stp)\" *ngFor=\"let stp of steps\">\n            {{ stp.header }}\n        </div>\n\n    </div>\n\n    <div class=\"wizard-content\">\n        <ng-content></ng-content>\n    </div>\n\n</div>\n\n<div class=\"wizard-footer\">\n    <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"previousVisible\" [uxTooltip]=\"previousTooltip\" [disabled]=\"previousDisabled || step === 0\"\n        (click)=\"previous(); tip.hide()\">{{ previousText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"nextVisible && !isLastStep()\" [uxTooltip]=\"nextTooltip\" [disabled]=\"nextDisabled\"\n        (click)=\"next(); tip.hide()\">{{ nextText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"finishVisible && isLastStep() || finishAlwaysVisible\" [uxTooltip]=\"finishTooltip\"\n        [disabled]=\"finishDisabled\" (click)=\"finish(); tip.hide()\">{{ finishText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"cancelVisible && !isLastStep() || cancelAlwaysVisible\" [uxTooltip]=\"cancelTooltip\"\n        [disabled]=\"cancelDisabled\" (click)=\"cancel(); tip.hide()\">{{ cancelText }}</button>\n</div>`,\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit {\n\n    private _step: number = 0;\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();        \n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    template: `<ng-container *ngIf=\"active\">\n    <ng-content></ng-content>\n</ng-container>`\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    template: `<div class=\"marquee-wizard-side-panel\">\n\n    <div class=\"marquee-wizard-description-container\" *ngIf=\"description\">\n        <!-- If a template was provided display it -->\n        <ng-container *ngIf=\"isTemplate\" [ngTemplateOutlet]=\"description\"></ng-container>\n\n        <!-- Otherwise wimply display the string -->\n        <ng-container *ngIf=\"!isTemplate\">\n            <p>{{ description }}</p>\n        </ng-container>\n    </div>\n\n    <ul class=\"marquee-wizard-steps\">\n\n        <li class=\"marquee-wizard-step\" *ngFor=\"let step of steps\" (click)=\"gotoStep(step)\" [class.active]=\"step.active\" [class.visited]=\"step.visited\" [class.invalid]=\"!step.valid\">\n            <i class=\"marquee-wizard-step-icon\" [ngClass]=\"step.icon\"></i>\n            <span class=\"marquee-wizard-step-title\">{{ step.header }}</span>\n            <span class=\"marquee-wizard-step-status hpe-icon hpe-checkmark\" *ngIf=\"step.completed\"></span>\n        </li>\n\n    </ul>\n</div>\n\n<div class=\"marquee-wizard-content-panel\">\n    <div class=\"marquee-wizard-content\">\n        <ng-content></ng-content>\n    </div>\n\n    <div class=\"modal-footer\">\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"previousVisible\" [uxTooltip]=\"previousTooltip\" container=\"body\"\n            [disabled]=\"previousDisabled || step === 0\" (click)=\"previous(); tip.hide()\">{{ previousText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"nextVisible && !isLastStep()\" [uxTooltip]=\"nextTooltip\" container=\"body\"\n            [disabled]=\"nextDisabled\" (click)=\"next(); tip.hide()\">{{ nextText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"finishVisible && isLastStep() || finishAlwaysVisible\" [uxTooltip]=\"finishTooltip\"\n            container=\"body\" [disabled]=\"finishDisabled\" (click)=\"finish(); tip.hide()\">{{ finishText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"cancelVisible && !isLastStep() || cancelAlwaysVisible\" [uxTooltip]=\"cancelTooltip\"\n            container=\"body\" [disabled]=\"cancelDisabled\" (click)=\"cancel(); tip.hide()\">{{ cancelText }}</button>\n    </div>\n</div>`,\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(\n            filter((event: MarqueeWizardValidEvent) => !event.valid)\n        ).subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Http, ResponseContentType } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: Http) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.request(mediaElement.src, { responseType: ResponseContentType.Blob }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n                const blob = response.blob();\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: blob.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.request(url, { responseType: ResponseContentType.ArrayBuffer }).subscribe(response => {\n                this.getAudioBuffer(response.arrayBuffer()).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<number> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe((event: any) => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        let interval = setInterval(() => {\n\n            let buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) {}\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : null;\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): TextTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.textTracks : new TextTrackList();\n    }\n\n    get videoTracks(): VideoTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.videoTracks : new VideoTrackList();\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        this._mediaPlayer.volume = value;\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: string, label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange(event: Event) {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n}","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { debounceTime, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    template: `<div class=\"video-player-container\" *ngIf=\"type === 'video'\">\n\n    <video class=\"video-player\"\n        #player\n        [src]=\"source\"\n        (abort)=\"mediaPlayerService.abortEvent.next()\"\n        (canplay)=\"mediaPlayerService.canPlayEvent.next(true)\"\n        (canplaythrough)=\"mediaPlayerService.canPlayThroughEvent.next(true)\"\n        (durationchange)=\"mediaPlayerService.durationChangeEvent.next(player.duration)\"\n        (ended)=\"mediaPlayerService.endedEvent.next()\"\n        (error)=\"mediaPlayerService.errorEvent.next($event)\"\n        (loadeddata)=\"mediaPlayerService.loadedDataEvent.next($event)\"\n        (loadedmetadata)=\"mediaPlayerService.loadedMetadataEvent.next($event)\"\n        (loadstart)=\"mediaPlayerService.loadStartEvent.next()\"\n        (pause)=\"mediaPlayerService.pauseEvent.next()\"\n        (play)=\"mediaPlayerService.playEvent.next()\"\n        (playing)=\"mediaPlayerService.playingEvent.next(!player.paused)\"\n        (ratechange)=\"mediaPlayerService.rateChangeEvent.next(player.playbackRate)\"\n        (seeked)=\"mediaPlayerService.seekedEvent.next(player.currentTime)\"\n        (seeking)=\"mediaPlayerService.seekingEvent.next(player.currentTime)\"\n        (stalled)=\"mediaPlayerService.stalledEvent.next()\"\n        (suspend)=\"mediaPlayerService.suspendEvent.next()\"\n        (timeupdate)=\"mediaPlayerService.timeUpdateEvent.next(player.currentTime)\"\n        (volumechange)=\"mediaPlayerService.volumeChangeEvent.next(player.volume)\"\n        (waiting)=\"mediaPlayerService.waitingEvent.next()\"\n        (click)=\"mediaPlayerService.mediaClickEvent.next($event)\">\n    </video>\n\n    <div class=\"video-overlay\" [class.playing]=\"mediaPlayerService.playing | async\">\n        <svg class=\"play-graphic\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\">\n            <circle class=\"play-circle\" cx=\"32.2\" cy=\"31.8\" r=\"31.8\" />\n            <polygon class=\"play-triangle\" points=\"23,14.1 23,50.8 48.3,32.5\" />\n        </svg>\n    </div>\n\n</div>\n\n\n<div class=\"audio-player\" *ngIf=\"type === 'audio'\">\n\n    <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g transform=\"translate(-98.000000, -458.000000)\">\n                <g transform=\"translate(98.000000, 458.000000)\">\n                    <path d=\"M4.5,0.5 L18.0435308,0.5 L23.5,6.22251502 L23.5,23.5 L4.5,23.5 L4.5,0.5 Z\" fill=\"#CCEAE2\"></path>\n                    <path d=\"M4.5,8 L4.5,0.5 L18,0.5 L23.5,6 L23.5,23.5 L18,23.5\" stroke=\"#60798D\" fill=\"#CCEAE2\"></path>\n                    <path d=\"M4,13.5 L0.5,13.5 L0.5,18.5 L4,18.5 L9.5,22.5 L9.5,9.5 L4,13.5 Z\" stroke=\"#60798D\" fill=\"#85D2BE\"></path>\n                    <path d=\"M11.5,12.5137939 C13.7576225,12.5137939 14.5,14.3709236 14.5,16 C14.5,17.6849236 13.7089152,19.5420532 11.5,19.5420532\"\n                        stroke=\"#60798D\"></path>\n                    <path d=\"M11.5,9 C15.8037643,9.04168701 18.5,11.6604805 18.5,16 C18.5,20.3395195 15.8804302,23.0079956 11.5,23\" stroke=\"#60798D\"></path>\n                    <path d=\"M17.5219116,0.761413574 L17.5219116,6 L23,6\" stroke=\"#60798D\" fill=\"#85D2BE\"></path>\n                </g>\n            </g>\n        </g>\n    </svg>\n\n    <p class=\"audio-file-name\">{{ (audioMetadata | async)?.filename }}</p>\n    <p class=\"audio-file-format\">{{ (audioMetadata | async)?.description }}</p>\n    <p class=\"audio-file-size\">{{ (audioMetadata | async)?.size | fileSize }}</p>\n\n    <audio #player\n        [src]=\"source\"\n        (abort)=\"mediaPlayerService.abortEvent.next()\"\n        (canplay)=\"mediaPlayerService.canPlayEvent.next(true)\"\n        (canplaythrough)=\"mediaPlayerService.canPlayThroughEvent.next(true)\"\n        (durationchange)=\"mediaPlayerService.durationChangeEvent.next(player.duration)\"\n        (ended)=\"mediaPlayerService.endedEvent.next()\"\n        (error)=\"mediaPlayerService.errorEvent.next($event)\"\n        (loadeddata)=\"mediaPlayerService.loadedDataEvent.next($event)\"\n        (loadedmetadata)=\"mediaPlayerService.loadedMetadataEvent.next($event)\"\n        (loadstart)=\"mediaPlayerService.loadStartEvent.next()\"\n        (pause)=\"mediaPlayerService.pauseEvent.next()\"\n        (play)=\"mediaPlayerService.playEvent.next()\"\n        (playing)=\"mediaPlayerService.playingEvent.next(!player.paused)\"\n        (ratechange)=\"mediaPlayerService.rateChangeEvent.next(player.playbackRate)\"\n        (seeked)=\"mediaPlayerService.seekedEvent.next(player.currentTime)\"\n        (seeking)=\"mediaPlayerService.seekingEvent.next(player.currentTime)\"\n        (stalled)=\"mediaPlayerService.stalledEvent.next()\"\n        (suspend)=\"mediaPlayerService.suspendEvent.next()\"\n        (timeupdate)=\"mediaPlayerService.timeUpdateEvent.next(player.currentTime)\"\n        (volumechange)=\"mediaPlayerService.volumeChangeEvent.next(player.volume)\"\n        (waiting)=\"mediaPlayerService.waitingEvent.next()\"\n        (click)=\"mediaPlayerService.mediaClickEvent.next($event)\">\n    </audio>\n</div>\n\n<div class=\"control-bar\">\n    <ux-media-player-timeline></ux-media-player-timeline>\n    <ux-media-player-controls></ux-media-player-controls>\n</div>`,\n    providers: [MediaPlayerService],\n    host: {\n        'tabindex': '0',\n        '(keydown.Space)': 'mediaPlayerService.togglePlay()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange($event)',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange($event)',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange($event)'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            switchMap((event: MouseEvent) => {\n                this.hovering = true;\n                return of(event);\n            }),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    template: `<p class=\"current-time\">{{ current | duration }}</p>\n\n<div #timeline class=\"timeline-bar\" (mouseenter)=\"scrub.visible = true; pop.show()\" (mouseleave)=\"scrub.visible = false; pop.hide()\"\n    (mousemove)=\"updateScrub($event)\" (mouseup)=\"updateScrub($event)\" (mousedown)=\"mouseDown = true; $event.preventDefault()\">\n\n    <div class=\"buffered-bar\" *ngFor=\"let buffer of buffered\" [style.left.%]=\"buffer.start\" [style.width.%]=\"buffer.end - buffer.start\"></div>\n\n    <div class=\"media-progress-bar\" [style.width.%]=\"position\">\n        <div #progressThumb class=\"media-progress-bar-thumb\" (mouseenter)=\"scrub.visible = false; pop.hide(); $event.stopPropagation()\"\n            (mouseleave)=\"scrub.visible = true; pop.show(); $event.stopPropagation()\"></div>\n    </div>\n\n    <div class=\"scrub-handle\"\n         [class.scrub-handle-hidden]=\"!scrub.visible\"\n         [style.left.px]=\"scrub.position\"\n         [uxTooltip]=\"popTemplate\"\n         placement=\"top\"\n         [showTriggers]=\"[]\"\n         [hideTriggers]=\"[]\"\n         #pop=\"ux-tooltip\"\n         [tooltipDelay]=\"100\"\n         [tooltipDisabled]=\"duration === 0\"></div>\n</div>\n\n<p class=\"duration-time\">{{ duration | duration }}</p>\n\n<ng-template #popTemplate>\n    <span>{{ scrub.time | duration }}</span>\n</ng-template>`,\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'quietMode || fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    duration: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    quietMode: boolean = false;\n    fullscreen: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.durationChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(duration => this.duration = duration);\n        this.mediaPlayerService.quietModeEvent.pipe(takeUntil(this._onDestroy)).subscribe(quietMode => this.quietMode = quietMode);\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.fullscreen = fullscreen;\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({ start: (buffered.start(idx) / this.duration) * 100, end: (buffered.end(idx) / this.duration) * 100 });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event?: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { timer } from 'rxjs/observable/timer';\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n@Component({\n    selector: 'ux-media-player-controls',\n    template: `<div class=\"volume-container\">\n\n    <div class=\"volume-slider-container\" #volumeContainer [class.active]=\"volumeActive\">\n        <div class=\"volume-slider-icon\" #volumeIcon>\n            <span class=\"hpe-icon\" [class.hpe-volume-mute]=\"volume === 0\" [class.hpe-volume-low]=\"volume > 0 && volume <= 70\" [class.hpe-volume]=\"volume > 70\" [uxTooltip]=\"muteTooltip\" (click)=\"toggleMute()\"></span>\n        </div>\n        \n        <div class=\"volume-slider-node\">\n            <div class=\"volume-slider\" #volumeSlider>\n                <div class=\"volume-track-lower\" [style.width.%]=\"volume\"></div>\n                <div class=\"volume-slider-thumb\" (mousedown)=\"dragStart($event)\" [style.left.%]=\"volume\" tabindex=\"0\" (keydown.ArrowRight)=\"volume = volume + 10\" (keydown.ArrowLeft)=\"volume = volume - 10\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"spacer\"></div>\n\n<svg viewBox=\"0 0 51.5 64\" width=\"14\" height=\"17\" class=\"control-button\" (click)=\"goToStart()\">\n    <rect x=\"0\" y=\"0\" width=\"7.5\" height=\"64\" />\n    <polygon points=\"51.5,64 51.5,0 7.4,32 \" />\n</svg>\n\n<svg viewBox=\"0 0 45 64\" width=\"20\" height=\"29\" class=\"control-button\" *ngIf=\"!playing\" (click)=\"togglePlay()\">\n    <polygon points=\"0.4,0 0.4,64 44.6,32\" />\n</svg>\n\n<svg viewBox=\"0 0 43 56.9\" class=\"control-button\" width=\"20\" height=\"29\" *ngIf=\"playing\" (click)=\"togglePlay()\">\n    <rect y=\"0.1\" width=\"15.7\" height=\"56.9\" />\n    <rect x=\"27.3\" y=\"0.1\" width=\"15.7\" height=\"56.9\" />\n</svg>\n\n<svg viewBox=\"0 0 51.5 64\" width=\"14\" height=\"17\" class=\"control-button\" (click)=\"goToEnd()\">\n    <rect x=\"44.1\" y=\"0\" width=\"7.5\" height=\"64\" />\n    <polygon points=\"0,64 0,0 44.1,32 \" />\n</svg>\n\n<div class=\"spacer\"></div>\n\n<span class=\"hpe-icon\" *ngIf=\"mediaPlayerService.type !== 'audio'\" [class.hpe-expand]=\"!mediaPlayerService.fullscreen\" [class.hpe-contract]=\"mediaPlayerService.fullscreen\"\n    (click)=\"setFullscreen()\"></span>\n\n<ng-template #muteTooltip>{{ volume === 0 ? 'Unmute' : 'Mute' }}</ng-template>`,\n    host: {\n        '[class.quiet]': 'quietMode || fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    playing: boolean;\n    quietMode: boolean;\n    fullscreen: boolean = false;\n    volumeActive: boolean = false;\n    volumeDragging: boolean = false;\n\n    @ViewChild('volumeIcon') volumeIcon: ElementRef;\n    @ViewChild('volumeSlider') volumeSlider: ElementRef;\n    @ViewChild('volumeContainer') volumeContainer: ElementRef;\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.playEvent.pipe(takeUntil(this._onDestroy)).subscribe(_ => this.playing = true);\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(_ => this.playing = false);\n        this.mediaPlayerService.quietModeEvent.pipe(takeUntil(this._onDestroy)).subscribe(quietMode => this.quietMode = quietMode);\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(debounceTime(1), filter(init => init === true), takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => this.fullscreen = fullscreen);\n\n        const mouseenter$ = fromEvent(this.volumeIcon.nativeElement, 'mouseenter');\n        const mouseenterContainer$ = fromEvent(this.volumeContainer.nativeElement, 'mouseenter');\n        const mouseleaveContainer$ = fromEvent(this.volumeContainer.nativeElement, 'mouseleave');\n\n        mouseenter$.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        mouseleaveContainer$.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(mouseenterContainer$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        if (this.volume === 0) {\n            this.volume = this._previousVolume;\n        } else {\n            this.volume = 0;\n        }\n    }\n\n    togglePlay(): void {\n        if (this.playing) {\n            this.mediaPlayerService.pause();\n        } else {\n            this.mediaPlayerService.play();\n        }\n    }\n\n    setFullscreen(): void {\n        this.mediaPlayerService.toggleFullscreen();\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n        this.volumeDragging = true;\n\n        const thumb = event.target as HTMLDivElement;\n        thumb.focus();\n    }\n\n    @HostListener('document:mousemove', ['$event'])\n    dragMove(event: MouseEvent): void {\n        if (!this.volumeDragging) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const slider = this.volumeSlider.nativeElement as HTMLDivElement;\n        const bounds = slider.getBoundingClientRect();\n\n        const x = Math.min(bounds.width, Math.max(0, event.pageX - bounds.left));\n\n        // convert to a percentage\n        this.volume = (x / bounds.width) * 100;\n    }\n\n    @HostListener('document:mouseup')\n    dragEnd(): void {\n        this.volumeDragging = false;\n    }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MediaPlayerComponent } from './media-player.component';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { MediaPlayerService } from './media-player.service';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [MediaPlayerService]\n})\nexport class MediaPlayerModule { }\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-navigation',\n    template: `<nav class=\"tree\" role=\"navigation\">\n    <ol class=\"nav\">\n        <ng-content></ng-content>\n    </ol>\n</nav>\n`\n})\nexport class NavigationComponent {\n\n}","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, HostBinding, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    template: `<a *ngIf=\"link\" [class.has-arrow]=\"children.length > 0\" [class.no-arrow]=\"indentWithoutArrow\" [routerLink]=\"link\">\r\n    <span>{{header}}</span>\r\n</a>\r\n<a *ngIf=\"!link\" (click)=\"expanded = !expanded\" [class.has-arrow]=\"children.length > 0\" [class.no-arrow]=\"indentWithoutArrow\">\r\n    <span>{{header}}</span>\r\n</a>\r\n<ng-content></ng-content>\r\n`,\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() link: string;\n    @Input() @HostBinding('class.selected') expanded: boolean = false;\n\n    @HostBinding('class.active')\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional() @SkipSelf() private _parent: NavigationItemComponent,\n        private _router: Router,\n        private _activatedRoute: ActivatedRoute\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd))\n            .subscribe(() => this.expanded = this.hasActiveLink(this.link));\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            const levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy(): void {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n\n        const tree = this._router.createUrlTree([link], {\n            relativeTo: this._activatedRoute,\n            queryParams: this._activatedRoute.snapshot.queryParams,\n            fragment: this._activatedRoute.snapshot.fragment\n        });\n\n        if (link && this._router.isActive(tree, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n           // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ColorService } from '../../services/color/index';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n\r\n    // provide default options\r\n    options: NotificationOptions = {\r\n        duration: 4,\r\n        height: 100,\r\n        spacing: 10,\r\n        backgroundColor: this._colorService.getColor('accent').toHex(),\r\n        iconColor: this._colorService.getColor('accent').toHex()\r\n    };\r\n\r\n    direction: NotificationListDirection = 'above';\r\n\r\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \r\n\r\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\r\n\r\n        options = { ...this.options, ...options };\r\n\r\n        const notificationRef: NotificationRef = {\r\n            templateRef: templateRef,\r\n            duration: options.duration,\r\n            date: new Date(),\r\n            visible: true,\r\n            height: options.height,\r\n            spacing: options.spacing,\r\n            backgroundColor: options.backgroundColor,\r\n            iconColor: options.iconColor,\r\n            data: data\r\n        };\r\n\r\n        const notifications = this.notifications$.getValue();\r\n\r\n        if (this.direction === 'above') {\r\n            notifications.unshift(notificationRef);\r\n        } else {\r\n            notifications.push(notificationRef);\r\n        }\r\n\r\n        this.notifications$.next(notifications);\r\n\r\n        // remove notification after delay\r\n        if (options.duration !== 0) {\r\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\r\n        }\r\n\r\n        return notificationRef;\r\n    }\r\n\r\n    getHistory(): NotificationRef[] {\r\n        return this.notifications$.getValue();\r\n    }\r\n\r\n    dismiss(notificationRef: NotificationRef): void {\r\n        notificationRef.visible = false;\r\n        this.notifications$.next(this.notifications$.getValue());\r\n    }\r\n    \r\n    dismissAll(): void {\r\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\r\n        this.notifications$.next(this.notifications$.getValue());        \r\n    }\r\n\r\n    constructor(private _colorService: ColorService) {\r\n    }\r\n}\r\n\r\nexport interface NotificationRef {\r\n    templateRef: TemplateRef<any>;\r\n    duration: number;\r\n    date: Date;\r\n    visible?: boolean;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n    data: { [key: string]: any };\r\n}\r\n\r\nexport interface NotificationOptions {\r\n    duration?: number;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n}\r\n\r\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators/map';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    template: `<div class=\"notification\" *ngFor=\"let notificationRef of notifications$ | async; let idx = index\"\r\n    [style.top.px]=\"(notificationRef.height + notificationRef.spacing) * idx\"\r\n    [style.height.px]=\"notificationRef.height\"\r\n    [style.background-color]=\"notificationRef.backgroundColor\"\r\n    [@notificationState]>\r\n    <ng-container *ngTemplateOutlet=\"notificationRef.templateRef; context: { $implicit: notificationRef, data: notificationRef.data }\"></ng-container>\r\n</div>\r\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    template: `<input type=\"number\"\n       role=\"spinbutton\"\n       class=\"form-control number-picker-input\"\n       [(ngModel)]=\"value\"\n       [min]=\"min\"\n       [max]=\"max\"\n       (keydown.ArrowDown)=\"decrement($event)\"\n       (keydown.ArrowUp)=\"increment($event)\"\n       (wheel)=\"onScroll($event)\"\n       step=\"any\"\n       [disabled]=\"disabled\"\n       [attr.aria-valuemin]=\"min\"\n       [attr.aria-valuenow]=\"value\"\n       [attr.aria-valuemax]=\"max\">\n\n<div class=\"number-picker-controls\">\n\n    <div class=\"number-picker-control-up\"\n         (click)=\"increment($event)\"\n         [class.disabled]=\"disabled || value >= max\">\n\n        <span class=\"hpe-icon hpe-up\"></span>\n    </div>\n\n    <div class=\"number-picker-control-down\"\n         (click)=\"decrement($event)\"\n         [class.disabled]=\"disabled || value <= min\">\n\n        <span class=\"hpe-icon hpe-down\"></span>\n    </div>\n\n</div>`,\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n    secondaryNavigationAutoselect = false;\n\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.selected$.pipe(map(selected => this.getRoot(selected))).subscribe(root => this.selectedRoot$.next(root));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        if (this.secondaryNavigationAutoselect && item && item.children && item.children.length > 0) {\n\n            // Select the first child in secondaryNavigationAutoselect mode\n            this.selected$.next(item.children[0]);\n\n        } else {\n\n            // if we are in secondary navigation mode and we click a parent - dont deselect the child\n            if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n                return;\n            }\n\n            // Otherwise select the given item\n            this.selected$.next(item);\n        }\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    updateItem(item: PageHeaderNavigationItem, selected: PageHeaderNavigationItem): void {\n\n        // Item is selected if it is the selected item, or one of the selected item's ancestors.\n        item.selected = (item === selected) || this.isParentOf(selected, item);\n\n        if (item === selected) {\n            // call the select function if present\n            if (item.select) {\n                item.select.call(item, item);\n            }\n        }\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n\n        // Set up the initally selected item\n        const initialSelectedItem = items.find(item => item.selected === true);\n        this.select(initialSelectedItem);\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    template: `<div class=\"page-header-icon-menu\"\n    dropdown\n    placement=\"bottom right\"\n    [(isOpen)]=\"isOpen\">\n\n    <a role=\"button\"\n        class=\"page-header-icon-menu-button\"\n        [attr.aria-label]=\"menu.label\"\n        aria-haspopup=\"true\"\n        tabindex=\"0\"\n        (click)=\"select(menu)\"\n        dropdownToggle\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"isOpen\">\n\n        <i class=\"hpe-icon\" [ngClass]=\"menu.icon\"></i>\n        <span class=\"label label-primary\" *ngIf=\"menu?.badge\" aria-hidden=\"true\">{{ menu.badge }}</span>\n\n    </a>\n\n    <ul *dropdownMenu\n        class=\"dropdown-menu\"\n        role=\"menu\"\n        uxMenuNavigation\n        [toggleButton]=\"menuNavigationToggle\">\n\n        <li *ngFor=\"let dropdown of menu?.dropdown\"\n            role=\"none\"\n            [class.dropdown-header]=\"dropdown.header\"\n            [class.dropdown-divider]=\"dropdown.divider\">\n\n            <span class=\"font-bold\" *ngIf=\"dropdown.header\">{{ dropdown.title }}</span>\n\n            <a *ngIf=\"!dropdown.header\"\n                role=\"menuitem\"\n                class=\"dropdown-item\"\n                tabindex=\"-1\"\n                (click)=\"select(dropdown)\"\n                (keydown)=\"keydownHandler(dropdown, $event)\"\n                uxMenuNavigationItem>\n\n\n                <span class=\"dropdown-item-title\">\n                    <i class=\"hpe-icon hpe-fw\" [ngClass]=\"dropdown.icon\"></i>\n                    {{ dropdown.title }}\n                </span>\n                <span *ngIf=\"dropdown.subtitle\" class=\"dropdown-item-subtitle\">{{ dropdown.subtitle }}</span>\n\n            </a>\n        </li>\n\n    </ul>\n</div>`\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    template: `<div *ngIf=\"item.children && item.children.length > 0\"\n    dropdown\n    #subMenu=\"bs-dropdown\"\n    [isOpen]=\"dropdownOpen\"\n    container=\"body\"\n    placement=\"right\"\n    (mouseenter)=\"hoverStart()\"\n    (mouseleave)=\"hoverLeave()\">\n\n    <a role=\"menuitem\"\n        class=\"dropdown-item\"\n        [class.selected]=\"item.selected\"\n        aria-haspopup=\"true\"\n        [attr.aria-expanded]=\"dropdownOpen\"\n        [attr.aria-selected]=\"item.selected\"\n        tabindex=\"-1\"\n        #button\n        dropdownToggle\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"dropdownOpen\"\n        menuPosition=\"right\">\n\n        <span class=\"dropdown-item-title\">{{ item.title }}</span>\n        <span class=\"dropdown-item-icon hpe-icon hpe-next\"></span>\n\n    </a>\n\n    <ul *dropdownMenu\n        role=\"menu\"\n        class=\"dropdown-menu horizontal-navigation-dropdown-submenu\"\n        (mouseenter)=\"hoverStart()\"\n        (mouseleave)=\"hoverLeave()\"\n        uxMenuNavigation\n        #menuNavigation=\"uxMenuNavigation\"\n        [toggleButton]=\"menuNavigationToggle\"\n        toggleButtonPosition=\"left\">\n\n        <li *ngFor=\"let subItem of item.children\" role=\"none\">\n\n            <a role=\"menuitem\"\n                class=\"dropdown-item\"\n                [class.selected]=\"subItem.selected\"\n                [attr.aria-selected]=\"subItem.selected\"\n                tabindex=\"-1\"\n                (click)=\"select(subItem)\"\n                (keydown)=\"keydownHandler($event, subItem)\"\n                uxMenuNavigationItem>\n\n                <span class=\"dropdown-item-title\">{{ subItem.title }}</span>\n\n            </a>\n\n        </li>\n    </ul>\n\n</div>\n\n<div *ngIf=\"!item.children || item.children.length === 0\"\n    (mouseenter)=\"hoverStart()\"\n    (mouseleave)=\"hoverLeave()\">\n\n    <a role=\"menuitem\"\n        #button\n        class=\"dropdown-item\"\n        [class.selected]=\"item.selected\"\n        [attr.aria-selected]=\"item.selected\"\n        tabindex=\"-1\"\n        (click)=\"select(item)\"\n        (keydown)=\"keydownHandler($event, item)\">\n\n        <span class=\"dropdown-item-title\">{{ item.title }}</span>\n\n    </a>\n\n</div>`\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    template: `<div *ngIf=\"item.children && item.children.length > 0 && !(secondary$ | async)\"\n    dropdown\n    #menu=\"bs-dropdown\"\n    [(isOpen)]=\"isOpen\"\n    container=\"body\"\n    placement=\"bottom left\">\n\n    <button role=\"menuitem\"\n        class=\"horizontal-navigation-button\"\n        [class.selected]=\"item.selected\"\n        [class.open]=\"isOpen\"\n        aria-haspopup=\"true\"\n        [attr.aria-expanded]=\"isOpen\"\n        [attr.aria-selected]=\"item.selected\"\n        dropdownToggle\n        uxMenuNavigationToggle\n        #button=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"isOpen\">\n\n        <span class=\"hpe-icon navigation-item-icon\" *ngIf=\"item.icon\" [ngClass]=\"item?.icon\"></span>\n        <span class=\"navigation-item-label\">{{ item?.title }}</span>\n        <span class=\"hpe-icon hpe-down\"></span>\n\n    </button>\n\n    <div *dropdownMenu\n        role=\"menu\"\n        class=\"dropdown-menu horizontal-navigation-dropdown-menu\"\n        uxMenuNavigation\n        [toggleButton]=\"button\"\n        toggleButtonPosition=\"top\">\n\n        <div *ngFor=\"let item of item?.children\" uxMenuNavigationItem (activated)=\"dropdownItem.focus()\">\n            <ux-page-header-horizontal-navigation-dropdown-item\n                #dropdownItem=\"ux-page-header-horizontal-navigation-dropdown-item\"\n                [item]=\"item\">\n            </ux-page-header-horizontal-navigation-dropdown-item>\n        </div>\n\n    </div>\n\n</div>\n\n<button *ngIf=\"!item.children || item.children.length === 0 || (secondary$ | async)\"\n    role=\"menuitem\"\n    class=\"horizontal-navigation-button\"\n    [class.selected]=\"item.selected\"\n    [attr.aria-selected]=\"item.selected\"\n    (click)=\"select()\">\n\n    <span class=\"hpe-icon navigation-item-icon\" *ngIf=\"item.icon\" [ngClass]=\"item?.icon\"></span>\n    <span class=\"navigation-item-label\">{{ item?.title }}</span>\n\n</button>`\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _subscription: Subscription;\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        this._subscription = this._pageHeaderService.selected$.subscribe(next => {\n\n            // Update selected state for this item\n            this._pageHeaderService.updateItem(this.item, next);\n\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this._subscription.add(\n                this.menu.onHidden.subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()))\n            );\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select() {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { delay, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { PageHeaderService } from '../../page-header.service';\r\nimport { PageHeaderNavigationItem } from '../navigation.component';\r\n\r\n@Directive({\r\n    selector: '[uxPageHeaderNavigationSecondaryItem]'\r\n})\r\nexport class PageHeaderNavigationSecondaryItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('uxPageHeaderNavigationSecondaryItem')\r\n    item: PageHeaderNavigationItem;\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _pageHeaderService: PageHeaderService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this._pageHeaderService.selected$.pipe(delay(0), takeUntil(this._onDestroy)).subscribe(next => {\r\n\r\n            // Update selected state for this item\r\n            this._pageHeaderService.updateItem(this.item, next);\r\n\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    template: `<ux-page-header-horizontal-navigation-item\r\n    *ngFor=\"let item of items$ | async\"\r\n    [item]=\"item\">\r\n</ux-page-header-horizontal-navigation-item>\r\n\r\n<div class=\"selected-indicator\"\r\n    [style.opacity]=\"indicatorVisible ? 1 : 0\"\r\n    [style.margin-left.px]=\"indicatorX\"\r\n    [style.width.px]=\"indicatorWidth\">\r\n</div>`,\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    template: `<div class=\"ux-page-header\" [class.page-header-condensed]=\"condensed\" role=\"banner\">\n\n    <!-- Display Upper Section when not condensed -->\n    <div class=\"page-header-actions\" *ngIf=\"!condensed\">\n\n        <div class=\"page-header-logo-container\" role=\"presentation\" [hidden]=\"!logo\">\n            <img [attr.src]=\"logo\" class=\"page-header-logo\">\n        </div>\n\n        <div class=\"page-header-navigation\" [ngClass]=\"alignment\" role=\"navigation\" aria-label=\"Primary Navigation\">\n\n            <!-- The Top Navigation Options -->\n            <ux-page-header-horizontal-navigation></ux-page-header-horizontal-navigation>\n        </div>\n\n        <div class=\"page-header-icon-menus\" role=\"toolbar\">\n            <ng-container *ngFor=\"let menu of customMenus\" [ngTemplateOutlet]=\"menu\"></ng-container>\n\n            <ux-page-header-icon-menu *ngFor=\"let menu of iconMenus\" [menu]=\"menu\"></ux-page-header-icon-menu>\n        </div>\n    </div>\n\n    <!-- Display Lower Section When Not Condensed -->\n    <div class=\"page-header-details\" *ngIf=\"!condensed\">\n\n        <div class=\"page-header-state-container\" role=\"navigation\">\n\n            <button *ngIf=\"backVisible === true\" class=\"page-header-back-button\" (click)=\"goBack()\" aria-label=\"Go Back\">\n                <span class=\"hpe-icon hpe-previous text-primary\"></span>\n            </button>\n\n            <div class=\"page-header-title-container\">\n\n                <ux-breadcrumbs [crumbs]=\"crumbs\"></ux-breadcrumbs>\n\n                <h1 class=\"page-header-title\" [style.backgroundColor]=\"familyBackground\" [style.color]=\"familyForeground\">{{ header }}</h1>\n            </div>\n\n        </div>\n\n    </div>\n\n    <!-- Display This Section Optimized for Condensed Mode -->\n    <div class=\"page-header-condensed-content\" *ngIf=\"condensed\">\n\n        <div class=\"page-header-breadcrumbs\" role=\"navigation\">\n            <ux-breadcrumbs [crumbs]=\"crumbs\"></ux-breadcrumbs>\n        </div>\n\n        <div class=\"page-header-navigation\" [ngClass]=\"alignment\" role=\"navigation\" aria-label=\"Primary Navigation\">\n\n            <!-- The Top Navigation Options -->\n            <ux-page-header-horizontal-navigation></ux-page-header-horizontal-navigation>\n        </div>\n\n        <div class=\"page-header-icon-menus\" role=\"toolbar\">\n            <ng-container *ngFor=\"let menu of customMenus\" [ngTemplateOutlet]=\"menu\"></ng-container>\n            <ux-page-header-icon-menu *ngFor=\"let menu of iconMenus\" [menu]=\"menu\"></ux-page-header-icon-menu>\n        </div>\n\n    </div>\n\n</div>\n\n<div class=\"page-header-secondary\" [ngClass]=\"secondaryNavigationAlignment\" role=\"navigation\" *ngIf=\"secondaryNavigation && (selectedRoot$ | async)\">\n    <ul class=\"nav nav-tabs\" role=\"tablist\" aria-label=\"Secondary Navigation\" *ngIf=\"(selectedRoot$ | async)?.children; let children\">\n        <li *ngFor=\"let child of children\"\n            [class.active]=\"child.selected\"\n            role=\"none\"\n            [uxPageHeaderNavigationSecondaryItem]=\"child\">\n\n            <a role=\"tab\"\n                [attr.aria-selected]=\"child.selected\"\n                tabindex=\"0\"\n                (click)=\"select(child)\"\n                (keydown.enter)=\"select(child)\">{{ child.title }}</a>\n\n        </li>\n    </ul>\n</div>`,\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: string = 'center';\n\n    @Input() set secondaryNavigationAutoselect(value: boolean) {\n        this._pageHeaderService.secondaryNavigationAutoselect = value;\n    }\n\n    get secondaryNavigationAutoselect(): boolean {\n        return this._pageHeaderService.secondaryNavigationAutoselect;\n    }\n\n    @Input() set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input() set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input() set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this._familyBackground = this._colorService.resolve(color);\n    }\n\n    get familyBackground(): string {\n        return this._familyBackground;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this._familyForeground = this._colorService.resolve(color);\n    }\n\n    get familyForeground(): string {\n        return this._familyForeground;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _familyBackground: string;\n    private _familyForeground: string;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationSecondaryItemDirective } from './navigation/navigation-secondary-item/navigation-secondary-item.directive';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderComponent } from './page-header.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BreadcrumbsModule,\n        ColorServiceModule,\n        ResizeModule,\n        MenuNavigationModule,\n        BsDropdownModule.forRoot()\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent,\n        PageHeaderNavigationSecondaryItemDirective\n    ]\n})\nexport class PageHeaderModule { }\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    template: `<div *ngIf=\"!indeterminate\" class=\"progressbar-track\" [style.width.%]=\"(value / max) * 100\" [style.backgroundColor]=\"barColor\">\n    <ng-content></ng-content>\n</div>\n<div *ngIf=\"indeterminate\" class=\"progressbar-track indeterminate\" [style.backgroundColor]=\"barColor\">\n    <ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    template: `<label [attr.for]=\"inputId\" class=\"ux-radio-button\"\n       [class.ux-radio-button-checked]=\"value === option\"\n       [class.ux-radio-button-simplified]=\"simplified\"\n       [class.ux-radio-button-disabled]=\"disabled\"\n       [class.ux-radio-button-focused]=\"focused\">\n\n    <div class=\"ux-radio-button-container\">\n        <input class=\"ux-radio-button-input\"\n            type=\"radio\"\n            [id]=\"inputId\"\n            [checked]=\"value === option\"\n            [disabled]=\"disabled\"\n            [tabindex]=\"tabindex || value === option ? 0 : -1\"\n            [attr.name]=\"name\"\n            [required]=\"required\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledby]=\"ariaLabelledby\"\n            [attr.aria-describedby]=\"ariaDescribedby\"\n            [attr.aria-checked]=\"value === option\"\n            (focus)=\"focused = true\"\n            (blur)=\"focused = false\"\n            (change)=\"toggle()\"\n            (click)=\"$event.stopPropagation()\">\n    </div>\n\n    <span class=\"ux-radio-button-label\">\n        <ng-content></ng-content>\n    </span>\n\n</label>`,\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(private _searchBuilderService: SearchBuilderService) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query\n   */\n  remove(field: SearchBuilderGroupQuery): void {\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(query.indexOf(field), 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  template: `<h4 class=\"search-group-title\">{{ header }}</h4>\n\n<main class=\"search-group-content\">\n\n  <section class=\"search-group-operator search-group-operator-{{ operator }}\" [class.hidden-operator]=\"searchBuilderGroupService.getQuery().length < 2\">{{ operator }}</section>\n\n  <section class=\"search-group-items\">\n\n    <div class=\"search-group-item-container\" *ngFor=\"let field of searchBuilderGroupService.getQuery()\">\n\n      <div class=\"search-group-item\">\n        <ng-container *uxSearchBuilderOutlet=\"field.type; context: field\"></ng-container>\n      </div>\n\n      <div class=\"search-group-item-remove\" (click)=\"removeField(field)\">\n        <span class=\"hpe-icon hpe-close\"></span>\n      </div>\n    </div>\n\n    <!-- Placeholder Item -->\n    <ng-container *ngIf=\"showPlaceholder\">\n\n      <!-- The Default Placeholder -->\n      <div class=\"search-group-item-container placeholder-item\" *ngIf=\"!placeholder\">\n        \n        <div class=\"search-group-item\">\n          <label class=\"form-label\">New field</label>\n          <div class=\"form-control\"></div>\n        </div>\n  \n      </div>\n\n      <!-- Allow a custom placeholder -->\n    <ng-container *ngTemplateOutlet=\"placeholder\"></ng-container>\n\n    </ng-container>\n\n  </section>\n\n  <section class=\"search-builder-group-add-field\" (click)=\"add.emit($event)\">\n\n    <button type=\"button\" class=\"btn btn-icon btn-circular button-accent\" aria-label=\"Add Field\">\n      <span class=\"hpe-icon hpe-add\" aria-hidden=\"true\"></span>\n    </button>\n\n    <span class=\"search-builder-group-add-field-label\">{{ addText }}</span>\n\n  </section>\n\n</main>\n\n<hr class=\"search-builder-group-divider\">\n`,\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  constructor(public searchBuilderGroupService: SearchBuilderGroupService, private _searchBuilderService: SearchBuilderService) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have a name attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n  }\n\n  removeField(field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.remove(field);\n    this.remove.emit(field);\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit {\n\n    @Input() uxSearchBuilderOutlet: string;\n    @Input() uxSearchBuilderOutletContext: any;\n\n    private _componentRef: ComponentRef<any>;\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.uxSearchBuilderOutlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.uxSearchBuilderOutletContext.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.uxSearchBuilderOutletContext;\n        this._componentRef.instance.config = config;\n    }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderGroupService } from '../search-builder-group/search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    constructor(\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderGroupService: SearchBuilderGroupService\n    ) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n<input [placeholder]=\"placeholder\" [(ngModel)]=\"value\" class=\"form-control\">`\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<div class=\"input-group date m-nil\">\n    <span class=\"input-group-addon\" tabindex=\"1\" (click)=\"popover.show()\">\n        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n    </span>\n    <input type=\"text\" #popover=\"ux-popover\" [ngModel]=\"value | date:'dd MMMM yyyy'\" [uxPopover]=\"popoverTemplate\"\n        placement=\"bottom\" popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"placeholder\">\n</div>\n\n<ng-template #popoverTemplate>\n    <ux-date-time-picker [(date)]=\"value\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>`\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<div class=\"row\">\n    <div class=\"col-sm-12\">\n        <div class=\"form-inline\" [class.has-error]=\"!valid\">\n\n            <div class=\"form-group p-r-md\">\n                <label class=\"form-label m-r-xs\">{{ fromLabel }}</label>\n\n                <div class=\"input-group date m-nil\">\n                    <span class=\"input-group-addon p-r-xs\" tabindex=\"1\" (click)=\"fromPopover.show()\">\n                        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n                    </span>\n                    <input type=\"text\" #fromPopover=\"ux-popover\" [ngModel]=\"from | date:'dd MMMM yyyy'\" [uxPopover]=\"fromPopoverTemplate\" placement=\"bottom\"\n                        popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"fromPlaceholder\">\n                </div>\n            </div>\n\n            <div class=\"form-group p-r-xs\">\n                <label class=\"form-label m-r-xs\">{{ toLabel }}</label>\n\n                <div class=\"input-group date m-nil\">\n                    <span class=\"input-group-addon\" tabindex=\"1\" (click)=\"toPopover.show()\">\n                        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n                    </span>\n                    <input type=\"text\" #toPopover=\"ux-popover\" [ngModel]=\"to | date:'dd MMMM yyyy'\" [uxPopover]=\"toPopoverTemplate\" placement=\"bottom\"\n                        popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"toPlaceholder\">\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n<ng-template #fromPopoverTemplate>\n    <ux-date-time-picker [(date)]=\"from\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>\n\n<ng-template #toPopoverTemplate>\n    <ux-date-time-picker [(date)]=\"to\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>`\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<ux-select [(value)]=\"value\" \n           [options]=\"options\" \n           [multiple]=\"multiple\" \n           [placeholder]=\"placeholder\" \n           [dropDirection]=\"dropDirection\"\n           [pageSize]=\"pageSize\"\n           [allowNull]=\"allowNull\"\n           [disabled]=\"disabled\"\n           [maxHeight]=\"maxHeight\"\n           [key]=\"config.key\"\n           [display]=\"config.display\"\n           [loadingTemplate]=\"config.loadingTemplate\"\n           [optionTemplate]=\"config.optionTemplate\"\n           [noOptionsTemplate]=\"config.noOptionsTemplate\">\n</ux-select>`\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  template: `<ng-content></ng-content>`,\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","import { Component, ElementRef, EventEmitter, HostBinding, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, filter, map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    template: `<ux-tag-input *ngIf=\"multiple\"\r\n    [id]=\"id + '-input'\"\r\n    [(tags)]=\"value\"\r\n    [(input)]=\"input\"\r\n    [addOnPaste]=\"false\"\r\n    [disabled]=\"disabled\"\r\n    [display]=\"display\"\r\n    [freeInput]=\"false\"\r\n    [placeholder]=\"placeholder\"\r\n    [showTypeaheadOnClick]=\"true\">\r\n\r\n    <ux-typeahead #multipleTypeahead\r\n        [id]=\"id + '-typeahead'\"\r\n        [options]=\"options\"\r\n        [filter]=\"filter$ | async\"\r\n        [(open)]=\"dropdownOpen\"\r\n        [display]=\"display\"\r\n        [key]=\"key\"\r\n        [disabledOptions]=\"value\"\r\n        [dropDirection]=\"dropDirection\"\r\n        [maxHeight]=\"maxHeight\"\r\n        [multiselectable]=\"true\"\r\n        [pageSize]=\"pageSize\"\r\n        [selectFirst]=\"true\"\r\n        [loadingTemplate]=\"loadingTemplate\"\r\n        [optionTemplate]=\"optionTemplate\"\r\n        [noOptionsTemplate]=\"noOptionsTemplate\">\r\n    </ux-typeahead>\r\n\r\n</ux-tag-input>\r\n\r\n<div *ngIf=\"!multiple\"\r\n    class=\"inner-addon right-addon\"\r\n    [class.disabled]=\"disabled\"\r\n    role=\"combobox\"\r\n    [attr.aria-expanded]=\"dropdownOpen\"\r\n    aria-haspopup=\"listbox\">\r\n\r\n    <i class=\"hpe-icon\"\r\n        [class.hpe-down]=\"dropDirection === 'down'\"\r\n        [class.hpe-up]=\"dropDirection === 'up'\"></i>\r\n\r\n    <input #singleInput type=\"text\" [attr.id]=\"id + '-input'\" class=\"form-control\"\r\n        [attr.aria-activedescendant]=\"highlightedElement?.id\"\r\n        aria-autocomplete=\"list\"\r\n        [attr.aria-controls]=\"singleTypeahead.id\"\r\n        aria-multiline=\"false\"\r\n        [(ngModel)]=\"input\"\r\n        [placeholder]=\"placeholder\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"inputClickHandler($event)\"\r\n        (blur)=\"inputBlurHandler($event)\"\r\n        (keydown)=\"inputKeyHandler($event)\">\r\n\r\n    <ux-typeahead #singleTypeahead\r\n        [id]=\"id + '-typeahead'\"\r\n        [options]=\"options\"\r\n        [filter]=\"filter$ | async\"\r\n        [(open)]=\"dropdownOpen\"\r\n        [display]=\"display\"\r\n        [key]=\"key\"\r\n        [dropDirection]=\"dropDirection\"\r\n        [maxHeight]=\"maxHeight\"\r\n        [multiselectable]=\"false\"\r\n        [openOnFilterChange]=\"false\"\r\n        [pageSize]=\"pageSize\"\r\n        [selectFirst]=\"true\"\r\n        [loadingTemplate]=\"loadingTemplate\"\r\n        [optionTemplate]=\"optionTemplate\"\r\n        [noOptionsTemplate]=\"noOptionsTemplate\"\r\n        (optionSelected)=\"singleOptionSelected($event)\"\r\n        (highlightedElementChange)=\"highlightedElement = $event\">\r\n    </ux-typeahead>\r\n\r\n</div>\r\n`,\r\n    providers: [SELECT_VALUE_ACCESSOR]\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(value: any) {\r\n        this._value = value;\r\n        this.valueChange.emit(value);\r\n        this.propagateChange(value);\r\n\r\n        // if we are not allow multiple selection update the input value (supporting ngModel)\r\n        if (!this.multiple && value !== null) {\r\n            this.input = this.getDisplay(value);\r\n        }\r\n    }\r\n\r\n    @Input()\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Input()\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value: any;\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Changes to the input field\r\n        const onInput = this._input$.pipe(\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        const onFilter = this.filter$.pipe(filter(value => value && value.length > 0)).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // store the subscriptions\r\n        this._subscription.add(onInput);\r\n        this._subscription.add(onFilter);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this._value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { delay } from 'rxjs/operators/delay';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    template: `<ol [attr.role]=\"typeahead ? 'combobox' : 'none'\" [attr.aria-haspopup]=\"typeahead ? 'listbox' : null\">\n    <li *ngFor=\"let tag of tags; let i = index\" class=\"ux-tag\"\n        [class.disabled]=\"disabled\"\n        [ngClass]=\"tagClass(tag, i, isSelected(i))\"\n        [attr.tabindex]=\"disabled ? null : 0\"\n        [focusIf]=\"isSelected(i)\"\n        (click)=\"tagClickHandler($event, tag, i)\"\n        (focus)=\"selectTagAt(i)\">\n\n        <ng-container [ngTemplateOutlet]=\"tagTemplate\"\n            [ngTemplateOutletContext]=\"{tag: tag, index: i, disabled: disabled, api: tagApi}\">\n        </ng-container>\n\n    </li>\n    <li *ngIf=\"isInputVisible()\" class=\"ux-tag-input\" role=\"none\">\n        <input #tagInput type=\"text\" [attr.id]=\"id\" class=\"ux-tag-input\"\n            [(ngModel)]=\"input\"\n            [class.invalid]=\"!inputValid\"\n            [attr.aria-activedescendant]=\"highlightedElement?.id\"\n            [attr.aria-autocomplete]=\"typeahead ? 'list' : 'none'\"\n            [attr.aria-controls]=\"typeahead?.id\"\n            aria-multiline=\"false\"\n            [placeholder]=\"disabled ? '' : (placeholder || '')\"\n            [disabled]=\"disabled\"\n            [focusIf]=\"isSelected(tags.length)\"\n            (click)=\"inputClickHandler()\"\n            (focus)=\"inputFocusHandler()\"\n            (paste)=\"inputPasteHandler($event)\">\n    </li>\n</ol>\n\n<ng-content #typeahead></ng-content>\n\n<ng-template #defaultTagTemplate let-tag=\"tag\" let-index=\"index\" let-disabled=\"disabled\" let-api=\"api\">\n    <span class=\"ux-tag-text\">{{api.getTagDisplay(tag)}}</span>\n    <button *ngIf=\"api.canRemoveTagAt(index)\"\n        type=\"button\"\n        class=\"ux-tag-remove\"\n        aria-label=\"Remove Item\"\n        [disabled]=\"disabled\"\n        (click)=\"api.removeTagAt(index); $event.stopPropagation();\">\n        <span class=\"hpe-icon hpe-close\"></span>\n    </button>\n</ng-template>`,\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n\r\n    typeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _typeaheadSubscription: Subscription;\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n        this.typeaheadQuery.changes.subscribe((query) => {\r\n            this.connectTypeahead(query.first);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    writeValue(value: any[]) {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any) {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any) {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate() {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'Delete':\r\n            case 'Del':\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n            case 'ArrowLeft':\r\n            case 'Left':\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'ArrowRight':\r\n            case 'Right':\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout', ['$event'])\r\n    focusOutHandler(event: FocusEvent) {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput() {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any) {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param d Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(d: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += d;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible() {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent) {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n            this._typeaheadSubscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._typeaheadSubscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            // Set up event handler for the highlighted element\r\n            // Added a delay to move it out of the current change detection cycle\r\n            this._typeaheadSubscription.add(\r\n                this.typeahead.highlightedElementChange.pipe(delay(0)).subscribe((element: HTMLElement) => {\r\n                    this.highlightedElement = element;\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.key) {\r\n            case 'Spacebar':\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SelectModule } from '../select/index';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    DateTimePickerModule,\n    PopoverModule,\n    SelectModule\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ]\n})\nexport class SearchBuilderModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SidePanelComponent } from './side-panel.component';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    template: `<div class=\"track\" #track [class.narrow]=\"options.track.height === sliderSize.Narrow\" [class.wide]=\"options.track.height === sliderSize.Wide\" [class.range]=\"options.type === sliderType.Range\">\n\n    <!-- Section Beneath Lower Thumb -->\n    <div class=\"track-section track-lower\" [style.flex-grow]=\"tracks.lower.size\" [style.background]=\"tracks.lower.color\"></div>\n\n    <!-- Lower Thumb Button / Line -->\n    <div class=\"thumb lower\"\n        uxDrag\n        role=\"slider\"\n        tabindex=\"0\"\n        #lowerthumb\n        [attr.aria-label]=\"options.type === sliderType.Range ? options.handles.aria.lowerThumb : options.handles.aria.thumb\"\n        [attr.aria-valuemin]=\"options?.track?.min\"\n        [attr.aria-valuemax]=\"options.type === sliderType.Range ? getThumbValue(sliderThumb.Upper) : options?.track?.max\"\n        [attr.aria-valuenow]=\"getThumbValue(sliderThumb.Lower)\"\n        [attr.aria-valuetext]=\"getAriaValueText(sliderThumb.Lower)\"\n        [style.left.%]=\"thumbs.lower.position\"\n        [class.active]=\"thumbs.lower.drag\"\n        [style.z-index]=\"thumbs.lower.order\"\n        [class.button]=\"options.handles.style === sliderStyle.Button\"\n        [class.line]=\"options.handles.style === sliderStyle.Line\"\n        [class.narrow]=\"options.track.height === sliderSize.Narrow\"\n        [class.wide]=\"options.track.height === sliderSize.Wide\"\n        (dragstart)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.DragStart); lowerthumb.focus()\"\n        (drag)=\"updateThumbPosition($event, sliderThumb.Lower)\"\n        (dragend)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.DragEnd)\"\n        (mouseenter)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseOver)\"\n        (mouseleave)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseLeave)\"\n        (focus)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseOver)\"\n        (blur)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseLeave)\"\n        (keydown.ArrowLeft)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowRight)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.ArrowUp)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowDown)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.PageDown)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.Major, false); $event.preventDefault()\"\n        (keydown.PageUp)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.Major, true); $event.preventDefault()\"\n        (keydown.Home)=\"snapToEnd(sliderThumb.Lower, false); $event.preventDefault()\"\n        (keydown.End)=\"snapToEnd(sliderThumb.Lower, true); $event.preventDefault()\">\n\n        <!-- Lower Thumb Callout -->\n        <div class=\"tooltip top tooltip-lower\" #lowerTooltip\n            [class.tooltip-dynamic]=\"options.handles.callout.trigger === sliderCalloutTrigger.Dynamic && thumbs.lower.drag === false\"\n            [style.opacity]=\"tooltips.lower.visible ? 1 : 0\"\n            [style.left.px]=\"tooltips.lower.position\">\n\n            <div class=\"tooltip-arrow\" [style.border-top-color]=\"options.handles.callout.background\"></div>\n\n            <div class=\"tooltip-inner\"\n                [style.background-color]=\"options.handles.callout.background\"\n                [style.color]=\"options.handles.callout.color\">\n                {{ tooltips.lower.label }}\n            </div>\n        </div>\n\n    </div>\n\n    <!-- Section of Track Between Lower and Upper Thumbs -->\n    <div class=\"track-section track-range\" *ngIf=\"options.type === sliderType.Range\" [style.flex-grow]=\"tracks.middle.size\" [style.background]=\"tracks.middle.color\">\n    </div>\n\n    <!-- Upper Thumb Button / Line -->\n    <div class=\"thumb upper\"\n        uxDrag\n        role=\"slider\"\n        tabindex=\"0\"\n        #upperthumb\n        [attr.aria-label]=\"options.handles.aria.upperThumb\"\n        [attr.aria-valuemin]=\"getThumbValue(sliderThumb.Lower) || options?.track?.min\"\n        [attr.aria-valuemax]=\"options?.track?.max\"\n        [attr.aria-valuenow]=\"getThumbValue(sliderThumb.Upper)\"\n        [attr.aria-valuetext]=\"getAriaValueText(sliderThumb.Upper)\"\n        [hidden]=\"options.type !== sliderType.Range\"\n        [class.active]=\"thumbs.upper.drag\"\n        [style.left.%]=\"thumbs.upper.position\"\n        [style.z-index]=\"thumbs.upper.order\"\n        [class.button]=\"options.handles.style === sliderStyle.Button\"\n        [class.line]=\"options.handles.style === sliderStyle.Line\"\n        [class.narrow]=\"options.track.height === sliderSize.Narrow\"\n        [class.wide]=\"options.track.height === sliderSize.Wide\"\n        (dragstart)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.DragStart); upperthumb.focus()\"\n        (drag)=\"updateThumbPosition($event, sliderThumb.Upper)\"\n        (dragend)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.DragEnd)\"\n        (mouseenter)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseOver)\"\n        (mouseleave)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseLeave)\"\n        (focus)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseOver)\"\n        (blur)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseLeave)\"\n        (keydown.ArrowLeft)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowRight)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.ArrowUp)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowDown)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.PageDown)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.Major, false); $event.preventDefault()\"\n        (keydown.PageUp)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.Major, true); $event.preventDefault()\"\n        (keydown.Home)=\"snapToEnd(sliderThumb.Upper, false); $event.preventDefault()\"\n        (keydown.End)=\"snapToEnd(sliderThumb.Upper, true); $event.preventDefault()\">\n\n        <!-- Upper Thumb Callout -->\n        <div class=\"tooltip top tooltip-upper\" #upperTooltip\n            [class.tooltip-dynamic]=\"options.handles.callout.trigger === sliderCalloutTrigger.Dynamic && thumbs.upper.drag === false\"\n            [style.opacity]=\"tooltips.upper.visible ? 1 : 0\"\n            [style.left.px]=\"tooltips.upper.position\">\n\n            <div class=\"tooltip-arrow\" [style.border-top-color]=\"options.handles.callout.background\"></div>\n\n            <div class=\"tooltip-inner\"\n                *ngIf=\"options.type === sliderType.Range\"\n                [style.background-color]=\"options.handles.callout.background\"\n                [style.color]=\"options.handles.callout.color\">\n                {{ tooltips.upper.label }}\n            </div>\n        </div>\n    </div>\n\n    <!-- Section of Track Abover Upper Thumb -->\n    <div class=\"track-section track-higher\" [style.flex-grow]=\"tracks.upper.size\" [style.background]=\"tracks.upper.color\"></div>\n\n</div>\n\n<!-- Chart Ticks and Tick Labels -->\n<div class=\"tick-container\"\n    role=\"presentation\"\n    *ngIf=\"(options.track.ticks.major.show || options.track.ticks.minor.show) && options.handles.callout.trigger !== sliderCalloutTrigger.Dynamic\"\n    [class.show-labels]=\"options.track.ticks.major.labels || options.track.ticks.minor.labels\">\n\n    <div class=\"tick\"\n        *ngFor=\"let tick of ticks\"\n        [class.major]=\"tick.type === sliderTickType.Major\"\n        [class.minor]=\"tick.type === sliderTickType.Minor\"\n        [style.left.%]=\"tick.position\"\n        [hidden]=\"!tick.showTicks\">\n\n        <div class=\"tick-indicator\"></div>\n        <div class=\"tick-label\" aria-hidden=\"true\" [hidden]=\"!tick.showLabels\">{{ tick.label }}</div>\n    </div>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb: string;\n    lowerThumb: string;\n    upperThumb: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    template: `<!-- Inline Spark Chart -->\n<div *ngIf=\"inlineLabel\" class=\"ux-spark-inline-label-container\">\n\n    <div class=\"ux-spark-inline-label-left\" [innerHtml]=\"inlineLabel\"></div>\n\n    <div class=\"ux-spark-line\">\n\n        <div class=\"ux-spark-top-container\" *ngIf=\"topLeftLabel || topRightLabel\">\n            <div class=\"ux-spark-label-top-left\" *ngIf=\"topLeftLabel\" [innerHtml]=\"topLeftLabel\"></div>\n            <div class=\"ux-spark-label-top-right\" *ngIf=\"topRightLabel\" [innerHtml]=\"topRightLabel\"></div>\n        </div>\n\n        <div class=\"ux-spark ux-inline ux-spark-theme-{{theme}}\" [style.height.px]=\"barHeight\" [style.backgroundColor]=\"trackColor\" [uxTooltip]=\"tooltip\">\n            <div class=\"ux-spark-bar\" *ngFor=\"let line of values; let idx = index;\" [style.width.%]=\"line\" [style.backgroundColor]=\"barColor[idx]\"></div>\n        </div>\n\n        <div class=\"ux-spark-bottom-container\" *ngIf=\"bottomLeftLabel || bottomRightLabel\">\n            <div class=\"ux-spark-label-bottom-left\" *ngIf=\"bottomLeftLabel\" [innerHtml]=\"bottomLeftLabel\"></div>\n            <div class=\"ux-spark-label-bottom-right\" *ngIf=\"bottomRightLabel\" [innerHtml]=\"bottomRightLabel\"></div>\n        </div>\n\n    </div>\n</div>\n\n<!-- End Inline Spark Chart -->\n\n\n<!-- Non Inline Spark Chart -->\n<div *ngIf=\"!inlineLabel\">\n\n    <div class=\"ux-spark-top-container\" *ngIf=\"topLeftLabel || topRightLabel\">\n        <div class=\"ux-spark-label-top-left\" *ngIf=\"topLeftLabel\" [innerHtml]=\"topLeftLabel\"></div>\n        <div class=\"ux-spark-label-top-right\" *ngIf=\"topRightLabel\" [innerHtml]=\"topRightLabel\"></div>\n    </div>\n\n    <div class=\"ux-spark ux-spark-theme-{{theme}}\" [class.ux-spark-multi-value]=\"values.length > 1\" [style.height.px]=\"barHeight\" [style.backgroundColor]=\"trackColor\"\n        [uxTooltip]=\"tooltip\">\n        <div class=\"ux-spark-bar\" *ngFor=\"let line of value; let idx = index;\" [style.width.%]=\"line\" [style.backgroundColor]=\"barColor[idx]\"></div>\n    </div>\n\n    <div class=\"ux-spark-bottom-container\" *ngIf=\"bottomLeftLabel || bottomRightLabel\">\n        <div class=\"ux-spark-label-bottom-left\" *ngIf=\"bottomLeftLabel\" [innerHtml]=\"bottomLeftLabel\"></div>\n        <div class=\"ux-spark-label-bottom-right\" *ngIf=\"bottomRightLabel\" [innerHtml]=\"bottomRightLabel\"></div>\n    </div>\n</div>\n\n<!-- End Non Inline Spark Chart -->`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';    \n    private _barColor: string | string[] = [];\n    \n    @Input() \n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input() \n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input() \n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    template: `<div role=\"tabpanel\"\n     class=\"tab-pane\"\n     [class.active]=\"active$ | async\"\n     [id]=\"id + '-panel'\"\n     [attr.aria-labelledby]=\"id\"\n     [attr.aria-hidden]=\"!(active$ | async)\">\n  <ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    template: `<!-- Nav tabs -->\n<ul role=\"tablist\"\n    class=\"nav nav-tabs\"\n    [class.minimal-tab]=\"minimal\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-orientation]=\"stacked === 'none' ? 'horizontal' : 'vertical'\">\n\n\t<li role=\"presentation\" \n        class=\"nav-item\"\n        *ngFor=\"let tab of tabset.tabs$ | async; let index = index\"\n        [class.active]=\"tab.active$ | async\"\n        [class.disabled]=\"tab.disabled\"\n        [ngClass]=\"tab.customClass\">\n\n        <a class=\"nav-link\"\n            [id]=\"tab.id\"\n            role=\"tab\"\n            [uxTabFocus]=\"tab\"\n            [tabindex]=\"(tab.active$ | async) ? 0 : -1\"\n            [class.highlighted]=\"(tabset.focused$ | async) && (tabset.highlighted$ | async) === tab\"            \n            (mousedown)=\"tabset.select(tab)\"\n            (focus)=\"tabset.focused$.next(true)\"\n            (blur)=\"tabset.focused$.next(false)\"\n            (mousedown)=\"tabset.focused$.next(true)\"\n            (keydown.ArrowUp)=\"selectPreviousTab($event)\"\n            (keydown.ArrowLeft)=\"selectPreviousTab($event)\"\n            (keydown.ArrowRight)=\"selectNextTab($event)\"\n            (keydown.ArrowDown)=\"selectNextTab($event)\"\n            (keydown.Home)=\"tabset.selectFirstTab(); $event.preventDefault()\"\n            (keydown.End)=\"tabset.selectLastTab(); $event.preventDefault()\"\n            [attr.aria-controls]=\"tab.id\"\n            [attr.aria-selected]=\"tab.active$ | async\"\n            [attr.aria-disabled]=\"tab.disabled\">\n\n            <span *ngIf=\"!tab.headingRef\">{{ tab.heading }}</span>\n\n            <ng-container *ngIf=\"tab.headingRef\" [ngTemplateOutlet]=\"tab.headingRef\"></ng-container>\n        </a>\n\n\t</li>\n\n</ul>\n\n<!-- Tab panes -->\n<div class=\"tab-content\">\n\t<ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetComponent } from './tabset.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    template: `<div class=\"timeline\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    template: `<div class=\"timeline-badge\" [ngClass]=\"badgeColor\">\r\n    <span>{{badgeTitle}}</span>\r\n</div>\r\n<div class=\"timeline-panel\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    template: `<label [attr.for]=\"inputId\"\n       class=\"ux-toggleswitch\"\n       [class.ux-toggleswitch-checked]=\"value\"\n       [class.ux-toggleswitch-disabled]=\"disabled\"\n       [class.ux-toggleswitch-focused]=\"focused\">\n\n    <input class=\"ux-toggleswitch-input\"\n           type=\"checkbox\"\n           role=\"switch\"\n           [id]=\"inputId\"\n           [checked]=\"value\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [tabindex]=\"tabindex\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-checked]=\"value\"\n           (focus)=\"focused = true\"\n           (blur)=\"focused = false\"\n           (change)=\"toggle()\"\n           (click)=\"$event.stopPropagation()\">\n\n    <div class=\"ux-toggleswitch-container\">\n        <div class=\"ux-toggleswitch-bg\"></div>\n        <div class=\"ux-toggleswitch-nub\"></div>\n    </div>\n\n    <span class=\"ux-toggleswitch-label\">\n        <ng-content></ng-content>\n    </span>\n</label>`,\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolbarSearchComponent } from './toolbar-search.component';\r\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\r\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\r\n\r\nconst DECLARATIONS = [\r\n    ToolbarSearchComponent,\r\n    ToolbarSearchFieldDirective,\r\n    ToolbarSearchButtonDirective\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: DECLARATIONS,\r\n    declarations: DECLARATIONS,\r\n    providers: [],\r\n})\r\nexport class ToolbarSearchModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    template: `<div class=\"virtual-scroll-content-height\" [style.height.px]=\"getTotalHeight()\"></div>\n<div class=\"virtual-scroll-content\" [style.transform]=\"'translateY(' + scrollTop + 'px)'\">\n\n    <!-- Virtually Render Cells -->\n    <ng-container *ngFor=\"let cell of cells | async\">\n        <ng-container *ngTemplateOutlet=\"cellTemplate; context: { cell: cell }\"></ng-container>\n    </ng-container>\n\n    <!-- Loading Indicator -->\n    <ng-container *ngIf=\"loadingIndicatorTemplate && isLoading\" [ngTemplateOutlet]=\"loadingIndicatorTemplate\"></ng-container>\n\n    <!-- Loading Button -->\n    <div class=\"virtual-scroll-load-button\" *ngIf=\"loadButtonTemplate && !loadOnScroll && !loadingComplete && !isLoading\" (click)=\"loadNextPage()\">\n        <ng-container *ngTemplateOutlet=\"loadButtonTemplate\"></ng-container>\n    </div>\n    \n</div>`\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\r\n\r\nimport { AutoGrowDirective } from './auto-grow.directive';\r\n\r\n@NgModule({\r\n    exports: [AutoGrowDirective],\r\n    declarations: [AutoGrowDirective]\r\n})\r\nexport class AutoGrowModule { }\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n  selector: '[uxOverflowObserver], [uxOverflowHorizontalObserver], [uxOverflowVerticalObserver]',\n  exportAs: 'ux-overflow-observer'\n})\nexport class OverflowDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  /** Allow a observable to be used to check for overflow */\n  @Input() trigger: Observable<void>;\n\n  /** Allow overflow to be within a range before emitting */\n  @Input() tolerance: number = 0;\n\n  /** Emit when there is a change to the overflow state - horizontal or vertical */\n  @Output() uxOverflowObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the horizontal axis */\n  @Output() uxOverflowHorizontalObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the vertical axis */\n  @Output() uxOverflowVerticalObserver = new EventEmitter<boolean>();\n\n  /** Store the overflow state on both axis */\n  private _state = { horizontalOverflow: false, verticalOverflow: false };\n\n  /** Unsubscribe from all the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** Set up the trigger if specified */\n  ngOnInit(): void {\n    if (this.trigger) {\n      this.trigger.pipe(takeUntil(this._onDestroy)).subscribe(() => this.checkForOverflow());\n    }\n  }\n\n  /** Perform an intial check for overflow */\n  ngAfterViewInit(): void {\n    requestAnimationFrame(() => this.checkForOverflow());\n  }\n\n  /** Unsubscribe from the trigger */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Programmatically trigger check for overflow */\n  checkForOverflow(): void {\n\n    const { offsetWidth, offsetHeight, scrollWidth, scrollHeight } = this._elementRef.nativeElement;\n    const horizontalOverflow = (scrollWidth - offsetWidth) > this.tolerance;\n    const verticalOverflow = (scrollHeight - offsetHeight) > this.tolerance;\n\n    if (horizontalOverflow !== this._state.horizontalOverflow) {\n      this.uxOverflowHorizontalObserver.emit(horizontalOverflow);\n    }\n\n    if (verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowVerticalObserver.emit(verticalOverflow);\n    }\n\n    if (horizontalOverflow !== this._state.horizontalOverflow || verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowObserver.emit((horizontalOverflow || verticalOverflow));\n    }\n\n    // store the state\n    this._state = { horizontalOverflow, verticalOverflow };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OverflowDirective } from './overflow/overflow-observer.directive';\n\n@NgModule({\n  exports: [OverflowDirective],\n  declarations: [OverflowDirective]\n})\nexport class ObserversModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy {\n\n  constructor(protected selectionService?: SelectionService) { }\n\n  setSelectionService(selectionService: SelectionService): void {\n    this.selectionService = selectionService;\n  }\n\n  mousedown(event: MouseEvent, data: any): void { }\n\n  click(event: MouseEvent, data: any): void { }\n\n  keydown(event: KeyboardEvent, data: any): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: any[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: any[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: any[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n    this.deselect(...this.selectionService.dataset);\n  }\n\n  destroy(): void { }\n}\n","import { KeyCode } from './keycode.enum';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy extends SelectionStrategy {\n\n  // store the most recently selected row\n  private _selection: Selection = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n\n      case KeyCode.UpArrow:\n      case KeyCode.DownArrow:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n\n      case KeyCode.Spacebar:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data, true);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: any, activate: boolean = false): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n\n    // if we want to keep the item activated then activate\n    if (activate) {\n      this.selectionService.activate(data);\n    }\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: any): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  protected multipleSelect(data: any): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: any): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: any): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  protected clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): any[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.keyCode === KeyCode.UpArrow);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection {\n  start: any;\n  end: any;\n}\n","import { KeyCode } from './keycode.enum';\r\nimport { RowSelectionStrategy } from './row-selection.strategy';\r\n\r\nexport class RowAltSelectionStrategy extends RowSelectionStrategy {\r\n    keydown(event: KeyboardEvent, data: any): void {\r\n        switch (event.keyCode) {\r\n            case KeyCode.UpArrow:\r\n            case KeyCode.DownArrow:\r\n                event.preventDefault();\r\n                this.handleCursorKey(event, data);\r\n                break;\r\n\r\n            case KeyCode.Spacebar:\r\n                event.preventDefault();\r\n                this.selectionService.strategy.toggle(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the sibling item when arrow keys are pressed\r\n     */\r\n    private handleCursorKey(event: KeyboardEvent, data: any): void {\r\n        // determine which modifier keys are pressed\r\n        const { ctrlKey, shiftKey } = event;\r\n\r\n        // if no modifier keys are pressed then deselect all and clear the selection\r\n        if (!ctrlKey && !shiftKey) {\r\n            this.deselectAll();\r\n            this.clearSelection(false);\r\n        }\r\n\r\n        if (ctrlKey) {\r\n            this.selectionService.activateSibling(event.keyCode === KeyCode.UpArrow);\r\n        } else {\r\n            const sibling = this.selectionService.getSibling(event.keyCode === KeyCode.UpArrow);\r\n            this.multipleSelect(sibling ? sibling : data);\r\n        }\r\n    }\r\n}\r\n","import { KeyCode } from './keycode.enum';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy extends SelectionStrategy {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(event: MouseEvent, data: any): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n\n      case KeyCode.UpArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(true);\n\n      case KeyCode.DownArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(false);\n\n      case KeyCode.Spacebar:\n        event.preventDefault();\n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: any): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowAltSelectionStrategy } from './strategies/row-alt-selection.strategy';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n\n  private _selection = new Set();\n  private _strategyToDestroy: SelectionStrategy;\n\n  dataset: any[] = [];\n  enabled: boolean = true;\n  clickEnabled: boolean = true;\n  keyboardEnabled: boolean = true;\n  strategy: SelectionStrategy = new SimpleSelectionStrategy(this);\n\n  active$ = new BehaviorSubject<any>(null);\n  focusTarget$ = new BehaviorSubject<any>(null);\n  selection$ = new BehaviorSubject<any[]>([]);\n\n  constructor() {\n    this._strategyToDestroy = this.strategy;\n  }\n\n  ngOnDestroy(): void {\n    if (this._strategyToDestroy) {\n      this._strategyToDestroy.destroy();\n    }\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: any[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: any[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: any[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: any): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  selected$(data: any): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setMode(mode: SelectionMode | SelectionStrategy): void {\n\n    if (this._strategyToDestroy) {\n      // Destroy previous strategy if it was created internally\n      this._strategyToDestroy.destroy();\n      this._strategyToDestroy = null;\n    }\n\n    if (mode instanceof SelectionStrategy) {\n\n      // Custom strategy - pass in the service instance\n      this.strategy = mode;\n      this.strategy.setSelectionService(this);\n\n    } else {\n\n      switch (mode.toLowerCase().trim()) {\n\n        case 'simple':\n          this.strategy = this._strategyToDestroy = new SimpleSelectionStrategy(this);\n          break;\n\n        case 'row':\n          this.strategy = this._strategyToDestroy = new RowSelectionStrategy(this);\n          break;\n\n        case 'row-alt':\n          this.strategy = this._strategyToDestroy = new RowAltSelectionStrategy(this);\n          break;\n\n        default:\n          throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple', 'row', or 'row-alt'.`);\n      }\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: any): void {\n    this.active$.next(data);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this.active$.next(null);\n  }\n\n  /**\n   * Return the next or previous sibling of the current active item.\n   * @param previous If true, the previous sibling will be returned.\n   */\n  getSibling(previous: boolean = false): any {\n\n    // get the currently active item\n    const current = this.active$.getValue();\n\n    // check if there is a current active item\n    if (!current) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(current);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    return target;\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): any {\n\n    const target = this.getSibling(previous);\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.enabled = !disabled;\n\n    // clear any stateful data\n    this.active$.next(null);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row' | 'row-alt';\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SelectionService } from './selection.service';\r\n\r\n@Directive({\r\n  selector: '[uxSelectionItem]',\r\n  exportAs: 'ux-selection-item'\r\n})\r\nexport class SelectionItemDirective implements OnInit, OnDestroy {\r\n\r\n  @Input() uxSelectionItem: any;\r\n\r\n  @Input() @HostBinding('class.ux-selection-selected')\r\n  set selected(selected: boolean) {\r\n    selected ? this.select() : this.deselect();\r\n  }\r\n\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  @Input() tabindex: number = null;\r\n\r\n  @Output() selectedChange = new EventEmitter<boolean>();\r\n\r\n  @HostBinding('class.ux-selection-focused') active: boolean = false;\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get attrTabIndex(): number {\r\n    return (this.tabindex !== null) ? this.tabindex : this._managedTabIndex;\r\n  }\r\n\r\n  private _selected: boolean = false;\r\n  private _managedTabIndex: number = -1;\r\n  private _subscriptions = new Subscription();\r\n\r\n  constructor(private _selectionService: SelectionService, private _elementRef: ElementRef) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // if there is no associated data then throw an error\r\n    if (!this.uxSelectionItem) {\r\n      throw new Error('The uxSelectionItem directive must have data associated with it.');\r\n    }\r\n\r\n    // subscribe to selection changes on this item\r\n    this._subscriptions.add(this._selectionService.selected$(this.uxSelectionItem).subscribe(selected => {\r\n\r\n      // store the selected state\r\n      this._selected = selected;\r\n\r\n      // emit the selected state\r\n      this.selectedChange.emit(selected);\r\n    }));\r\n\r\n    // subscribe to changes to the active state\r\n    this._subscriptions.add(this._selectionService.active$.pipe(map(active => active === this.uxSelectionItem)).subscribe(active => {\r\n\r\n      // store the focus state\r\n      this.active = active;\r\n\r\n      // if it is active then focus the element\r\n      if (active === true) {\r\n        this._selectionService.focusTarget$.next(this.uxSelectionItem);\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    }));\r\n\r\n    // Subscribe to changes to the focus target\r\n    // This is mostly the same as active$, except that it has an initial value of the first item in the collection.\r\n    this._subscriptions.add(this._selectionService.focusTarget$.subscribe(focusTarget => {\r\n      this._managedTabIndex = (focusTarget === this.uxSelectionItem) ? 0 : -1;\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._subscriptions.unsubscribe();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\r\n      this._selectionService.strategy.click(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event']) mousedown(event: MouseEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\r\n      this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event']) keydown(event: KeyboardEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.keyboardEnabled) {\r\n      this._selectionService.strategy.keydown(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('focus') focus(): void {\r\n    // If tabbed to from outside the component, activate.\r\n    if (this._selectionService.active$.getValue() !== this.uxSelectionItem) {\r\n      this._selectionService.activate(this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select this item using the current strategy\r\n   */\r\n  select(): void {\r\n    if (this._selectionService.enabled) {\r\n      this._selectionService.strategy.select(this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deselect this item using the current strategy\r\n   */\r\n  deselect(): void {\r\n    if (this._selectionService.enabled) {\r\n      this._selectionService.strategy.deselect(this.uxSelectionItem);\r\n    }\r\n  }\r\n}\r\n","import { AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\nimport { SelectionStrategy } from './strategies/selection.strategy';\n\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: any[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode | SelectionStrategy) {\n    this._selectionService.setMode(mode);\n  }\n\n  @Input() set clickSelection(enabled: boolean) {\n    this._selectionService.clickEnabled = enabled;\n  }\n\n  @Input() set keyboardSelection(enabled: boolean) {\n    this._selectionService.keyboardEnabled = enabled;\n  }\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number = null;\n\n  @Output() uxSelectionChange = new EventEmitter<any[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective>;\n\n  private _subscriptions = new Subscription();\n\n  constructor(private _selectionService: SelectionService, private _cdRef: ChangeDetectorRef) {\n    this._subscriptions.add(_selectionService.selection$.subscribe(items => this.uxSelectionChange.emit(items)));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this._subscriptions.add(this.items.changes.subscribe(() => this.update()));\n\n    // The above could trigger a change in the computed tabindex for selection items\n    this._cdRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this._subscriptions.unsubscribe();\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n\n    // Make sure that a tab target has been defined so that the component can be tabbed to.\n    if (this._selectionService.focusTarget$.getValue() === null && this._selectionService.dataset.length > 0) {\n      this._selectionService.focusTarget$.next(this._selectionService.dataset[0]);\n    }\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: any[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange: EventEmitter<TreeGridOptions> = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n    @Output() currentRowChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() treeDataChange: EventEmitter<TreeGridData[]> = new EventEmitter<TreeGridData[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}\n","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}"]}