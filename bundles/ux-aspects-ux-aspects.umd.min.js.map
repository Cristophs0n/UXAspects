{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.service.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.module.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","null","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.component.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/focus-within/focus-within.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/splitter/splitter-accessibility.directive.ts","ng://@ux-aspects/ux-aspects/common/operators/tick.operator.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.service.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/accessibility.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-subject.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-utils.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.service.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/interfaces/conduit-properties.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.decorator.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.service.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drop.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/check-list-item/facet-check-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/custom-control/custom-control.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.service.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-link/navigation-link.directive.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-secondary-item/navigation-secondary-item.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-focus.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-alt-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list-item/select-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/multiple-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/single-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table.service.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table-column.component.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table.directive.ts","ng://@ux-aspects/ux-aspects/components/table/table.module.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/observers/overflow/overflow-observer.directive.ts","ng://@ux-aspects/ux-aspects/directives/observers/observers.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-state.class.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.service.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-row.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-indent.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.module.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts"],"names":["AccordionPanelHeadingDirective","Directive","args","selector","AccordionService","Subject","prototype","collapseAll","this","collapse","next","Injectable","uniqueId","AccordionPanelComponent","accordion","_this","panelId","EventEmitter","subscribe","toggle","expanded","collapseOthers","expand","disabled","expandedChange","Component","template","host","class","role","Input","type","HostBinding","Output","AccordionComponent","_accordion","Object","defineProperty","providers","aria-multiselectable","AccordionModule","NgModule","imports","CommonModule","declarations","exports","BreadcrumbsComponent","clickCrumb","event","crumb","onClick","call","BreadcrumbsModule","RouterModule","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","e","rejected","result","done","then","apply","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","ResizeService","_zone","ResizeObserver","elementDidResize","bind","WeakMap","ngOnDestroy","_observer","disconnect","addResizeListener","target","runOutsideAngular","observe","_targets","has","get","emitter","ReplaySubject","set","removeResizeListener","unobserve","entries","run","entries_1","tslib_1.__values","entries_1_1","entry","width","offsetWidth","height","offsetHeight","NgZone","ResizeDirective","_elementRef","_resizeService","_ngZone","ngOnInit","_subscription","nativeElement","pipe","debounceTime","throttle","uxResize","emit","unsubscribe","ElementRef","ResizeModule","CardTabContentDirective","CardTabsService","BehaviorSubject","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","getComputedStyle","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","id","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","key","colorValueSet","_colors","getColorValueByHex","_html","_element","document","createElement","className","innerHTML","appendChild","getColorValue","parentNode","removeChild","color","hex","replace","parseInt","substring","toString","ThemeColor","querySelector","Error","rgba","window","backgroundColor","match","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","colorName","toLowerCase","toRgba","a","_r","_g","_b","undefined","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","primary","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","BUTTON_WIDTHS","sm","md","lg","ColorPickerComponent","colors","normalizedColors","isArray","row","ColorPickerColor","selected","selected$","columns","columns$","buttonSize","buttonSize$","pairwise","takeUntil","_onDestroy","prev","curr","selectedChange","combineLatest","w","cssWidth","complete","updateColorValue","input","mode","inputPatterns","test","toggleColorEntryType","inputMode","exportAs","name","_color","_originalHexValue","_originalRgbaValue","FocusWithinDirective","_focusMonitor","ngZone","monitor","origin","uxFocusWithin","uxBlurWithin","stopMonitoring","FocusMonitor","SplitterAccessibilityDirective","_renderer","_platform","_splitter","dragProgress","updateGutterAttributes","ngAfterViewInit","onGutterChange","areas","changes","isPlatformBrowser","MutationObserver","childList","isSplitterGutter","focus","_gutters","getGutters","setGutterAttributes","gutters","idx","children","node","item","forEach","gutter","setAttribute","setGutterValueNow","setGutterValueMin","setGutterValueMax","index","area","displayedAreas","round","size","toArray","minSize","availableSize","_area","reduce","total","onKeydown","gutterKeydown","onIncreaseKey","setGutterPosition","preventDefault","onDecreaseKey","onHomeKey","getAreasFromGutter","delta","comp","onEndKey","tagName","refreshStyleSizes","indexOf","Renderer2","Inject","PLATFORM_ID","SplitComponent","ContentChildren","SplitAreaDirective","HostListener","tick","source","Observable","subscriber","requestAnimationFrame","err","TabbableListService","initialize","items","wrap","_items","focusKeyManager","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","_direction","withWrap","setFirstItemTabbable","onInit","initialized","ensureTabbableItem","activate","activeItemIndex","setActiveItem","isItemActive","activeItem","setTimeout","first","tabindex","focusTabbableItem","findIndex","allowAltModifier","altKey","allowCtrlModifier","ctrlKey","hierarchy","keyCode","DOWN_ARROW","RIGHT_ARROW","keyboardExpanded$","UP_ARROW","LEFT_ARROW","parent","sortItemsByHierarchy","list","topLevel","flattenHierarchy","flatList","sort","rank","descendants","nextId","TabbableListItemDirective","_tabbableList","change","active","TabbableListDirective","ngAfterContentInit","_focusedElement","_orderedItems","QueryList","reset","notifyOnChanges","focusOnShow","setFirstItemActive","returnFocus","HTMLElement","AccessibilityModule","A11yModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","Infinity","_propagateChange","_min","_max","_step","_disabled","increment","decrement","isValid","valid","onScroll","deltaY","wheelDelta","[class.has-error]","NumberPickerModule","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_tooltipService","fromEvent","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","firstChange","currentValue","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","delay","clearTimeout","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","includes","array","showTriggers","hideTriggers","isFocused","activeElement","removeAttribute","ViewContainerRef","Overlay","ScrollDispatcher","TooltipModule","OverlayModule","ObserversModule","entryComponents","ColorPickerModule","ColumnSortingDirective","events","toggleColumn","sorting","order","singleSort","toggleSingleColumn","toggleMultipleColumn","state","ColumnSortingState","NoSort","column","Ascending","Descending","_column","ColumnSortingComponent","_columnSorter","columnIdx","stateChange","changeState","ColumnSortingModule","ConduitSubject","conduit","zoneId","_subject","subject","getInitialValue","distinctUntilChanged","onOutput","getEvents","onInput","acceptsInput","subjects","getSubjects","subjectOne","subjectTwo","lastModified","getTime","producesOutput","zone","outputValue","Date","destroy","invokeSuperFunction","functionName","functionList","_i","func","ConduitZone","_zoneId","unregisterConduit","registerConduit","getConduitSubject","setZoneId","setConduitProperties","properties","conduitSubject","_conduit","prop","createConduit","registerConduits","component","_conduits","propertyKey","unregisterConduits","ConduitComponent","decorators","Optional","ConduitZoneComponent","_super","tslib_1.__extends","defaultConduitProps","CONDUITS","DashboardService","defaultOptions","dimensions$","visible","x","layout$","setLayoutData","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","forEachBlock","onResizeStart","action","_mouseEvent","bringToFront","onResizeDrag","mousePosX","pageX","pageXOffset","mousePosY","pageY","pageYOffset","handle","getBoundingClientRect","mouseX","left","mouseY","top","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","onDragStart","setWidgetOrigin","cacheWidgets","onDragEnd","_widgetOrigin","onDrag","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","wgt","widgetsToMove","this_1","space","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","splice","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","Rounding","RoundDownBelowHalf","RoundUpOverHalf","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundUp","getRowCount","emptyRow","sendToBack","stable","callback","DashboardComponent","dashboardService","layout","layoutChange","dashboardElement","onResize","DashboardWidgetComponent","regular","update","_columnSpan","_rowSpan","console","warn","random","getStackableValue","_row","setStackableValue","zIndex","dragstart","drag","dragend","property","DragService","onDrop","onDropEnter","onDropLeave","DragDirective","_drag","_mousedown$","draggable","dragStart","_isDragging","dragEvent","clone","cloneNode","addClass","group","data","model","_mousemove$","_mouseup$","dragMove","dragEnd","_clone","updateNodePosition","removeClass","_offset","clientX","clientY","inlineStyles","setStyle","styles","style","DropDirective","_dragService","isGroupAllowed","onMouseOver","_group","isMouseOver","isDragging","[class.ux-drop-hover]","DragModule","DashboardDragHandleDirective","elementRef","renderer","DECLARATIONS","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","triggerDecrement","triggerIncrement","encapsulation","ViewEncapsulation","None","SpinButtonModule","TimeFormatPipe","transform","pad","Pipe","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","value$","date","getHours","hour","showMeridian","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","hourChange","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","aria-label","TimePickerModule","gridify","range","start","end","compareDays","day1","day2","getDate","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","weekdaysShort","weekday","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showSpinners","weekdays","nowBtnText","timezones","ModeDirection","setViewportMonth","setViewportYear","date$","month$","year$","year","setDate","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","Subscription","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","DayViewService","_datepicker","createDayGrid","setFocus","focused$","getDay","dates","dateRange","isToday","isActive","isCurrentMonth","grid$","selectedDay","DayViewComponent","datePicker","dayService","trackWeekByFn","trackDayByFn","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","decrementTimezone","YearViewService","_year","createYearGrid","_event","goToNextDecade","goToPreviousDecade","add","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","_timeout","preventScroll","focusIfScroll","focusIfDelay","FocusIfModule","DateTimePickerModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","TypeaheadOptionEvent","option","TypeaheadKeyService","handleKey","typeahead","open","moveHighlight","selectOnEnter","selectHighlighted","TypeaheadService","TypeaheadComponent","typeaheadElement","_changeDetector","_service","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","pageSize","arrayOrPromise","newOptions","open$","openChange","initOptions","highlighted$","highlightedKey","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","displayHtml","length_1","matchIndex","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","InfiniteScrollLoadButtonDirective","_template","_viewContainer","load","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","_updateRequests","filterOperator","request","check","auditTime","doRequest","enabled","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","loading","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","_subscriptions","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","subtree","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","of","from","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","scrollTop","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","current","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","scrollIntoView","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","TypeaheadModule","ReorderableHandleDirective","ReorderableModelDirective","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","isEmpty","getGroup","moves","canMove","_containers","getModelForElement","getModelFromElement","containers","c","mirrorContainer","on","sibling","drop","cancel","cloned","containerElement","isSameNode","ReorderableDirective","reorderableGroup","_container","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","reorderEnd","setTableCellWidths","captureCanvases","reorderingDisabled","handles","_handle","sourceCells","targetCells","cell","getPropertyValue","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","ReorderableModule","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","_announcer","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","tag","selectedFacet","announce","title","previousElementSibling","nextElementSibling","deselectAllFacets","trackBy","_index","shiftRight","facetsReorderable","shiftFacet","shiftLeft","LiveAnnouncer","FacetBaseComponent","facetContainer","deselectAll","toggleFacetSelection","isFacetSelected","Host","FacetHeaderComponent","toggleExpand","canExpand","(click)","(keyup.enter)","[attr.aria-expanded]","[attr.aria-label]","FacetCheckListItemComponent","getLabel","FacetCheckListComponent","_focusKeyManager","activeIndex","toggleFacet","ViewChildren","FacetTypeaheadListItemComponent","FacetTypeaheadListComponent","typeaheadKeyService","maxResults","minCharacters","config","query$","tap","typeaheadOptions","mergeMap","getFacetObservable","updateTypeahead","query","typeaheadOpen","FacetTypeaheadHighlight","searchQuery","regex","RegExp","Facet","count","MenuNavigationService","MenuNavigationItemDirective","service","active$","setActive","activated","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","keyEnter","focusFirst","moveFirst","keydownHandler","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","navigatedOut","stopPropagation","nextIndex","menuOpen","DOCUMENT","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","isKeyMatch","menuPosition","EXPORTS","FilterContainerComponent","addFilter","filters","FilterAddEvent","filtersChange","removeFilter","FilterRemoveEvent","removeAll","FilterRemoveAllEvent","FilterBaseComponent","filtersContainer","_filter","initial","FilterDropdownComponent","selectFilter","FilterDynamicComponent","announcer","getItems","typeaheadItems","maxIndividualItems","showTypeahead","selectOption","typeaheadOption","dropdown","clickOff","hideDropdown","nodeName","parentElement","(document:click)","BsDropdownDirective","FilterTypeaheadHighlight","BsDropdownModule","forRoot","MenuNavigationModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","onKeyDown","[class.horizontal]","[class.vertical]","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","close","FloatingActionButtonsComponent","fab","tooltips","preserveWhitespaces","animations","transition","opacity","stagger","animate","FloatingActionButtonComponent","Attribute","FloatingActionButtonsModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","getChildren","children$","observer","child","nodes","_child","HierarchyBarComponent","hierarchyBar","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","ClickOutsideDirective","_initialised","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","ESCAPE","PopoverModule","HierarchyBarModule","SidePanelService","SidePanelComponent","inline","attachTo","openPanel","closePanel","clickHandler","closeOnExternalClick","ItemDisplayPanelComponent","visibleChange","panel","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","WizardComponent","stepChange","invalidIndicator","stepChanging","StepChangingEvent","getCurrentStep","steps","onNext","onPrevious","finish","onFinishing","onFinish","onCancel","gotoStep","stepIndex","stp","isLastStep","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","MarqueeWizardModule","WizardModule","FrameExtractionService","createVideoPlayer","videoPlayer","preload","src","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","skip","frames","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","duration","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","readyState","seekable","seeking","textTracks","videoTracks","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","canPlayType","addTextTrack","kind","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","hideSubtitleTracks","MediaPlayerBaseExtensionDirective","mediaPlayerService","ColorServiceModule","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","thumb","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","diff","clamp","updateThumbPosition","eventPosition","MouseEvent","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","Number","toFixed","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","join","getSteps","output","showLabels","tk","t1","t2","destination","value1","value2","isSliderValue","obj1","obj2","SliderModule","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","volumeChangeEvent","mouseEnterVolume","volumeActive","mouseLeaveVolume","switchMap","timer","toggleMute","goToStart","goToEnd","isSubtitleActive","setSubtitleTrack","cues","line","getSubtitleTrack","[class.quiet]","MediaPlayerCustomControlDirective","MediaPlayerTimelineExtensionComponent","scrub","timeUpdateEvent","progressEvent","mousedown$","mousemove$","mouseup$","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","AudioService","_http","getAudioFileMetadata","mediaElement","responseType","response","filename","lastIndexOf","extension","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","getAudioBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","waveform","points","channel","arrayBuffer","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","createAnalyser","HttpClient","AudioServiceModule","HttpClientModule","MediaPlayerComponent","_audioService","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","DurationPipe","minutes","hours","days","DurationPipeModule","FileSizePipe","log","pow","FileSizePipeModule","NavigationItemComponent","_parent","_router","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","levelClass","getLevelClass","setIndentWithoutArrow","_childrenChanges","some","indentWithoutArrow","[class.active]","[class.selected]","SkipSelf","Router","NavigationService","setExpanded","autoCollapse","collapseSiblings","siblings","parent_1","getParent","siblings_1","siblings_1_1","NavigationLinkDirective","_locationStrategy","_navigationService","_expanded$","navigationItem","ariaExpanded","updateNavigationState","updateAttributes","routerLink","commands","navigate","routerExtras","isActiveItem","href","getHref","indentChildren","urlTree","createUrlTree","prepareExternalUrl","serializeUrl","LocationStrategy","NavigationComponent","tree","hierarchyClasses","itemClick","needsIndent","NavigationModule","NotificationService","_colorService","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","updateItemsWithActiveRoute","secondaryNavigationAutoselect","secondary$","isParentOf","deselect","items$","updateItem","setItems","setParent","initialSelectedItem","setSecondaryNavigation","PageHeaderActiveNavigationItem","findActiveItem","exact","childItem","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","menuNavigationToggle","PageHeaderNavigationDropdownItemComponent","_pageHeaderService","_hover$","dropdownOpen","button","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationSecondaryItemDirective","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","indicatorX","indicatorWidth","PageHeaderComponent","condensed","_crumbs","crumbs","_logoBackground","_logoForeground","logoBackground","logoForeground","goBack","backClick","PageHeaderModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","RadioButtonModule","UNSET_FOCUS","groupId","SearchBuilderFocusService","focus$","clearFocus","SearchBuilderService","registerComponent","_components","cmp","registerComponents","components","getComponent","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","_searchBuilderFocusService","init","_id","removeAtIndex","SearchBuilderGroupComponent","searchBuilderGroupService","focusIndex","addField","removeFieldAtIndex","field","remove","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","outlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","ComponentFactoryResolver","SearchBuilderComponent","_querySubscription","_validSubscription","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","_value$","_input$","_dropdownOpen","dropdownOpenChange","propagateChange","inputChange","allowNull","multiple","filter$","onfocus","singleInput","tagInput","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","inputKeyHandler","singleOptionSelected","TagInputEvent","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","validate","tags","_onTouchedHandler","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","which","ENTER","commitTypeahead","commitInput","BACKSPACE","backspace","DELETE","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","isSelected","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","tagValue","inputPattern","inputValid","tagPattern","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","SPACE","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","BaseSearchComponent","validation","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchDateComponent","SearchSelectComponent","dropDirection","maxHeight","SearchTextComponent","SearchBuilderModule","SelectionStrategy","selectionService","setSelectionService","mousedown","keydown","selectAll","dataset","RowSelectionStrategy","shiftKey","multipleSelect","singleSelect","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","deactivate","startIdx","endIdx","activateSibling","RowAltSelectionStrategy","handleCursorKey","getSibling","SimpleSelectionStrategy","Set","SelectionService","_dataset","setFirstItemFocusable","_strategyToDestroy","selections","selection","selectionHasMutated","delete","getSelectionState","selection$","setStrategy","trim","setDisabled","isEnabled","SelectListItemComponent","onMouseDown","MultipleSelectListStrategy","_lastSelection","SingleSelectListStrategy","SelectListComponent","SelectListModule","SidePanelCloseDirective","SparkComponent","_theme","_trackColor","_barColor","values","val","SparkModule","ResizableTableService","setColumns","_columns","getNaturalWidth","tableWidth","isInitialised","setResizing","isResizing","unit","ColumnUnit","Percentage","Pixel","setColumnWidth","sizes","resizeColumn","getSiblingColumn","tslib_1.__spread","isWidthValid","getColumnInstance","ResizableTableCellDirective","_table","getCellIndex","cellIndex","ResizableTableColumnComponent","computed","onDragMove","ResizableTableDirective","getScrollWidth","tBodies","tbody","TableModule","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","tabIndex","TabFocusDirective","_tabset","uxTabFocus","uniqueTabId","TabComponent","TabHeadingDirective","headingRef","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","TabsetModule","TimelineComponent","TimelineModule","TimelineEventComponent","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","blur","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","_embeddedView","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","OverflowDirective","horizontalOverflow","verticalOverflow","checkForOverflow","tolerance","_state","uxOverflowHorizontalObserver","uxOverflowVerticalObserver","uxOverflowObserver","SelectionItemDirective","_selectionService","_selected","_managedTabIndex","uxSelectionItem","focusTarget","isClickEnabled","isKeyboardEnabled","SelectionDirective","_cdRef","uxSelectionChange","SelectionModule","TreeGridState","setSize","positionInSet","TreeGridService","data$","rows$","getFlattenedTree","insertChildren","removeChildren","loadChildren","loading$","getNormalizedChildren","toPromise","uniqueChildren","childRows","rows","TreeGridRowDirective","_treeGridService","isExpanded","[class.treegrid-row]","TreeGridIndentDirective","uxTreeGridIndent","TreeGridDirective","rowsChange","TreeGridModule","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","TreeGridNg1Component","ThumbnailNg1Component","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","navigationMenuServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","pdfServiceFactory","pdfServiceProvider","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","Conduit","tslib_1.__assign"],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'ux-accordion-panel-header'\n})\nexport class AccordionPanelHeadingDirective {\n\n}","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class AccordionService {\n\n    collapseOthers: boolean = false;\n    collapse = new Subject<void>();\n\n    collapseAll(): void {\n        this.collapse.next();\n    }\n}","import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { AccordionService } from '../accordion.service';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-accordion-panel',\n    templateUrl: './accordion-panel.component.html',\n    host: {\n        'class': 'panel panel-default',\n        'role': 'tab'\n    }\n})\nexport class AccordionPanelComponent {\n\n    @Input() panelId: string = `ux-accordion-panel-${uniqueId++}`;\n    @Input() headingId: string = `${this.panelId}-heading`;\n\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() @HostBinding('class.panel-open') expanded: boolean = false;\n\n    @Output() expandedChange = new EventEmitter<boolean>();\n\n    constructor(public accordion: AccordionService) {\n        accordion.collapse.subscribe(() => this.collapse());\n    }\n\n    toggle(): void {\n\n        if (this.expanded) {\n            this.collapse();\n            return;\n        }\n\n        // check if we should collapse others\n        if (this.accordion.collapseOthers) {\n            this.accordion.collapseAll();\n        }\n\n        // store the new expanded state\n        this.expand();\n    }\n\n    expand(): void {\n        if (this.disabled === false && this.expanded === false) {\n            this.expanded = true;\n            this.expandedChange.next(true);\n        }\n    }\n\n    collapse(): void {\n        if (this.disabled === false && this.expanded === true) {\n            this.expanded = false;\n            this.expandedChange.next(false);\n        }\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { AccordionService } from './accordion.service';\n\n@Component({\n    selector: 'ux-accordion',\n    templateUrl: './accordion.component.html',\n    providers: [ AccordionService ],\n    host: {\n        'class': 'panel-group',\n        'role': 'tablist',\n        'aria-multiselectable': 'true'\n    }\n})\nexport class AccordionComponent {\n\n    @Input() set collapseOthers(collapseOthers: boolean) {\n        this._accordion.collapseOthers = collapseOthers;\n    }\n\n    constructor(private _accordion: AccordionService) { }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccordionPanelHeadingDirective } from './accordion-panel/accordion-panel-heading.directive';\nimport { AccordionPanelComponent } from './accordion-panel/accordion-panel.component';\nimport { AccordionComponent } from './accordion.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ],\n    exports: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ]\n})\nexport class AccordionModule { }","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    templateUrl: 'breadcrumbs.component.html'\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _observer = new ResizeObserver(this.elementDidResize.bind(this));\n    private _targets = new WeakMap<HTMLElement, ReplaySubject<ResizeDimensions>>();\n\n    constructor(private _zone: NgZone) {}\n\n    ngOnDestroy(): void {\n        this._observer.disconnect();\n    }\n\n    addResizeListener(target: HTMLElement): ReplaySubject<ResizeDimensions> {\n        this._zone.runOutsideAngular(() => this._observer.observe(target));\n\n        if (this._targets.has(target)) {\n            return this._targets.get(target);\n        } else {\n            const emitter = new ReplaySubject<ResizeDimensions>();\n            this._targets.set(target, emitter);\n            return emitter;\n        }\n    }\n\n    removeResizeListener(target: HTMLElement): void {\n        this._observer.unobserve(target);\n    }\n\n    private elementDidResize(entries: ResizeObserverEntry[]): void {\n        this._zone.run(() => {\n            for (const entry of entries) {\n                if (this._targets.has(entry.target as HTMLElement)) {\n                    const emitter = this._targets.get(entry.target as HTMLElement);\n                    emitter.next({ width: (entry.target as HTMLElement).offsetWidth, height: (entry.target as HTMLElement).offsetHeight });\n                }\n            }\n        });\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._resizeService.removeResizeListener(this._elementRef.nativeElement);\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  templateUrl: './card-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  templateUrl: './card-tabset.component.html',\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ResizeModule } from '../../directives/resize/index';\r\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\r\nimport { CardTabComponent } from './card-tab/card-tab.component';\r\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResizeModule\r\n  ],\r\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\r\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\r\n})\r\nexport class CardTabsModule { }\r\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    templateUrl: './checkbox.component.html',\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { pairwise, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ThemeColor } from '../../services/color/color.service';\n\n// Values corresponding to stylesheet\nconst BUTTON_MARGIN = 8;\nconst BUTTON_WIDTHS = {\n    'sm': 26,\n    'md': 32,\n    'lg': 40\n};\n\nlet uniqueId = 0;\n\n@Component({\n    selector: 'ux-color-picker',\n    exportAs: 'ux-color-picker',\n    templateUrl: 'color-picker.component.html'\n})\nexport class ColorPickerComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('attr.id')\n    id: string = `ux-color-picker-${uniqueId++}`;\n\n    @Input('colors')\n    set inputColors(colors: ColorPickerInputColors[] | ColorPickerInputColors[][]) {\n\n        let normalizedColors: ColorPickerInputColors[][];\n\n        // If it's a 1d array, convert it to 2d\n        if (colors.length === 0 || !Array.isArray(colors[0])) {\n            normalizedColors = [<ColorPickerInputColors[]>colors];\n        } else {\n            normalizedColors = <ColorPickerInputColors[][]>colors;\n        }\n\n        // Convert any string colors to ColorPickerColor\n        this.colors = normalizedColors.map(row => {\n            return row.map(color => color instanceof ColorPickerColor ? color : new ColorPickerColor(color, color));\n        });\n    }\n\n    @Input()\n    set selected(selected: ColorPickerColor) {\n        this.selected$.next(selected);\n    }\n\n    @Input()\n    set columns(columns: number) {\n        this.columns$.next(columns);\n    }\n\n    @Input()\n    buttonStyle: ColorPickerButtonStyle = 'circle';\n\n    @Input()\n    set buttonSize(buttonSize: ColorPickerButtonSize) {\n        this.buttonSize$.next(buttonSize);\n    }\n\n    @Input()\n    showTooltips: boolean = false;\n\n    @Input()\n    showInput: boolean = false;\n\n    @Input()\n    inputMode: ColorPickerInputMode = 'hex';\n\n    @Output()\n    selectedChange = new EventEmitter<ColorPickerColor>();\n\n    @Output()\n    inputSubmit = new EventEmitter<void>();\n\n    @HostBinding('style.width')\n    cssWidth = 'auto';\n\n    colors: ColorPickerColor[][] = [];\n    selected$ = new BehaviorSubject<ColorPickerColor>(null);\n    columns$ = new BehaviorSubject<number>(-1);\n    buttonSize$ = new BehaviorSubject<ColorPickerButtonSize>('md');\n    inputPatterns = {\n        'hex': /^#(?:[\\da-fA-F]{3}){1,2}$/,\n        'rgba': /^(?:rgb\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3}\\))|(?:rgba\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3},\\s*\\d(\\.\\d+)?\\))$/\n    };\n\n    private _onDestroy = new Subject();\n\n    ngOnInit(): void {\n\n        // Skip emitting the initial selectedChange\n        this.selected$.pipe(pairwise(), takeUntil(this._onDestroy)).subscribe(([prev, curr]) => {\n            if (prev) {\n                this.selectedChange.emit(curr);\n            }\n        });\n\n        // Set the width based on column count and button size\n        combineLatest(this.columns$, this.buttonSize$)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(([columns, buttonSize]) => {\n                if (columns > 0) {\n                    const w = columns * (BUTTON_WIDTHS[buttonSize] + (2 * BUTTON_MARGIN));\n                    this.cssWidth = `${w}px`;\n                } else {\n                    this.cssWidth = 'auto';\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateColorValue(input: string, mode: ColorPickerInputMode): void {\n        if (this.inputPatterns[mode].test(input)) {\n            this.selected$.next(new ColorPickerColor('Custom', input, mode));\n        }\n    }\n\n    toggleColorEntryType(): void {\n        this.inputMode = (this.inputMode === 'hex') ? 'rgba' : 'hex';\n    }\n}\n\nexport type ColorPickerInputColors = ColorPickerColor | string;\nexport type ColorPickerButtonStyle = 'square' | 'circle';\nexport type ColorPickerButtonSize = 'sm' | 'md' | 'lg';\nexport type ColorPickerInputMode = 'hex' | 'rgba';\n\n/**\n * Type representing a color, including its descriptive name.\n */\nexport class ColorPickerColor {\n\n    /**\n     * Human-readable name of the color.\n     */\n    name: string;\n\n    /**\n     * Hex value of the color, e.g. `#ffffff`.\n     */\n    get hex(): string {\n        return this._originalHexValue ? this._originalHexValue : this._color.toHex();\n    }\n\n    /**\n     * RGBA value of the color, e.g. `rgba(255, 255, 255, 1)`.\n     */\n    get rgba(): string {\n        return this._originalRgbaValue ? this._originalRgbaValue : this._color.toRgba();\n    }\n\n    get r(): number {\n        return parseInt(this._color.getRed());\n    }\n\n    get g(): number {\n        return parseInt(this._color.getGreen());\n    }\n\n    get b(): number {\n        return parseInt(this._color.getBlue());\n    }\n\n    get a(): number {\n        return parseFloat(this._color.getAlpha());\n    }\n\n    private _color: ThemeColor;\n    private _originalHexValue: string;\n    private _originalRgbaValue: string;\n\n    constructor(name: string, value: string, inputMode?: ColorPickerInputMode) {\n        this.name = name;\n        this._color = ThemeColor.parse(value);\n\n        // Preserve the format entered by the user if it's valid\n        if (inputMode === 'hex') {\n            this._originalHexValue = value;\n        } else if (inputMode === 'rgba') {\n            this._originalRgbaValue = value;\n        }\n    }\n\n    toString(): string {\n        return this._color.toRgba();\n    }\n}","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxFocusWithin],[uxBlurWithin]',\n})\nexport class FocusWithinDirective implements OnDestroy {\n\n    @Output() uxFocusWithin = new EventEmitter<void>();\n    @Output() uxBlurWithin = new EventEmitter<void>();\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor, ngZone: NgZone) {\n        _focusMonitor.monitor(this._elementRef.nativeElement, true)\n            .subscribe(origin => ngZone.run(() => origin ? this.uxFocusWithin.emit() : this.uxBlurWithin.emit()));\n    }\n\n    ngOnDestroy(): void {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n}","import { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, OnDestroy, Output, PLATFORM_ID, QueryList, Renderer2 } from '@angular/core';\nimport { SplitAreaDirective, SplitComponent } from 'angular-split';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: 'split'\n})\nexport class SplitterAccessibilityDirective implements AfterViewInit, OnDestroy {\n\n    /** Emit an event whenever the gutter is moved using the keyboard */\n    @Output() gutterKeydown = new EventEmitter<KeyboardEvent>();\n\n    /** Find all the split areas */\n    @ContentChildren(SplitAreaDirective) areas: QueryList<SplitAreaDirective>;\n\n    /** Store all the gutter elements */\n    private _gutters: HTMLElement[] = [];\n\n    /** Watch for gutters being added or removed */\n    private _observer: MutationObserver;\n\n    /** Teardown our observables on destroy */\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Inject(PLATFORM_ID) private _platform: string,\n        private _splitter: SplitComponent\n    ) {\n        // update aria values when the a gutter is dragged\n        _splitter.dragProgress\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.updateGutterAttributes());\n    }\n\n    /** Once initialised make the gutters accessible */\n    ngAfterViewInit(): void {\n        // find the gutters\n        this.onGutterChange();\n\n        // if the number of split areas change then update the gutters and apply aria properties\n        this.areas.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.onGutterChange());\n\n        // we can't know when additional split-gutters appear using ContentChildren as the directive class is not exported and selector doesn't work - use mutation observer instead\n        if (isPlatformBrowser(this._platform)) {\n\n            // create the mutation observer\n            this._observer = new MutationObserver(() => this.onGutterChange());\n\n            // begin observing the child nodes\n            this._observer.observe(this._elementRef.nativeElement, { childList: true });\n        }\n    }\n\n    /** Destroy all observables and observers */\n    ngOnDestroy(): void {\n\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** We should focus the gutter when it is clicked */\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            (event.target as HTMLElement).focus();\n        }\n    }\n\n    /** Find all the gutters and set their attributes */\n    private onGutterChange(): void {\n        this._gutters = this.getGutters();\n        this.setGutterAttributes();\n    }\n\n    /** Get all the gutter elements */\n    private getGutters(): HTMLElement[] {\n        // This function uses DOM accessing properties - which won't work if server side rendered\n        if (isPlatformBrowser(this._platform)) {\n            const gutters: HTMLElement[] = [];\n\n            for (let idx = 0; idx < this._elementRef.nativeElement.children.length; idx++) {\n                const node = this._elementRef.nativeElement.children.item(idx);\n\n                if (this.isSplitterGutter(node as HTMLElement)) {\n                    gutters.push(node as HTMLElement);\n                }\n            }\n\n            return gutters;\n        }\n\n        return [];\n    }\n\n    /** Set the appropriate attributes on the gutter elements */\n    private setGutterAttributes(): void {\n        // apply attribute to every gutter\n        this._gutters.forEach(gutter => {\n            // apply the separator role\n            this._renderer.setAttribute(gutter, 'role', 'separator');\n\n            // make the gutters tabbable\n            this._renderer.setAttribute(gutter, 'tabindex', '0');\n\n            // set the value now aria property\n            this.updateGutterAttributes();\n        });\n    }\n\n    /** Apply the aria attribute values */\n    private updateGutterAttributes(): void {\n        // update the value now properties of each gutter\n        this._gutters.forEach((gutter, idx) => {\n            this.setGutterValueNow(gutter, idx);\n            this.setGutterValueMin(gutter, idx);\n            this.setGutterValueMax(gutter, idx);\n        });\n    }\n\n    /** Apply the value now aria attribute */\n    private setGutterValueNow(gutter: HTMLElement, index: number): void {\n        // get the matching split area\n        const area = this._splitter.displayedAreas[index];\n\n        // indicate the size\n        this._renderer.setAttribute(gutter, 'aria-valuenow', `${Math.round(area.size * 100)}`);\n    }\n\n    /** Apply the value min aria attribute */\n    private setGutterValueMin(gutter: HTMLElement, index: number): void {\n        // get the matching split area\n        const area = this.areas.toArray()[index];\n\n        // indicate the minimum size\n        this._renderer.setAttribute(gutter, 'aria-valuemin', `${Math.round(area.minSize * 100)}`);\n    }\n\n    /** Apply the value max aria attribute */\n    private setGutterValueMax(gutter: HTMLElement, index: number): void {\n        // get every other splitter area\n        const availableSize = this.areas\n            .filter((_area, idx) => index !== idx)\n            .reduce<number>((total, area) => total + area.minSize, 0);\n\n        // indicate the minimum size\n        this._renderer.setAttribute(gutter, 'aria-valuemax', `${100 - Math.round(availableSize * 100)}`);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.gutterKeydown.emit(event);\n        }\n    }\n\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowRight', ['$event'])\n    onIncreaseKey(event: KeyboardEvent): void {\n        // only perform a move if a gutter is focused\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.setGutterPosition(event.target as HTMLElement, -0.01);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.ArrowLeft', ['$event'])\n    onDecreaseKey(event: KeyboardEvent): void {\n        // only perform a move if a gutter is focused\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.setGutterPosition(event.target as HTMLElement, 0.01);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.Home', ['$event'])\n    onHomeKey(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            // get the affected panels\n            const areas = this.getAreasFromGutter(event.target as HTMLElement);\n\n            // set the previous area to it's minimum size\n            const delta = areas.previous.size - areas.previous.comp.minSize;\n\n            // update the sizes accordingly\n            this.setGutterPosition(event.target as HTMLElement, delta);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.End', ['$event'])\n    onEndKey(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            // get the affected panels\n            const areas = this.getAreasFromGutter(event.target as HTMLElement);\n\n            // set the next area to it's minimum size\n            const delta = areas.next.size - areas.next.comp.minSize;\n\n            // update the sizes accordingly\n            this.setGutterPosition(event.target as HTMLElement, -delta);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    /** Determine if an element is a gutter */\n    private isSplitterGutter(element: HTMLElement): boolean {\n        return element.tagName === 'SPLIT-GUTTER';\n    }\n\n    /** Update the gutter position */\n    private setGutterPosition(gutter: HTMLElement, delta: number): void {\n        // get the affected panels\n        const areas = this.getAreasFromGutter(gutter);\n\n        // ensure we can perform the resize\n        if (areas.previous.size - delta < areas.previous.comp.minSize || areas.next.size + delta < areas.next.comp.minSize) {\n            return;\n        }\n\n        // perform the resize\n        areas.previous.size -= delta;\n        areas.next.size += delta;\n\n        // update the splitter - this is a private method but we need to call it\n        (this._splitter as any).refreshStyleSizes();\n\n        // update the gutter aria values\n        this.updateGutterAttributes();\n    }\n\n    /** Get the split areas associated with a given gutter */\n    private getAreasFromGutter(gutter: HTMLElement) {\n        const index = this._gutters.indexOf(gutter);\n\n        return {\n            previous: this._splitter.displayedAreas[index],\n            next: this._splitter.displayedAreas[index + 1]\n        };\n    }\n}\n","import { Observable } from 'rxjs/Observable';\n\n/**\n * This is a simple RxJS operator to allow us to avoid the\n * \"expression has changed after it was checked issue\"\n * by making the subscription asynchronous. We could just use a\n * delay operator but this uses a timeout which is significantly\n * slower than using requestAnimationFrame.\n */\nexport const tick = <T>() => (source: Observable<T>) => new Observable<T>((subscriber) => {\n    source.subscribe({\n        next(value: T) { requestAnimationFrame(() => subscriber.next(value)); },\n        error(err: any) { subscriber.error(err); },\n        complete() { subscriber.complete(); },\n    });\n});","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { Injectable, OnDestroy, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\nimport { UP_ARROW, RIGHT_ARROW, DOWN_ARROW, LEFT_ARROW } from '@angular/cdk/keycodes';\n\n@Injectable()\nexport class TabbableListService implements OnDestroy {\n\n    hierarchy: boolean = false;\n    allowAltModifier: boolean = true;\n    allowCtrlModifier: boolean = true;\n    focusKeyManager: FocusKeyManager<TabbableListItemDirective>;\n\n    private _items: QueryList<TabbableListItemDirective>;\n    private _direction: 'horizontal' | 'vertical';\n    private _onDestroy = new Subject<void>();\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    initialize(items: QueryList<TabbableListItemDirective>, direction: 'horizontal' | 'vertical', wrap: boolean): void {\n\n        // store the items\n        this._items = items;\n\n        // create the new focus key manager\n        this.focusKeyManager = new FocusKeyManager(items);\n\n        // set the direction of the list\n        direction === 'vertical' ? this.focusKeyManager.withVerticalOrientation() : this.focusKeyManager.withHorizontalOrientation('ltr');\n        this._direction = direction;\n\n        // enable wrapping if required\n        if (wrap) {\n            this.focusKeyManager.withWrap();\n        }\n\n        // make sure the first item in the list is tabbable\n        this.setFirstItemTabbable();\n\n        // call the init function on each item\n        this._items.forEach(item => item.onInit());\n\n        // if the list changes we need to ensure there is always at least one tabbable item\n        this._items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n\n            // call the on init function on any new items\n            this._items.filter(item => !item.initialized).forEach(item => item.onInit());\n\n            // ensure there is at least one item tabbable at all times\n            this.ensureTabbableItem();\n        });\n    }\n\n    activate(item: TabbableListItemDirective): void {\n\n        if (!item) {\n            return;\n        }\n\n        // get the item index\n        const index = this._items.toArray().indexOf(item);\n\n        // active the item if it is not already active\n        if (this.focusKeyManager.activeItemIndex !== index) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    isItemActive(item: TabbableListItemDirective): boolean {\n        return this.focusKeyManager.activeItem.id === item.id;\n    }\n\n    setFirstItemTabbable(): void {\n        // delay to prevent expression changed after check error\n        setTimeout(() => {\n            if (this._items.first) {\n                this._items.first.tabindex = 0;\n            }\n        });\n    }\n\n    ensureTabbableItem(): void {\n        // check to see if any item is tabbable\n        const active = this._items.find(item => item.tabindex === 0);\n\n        if (!active) {\n            this.setFirstItemTabbable();\n        }\n    }\n\n    focusTabbableItem(): void {\n\n        if (!this._items) {\n            return;\n        }\n\n        // find the item in the list with a tab index\n        const index = this._items.toArray().findIndex(item => item.tabindex === 0);\n\n        // if an item was found then focus it\n        if (index !== -1) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n\n    onKeydown(source: TabbableListItemDirective, event: KeyboardEvent): any {\n\n        // prevent anything happening when modifier keys are pressed if they have been disabled\n        if (!this.allowAltModifier && event.altKey || !this.allowCtrlModifier && event.ctrlKey) {\n            return;\n        }\n\n        this.focusKeyManager.onKeydown(event);\n\n        if (this.hierarchy) {\n\n            if (\n                (this._direction === 'horizontal' && event.keyCode === DOWN_ARROW) ||\n                (this._direction === 'vertical' && event.keyCode === RIGHT_ARROW)\n            ) {\n                source.keyboardExpanded$.next(true);\n            } else if (\n                (this._direction === 'horizontal' && event.keyCode === UP_ARROW) ||\n                (this._direction === 'vertical' && event.keyCode === LEFT_ARROW)\n            ) {\n                if (source.children.length > 0 && source.expanded) {\n                    source.keyboardExpanded$.next(false);\n                } else if (source.parent) {\n                    source.parent.keyboardExpanded$.next(false);\n                }\n            }\n        }\n    }\n\n    sortItemsByHierarchy(list: QueryList<TabbableListItemDirective>): TabbableListItemDirective[] {\n\n        const topLevel: TabbableListItemDirective[] = [];\n\n        // Populating children - clear previously generated collection\n        list.forEach(item => item.children = []);\n\n        // Populating children - map from child -> parent relationship\n        list.forEach(item => {\n            if (item.parent) {\n                item.parent.children.push(item);\n            } else {\n                topLevel.push(item);\n            }\n        });\n\n        // Flatten the tree to produce the cursor key order\n        const result = this.flattenHierarchy(topLevel);\n\n        return result;\n    }\n\n    private flattenHierarchy(items: TabbableListItemDirective[]): TabbableListItemDirective[] {\n        const flatList: TabbableListItemDirective[] = [];\n        items.forEach(item => {\n            item.children.sort((a, b) => a.rank - b.rank);\n            const descendants = this.flattenHierarchy(item.children);\n            flatList.push(item, ...descendants);\n        });\n        return flatList;\n    }\n}\n","import { FocusableOption } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../../common/index';\nimport { TabbableListService } from './tabbable-list.service';\n\nlet nextId = 0;\n\n@Directive({\n    selector: '[uxTabbableListItem]',\n    exportAs: 'ux-tabbable-list-item'\n})\nexport class TabbableListItemDirective implements FocusableOption, OnDestroy {\n\n    @Input() parent: TabbableListItemDirective;\n\n    @Input() rank: number = 0;\n\n    @Input() disabled: boolean = false;\n\n    @Input() expanded: boolean = false;\n\n    @Output() expandedChange = new EventEmitter<boolean>();\n\n    @HostBinding() tabindex: number = -1;\n\n    id: number = nextId++;\n\n    initialized: boolean = false;\n\n    children: TabbableListItemDirective[] = [];\n\n    keyboardExpanded$ = new Subject<boolean>();\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _tabbableList: TabbableListService, private _elementRef: ElementRef) {\n\n        this.keyboardExpanded$.pipe(tick(), takeUntil(this._onDestroy)).subscribe(expanded => {\n\n            // Emit event which may alter the DOM\n            this.expandedChange.emit(expanded);\n\n            // Activate the appropriate item\n            if (expanded) {\n                if (this.children.length > 0) {\n                    this._tabbableList.activate(this.children[0]);\n                }\n            } else {\n                this._tabbableList.activate(this);\n            }\n        });\n    }\n\n    onInit(): void {\n        this.initialized = true;\n\n        this._tabbableList.focusKeyManager.change\n            .pipe(takeUntil(this._onDestroy), map(() => this._tabbableList.isItemActive(this)))\n            .subscribe(active => this.tabindex = active ? 0 : -1);\n    }\n\n    ngOnDestroy(): void {\n\n        // check if this is the currently focused item - if so we need to make another item tabbable\n        if (this.tabindex === 0) {\n            this._tabbableList.setFirstItemTabbable();\n        }\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('focus')\n    focus(): void {\n\n        // apply focus to the element\n        this._elementRef.nativeElement.focus();\n\n        // ensure the focus key manager updates the active item correctly\n        this._tabbableList.activate(this);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._tabbableList.onKeydown(this, event);\n    }\n}","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, ContentChildren, Directive, Input, OnDestroy, QueryList } from '@angular/core';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\nimport { TabbableListService } from './tabbable-list.service';\n\n@Directive({\n    selector: '[uxTabbableList]',\n    exportAs: 'ux-tabbable-list',\n    providers: [TabbableListService]\n})\nexport class TabbableListDirective implements AfterContentInit, OnDestroy {\n\n    /** Determine whether the up/down arrows should be used or the left/right arrows */\n    @Input() direction: 'horizontal' | 'vertical' = 'vertical';\n\n    /** Indicate whether or not focus should loop back to the first element after the last */\n    @Input() wrap: boolean = true;\n\n    /** Indicate whether or not the first item should receive focus on show - useful for modals and popovers */\n    @Input() focusOnShow: boolean = false;\n\n    /** Indicate whether or not focus should be returned to the previous element (only applicable when using focusOnShow) */\n    @Input() returnFocus: boolean = false;\n\n    /** Enabling handling of hierarchical lists via use of the `TabbableListItemDirective.parent` property. */\n    @Input() set hierarchy(value: boolean) { this._tabbableList.hierarchy = value; }\n\n    /** Prevent keyboard interaction when alt modifier key is pressed */\n    @Input() set allowAltModifier(value: boolean) { this._tabbableList.allowAltModifier = value; }\n\n    /** Prevent keyboard interaction when ctrl modifier key is pressed */\n    @Input() set allowCtrlModifier(value: boolean) { this._tabbableList.allowCtrlModifier = value; }\n\n    /** Find all tabbable list items */\n    @ContentChildren(TabbableListItemDirective, { descendants: true }) items: QueryList<TabbableListItemDirective>;\n\n    private _focusedElement: HTMLElement;\n    private _orderedItems: QueryList<TabbableListItemDirective>;\n\n    get focusKeyManager(): FocusKeyManager<TabbableListItemDirective> {\n        return this._tabbableList.focusKeyManager;\n    }\n\n    constructor(private _tabbableList: TabbableListService) { }\n\n    ngAfterContentInit(): void {\n\n        // store the currently focused element\n        this._focusedElement = document.activeElement as HTMLElement;\n\n        if (this._tabbableList.hierarchy) {\n\n            // Sort items in a hierarchy\n            this._orderedItems = new QueryList<TabbableListItemDirective>();\n            this._orderedItems.reset(this._tabbableList.sortItemsByHierarchy(this.items));\n\n            // Ensure that the child items remain sorted\n            this.items.changes.subscribe(() => {\n                this._orderedItems.reset(this._tabbableList.sortItemsByHierarchy(this.items));\n                this._orderedItems.notifyOnChanges();\n            });\n\n        } else {\n\n            // Items are already in order\n            this._orderedItems = this.items;\n        }\n\n        // Set up the focus monitoring\n        this._tabbableList.initialize(this._orderedItems, this.direction, this.wrap);\n\n        // focus the first element if specified\n        if (this.focusOnShow) {\n            this._tabbableList.focusKeyManager.setFirstItemActive();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.returnFocus && this._focusedElement instanceof HTMLElement) {\n            setTimeout(() => this._focusedElement.focus());\n        }\n    }\n\n    focus(): void {\n        if (this._tabbableList.focusKeyManager && this._tabbableList.focusKeyManager.activeItem) {\n            this._tabbableList.focusKeyManager.activeItem.focus();\n        }\n    }\n\n    focusTabbableItem(): void {\n        this._tabbableList.focusTabbableItem();\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { NgModule } from '@angular/core';\nimport { FocusWithinDirective } from './focus-within/focus-within.directive';\nimport { SplitterAccessibilityDirective } from './splitter/splitter-accessibility.directive';\nimport { TabbableListItemDirective } from './tabbable-list/tabbable-list-item.directive';\nimport { TabbableListDirective } from './tabbable-list/tabbable-list.directive';\n\n@NgModule({\n    declarations: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective,\n        SplitterAccessibilityDirective\n    ],\n    imports: [\n        A11yModule\n    ],\n    exports: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective,\n        SplitterAccessibilityDirective\n    ]\n})\nexport class AccessibilityModule {}","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    templateUrl: './number-picker.component.html',\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  templateUrl: './tooltip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { NumberPickerModule } from '../number-picker/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { ColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n    imports: [\n        AccessibilityModule,\n        CommonModule,\n        FormsModule,\n        NumberPickerModule,\n        TooltipModule,\n    ],\n    exports: [ColorPickerComponent],\n    declarations: [ColorPickerComponent],\n    providers: [],\n})\nexport class ColorPickerModule { }\n","import { Directive, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective implements OnDestroy {\n\n    @Input() singleSort: boolean;\n    events = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    toggleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n\n        // apply sorting based on the single or multiple sort\n        this.order = this.singleSort ? this.toggleSingleColumn(sorting) : this.toggleMultipleColumn(sorting);\n\n        // emit the latest order\n        this.events.next(this.order);\n\n        return this.order;\n    }\n\n    private toggleSingleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        return sorting.state === ColumnSortingState.NoSort ? [] : [{ key: sorting.key, state: sorting.state }];\n    }\n\n    private toggleMultipleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        // reorder columns here\n        const idx = this.order.findIndex(column => column.key === sorting.key);\n\n        // if wasnt previously selected add to list\n        if (idx === -1) {\n            return [...this.order, { key: sorting.key, state: sorting.state }];\n        }\n\n        // if we are sorting it change the sorting order\n        if (sorting.state === ColumnSortingState.Ascending || sorting.state === ColumnSortingState.Descending) {\n            return [...this.order.filter(_column => _column.key !== sorting.key), { key: sorting.key, state: sorting.state }];\n        }\n\n        // Otherwise remove the item\n        return this.order.filter(_column => _column.key !== sorting.key);\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState;\n}\n\nexport enum ColumnSortingState {\n    Ascending = 'ascending',\n    Descending = 'descending',\n    NoSort = 'none'\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ColumnSortingDirective, ColumnSortingOrder, ColumnSortingState } from './column-sorting.directive';\n\n@Component({\n    selector: 'ux-column-sorting',\n    templateUrl: './column-sorting.component.html',\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent implements OnDestroy {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Output() stateChange = new EventEmitter<ColumnSortingState>();\n\n    order: number;\n    columnSortingState = ColumnSortingState;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _columnSorter: ColumnSortingDirective) {\n        this._columnSorter.events.pipe(takeUntil(this._onDestroy)).subscribe(event => {\n\n            // if we are sorting this column then find the matching data\n            const columnIdx = event.findIndex(_column => _column.key === this.key);\n\n            // if we are not sorting this column then mark it as NoSort\n            if (columnIdx === -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            this.order = event.length < 2 || columnIdx === -1 ? null : columnIdx + 1;\n\n            // Emit the latest change\n            this.stateChange.emit(this.state);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        switch (this.state) {\n\n            case ColumnSortingState.Ascending:\n                this.state = ColumnSortingState.Descending;\n                break;\n\n            case ColumnSortingState.Descending:\n                this.state = ColumnSortingState.NoSort;\n                break;\n\n            default:\n                this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._columnSorter.toggleColumn({ key: this.key, state: this.state });\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\n\nexport class ConduitSubject {\n\n    private _subject: Subject<any>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(public conduit: ConduitMetadata, private _zone: ConduitZone, public zoneId: string) {\n\n        // store the target subject object\n        this._subject = conduit.subject;\n\n        // check if there are any conduits that have supplied an initial value\n        this.getInitialValue();\n\n        // subscribe to changes to the source subject\n        this._subject.pipe(distinctUntilChanged(conduit.changeDetection), takeUntil(this._onDestroy))\n            .subscribe(this.onOutput.bind(this));\n\n        // subscribe to the zone events and root zone events\n        _zone.getEvents().pipe(filter(event => event.conduit.id === conduit.id), takeUntil(this._onDestroy)).subscribe(this.onInput.bind(this));\n    }\n\n    /** Check all allow inputs to see if there is a value we should initially set the conduit to */\n    getInitialValue(): void {\n\n        // if we do not accept inputs then do nothing\n        if (this.conduit.acceptsInput === false) {\n            return;\n        }\n\n        // return all subjects that are 1) Not itself 2) In a zone that is listed in acceptsInput 3) Have a currentValue set\n        const subjects = this._zone.getSubjects().filter(subject => {\n\n            // If this is itself or if it has not value to give us then do nothing\n            if (subject === this || subject.conduit.id !== this.conduit.id || !subject.conduit.hasOwnProperty('currentValue')) {\n                return false;\n            }\n\n            // if acceptsInput is true then we return every time\n            if (this.conduit.acceptsInput === true) {\n                return true;\n            }\n\n            if (Array.isArray(this.conduit.acceptsInput)) {\n                return this.conduit.acceptsInput.indexOf(subject.zoneId) !== -1;\n            }\n        });\n\n        // if there are no matches then do nothing\n        if (subjects.length === 0) {\n            return;\n        }\n\n        // otherwise sort by the last modified field\n        subjects.sort((subjectOne, subjectTwo) => subjectOne.conduit.lastModified.getTime() < subjectTwo.conduit.lastModified.getTime() ? 1 : -1);\n\n        // get the most recent value\n        this._subject.next(subjects[0].conduit.currentValue);\n    }\n\n    /** This will be triggered when a conduits value has changed */\n    onInput(event: ConduitEvent): void {\n        // if we dont accept input or we emitted this value then do nothing\n        if (this.conduit.acceptsInput === false || event.conduit === this.conduit) {\n            return;\n        }\n\n        // check if the conduit produces output - if not we only do something if we are in the same zone\n        if (event.conduit.producesOutput === false && event.zoneId !== this.zoneId) {\n            return;\n        }\n\n        // check if we only accept inputs from specific zones\n        if (Array.isArray(this.conduit.acceptsInput)) {\n            // check if the event came from an acceptable zone\n            if (!this.conduit.acceptsInput.find(zone => zone === event.zoneId)) {\n                return;\n            }\n        }\n\n        // if required transform the value\n        const outputValue = this.conduit.map ? this.conduit.map(event.value) : event.value;\n\n        // update the subject\n        this._subject.next(outputValue);\n    }\n\n    /** This will be fired when this conduit emits a new value */\n    onOutput(value: any): void {\n\n        // store the most recent value and when it was modified - can be used for any new conduits to lookup a value\n        this.conduit.currentValue = value;\n        this.conduit.lastModified = new Date();\n\n        // check if this should produce output\n        if (this.conduit.producesOutput) {\n            this._zone.emit({ conduit: this.conduit, zoneId: this.zoneId, value });\n        }\n    }\n\n    /** Unsubscribe once this subject is destroyed */\n    destroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","/** This utility is to ensure a all functions with the specified name are called in all super classes */\nexport function invokeSuperFunction(target: object, functionName: string): void {\n    // get all instances of the function\n    const functionList: Function[] = [];\n\n    // store the current prototype we are checking\n    let prototype: any = target;\n\n    // look through every base class and check it\n    do {\n        if (prototype.hasOwnProperty(functionName)) {\n            functionList.push(prototype[functionName]);\n        }\n\n        prototype = prototype.__proto__;\n    } while (prototype.__proto__);\n\n    // augment the top level function to call all the functions\n    target[functionName] = function (...args: any[]) {\n        functionList.forEach(func => func.call(target, ...args));\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitSubject } from './conduit-subject';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\n@Injectable()\nexport class ConduitZone implements OnDestroy {\n\n    /** Create a global subject store */\n    static subjects: ConduitSubject[] = [];\n\n    /** Expose an event stream of new values */\n    static events = new Subject<ConduitEvent>();\n\n    /** Store the zone name */\n    private _zoneId: string;\n\n    ngOnDestroy(): void {\n        // find all conduit subjects that are part of this zone\n        ConduitZone.subjects.filter(_subject => _subject.zoneId === this._zoneId)\n            .forEach(_subject => this.unregisterConduit(_subject.conduit));\n    }\n\n    /** Store reference to the repository and begin watching for and emitting changes */\n    registerConduit(conduit: ConduitMetadata): void {\n        ConduitZone.subjects.push(new ConduitSubject(conduit, this, this._zoneId));\n    }\n\n    /** Destroy a conduit */\n    unregisterConduit(conduit: ConduitMetadata): void {\n        const subject = this.getConduitSubject(conduit.subject);\n\n        if (subject) {\n            // remove the subject from the internal list of conduit subjects\n            ConduitZone.subjects = ConduitZone.subjects.filter(_subject => _subject !== subject);\n\n            // perform all unsubscriptions\n            subject.destroy();\n        }\n    }\n\n    /** Provide the zone with an ID */\n    setZoneId(zoneId: string): void {\n        this._zoneId = zoneId;\n    }\n\n    /** Emit a value to all zones for checking */\n    emit(event: ConduitEvent): void {\n        ConduitZone.events.next(event);\n    }\n\n    /** Retrieve a conduit subsject object from the rxjs subject */\n    getConduitSubject(subject: Subject<any>): ConduitSubject | null {\n        return ConduitZone.subjects.find(_subject => _subject.conduit.subject === subject);\n    }\n\n    /** Get all subjects from all zones */\n    getSubjects(): ConduitSubject[] {\n        return ConduitZone.subjects;\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n\n        // find the conduit with the matching subject\n        const conduitSubject = this.getSubjects().find(_conduit => _conduit.conduit.subject === subject);\n\n        // if a match was found update the properties\n        if (conduitSubject) {\n\n            // update each specified property\n            for (const prop in properties) {\n                conduitSubject.conduit[prop] = properties[prop];\n            }\n        }\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n\n        // register the conduit with the zone\n        this.registerConduit({ ...properties, subject });\n    }\n\n    /** Register all conduits in a component */\n    registerConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.registerConduit({ ...conduit, subject: component[conduit.propertyKey] }));\n        }\n    }\n\n    /** Register all conduits in a component */\n    unregisterConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.unregisterConduit(conduit));\n        }\n    }\n\n    /** Return the global event stream */\n    getEvents(): Subject<ConduitEvent> {\n        return ConduitZone.events;\n    }\n}\n","import { OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { invokeSuperFunction } from './conduit-utils';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\nexport class ConduitComponent implements OnInit, OnDestroy {\n\n    constructor(@Optional() protected _zone: ConduitZone) {\n        // we want to ensure these functions get called even if a class overrides them\n        invokeSuperFunction(this, 'ngOnInit');\n        invokeSuperFunction(this, 'ngOnDestroy');\n    }\n\n    /** We need to register the conduits with the zone when the component is initialised */\n    ngOnInit(): void {\n        // register the conduit in the zone and ensure it gets the correct instance of the target\n        this._zone.registerConduits(this);\n    }\n\n    /** We need to unregister the conduits when the component is destroyed */\n    ngOnDestroy(): void {\n        this._zone.unregisterConduits(this);\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n        this._zone.setConduitProperties(subject, properties);\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n        this._zone.createConduit(subject, properties);\n    }\n\n}\n","import { OnInit } from '@angular/core';\nimport { ConduitComponent } from './conduit.component';\n\nexport abstract class ConduitZoneComponent extends ConduitComponent implements OnInit {\n    abstract zoneId: string;\n\n    ngOnInit(): void {\n        this._zone.setZoneId(this.zoneId);\n    }\n}\n","export interface ConduitProperties {\n    id: number | string;\n    acceptsInput?: boolean | string[];\n    producesOutput?: boolean;\n    changeDetection?: (x: any, y: any) => boolean;\n    map?: any;\n}\n\nexport const defaultConduitProps: Partial<ConduitProperties> = {\n    acceptsInput: true,\n    producesOutput: true,\n};\n","import { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties, defaultConduitProps } from './interfaces/conduit-properties';\n\n/** Expose the property that conduits will be stored in */\nexport const CONDUITS = '_conduits';\n\n/** Create the conduit property decorator */\nexport function Conduit(properties: ConduitProperties | Function): PropertyDecorator {\n    return (target: Object, propertyKey: string) => {\n\n        if (typeof properties === 'function') {\n            properties = properties.call(null);\n        }\n\n        // if the target does not already have a conduit list then create one\n        if (!target.hasOwnProperty(CONDUITS)) {\n            Object.defineProperty(target, CONDUITS, { value: [] });\n        }\n\n        // add the conduit to the list ensuring all required properties are provided\n        target[CONDUITS].push({ ...defaultConduitProps, ...properties, target, propertyKey } as ConduitMetadata);\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _mouseEvent: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(delay(0), map((dimensions: DashboardDimensions) => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n\n    get options() {\n        return this.options$.getValue();\n    }\n\n    get widgets() {\n        return this.widgets$.getValue();\n    }\n\n    get stacked() {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions() {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth() {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    constructor() {\n        this.layout$.subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() * w1.getRow();\n            const w2Position = w2.getColumn() * w2.getRow();\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._mouseEvent = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._mouseEvent.pageX - pageXOffset;\n        const mousePosY = this._mouseEvent.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._mouseEvent = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._mouseEvent = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._mouseEvent.pageX && action.event.pageY === this._mouseEvent.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._mouseEvent.pageX;\n        const mouseY = action.event.pageY - this._mouseEvent.pageY;\n\n        // store the latest event\n        this._mouseEvent = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): void {\n        this._cache = this.widgets.map(widget => ({ id: widget.id, column: widget.getColumn(), row: widget.getRow() }));\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false): void {\n        this._cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    let requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    let available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            let distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() - 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveRight(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        const rounding = this._actionWidget.direction === ActionDirection.Left ||\n            this._actionWidget.direction === ActionDirection.Top ? Rounding.RoundDownBelowHalf : Rounding.RoundUpOverHalf;\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard',\n    templateUrl: './dashboard.component.html',\n    providers: [DashboardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements AfterViewInit {\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    constructor(public dashboardService: DashboardService) {\n        dashboardService.layout$.subscribe(layout => this.layoutChange.emit(layout));\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Component, Input, OnInit, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    templateUrl: './dashboard-widget.component.html'\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _subscription: Subscription;\n\n    constructor(public dashboardService: DashboardService) {\n        this._subscription = dashboardService.options$.subscribe(() => this.update());\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time \n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeStart({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class DragService implements OnDestroy {\n\n    /** Emit when dragging begins */\n    onDragStart = new Subject<UxDragEvent>();\n\n    /** Emit when dragging moves */\n    onDrag = new Subject<UxDragEvent>();\n\n    /** Emit when dragging ends */\n    onDragEnd = new Subject<UxDragEvent>();\n\n    /** Emit when the user is dragging over the drop area */\n    onDropEnter = new Subject<void>();\n\n    /** Emit when the user is dragging out of the drop area */\n    onDropLeave = new Subject<void>();\n\n    /** Emit when a drop occurs */\n    onDrop = new Subject<any>();\n\n    /** Destroy all observables */\n    ngOnDestroy(): void {\n        this.onDragStart.complete();\n        this.onDrag.complete();\n        this.onDragEnd.complete();\n        this.onDrop.complete();\n        this.onDropEnter.complete();\n        this.onDropLeave.complete();\n    }\n\n}\n\nexport type UxDragEvent = { group?: string, event?: MouseEvent, data?: any };","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DragService } from './drag.service';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    /** Detemine if we should show a clone when dragging */\n    @Input() clone: boolean = false;\n\n    /** Define the group the drag event belongs to */\n    @Input() group: string;\n\n    /** Associate some data with the drag event */\n    @Input() model: any;\n\n    /** Allow the dragging to be enabled/disabled */\n    @Input() draggable: boolean = true;\n\n    /** Emit an event when dragging starts */\n    @Output() onDragStart = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the mouse moves while dragging */\n    @Output() onDrag = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the dragging finishes */\n    @Output() onDragEnd = new EventEmitter<void>();\n\n    /** Emit when the user drops an item in a drop area */\n    @Output() onDrop = new EventEmitter<any>();\n\n    /** Emit when the user drags over a drop area */\n    @Output() onDropEnter = new EventEmitter<void>();\n\n    /** Emit when the user drags out of a drop area */\n    @Output() onDropLeave = new EventEmitter<void>();\n\n    /** Store the element we have cloned */\n    private _clone: Element;\n\n    /** Store the dragging state */\n    private _isDragging: boolean = false;\n\n    /** Store the mouse offset for the cloned element position */\n    private _offset: { x: number, y: number };\n\n    /** Create an observable from the mouse down event */\n    private _mousedown$ = fromEvent<MouseEvent>(this._elementRef.nativeElement, 'mousedown');\n\n    /** Create an observable from the mouse move event */\n    private _mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n\n    /** Create an observable from the mouse up event */\n    private _mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n    /** Use an observable to unsubscribe from all subscriptions */\n    protected _onDestroy = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, private _ngZone: NgZone, private _renderer: Renderer2, private _drag: DragService) {\n\n        // ensure all mouse down events on the object are captured\n        this._mousedown$.pipe(filter(() => this.draggable), takeUntil(this._onDestroy)).subscribe(this.dragStart.bind(this));\n\n        // emit the outputs when drag events occur\n        _drag.onDragStart.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(dragEvent => this.onDragStart.emit(dragEvent.event));\n\n        _drag.onDrag.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(dragEvent => this.onDrag.emit(dragEvent.event));\n\n        _drag.onDragEnd.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDragEnd.emit());\n\n        _drag.onDrop.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(event => this.onDrop.emit(event));\n\n        _drag.onDropEnter.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDropEnter.emit());\n\n        _drag.onDropLeave.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDropLeave.emit());\n    }\n\n    /** Emit events and create clone when drag starts */\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this.clone) {\n            // clone the node\n            this.cloneNode(event);\n        }\n\n        // apply a class to the element being dragged\n        this._renderer.addClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // store the dragging state\n        this._isDragging = true;\n\n        // emit the drag start event\n        this._ngZone.run(() => this._drag.onDragStart.next({ event, group: this.group, data: this.model }));\n\n        this._mousemove$.pipe(takeUntil(this._mouseup$), takeUntil(this._onDestroy))\n            .subscribe(this.dragMove.bind(this), null, this.dragEnd.bind(this));\n    }\n\n    /** Emit event and update clone position when dragging moves */\n    dragMove(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this._clone) {\n            this.updateNodePosition(event);\n        }\n\n        // emit the drag start event\n        this._ngZone.run(() => this._drag.onDrag.next({ event, group: this.group, data: this.model }));\n    }\n\n    /** Emit event and destroy clone when dragging ends */\n    dragEnd(): void {\n        // if there was a clone, remove it\n        if (this._clone) {\n            this._renderer.removeChild(document.body, this._clone);\n            this._clone = null;\n        }\n\n        // remove the dragging class\n        this._renderer.removeClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // emit the on drag end output\n        this._ngZone.run(() => this._drag.onDragEnd.next({ group: this.group, data: this.model }));\n\n        // store the dragging state\n        this._isDragging = false;\n    }\n\n    /** Create an exact clone of an element */\n    cloneNode(event: MouseEvent): void {\n\n        // duplicate the node\n        this._clone = this._elementRef.nativeElement.cloneNode(true);\n\n        // store the position within the draggable element\n        const { top, left, width } = this._elementRef.nativeElement.getBoundingClientRect();\n        this._offset = { x: event.clientX - left, y: event.clientY - top };\n\n        // inline all styles so it looks identical regardless of its position in the DOM\n        this.inlineStyles(this._elementRef.nativeElement, this._clone);\n\n        // IE doesn't always calculate the correct width value using getComputedStyles... use bounding client value instead\n        this._renderer.setStyle(this._clone, 'width', width + 'px');\n\n        // ensure we can easily position the node an it is above all other elements\n        this._renderer.setAttribute(this._clone, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._clone, 'position', 'absolute');\n        this._renderer.setStyle(this._clone, 'z-index', '99999');\n\n        // apply a class to allow custom styling\n        this._renderer.addClass(this._clone, 'ux-drag-dragging-clone');\n\n        // insert the cloned element\n        this._renderer.appendChild(document.body, this._clone);\n\n        // set the cloned element initial position\n        this.updateNodePosition(event);\n    }\n\n    /** Position the clone relative to the mouse */\n    updateNodePosition(event: MouseEvent): void {\n        this._renderer.setStyle(this._clone, 'left', (event.pageX - this._offset.x) + 'px');\n        this._renderer.setStyle(this._clone, 'top', (event.pageY - this._offset.y) + 'px');\n    }\n\n    /** Inline all styles to ensure styling is consistent regardless of its position in the dom */\n    inlineStyles(source: Element, target: Element): void {\n        // get all the computed styles from the source element\n        const styles = getComputedStyle(source);\n\n        // inline every specified style\n        for (let idx = 0; idx < styles.length; idx++) {\n            const style = styles.item(idx);\n\n            if (style !== undefined) {\n                this._renderer.setStyle(target, styles[idx], styles[style]);\n            }\n        }\n\n        // ensure we dont capture any move events\n        this._renderer.setStyle(target, 'pointer-events', 'none');\n\n        // do the same for all the child elements\n        for (let idx = 0; idx < source.children.length; idx++) {\n            this.inlineStyles(source.children[idx], target.children[idx]);\n        }\n    }\n\n    /** Unsubscribe from all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { Directive, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DragService, UxDragEvent } from './drag.service';\n\n@Directive({\n    selector: '[uxDrop]',\n    host: {\n        '[class.ux-drop-hover]': 'isMouseOver && isDragging'\n    }\n})\nexport class DropDirective implements OnDestroy {\n\n    /** Define a specific group of dragged items to listen to */\n    @Input() group: string | string[];\n\n    /** Emit the model of the item dropped */\n    @Output() onDrop = new EventEmitter<any>();\n\n    /** Determine whether or not the mouse is within the drop region */\n    isMouseOver: boolean = false;\n\n    /** Determine whether or not we are currently dragging an item */\n    isDragging: boolean = false;\n\n    /** Store the group of the dragged item */\n    private _group: string;\n\n    /** Ensure we destroy all subscriptions */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _dragService: DragService) {\n        // subscribe to drag events\n        _dragService.onDragStart.pipe(takeUntil(this._onDestroy), filter(event => this.isGroupAllowed(event.group))).subscribe(this.onDragStart.bind(this));\n        _dragService.onDragEnd.pipe(takeUntil(this._onDestroy), filter(event => this.isGroupAllowed(event.group))).subscribe(this.onDragEnd.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Update the mouse over state */\n    @HostListener('mouseenter')\n    onMouseOver(): void {\n        if (this.isGroupAllowed(this._group)) {\n            this.isMouseOver = true;\n\n            // emit that we are over a drop area\n            this._dragService.onDropEnter.next();\n        }\n    }\n\n    /** Update the mouse over state */\n    @HostListener('mouseleave')\n    onMouseLeave(): void {\n\n        // always ensure this value is reset\n        this.isMouseOver = false;\n\n        // only emit the dropd leave event when appropriate\n        if (this.isGroupAllowed(this._group)) {\n            this._dragService.onDropLeave.next();\n        }\n    }\n\n    /** Update the dragging state */\n    onDragStart(event: UxDragEvent): void {\n        this.isDragging = true;\n        this._group = event.group;\n    }\n\n    /** Update the dragging state */\n    onDragEnd(event: UxDragEvent): void {\n\n        // update the dragging state\n        this.isDragging = false;\n\n        // clear the cached group\n        this._group = null;\n\n        // if the mouse is over and it is in an allowed group emit the dop event\n        if (this.isMouseOver && this.isGroupAllowed(event.group)) {\n            this.onDrop.emit(event.data);\n            this._dragService.onDrop.next(event.data);\n        }\n    }\n\n    /** Determine whether or not the event is part of the specified groups */\n    private isGroupAllowed(group: string): boolean {\n\n        // if no group specified allow all groups\n        if (!this.group) {\n            return true;\n        }\n\n        // if it is an array then ensure it is allowed\n        if (Array.isArray(this.group)) {\n            return !!this.group.find(_group => _group === group);\n        }\n\n        return this.group === group;\n    }\n}","import { NgModule } from '@angular/core';\nimport { DragDirective } from './drag.directive';\nimport { DragService } from './drag.service';\nimport { DropDirective } from './drop.directive';\n\n@NgModule({\n    exports:      [DragDirective, DropDirective],\n    declarations: [DragDirective, DropDirective],\n    providers:    [DragService]\n})\nexport class DragModule { }\n","import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\nimport { DragService } from '../../../directives/drag/index';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef,\n        ngZone: NgZone, renderer: Renderer2, drag: DragService) {\n\n        super(elementRef, ngZone, renderer, drag);\n\n        this.onDragStart.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.onDrag.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.onDragEnd.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DragModule } from '../../directives/drag/index';\n\nconst DECLARATIONS: any[] = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    templateUrl: './spin-button.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n    transform(value: number, pad: boolean): string | number {\n        return value < 10 && pad ? '0' + value : value;\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, OnDestroy, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    templateUrl: './time-picker.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { DateTimePickerTimezone } from './date-time-picker.service';\n\n\n/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort } from './date-time-picker.utils';\nimport { DateTimePickerTimezone } from './date-time-picker.service';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n\n    timezones: DateTimePickerTimezone[] = [\n        { name: 'GMT-11', offset: 660 },\n        { name: 'GMT-10', offset: 600 },\n        { name: 'GMT-9', offset: 540 },\n        { name: 'GMT-8', offset: 480 },\n        { name: 'GMT-7', offset: 420 },\n        { name: 'GMT-6', offset: 360 },\n        { name: 'GMT-5', offset: 300 },\n        { name: 'GMT-4', offset: 240 },\n        { name: 'GMT-3', offset: 180 },\n        { name: 'GMT-2', offset: 120 },\n        { name: 'GMT-1', offset: 60 },\n        { name: 'GMT', offset: 0 },\n        { name: 'GMT+1', offset: -60 },\n        { name: 'GMT+2', offset: -120 },\n        { name: 'GMT+3', offset: -180 },\n        { name: 'GMT+4', offset: -240 },\n        { name: 'GMT+5', offset: -300 },\n        { name: 'GMT+6', offset: -360 },\n        { name: 'GMT+7', offset: -420 },\n        { name: 'GMT+8', offset: -480 },\n        { name: 'GMT+9', offset: -540 },\n        { name: 'GMT+10', offset: -600 },\n        { name: 'GMT+11', offset: -660 },\n        { name: 'GMT+12', offset: -720 }\n    ];\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config.showDate);\n    showTime$ = new BehaviorSubject<boolean>(this._config.showTime);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config.showTimezone);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config.showSeconds);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config.showMeridian);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config.showSpinners);\n    weekdays$ = new BehaviorSubject<string[]>(this._config.weekdays);\n    nowBtnText$ = new BehaviorSubject<string>(this._config.nowBtnText);\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config.timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    private _subscription: Subscription;\n\n    constructor(private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        return this._config.timezones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService, DateTimePickerTimezone } from './date-time-picker.service';\nimport { dateComparator, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  templateUrl: './date-time-picker.component.html',\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  private _timezone: DateTimePickerTimezone;\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _subscription = new Subscription();\n\n  constructor(public datepicker: DateTimePickerService) {\n    const valueChange = datepicker.selected$.pipe(distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    const timezoneChange = datepicker.timezone$.pipe(distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify, months } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n    \n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  templateUrl: './day-view.component.html',\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    templateUrl: './header.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, monthsShort, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n            \n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    templateUrl: './month-view.component.html',\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    templateUrl: './time-view.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  templateUrl: './year-view.component.html',\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n    @Input() focusIfScroll: boolean = true;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus({ preventScroll: !this.focusIfScroll });\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent],\n    providers: [\n        DateTimePickerConfig\n    ]\n})\nexport class DateTimePickerModule { }\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    templateUrl: './ebox.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { Injectable } from '@angular/core';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n\n                case 'Enter':\n                    if (typeahead.selectOnEnter) {\n                        typeahead.selectHighlighted();\n                    }\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    templateUrl: 'typeahead.component.html',\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input()\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n    @Input() selectOnEnter: boolean = false;\r\n    @Input() loading = false;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n    highlightedKey: string = null;\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _changeDetector: ChangeDetectorRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n\r\n                // Invoke the callback which may return an array or a promise.\r\n                const arrayOrPromise = this.options(pageNum, pageSize, filter);\r\n\r\n                // Map the results to an array of TypeaheadVisibleOption.\r\n                return Promise.resolve(arrayOrPromise).then(newOptions => {\r\n\r\n                    if (!Array.isArray(newOptions)) {\r\n                        return newOptions;\r\n                    }\r\n\r\n                    return newOptions.map((option: any) => {\r\n                        return {\r\n                            value: option,\r\n                            key: this.getKey(option)\r\n                        };\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.openChange.emit(next);\r\n\r\n            if (next) {\r\n                this.initOptions();\r\n            }\r\n        });\r\n\r\n        this.highlighted$.pipe(takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.highlightedKey = next ? next.key : null;\r\n            this.highlightedChange.emit(next ? next.value : null);\r\n        });\r\n\r\n        combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n            });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        const displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n            this._changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlight(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    selectHighlighted(): void {\r\n        if (this.highlighted) {\r\n            this.select({ value: this.highlighted, key: this.getKey(this.highlighted)});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n\r\n        this._changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableHandle]'\r\n})\r\nexport class ReorderableHandleDirective { }\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableModel]'\r\n})\r\nexport class ReorderableModelDirective {\r\n\r\n    // allow the user to specify a model for the item - allows use with ngFor\r\n    @Input() uxReorderableModel: any;\r\n\r\n    // this can be used to identify which instance of the directive relates to which element\r\n    constructor(public elementRef: ElementRef) { }\r\n}\r\n","// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport { Drake } from 'dragula';\n// @ts-ignore\nimport * as dragulaNamespace from 'dragula/dist/dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ReorderEvent } from '../../directives/reorderable/index';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    templateUrl: './facet-container.component.html'\n})\nexport class FacetContainerComponent implements OnDestroy {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    constructor(private _announcer: LiveAnnouncer) { }\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet, tag?: HTMLElement): void {\n\n        // find the index of the item in the selected array\n        const idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n\n        // announce the facet removal\n        this._announcer.announce(`Option ${facet.title} deselected.`, 'assertive');\n\n        // focus another tag if there is one\n        if (tag) {\n            const sibling = tag.previousElementSibling || tag.nextElementSibling;\n\n            // if there is a sibling then focus it\n            if (sibling) {\n                (sibling as HTMLElement).focus();\n            }\n        }\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n\n        // announce the facet removal\n        this._announcer.announce(`All options deselected.`, 'assertive');\n    }\n\n    trackBy(_index: number, facet: Facet): string | number {\n        return facet.id || facet.title;\n    }\n\n    shiftRight(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, 1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved down.`);\n    }\n\n    shiftLeft(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, -1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved up.`);\n    }\n\n    private shiftFacet(facet: Facet, distance: number) {\n        const index = this.facets.indexOf(facet);\n        const target = index + distance;\n\n        // Ensure the move is valid\n        if (target < 0 || target === this.facets.length) {\n            return;\n        }\n\n        // Perform the move\n        this.facets.splice(index, 1);\n        this.facets.splice(target, 0, facet);\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}\n\nexport interface FacetReorderEvent extends ReorderEvent {\n    index: number;\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        const index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    templateUrl: './facet-header.component.html',\n    host: {\n        'role': 'button',\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()',\n        '[attr.aria-expanded]': 'expanded',\n        '[attr.aria-label]': 'header + \\' Facet: Activate to \\' + (expanded ? \\'collapse\\' : \\'expand\\')'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;\n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list-item',\n    templateUrl: './facet-check-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetCheckListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet = null;\n    @Input() selected: boolean = false;\n    @Input() tabbable: boolean = false;\n    @Output() selectedChange = new EventEmitter<Facet>();\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() itemBlur = new EventEmitter<void>();\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : '';\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, QueryList, ViewChildren } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\nimport { FacetCheckListItemComponent } from './check-list-item/facet-check-list-item.component';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    templateUrl: './facet-check-list.component.html'\n})\nexport class FacetCheckListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n\n    @ViewChildren(FacetCheckListItemComponent) options: QueryList<FacetCheckListItemComponent>;\n\n    isFocused: boolean = false;\n    activeIndex: number = 0;\n\n    private _focusKeyManager: FocusKeyManager<FacetCheckListItemComponent>;\n\n    ngAfterViewInit(): void {\n        this._focusKeyManager = new FocusKeyManager(this.options)\n            .withVerticalOrientation();\n\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list-item',\n    templateUrl: './facet-typeahead-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetTypeaheadListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet;\n    @Input() selected: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() tabbable: boolean = false;\n\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() selectedChange = new EventEmitter<Facet>();\n\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : null;\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, ElementRef, Input, Pipe, PipeTransform, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map, mergeMap, takeUntil, tap } from 'rxjs/operators';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { FacetContainerComponent } from '../facet-container.component';\nimport { Facet } from '../models/facet';\nimport { FacetTypeaheadListItemComponent } from './typeahead-list-item/facet-typeahead-list-item.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    templateUrl: './facet-typeahead-list.component.html'\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    @Input()\n    set typeaheadConfig(config: FacetTypeaheadListConfig) {\n        this._config = { placeholder: '', maxResults: 50, minCharacters: 1, ...config };\n    }\n\n    get typeaheadConfig(): FacetTypeaheadListConfig {\n        return this._config;\n    }\n\n    @ViewChildren(FacetTypeaheadListItemComponent) options: QueryList<FacetTypeaheadListItemComponent>;\n\n    query$ = new BehaviorSubject<string>('');\n    loading: boolean = false;\n    activeIndex: number = 0;\n    typeaheadId: string = `ux-facet-typeahead-${uniqueId++}`;\n    typeaheadOpen: boolean = false;\n    typeaheadOptions: Facet[] = [];\n    highlightedElement: HTMLElement;\n\n    private _config: FacetTypeaheadListConfig = { placeholder: '', maxResults: 50, minCharacters: 1 };\n    private _focusKeyManager: FocusKeyManager<FacetTypeaheadListItemComponent>;\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, facetContainer: FacetContainerComponent, elementRef: ElementRef, private _announcer: LiveAnnouncer) {\n        super(facetContainer, elementRef);\n    }\n\n    ngAfterViewInit(): void {\n\n        // set up search query subscription\n        this.query$.pipe(\n            takeUntil(this._onDestroy),\n            tap(() => {\n                this.loading = true;\n                this.typeaheadOptions = [];\n            }),\n            mergeMap(() => this.getFacetObservable().pipe(map(facets => {\n                return facets.filter(facet => !facet.disabled && !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .slice(0, this._config.maxResults);\n            })))\n        ).subscribe(facets => {\n            this.loading = false;\n            this.typeaheadOptions = facets;\n        });\n\n        this._focusKeyManager = new FocusKeyManager(this.options).withVerticalOrientation();\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n\n    /** Only show typeahead if we have enough characters */\n    updateTypeahead(query: string = ''): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n    }\n\n    getFacetObservable(): Observable<Facet[]> {\n        return this.facets instanceof Observable ? this.facets : of(this.facets);\n    }\n\n    select(event: TypeaheadOptionEvent) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === event.option)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(event.option);\n\n        // clear the typeahead\n        this.query$.next('');\n\n        // announce the selected facet\n        this._announcer.announce(`${(event.option as Facet).title} selected.`);\n    }\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListItemComponent } from './facet-check-list/check-list-item/facet-check-list-item.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetTypeaheadHighlight, FacetTypeaheadListComponent } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FacetTypeaheadListItemComponent } from './facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetCheckListItemComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadListItemComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        A11yModule,\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.subscribe((next) => {\n            if (next === this) {\n                this.setActive();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n\n    private _document: any;\n\n    private _subscription = new Subscription();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) document: any\n    ) {\n        this._document = document;\n    }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this._subscription.add(\n                this.toggleButton.keyEnter.subscribe(this.focusFirst.bind(this))\n            );\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this._subscription.add(\n            this.items.changes.subscribe(() => {\n                this._itemsOrdered = this.items.toArray();\n            })\n        );\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.key) {\n\n            case 'ArrowUp':\n            case 'Up':\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case 'ArrowDown':\n            case 'Down':\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case 'ArrowLeft':\n            case 'Left':\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'ArrowRight':\n            case 'Right':\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'Home':\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case 'End':\n                this.moveLast();\n                handled = true;\n                break;\n\n            case 'Escape':\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.key)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => {\n                this.keyEnter.emit();\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: string): boolean {\n        switch (key) {\n            case 'Enter':\n            case ' ':\n                return true;\n\n            case 'ArrowUp':\n            case 'Up':\n                return this.menuPosition === 'top';\n\n            case 'ArrowDown':\n            case 'Down':\n                return this.menuPosition === 'bottom';\n\n            case 'ArrowLeft':\n            case 'Left':\n                return this.menuPosition === 'left';\n\n            case 'ArrowRight':\n            case 'Right':\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-filter-container',\n    templateUrl: './filter-container.component.html'\n})\nexport class FilterContainerComponent {\n\n    @Input() filters: Filter[] = [];\n    @Input() clearTooltip: string;\n    @Output() filtersChange: EventEmitter<Filter[]> = new EventEmitter<Filter[]>();\n    @Output() events: EventEmitter<FilterEvent> = new EventEmitter<FilterEvent>();\n\n\n    addFilter(filter: Filter): void {\n        this.filters.push(filter);\n        this.events.next(new FilterAddEvent(filter));\n        this.filtersChange.emit(this.filters);\n    }\n\n    removeFilter(filter: Filter): void {\n        let idx = this.filters.findIndex(filters => filters === filter);\n\n        if (idx !== -1) {\n            this.filters.splice(idx, 1);\n            this.events.next(new FilterRemoveEvent(filter));\n            this.filtersChange.emit(this.filters);\n        }\n    }\n\n    removeAll(): void {\n        this.events.next(new FilterRemoveAllEvent());\n    }\n\n}\n\nexport interface Filter {\n    group: string;\n    title: string;\n    name: string;\n    initial?: boolean;\n}\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveAllEvent {\n}\n\nexport type FilterEvent = FilterAddEvent | FilterRemoveEvent | FilterRemoveAllEvent;","\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Filter, FilterContainerComponent, FilterRemoveAllEvent } from '../filter-container.component';\n\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent, private _announcer: LiveAnnouncer) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.addFilter(_filter);\n            this._announcer.announce(`Filter ${_filter.name} selected.`);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.removeFilter(_filter);\n        this._announcer.announce(`Filter ${_filter.name} deselected.`);\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    templateUrl: './filter-dropdown.component.html',\n})\nexport class FilterDropdownComponent extends FilterBaseComponent {\n\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    removeFilter(): void {\n        super.removeFilter(this.selected);\n        this.selected = this.initial;\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n    }\n\n    selectFilter(filter: Filter, event: MouseEvent) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n}","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, Input, Pipe, PipeTransform, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter, FilterContainerComponent } from '../filter-container.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    templateUrl: './filter-dynamic.component.html',\n    host: {\n        '(document:click)': 'clickOff($event)',\n    }\n})\nexport class FilterDynamicComponent extends FilterBaseComponent {\n\n    @Input() filters: Filter[];\n    @Input() initial: Filter;\n\n    @Input() set options(options: FilterDynamicListConfig) {\n        this._config = {... this.defaultOptions, ...options };\n    }\n\n    get options(): FilterDynamicListConfig {\n        return this._config;\n    }\n\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    defaultOptions: FilterDynamicListConfig = {\n        placeholder: '',\n        minCharacters: 3,\n        maxResults: Infinity\n    };\n\n    typeaheadId: string = `ux-filter-dynamic-typeahead-${uniqueId++}`;\n    query$ = new BehaviorSubject<string>('');\n    selected: Filter;\n    showTypeahead: boolean = true;\n    typeaheadItems: string[] = [];\n    highlightedElement: HTMLElement;\n    typeaheadOpen: boolean = false;\n\n    private _config: FilterDynamicListConfig = { ...this.defaultOptions };\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, container: FilterContainerComponent, announcer: LiveAnnouncer) {\n        super(container, announcer);\n    }\n\n    getItems(): string[] {\n        const query = this.query$.value.toLowerCase();\n\n        return this.filters.filter(item => item !== this.initial && item.name.toLowerCase().indexOf(query) !== -1)\n            .map(item => item.name)\n            .slice(0, this._config.maxResults);\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n        this.typeaheadItems = this.getItems();\n\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n        this.removeFilter();\n        const idx = this.filters.findIndex(filter => filter.name === typeaheadOption.value);\n        this.selected = this.filters[idx];\n        this.addFilter(this.selected);\n        this.query$.next('');\n        this.dropdown.hide();\n    }\n\n    clickOff(event: MouseEvent) {\n\n        let target = event.target as HTMLElement;\n        let hideDropdown = true;\n\n        while (target && target.nodeName !== 'BODY') {\n            if (target.classList.contains('ux-dynamic-filter')) {\n                hideDropdown = false;\n                break;\n            } else {\n                target = target.parentElement;\n            }\n        }\n\n        if (hideDropdown) {\n            this.query$.next('');\n            this.dropdown.hide();\n        }\n\n    }\n\n    removeFilter(): void {\n        if (this.selected !== this.initial) {\n            super.removeFilter(this.selected);\n            this.selected = this.initial;\n        }\n        this.query$.next('');\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n    updateTypeahead(query: string): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n        this.typeaheadItems = this.getItems();\n    }\n\n    select(event: TypeaheadOptionEvent): void {\n        // find the filter with the matching name\n        const filter = this.filters.find(_filter => _filter.name === event.option);\n\n        if (filter) {\n            this.selectFilter(filter);\n        }\n    }\n\n}\n\nexport interface FilterDynamicListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    maxIndividualItems?: number;\n}\n\n@Pipe({\n    name: 'filterTypeaheadHighlight'\n})\nexport class FilterTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        const regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"filter-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/typeahead.module';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent, FilterTypeaheadHighlight } from './filter-dynamic/filter-dynamic.component';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent,\n    FilterTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        MenuNavigationModule,\n        CommonModule,\n        TypeaheadModule,\n        A11yModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    templateUrl: './flippable-card.component.html',\n    host: {\n        'tabindex': '0',\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean): void {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped(): void {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click')\n    clickTrigger(): void {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter')\n    hoverEnter(): void {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave')\n    hoverExit(): void {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    @HostListener('keydown.spacebar', ['$event']) // IE uses different naming\n    onKeyDown(event: KeyboardEvent): void {\n        if (this.trigger !== 'manual') {\n            this.toggleFlipped();\n            event.preventDefault();\n        }\n    }\n}\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, HostListener, Input, OnDestroy, QueryList, Output, EventEmitter } from '@angular/core';\nimport { TooltipDirective } from 'ngx-bootstrap/tooltip';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    templateUrl: './floating-action-buttons.component.html',\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    @Input() direction: FloatingActionButtonDirection = 'top';\n    @ContentChildren(TooltipDirective) tooltips: QueryList<TooltipDirective>;\n    @Output() openChange = new EventEmitter<boolean>();\n\n    private _subscription: Subscription = new Subscription();\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) {\n        this._subscription.add(this.fab.open$.subscribe(value => this.openChange.emit(value)));\n    }\n\n    ngAfterViewInit(): void {\n        this._subscription.add(this.fab.open$.pipe(filter(open => open === false))\n            .subscribe(() => this.tooltips.forEach(tooltip => tooltip.hide())));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';","import { Attribute, ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    templateUrl: './floating-action-button.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent {\n\n    @Input() icon: string;\n    @HostBinding() tabindex = 1;\n\n    primary: boolean = false;\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService) {\n        this.primary = primary !== null;\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HierarchyBarService {\r\n\r\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _root: HierarchyBarNode;\r\n    private _nodes: HierarchyBarNode[] = [];\r\n\r\n    /**\r\n     * Store the root node of the hierarchy tree\r\n     */\r\n    setRootNode(root: HierarchyBarNode) {\r\n\r\n        // store the root node\r\n        this._root = root;\r\n\r\n        // create a flat structure of nodes\r\n        this._nodes = this.getNodeList(root);\r\n\r\n        // flatten the array - based on the selected node\r\n        this.nodes$.next(this.getSelectedChildren(root));\r\n    }\r\n\r\n    /**\r\n     * Select a node. This causes all nodes to be\r\n     * deselected and the path to the selected node\r\n     * to be selected\r\n     */\r\n    selectNode(node: HierarchyBarNode): void {\r\n\r\n        // deselect all nodes\r\n        this.deselectAll();\r\n\r\n        // ensure the current node is selected and its parents\r\n        this.select(node);\r\n\r\n        // emit a new node list to trigger change detection\r\n        this.nodes$.next(this.getSelectedChildren(this._root));\r\n    }\r\n\r\n    /**\r\n     * Handles getting children with support for both arrays and observables\r\n     */\r\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\r\n\r\n        if (Array.isArray(node.children)) {\r\n            return of({ loading: false, children: node.children });\r\n        }\r\n\r\n        const children$: Observable<HierarchyBarNode[]> = node.children;\r\n\r\n        // if it is an observable then handle loading\r\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\r\n            // emit initial value\r\n            observer.next({ loading: true, children: [] });\r\n\r\n            // now wait until the children observable completes\r\n            children$.pipe(first()).subscribe(children => {\r\n\r\n                // replace the observable with an array for future loading\r\n                node.children = children;\r\n\r\n                // rebuild the node tree\r\n                this.setRootNode(this._root);\r\n\r\n                // emit the latest value\r\n                observer.next({ loading: false, children: children });\r\n\r\n                // close the observable stream\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Traverses all the parents to ensure they are selected\r\n     */\r\n    private select(node: HierarchyBarNode): void {\r\n        node.selected = true;\r\n\r\n        if (node.parent) {\r\n            this.select(node.parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselects all nodes\r\n     */\r\n    private deselectAll(): void {\r\n        this._nodes.forEach(node => node.selected = false);\r\n    }\r\n\r\n    /**\r\n     * Gets all the nodes in the tree as a flat array.\r\n     * It also stores the parent node in a parent property\r\n     * on the node for easy traversal in both directions\r\n     */\r\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        // if there are no children then return only itself\r\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\r\n            return [node];\r\n        }\r\n\r\n        // store the parent property\r\n        node.children.forEach(child => child.parent = node);\r\n\r\n        // get all descendants of this node\r\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\r\n\r\n        return [node, ...descendants];\r\n    }\r\n\r\n    /**\r\n     * Gets all selected nodes from the parent node.\r\n     */\r\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        if (node.children instanceof Observable) {\r\n            return [node];\r\n        }\r\n\r\n        // get the children - and account for when there is none\r\n        const children = node.children || [];\r\n\r\n        // check if any child is selected\r\n        const child = children.find(_child => _child.selected);\r\n\r\n        // return the remaining chain of selected items\r\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\r\n    }\r\n}\r\n\r\nexport interface HierarchyBarNode {\r\n    icon?: string;\r\n    title: string;\r\n    selected?: boolean;\r\n    parent?: HierarchyBarNode;\r\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\r\n}\r\n\r\nexport interface HierarchyBarNodeChildren {\r\n    loading: boolean;\r\n    children: HierarchyBarNode[];\r\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\r\n\r\n@Component({\r\n    selector: 'ux-hierarchy-bar',\r\n    templateUrl: './hierarchy-bar.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    viewProviders: [HierarchyBarService]\r\n})\r\nexport class HierarchyBarComponent implements OnDestroy {\r\n\r\n    @Input() set root(node: HierarchyBarNode) {\r\n        this.hierarchyBar.setRootNode(node);\r\n    }\r\n\r\n    @Input() set selected(node: HierarchyBarNode) {\r\n        this.hierarchyBar.selectNode(node);\r\n    }\r\n\r\n    @Input() loadingIndicator: TemplateRef<any>;\r\n\r\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\r\n    @ViewChild('nodelist') nodelist: ElementRef;\r\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\r\n\r\n    overflow$ = new BehaviorSubject<boolean>(false);\r\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(public hierarchyBar: HierarchyBarService) {\r\n\r\n        // subscribe to changes in the selected node\r\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\r\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\r\n\r\n        // store subscriptions\r\n        this._subscription.add(selected);\r\n        this._subscription.add(changed);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * When there is overflow ensure that the rightmost\r\n     * node remains in view at all times. The nodes no longer\r\n     * visible be be displayed in a popover available on the\r\n     * overflow indicator\r\n     */\r\n    scrollIntoView(): void {\r\n\r\n        if (!this.nodelist) {\r\n            return;\r\n        }\r\n\r\n        // get the native element\r\n        const { nativeElement } = this.nodelist;\r\n\r\n        // emit whether or not there is overflow\r\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\r\n\r\n        // if the hierarchy bar contents do not overflow then do nothing\r\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\r\n\r\n            // determine the amount of overflow\r\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\r\n\r\n            // determine which nodes are not fully visible\r\n            this.overflowNodes$.next(\r\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\r\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\r\n            );\r\n\r\n            // move the scroll position to always show the last itme\r\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\r\n        }\r\n    }\r\n}","import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    /** Often a click event makes the element appear - if so we can end up closing it immediately */\n    private _initialised: boolean = false;\n\n    constructor(private _elementRef: ElementRef) {\n        setTimeout(() => this._initialised = true);\n    }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._initialised && this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  templateUrl: './popover.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SidePanelService } from './side-panel.service';\n\n@Component({\n    selector: 'ux-side-panel',\n    exportAs: 'ux-side-panel',\n    templateUrl: 'side-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel'\n    }\n})\nexport class SidePanelComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('class.open')\n    get open(): boolean {\n        return this.service.open$.value;\n    }\n\n    set open(value: boolean) {\n        this.service.open$.next(value);\n    }\n\n    @Input()\n    @HostBinding('class.inline')\n    inline = false;\n\n    @Input()\n    attachTo: 'window' | 'container' = 'window';\n\n    @Input()\n    width: string | number = '50%';\n\n    @Input()\n    top: string | number = '0';\n\n    @Input()\n    @HostBinding('attr.aria-modal')\n    modal = false;\n\n    @Input()\n    @HostBinding('class.animate')\n    animate = false;\n\n    @Input()\n    closeOnExternalClick = false;\n\n    @Input()\n    focusOnShow: boolean = false;\n\n    @Output()\n    openChange = new EventEmitter<boolean>();\n\n    get position() {\n        if (this.inline) {\n            return 'static';\n        }\n        if (this.attachTo === 'container') {\n            return 'absolute';\n        }\n        return 'fixed';\n    }\n\n    get cssWidth(): string {\n        if (typeof this.width === 'number') {\n            return this.width === 0 ? '0' : this.width + 'px';\n        }\n        return this.width;\n    }\n\n    get cssTop(): string {\n        if (typeof this.top === 'number') {\n            return this.top === 0 ? '0' : this.top + 'px';\n        }\n        return this.top;\n    }\n\n    @HostBinding('style.width')\n    get componentWidth(): string {\n        if (this.inline) {\n            return this.open ? this.cssWidth : '0';\n        }\n        return null;\n    }\n\n    get hostWidth() {\n        return this.inline ? '100%' : this.cssWidth;\n    }\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor(\n        protected service: SidePanelService,\n        private _elementRef: ElementRef\n    ) { }\n\n    ngOnInit() {\n        this.service.open$.pipe(takeUntil(this._onDestroy)).subscribe(isOpen => this.openChange.emit(isOpen));\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    openPanel() {\n        this.service.open();\n    }\n\n    @HostListener('document:keyup.escape')\n    closePanel() {\n        this.service.close();\n    }\n\n    @HostListener('document:click', ['$event'])\n    clickHandler(event: MouseEvent) {\n        if (!this.open || !this.closeOnExternalClick) {\n            return;\n        }\n\n        const target = event.target as HTMLElement;\n\n        if (!this._elementRef.nativeElement.contains(target) ||\n            (target && target.classList.contains('modal-backdrop'))) {\n            this.closePanel();\n        }\n    }\n}","import { Component, ContentChild, Directive, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\nimport { SidePanelService } from '../side-panel/side-panel.service';\n\n@Directive({\n    selector: '[uxItemDisplayPanelContent]'\n})\nexport class ItemDisplayPanelContentDirective { }\n\n@Directive({\n    selector: '[uxItemDisplayPanelFooter]'\n})\nexport class ItemDisplayPanelFooterDirective { }\n\n@Component({\n    selector: 'ux-item-display-panel',\n    templateUrl: './item-display-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel ux-item-display-panel'\n    }\n})\nexport class ItemDisplayPanelComponent extends SidePanelComponent implements OnInit {\n\n    @Input() header: string;\n\n    @Input() boxShadow: boolean = true;\n\n    @Input() closeVisible: boolean = true;\n\n    get preventClose(): boolean {\n        return !this.closeOnExternalClick;\n    }\n\n    @Input()\n    set preventClose(value: boolean) {\n        this.closeOnExternalClick = !value;\n    }\n\n    @Input() shadow: boolean = false;\n\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\n    @ViewChild('panel') panel: ElementRef;\n\n    /**\n     * @deprecated\n     * Title used for adding tooltips and shouldn't be used as an input\n     * instead header will be used. This is here to support backward compatibility only\n     * this property should not be used.\n     */\n    @Input()\n    set title(value: string) {\n        this.header = value;\n    }\n\n    get title() {\n        return this.header;\n    }\n\n    @Input()\n    set visible(visible: boolean) {\n        this.open = visible;\n    }\n\n    get visible() {\n        return this.open;\n    }\n\n    constructor(service: SidePanelService, elementRef: ElementRef) {\n        super(service, elementRef);\n\n        this.animate = false;\n        this.closeOnExternalClick = true;\n    }\n\n    ngOnInit() {\n        this.service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe(isVisible => this.visibleChange.emit(isVisible));\n    }\n\n    focus(): void {\n        if (this.panel) {\n            this.panel.nativeElement.focus();\n        }\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FocusIfModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    templateUrl: './wizard-step.component.html'\n})\nexport class WizardStepComponent {\n    \n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input() \n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n        \n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    get active(): boolean {\n        return this._active;\n    }\n\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { WizardStepComponent } from './wizard-step.component';\n\n@Component({\n    selector: 'ux-wizard',\n    templateUrl: './wizard.component.html',\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit {\n\n    private _step: number = 0;\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();        \n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    templateUrl: './marquee-wizard-step.component.html'\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    templateUrl: './marquee-wizard.component.html',\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(\n            filter((event: MarqueeWizardValidEvent) => !event.valid)\n        ).subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<Event> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe(() => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        const interval = setInterval(() => {\n\n            const buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) { }\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList | Array<any> {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : [];\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): Array<TextTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.textTracks) : [];\n    }\n\n    get videoTracks(): Array<VideoTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.videoTracks) : [];\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        if (this._mediaPlayer) {\n            this._mediaPlayer.volume = value;\n        }\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata', label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange() {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n\n    hideSubtitleTracks(): void {\n        for (let index = 0; index < this.textTracks.length; index++) {\n            this.textTracks[index].mode = 'hidden';\n        }\n    }\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    templateUrl: './slider.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb?: string;\n    lowerThumb?: string;\n    upperThumb?: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { timer } from 'rxjs/observable/timer';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SliderOptions, SliderSize } from '../../../slider/index';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-media-player-controls',\n    templateUrl: './controls.component.html',\n    host: {\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    volumeActive: boolean = false;\n    volumeFocus: boolean = false;\n    returnFocus: boolean = true;\n    subtitlesId: string = `ux-media-player-subtitle-popover-${uniqueId++}`;\n    subtitlesOpen: boolean = false;\n    mouseEnterVolume = new Subject<void>();\n    mouseLeaveVolume = new Subject<void>();\n\n    options: SliderOptions = {\n        handles: {\n            aria: {\n                thumb: 'Volume'\n            }\n        },\n        track: {\n            colors: {\n                lower: '#666'\n            },\n            height: SliderSize.Narrow,\n            ticks: {\n                major: {\n                    show: false\n                },\n                minor: {\n                    show: false\n                }\n            }\n        }\n    };\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n\n        this.mouseEnterVolume.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        this.mouseLeaveVolume.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(this.mouseEnterVolume))), takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        this.volume = this.volume === 0 ? this._previousVolume : 0;\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    isSubtitleActive(): boolean {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    setSubtitleTrack(track: TextTrack): void {\n        // hide all tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n\n        // set the position of the subtitle track\n        for (let idx = 0; idx < track.cues.length; idx++) {\n            const cue: any = track.cues[idx];\n            cue.line = -3;\n        }\n\n        // activate the selected one\n        track.mode = 'showing';\n\n    }\n\n    getSubtitleTrack(): string {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return this.mediaPlayerService.textTracks[idx].label;\n            }\n        }\n\n        return 'No subtitles';\n    }\n\n}","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxMediaPlayerCustomControl]',\n})\nexport class MediaPlayerCustomControlDirective {}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    templateUrl: './timeline.component.html',\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.mediaPlayerService.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({\n                    start: (buffered.start(idx) / this.mediaPlayerService.duration) * 100,\n                    end: (buffered.end(idx) / this.mediaPlayerService.duration) * 100\n                });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n\n    /** Skip a number of seconds in any direction */\n    skip(seconds: number): void {\n        let target = this.current + seconds;\n\n        // ensure that the target position is within the bounds of the clip\n        if (target < 0) {\n            target = 0;\n        }\n\n        if (target > this.mediaPlayerService.duration) {\n            target = this.mediaPlayerService.duration;\n        }\n\n        this.mediaPlayerService.currentTime = target;\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: HttpClient) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.get(mediaElement.src, { responseType: 'blob' }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: response.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.get(url, { responseType: 'arraybuffer' }).subscribe(response => {\n                this.getAudioBuffer(response).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpClientModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { debounceTime, takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    templateUrl: './media-player.component.html',\n    providers: [MediaPlayerService],\n    host: {\n        '(keydown.Space)': 'mediaPlayerService.togglePlay(); $event.preventDefault()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering || focused',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange()'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    focused: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    @Input() crossorigin: 'use-credentials' | 'anonymous' = 'use-credentials';\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            tap(() => this.hovering = true),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n\n        // initially hide all text tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { SliderModule } from '../slider/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { MediaPlayerCustomControlDirective } from './extensions/controls/custom-control/custom-control.directive';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerComponent } from './media-player.component';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent,\n    MediaPlayerCustomControlDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule,\n        SliderModule,\n        AccessibilityModule,\n        A11yModule,\n        ClickOutsideModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class MediaPlayerModule { }\n","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators/filter';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    templateUrl: './navigation-item.component.html',\n    host: {\n        '[class.active]': 'active',\n        '[class.selected]': 'expanded',\n    }\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() expanded: boolean = false;\n    @Input() link: string;\n\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional()\n        @SkipSelf()\n        private _parent: NavigationItemComponent,\n        private _router: Router\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n            // Expand this component if it or a descendant is active.\n            this.expanded = this.hasActiveLink(this.link);\n        });\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            let levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy () {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n        // If this component has a link, check if it is active.\n        if (link && this._router.isActive(link, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n            // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationItem } from './navigation-item.inferface';\n\n@Injectable()\nexport class NavigationService {\n\n    items: NavigationItem[];\n\n    autoCollapse: boolean = true;\n\n    setExpanded(source: NavigationItem, expanded: boolean): void {\n        if (expanded && this.autoCollapse) {\n            this.collapseSiblings(source);\n        }\n    }\n\n    private collapseSiblings(source: NavigationItem): void {\n        let siblings = this.items;\n        for (let item of this.items) {\n            const parent = this.getParent(source, item);\n            if (parent) {\n                siblings = parent.children;\n                break;\n            }\n        }\n\n        for (let item of siblings) {\n            if (item !== source) {\n                this.collapseAll(item);\n            }\n        }\n    }\n\n    private collapseAll(item: NavigationItem): void {\n        item.expanded = false;\n        if (item.children) {\n            for (let child of item.children) {\n                this.collapseAll(child);\n            }\n        }\n    }\n\n    private getParent(target: NavigationItem, item: NavigationItem): NavigationItem {\n        if (item.children) {\n            for (let child of item.children) {\n                if (child === target) {\n                    return item;\n                }\n            }\n        }\n\n        return null;\n    }\n}","import { LocationStrategy } from '@angular/common';\nimport { Directive, HostBinding, HostListener, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../../common/index';\nimport { NavigationItem } from '../navigation-item.inferface';\nimport { NavigationService } from '../navigation.service';\n\n@Directive({\n    selector: '[uxNavigationLink]',\n    exportAs: 'uxNavigationLink'\n})\nexport class NavigationLinkDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input()\n    navigationItem: NavigationItem;\n\n    @Input()\n    set expanded(value: boolean) {\n        this._expanded$.next(value);\n    }\n\n    @Input()\n    canExpand: boolean;\n\n    @Input()\n    @HostBinding('class.indent')\n    indent: boolean;\n\n    @HostBinding('attr.href')\n    href: string;\n\n    @HostBinding('attr.role')\n    role: string;\n\n    @HostBinding('attr.aria-expanded')\n    ariaExpanded: string = 'undefined';\n\n    isActive: boolean;\n\n    indentChildren: boolean;\n\n    private _expanded$ = new Subject<boolean>();\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _router: Router,\n        private _locationStrategy: LocationStrategy,\n        private _navigationService: NavigationService\n    ) { }\n\n    ngOnInit(): void {\n\n        this._expanded$.pipe(takeUntil(this._onDestroy), tick()).subscribe(expanded => {\n            if (this.navigationItem.children && this.navigationItem.children.length > 0) {\n                this.ariaExpanded = `${expanded}`;\n                this._navigationService.setExpanded(this.navigationItem, expanded);\n            }\n        });\n\n        this._router.events\n            .pipe(filter(event => event instanceof NavigationEnd), takeUntil(this._onDestroy))\n            .subscribe(this.updateNavigationState.bind(this));\n\n        this.updateNavigationState();\n\n        this.updateAttributes();\n    }\n\n    ngOnChanges(): void {\n        this.updateAttributes();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('keydown.enter', ['$event'])\n    activated(event: Event): boolean {\n\n        if (this.navigationItem.routerLink) {\n            const commands = Array.isArray(this.navigationItem.routerLink) ? this.navigationItem.routerLink : [this.navigationItem.routerLink];\n            this._router.navigate(commands, this.navigationItem.routerExtras);\n        }\n\n        // Toggle expanded state (relevant only if it has children)\n        this.navigationItem.expanded = !this.navigationItem.expanded;\n\n        // Invoke the custom click handler if specified\n        if (this.navigationItem.click) {\n            this.navigationItem.click(event, this.navigationItem);\n        }\n\n        return false;\n    }\n\n    private updateNavigationState(): void {\n        this.isActive = this.isActiveItem(this.navigationItem);\n\n        if (this.navigationItem.children) {\n            const activeChild = this.navigationItem.children.find(child => this.isActiveItem(child));\n            if (activeChild) {\n                this.navigationItem.expanded = true;\n            }\n        }\n    }\n\n    private updateAttributes(): void {\n\n        this.href = this.getHref();\n        this.role = (this.navigationItem.children && this.navigationItem.children.length > 0) ? 'button' : 'treeitem';\n\n        this.indentChildren = this.navigationItem.children && this.navigationItem.children.some(item => item.children && item.children.length > 0);\n    }\n\n    private getHref(): string {\n\n        if (this.navigationItem.routerLink) {\n            const commands = Array.isArray(this.navigationItem.routerLink) ? this.navigationItem.routerLink : [this.navigationItem.routerLink];\n            const urlTree = this._router.createUrlTree(commands, this.navigationItem.routerExtras);\n            return this._locationStrategy.prepareExternalUrl(this._router.serializeUrl(urlTree));\n        }\n\n        return null;\n    }\n\n    private isActiveItem(item: NavigationItem): boolean {\n\n        if (item.routerLink) {\n            const commands = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            const urlTree = this._router.createUrlTree(commands, item.routerExtras);\n            return this._router.isActive(urlTree, true);\n        }\n\n        return false;\n    }\n}","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { NavigationItem } from './navigation-item.inferface';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n    selector: 'ux-navigation',\n    templateUrl: './navigation.component.html',\n    providers: [NavigationService]\n})\nexport class NavigationComponent {\n\n    /** The navigation items to populate the menu with. */\n    @Input()\n    set items(items: NavigationItem[]) {\n        this._navigationService.items = items;\n    }\n    get items(): NavigationItem[] {\n        return this._navigationService.items;\n    }\n\n    /** Whether to present the menu as a hierarchical tree. */\n    @Input()\n    tree: boolean = true;\n\n    /** Whether to collapse other menu items when expanding a menu item. */\n    @Input()\n    set autoCollapse(autoCollapse: boolean) {\n        this._navigationService.autoCollapse = autoCollapse;\n    }\n\n    @ContentChild('uxNavigationItem')\n    navigationItemTemplate: TemplateRef<any>;\n\n    hierarchyClasses = [\n        '',\n        'nav-second-level',\n        'nav-third-level',\n        'nav-fourth-level',\n        'nav-fifth-level',\n    ];\n\n    get depthLimit(): number {\n        return this.tree ? this.hierarchyClasses.length : 2;\n    }\n\n    constructor(private _navigationService: NavigationService) { }\n\n    itemClick(item: NavigationItem, event: Event): void {\n\n        // Toggle expanded state (relevant only if it has children)\n        item.expanded = !item.expanded;\n\n        // Invoke the custom click handler if specified\n        if (item.click) {\n            item.click(event, item);\n        }\n    }\n\n    /**\n     * Returns true if the sets of items needs to be indented to make room for one or more expander.\n     */\n    needsIndent(items: NavigationItem[]): boolean {\n        return items && items.some(item => item.children && item.children.length > 0);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\nimport { NavigationLinkDirective } from './navigation-link/navigation-link.directive';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n    imports: [\n        AccessibilityModule,\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent,\n        NavigationLinkDirective\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ColorService } from '../../services/color/index';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n\r\n    // provide default options\r\n    options: NotificationOptions = {\r\n        duration: 4,\r\n        height: 100,\r\n        spacing: 10,\r\n        backgroundColor: this._colorService.getColor('accent').toHex(),\r\n        iconColor: this._colorService.getColor('accent').toHex()\r\n    };\r\n\r\n    direction: NotificationListDirection = 'above';\r\n\r\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \r\n\r\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\r\n\r\n        options = { ...this.options, ...options };\r\n\r\n        const notificationRef: NotificationRef = {\r\n            templateRef: templateRef,\r\n            duration: options.duration,\r\n            date: new Date(),\r\n            visible: true,\r\n            height: options.height,\r\n            spacing: options.spacing,\r\n            backgroundColor: options.backgroundColor,\r\n            iconColor: options.iconColor,\r\n            data: data\r\n        };\r\n\r\n        const notifications = this.notifications$.getValue();\r\n\r\n        if (this.direction === 'above') {\r\n            notifications.unshift(notificationRef);\r\n        } else {\r\n            notifications.push(notificationRef);\r\n        }\r\n\r\n        this.notifications$.next(notifications);\r\n\r\n        // remove notification after delay\r\n        if (options.duration !== 0) {\r\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\r\n        }\r\n\r\n        return notificationRef;\r\n    }\r\n\r\n    getHistory(): NotificationRef[] {\r\n        return this.notifications$.getValue();\r\n    }\r\n\r\n    dismiss(notificationRef: NotificationRef): void {\r\n        notificationRef.visible = false;\r\n        this.notifications$.next(this.notifications$.getValue());\r\n    }\r\n    \r\n    dismissAll(): void {\r\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\r\n        this.notifications$.next(this.notifications$.getValue());        \r\n    }\r\n\r\n    constructor(private _colorService: ColorService) {\r\n    }\r\n}\r\n\r\nexport interface NotificationRef {\r\n    templateRef: TemplateRef<any>;\r\n    duration: number;\r\n    date: Date;\r\n    visible?: boolean;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n    data: { [key: string]: any };\r\n}\r\n\r\nexport interface NotificationOptions {\r\n    duration?: number;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n}\r\n\r\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    templateUrl: './notification-list.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n    secondaryNavigationAutoselect = false;\n\n    private _onDestroy = new Subject();\n\n    constructor(private _router: Router) {\n\n        this.selected$\n            .pipe(takeUntil(this._onDestroy), map(selected => this.getRoot(selected)))\n            .subscribe(root => this.selectedRoot$.next(root));\n\n        this._router.events\n            .pipe(takeUntil(this._onDestroy), filter(e => e instanceof NavigationEnd))\n            .subscribe(this.updateItemsWithActiveRoute.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        if (!item) {\n            return;\n        }\n\n        if (item.routerLink) {\n\n            // Trigger router navigation\n            const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            this._router.navigate(routerLink, item.routerExtras);\n\n        } else if (this.secondaryNavigationAutoselect && item.children && item.children.length > 0) {\n\n            // Select the first child in secondaryNavigationAutoselect mode\n            this.select(item.children[0]);\n\n        } else {\n\n            // if we are in secondary navigation mode and we click a parent - dont deselect the child\n            if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n                return;\n            }\n\n            // Otherwise select the given item\n            this.selected$.next(item);\n        }\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    updateItem(item: PageHeaderNavigationItem, selected: PageHeaderNavigationItem): void {\n        // Item is selected if it is the selected item, or one of the selected item's ancestors.\n        item.selected = item === selected || this.isParentOf(selected, item);\n\n        if (item === selected) {\n            // call the select function if present\n            if (item.select) {\n                item.select.call(item, item);\n            }\n        }\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n\n        // Set up the initally selected item\n        // If nothing is set as selected, using the initial route\n        const initialSelectedItem = items.find(item => item.selected === true);\n        if (initialSelectedItem) {\n            this.select(initialSelectedItem);\n        } else {\n            this.updateItemsWithActiveRoute();\n        }\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n\n    private updateItemsWithActiveRoute(): void {\n        const activeItem = new PageHeaderActiveNavigationItem();\n        for (var item of this.items$.getValue()) {\n            this.findActiveItem(item, activeItem);\n            if (activeItem.exact) {\n                break;\n            }\n        }\n\n        if (activeItem.item) {\n            this.selected$.next(activeItem.item);\n        }\n    }\n\n    private findActiveItem(item: PageHeaderNavigationItem, activeItem: PageHeaderActiveNavigationItem): void {\n\n        if (item.routerLink) {\n\n            const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            const urlTree = this._router.createUrlTree(routerLink, item.routerExtras);\n\n            if (this._router.isActive(urlTree, true) && !activeItem.exact) {\n\n                // When the item route is an exact match, no need to look any further\n                activeItem.item = item;\n                activeItem.exact = true;\n\n                return;\n            }\n\n            if (this._router.isActive(urlTree, false)) {\n\n                // Store an inexact match and continue looking\n                activeItem.item = item;\n                activeItem.exact = false;\n            }\n        }\n\n        if (item.children) {\n            for (let childItem of item.children) {\n                this.findActiveItem(childItem, activeItem);\n                if (activeItem.exact) {\n                    return;\n                }\n            }\n        }\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;\n\nclass PageHeaderActiveNavigationItem {\n    item: PageHeaderNavigationItem;\n    exact: boolean;\n}\n","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    templateUrl: './icon-menu.component.html'\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    templateUrl: './navigation-dropdown-item.component.html'\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    templateUrl: './navigation-item.component.html'\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _onDestroy = new Subject();\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        this._pageHeaderService.selected$.pipe(takeUntil(this._onDestroy)).subscribe(next => {\n\n            // Update selected state for this item\n            this._pageHeaderService.updateItem(this.item, next);\n\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this.menu.onHidden\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(): void {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { delay, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { PageHeaderService } from '../../page-header.service';\r\nimport { PageHeaderNavigationItem } from '../navigation.component';\r\n\r\n@Directive({\r\n    selector: '[uxPageHeaderNavigationSecondaryItem]'\r\n})\r\nexport class PageHeaderNavigationSecondaryItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('uxPageHeaderNavigationSecondaryItem')\r\n    item: PageHeaderNavigationItem;\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _pageHeaderService: PageHeaderService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this._pageHeaderService.selected$.pipe(delay(0), takeUntil(this._onDestroy)).subscribe(next => {\r\n\r\n            // Update selected state for this item\r\n            this._pageHeaderService.updateItem(this.item, next);\r\n\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    templateUrl: './navigation.component.html',\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Component, ContentChild, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    templateUrl: 'page-header.component.html',\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() title: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: 'left' | 'right' | 'center' = 'center';\n\n    @Input()\n    set secondaryNavigationAutoselect(value: boolean) {\n        this._pageHeaderService.secondaryNavigationAutoselect = value;\n    }\n\n    get secondaryNavigationAutoselect(): boolean {\n        return this._pageHeaderService.secondaryNavigationAutoselect;\n    }\n\n    @Input()\n    set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input()\n    set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input()\n    set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input() crumbsStyle: 'standard' | 'small' = 'standard';\n\n    @Input()\n    set logoBackground(color: string) {\n        this._logoBackground = this._colorService.resolve(color);\n    }\n\n    get logoBackground(): string {\n        return this._logoBackground;\n    }\n\n    @Input()\n    set logoForeground(color: string) {\n        this._logoForeground = this._colorService.resolve(color);\n    }\n\n    get logoForeground(): string {\n        return this._logoForeground;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this.logoBackground = color;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this.logoForeground = color;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChild('title') titleTemplate: TemplateRef<any>;\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _logoBackground: string;\n    private _logoForeground: string;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationSecondaryItemDirective } from './navigation/navigation-secondary-item/navigation-secondary-item.directive';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderComponent } from './page-header.component';\n\n\n@NgModule({\n    imports: [\n        BreadcrumbsModule,\n        BsDropdownModule.forRoot(),\n        ColorServiceModule,\n        CommonModule,\n        MenuNavigationModule,\n        ResizeModule,\n        RouterModule,\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent,\n        PageHeaderNavigationSecondaryItemDirective\n    ]\n})\nexport class PageHeaderModule { }\n","import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        role: 'progressbar'\n    }\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() @HostBinding('attr.aria-valuemin') min: number = 0;\n    @Input() @HostBinding('attr.aria-valuemax') max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n\n    /** When indeteminate we should omit the valuenow label */\n    @HostBinding('attr.aria-valuenow') get valueNow() {\n        return this.indeterminate ? null : this.value;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    templateUrl: './radiobutton.component.html',\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst UNSET_FOCUS: SearchBuilderFocus = { groupId: null, index: -1 };\n\n@Injectable()\nexport class SearchBuilderFocusService {\n\n    focus$ = new BehaviorSubject<SearchBuilderFocus>(UNSET_FOCUS);\n\n    /**\n     * Set focus on a search builder component.\n     * @param groupId The `id` of the group containing the component.\n     * @param index The (zero-based) index of the component.\n     */\n    setFocus(groupId: string, index: number): void {\n        this.focus$.next({ groupId: groupId, index: index });\n    }\n\n    /**\n     * Removes focus from all components. If focus is not on a search builder component, this does nothing.\n     */\n    clearFocus(): void {\n        this.focus$.next(UNSET_FOCUS);\n    }\n}\n\nexport interface SearchBuilderFocus {\n    groupId: string;\n    index: number;\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(\n    private _searchBuilderService: SearchBuilderService,\n    private _searchBuilderFocusService: SearchBuilderFocusService\n  ) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query and return focus to the previous field.\n   */\n  removeAtIndex(index: number): void {\n\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(index, 1);\n\n    // Focus the previous item if available\n    this._searchBuilderFocusService.setFocus(this._id, index <= 0 ? 0 : index - 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  templateUrl: './search-builder-group.component.html',\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit, OnDestroy {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  focusIndex: number = -1;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(\n    public searchBuilderGroupService: SearchBuilderGroupService,\n    private _searchBuilderFocusService: SearchBuilderFocusService\n  ) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have an id attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n\n    // Track focus for child components\n    this._searchBuilderFocusService.focus$.pipe(takeUntil(this._onDestroy)).subscribe(focus => {\n      this.focusIndex = (focus.groupId === this.id) ? focus.index : -1;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  addField(event: MouseEvent): void {\n    this.add.emit(event);\n  }\n\n  removeFieldAtIndex(index: number, field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.removeAtIndex(index);\n    this.remove.emit(field);\n  }\n\n  setFocus(index: number): void {\n    this._searchBuilderFocusService.setFocus(this.id, index);\n  }\n\n  clearFocus(): void {\n    this._searchBuilderFocusService.clearFocus();\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { delay, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { BaseSearchComponent } from '../search-components/base-search.component';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit, OnDestroy {\n\n    @Input('uxSearchBuilderOutlet') outlet: string;\n    @Input('uxSearchBuilderOutletContext') context: any;\n    @Input('uxSearchBuilderOutletGroupId') groupId: string;\n    @Input('uxSearchBuilderOutletIndex') index: number;\n\n    private _componentRef: ComponentRef<BaseSearchComponent>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderFocusService: SearchBuilderFocusService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.outlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory<BaseSearchComponent>(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.context.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.context;\n        this._componentRef.instance.config = config;\n\n        this._searchBuilderFocusService.focus$\n            .pipe(distinctUntilChanged(), delay(0), takeUntil(this._onDestroy))\n            .subscribe(focus => {\n                this._componentRef.instance.focus = (focus.groupId === this.groupId && focus.index === this.index);\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  templateUrl: './search-builder.component.html',\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, delay, distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TagInputComponent } from '../tag-input/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    templateUrl: 'select.component.html',\r\n    providers: [SELECT_VALUE_ACCESSOR],\r\n    host: {\r\n        'tabindex': '0'\r\n    }\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    set value(value: any) {\r\n        this._value$.next(value);\r\n    }\r\n    get value() {\r\n        return this._value$.value;\r\n    }\r\n\r\n    @Input()\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n    }\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n\r\n    @Input()\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('tagInput') tagInput: TagInputComponent;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value$ = new BehaviorSubject<any>(null);\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Emit change events\r\n        this._value$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.valueChange.emit(value);\r\n            this.propagateChange(value);\r\n        });\r\n\r\n        this._input$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.inputChange.emit(value);\r\n        });\r\n\r\n        // Changes to the input field\r\n        this._input$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        this.filter$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => value && value.length > 0)\r\n        ).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // Update the single-select input when the model changes\r\n        this._value$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            distinctUntilChanged(),\r\n            delay(0),\r\n            filter(value => value !== null && !this.multiple)\r\n        ).subscribe(value => {\r\n            this.input = this.getDisplay(value);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('focus')\r\n    onfocus(): void {\r\n        if (this.singleInput) {\r\n            this.singleInput.nativeElement.focus();\r\n        } else if (this.tagInput) {\r\n            this.tagInput.focus();\r\n        }\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this.value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { BACKSPACE, DELETE, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { tick } from '../../common/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    exportAs: 'ux-tag-input',\r\n    templateUrl: 'tag-input.component.html',\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Workaround for EL-3224 - No longer needed\r\n     */\r\n    @Input() trackAriaDescendant: boolean = true;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n    typeahead: TypeaheadComponent;\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _subscription: Subscription;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n\r\n        this.typeaheadQuery.changes.pipe(takeUntil(this._onDestroy))\r\n            .subscribe((query) => this.connectTypeahead(query.first));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    writeValue(value: any[]): void {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    /**\r\n     * Set focus on the input field.\r\n     */\r\n    focus(): void {\r\n        if (this.tagInput) {\r\n            this.tagInput.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate(): void {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.which) {\r\n            case ENTER:\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n\r\n            case BACKSPACE:\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            case DELETE:\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n\r\n            case LEFT_ARROW:\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            case RIGHT_ARROW:\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout')\r\n    focusOutHandler(): void {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler(): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput(): void {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any): void {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param delta Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(delta: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += delta;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number): void {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible(): boolean {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent): void {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n            this._subscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._subscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            // Set up event handler for the highlighted element\r\n            // Added a delay to move it out of the current change detection cycle\r\n            this._subscription.add(\r\n                this.typeahead.highlightedElementChange.pipe(tick())\r\n                    .subscribe((element: HTMLElement) => this.highlightedElement = element)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.which) {\r\n            case SPACE:\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    get id(): string {\n        return `ux-search-builder-search-component-${this._id}`;\n    }\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n    focus: boolean;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    constructor(private _searchBuilderService: SearchBuilderService) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    templateUrl: './date-range.component.html'\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  templateUrl: './date.component.html'\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  templateUrl: './select.component.html'\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  templateUrl: './text.component.html'\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { PopoverModule } from '../popover/index';\nimport { SelectModule } from '../select/index';\nimport { SearchBuilderFocusService } from './search-builder-focus.service';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\n\n@NgModule({\n  imports: [\n    AccessibilityModule,\n    CommonModule,\n    DateTimePickerModule,\n    FocusIfModule,\n    FormsModule,\n    PopoverModule,\n    SelectModule,\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ],\n  providers: [\n    SearchBuilderFocusService\n  ]\n})\nexport class SearchBuilderModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy {\n\n  constructor(protected selectionService?: SelectionService) { }\n\n  setSelectionService(selectionService: SelectionService): void {\n    this.selectionService = selectionService;\n  }\n\n  mousedown(event: MouseEvent, data: any): void { }\n\n  click(event: MouseEvent, data: any): void { }\n\n  keydown(event: KeyboardEvent, data: any): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: any[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: any[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: any[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n\n    // call deselect on all items in the dataset\n    this.selectionService.deselectAll();\n  }\n\n  destroy(): void { }\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy extends SelectionStrategy {\n\n  // store the most recently selected row\n  private _selection: Selection = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n      case DOWN_ARROW:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n\n      case SPACE:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data, true);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: any, activate: boolean = false): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n\n    // if we want to keep the item activated then activate\n    if (activate) {\n      this.selectionService.activate(data);\n    }\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: any): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  protected multipleSelect(data: any): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: any): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: any): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  protected clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): any[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.which === UP_ARROW);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection {\n  start: any;\n  end: any;\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { RowSelectionStrategy } from './row-selection.strategy';\r\n\r\nexport class RowAltSelectionStrategy extends RowSelectionStrategy {\r\n    keydown(event: KeyboardEvent, data: any): void {\r\n        switch (event.which) {\r\n            case UP_ARROW:\r\n            case DOWN_ARROW:\r\n                event.preventDefault();\r\n                this.handleCursorKey(event, data);\r\n                break;\r\n\r\n            case SPACE:\r\n                event.preventDefault();\r\n                this.selectionService.strategy.toggle(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the sibling item when arrow keys are pressed\r\n     */\r\n    private handleCursorKey(event: KeyboardEvent, data: any): void {\r\n        // determine which modifier keys are pressed\r\n        const { ctrlKey, shiftKey } = event;\r\n\r\n        // if no modifier keys are pressed then deselect all and clear the selection\r\n        if (!ctrlKey && !shiftKey) {\r\n            this.deselectAll();\r\n            this.clearSelection(false);\r\n        }\r\n\r\n        if (ctrlKey) {\r\n            this.selectionService.activateSibling(event.which === UP_ARROW);\r\n        } else {\r\n            const sibling = this.selectionService.getSibling(event.which === UP_ARROW);\r\n            this.multipleSelect(sibling ? sibling : data);\r\n        }\r\n    }\r\n}\r\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy extends SelectionStrategy {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(_event: MouseEvent, data: any): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n        event.preventDefault();\n        return this.selectionService.activateSibling(true);\n\n      case DOWN_ARROW:\n        event.preventDefault();\n        return this.selectionService.activateSibling(false);\n\n      case SPACE:\n        event.preventDefault();\n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: any): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowAltSelectionStrategy } from './strategies/row-alt-selection.strategy';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n\n  set dataset(dataset: ReadonlyArray<any>) {\n    this._dataset = dataset;\n    if (this._dataset.indexOf(this._active) === -1) {\n      this.setFirstItemFocusable();\n    }\n  }\n\n  get dataset(): ReadonlyArray<any> {\n    return this._dataset;\n  }\n\n  strategy: SelectionStrategy = new SimpleSelectionStrategy(this);\n  isEnabled: boolean = true;\n  isClickEnabled: boolean = true;\n  isKeyboardEnabled: boolean = true;\n\n  focus$ = new BehaviorSubject<any>(null);\n  active$ = new BehaviorSubject<any>(null);\n  selection$ = new BehaviorSubject<any[]>([]);\n\n  private _active: any;\n  private _dataset: ReadonlyArray<any> = [];\n  private _selection = new Set();\n  private _strategyToDestroy: SelectionStrategy = this.strategy;\n\n  ngOnDestroy(): void {\n    if (this._strategyToDestroy) {\n      this._strategyToDestroy.destroy();\n    }\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: any[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: any[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove all items from the list of selected items\n   */\n  deselectAll(): void {\n    // remove all items in the array\n    this.deselect(...this._dataset);\n\n    // clear the set in case any items have been removed from the DOM but are still selected\n    this._selection.clear();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: any[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: any): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  getSelectionState(data: any): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setStrategy(mode: SelectionMode | SelectionStrategy): void {\n\n    if (this._strategyToDestroy) {\n      // Destroy previous strategy if it was created internally\n      this._strategyToDestroy.destroy();\n      this._strategyToDestroy = null;\n    }\n\n    if (mode instanceof SelectionStrategy) {\n\n      // Custom strategy - pass in the service instance\n      this.strategy = mode;\n      this.strategy.setSelectionService(this);\n\n    } else {\n\n      switch (mode.toLowerCase().trim()) {\n\n        case 'simple':\n          this.strategy = this._strategyToDestroy = new SimpleSelectionStrategy(this);\n          break;\n\n        case 'row':\n          this.strategy = this._strategyToDestroy = new RowSelectionStrategy(this);\n          break;\n\n        case 'row-alt':\n          this.strategy = this._strategyToDestroy = new RowAltSelectionStrategy(this);\n          break;\n\n        default:\n          throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple', 'row', or 'row-alt'.`);\n      }\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: any): void {\n    this._active = data;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this._active = null;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Return the next or previous sibling of the current active item.\n   * @param previous If true, the previous sibling will be returned.\n   */\n  getSibling(previous: boolean = false): any {\n\n    // check if there is a current active item\n    if (!this._active) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(this._active);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    return target;\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): any {\n\n    const target = this.getSibling(previous);\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.isEnabled = !disabled;\n\n    // clear any stateful data\n    this._active = null;\n    this.active$.next(this._active);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n\n  private setFirstItemFocusable(): void {\n    if (this._dataset.length > 0) {\n      this.focus$.next(this._dataset[0]);\n      this._active = this._dataset[0];\n    } else {\n      this._active = null;\n    }\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row' | 'row-alt';","import { Component, ElementRef, HostBinding, HostListener, Input, OnDestroy } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionService } from '../../../directives/selection/selection.service';\n\n@Component({\n    selector: 'ux-select-list-item',\n    templateUrl: './select-list-item.component.html',\n    host: {\n        role: 'listitem'\n    }\n})\nexport class SelectListItemComponent implements OnDestroy {\n\n    @Input() data: any;\n    @HostBinding('tabindex') tabindex: number = -1;\n\n    @HostBinding('class.selected')\n    @HostBinding('attr.aria-selected')\n    set selected(isSelected: boolean) {\n        isSelected ? this._selection.select(this.data) : this._selection.deselect(this.data);\n    }\n\n    get selected(): boolean {\n        return this._selection.isSelected(this.data);\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _selection: SelectionService, elementRef: ElementRef) {\n\n        _selection.active$.pipe(takeUntil(this._onDestroy), filter(data => data === this.data)).subscribe(active => {\n            _selection.focus$.next(active);\n            elementRef.nativeElement.focus();\n        });\n\n        // make this item tabbable or not based on the focused element\n        _selection.focus$.pipe(takeUntil(this._onDestroy))\n            .subscribe(focused => this.tabindex = focused === this.data ? 0 : -1);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMouseDown(event: MouseEvent): void {\n        this._selection.strategy.mousedown(event, this.data);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent): void {\n        this._selection.strategy.click(event, this.data);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._selection.strategy.keydown(event, this.data);\n    }\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class MultipleSelectListStrategy extends SelectionStrategy {\n\n    private _lastSelection: any;\n\n    /** Prevent the browser from highlighting text on shift click */\n    mousedown(event: MouseEvent): void {\n        event.preventDefault();\n    }\n\n    click(event: MouseEvent, data: any): void {\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // if the shift key is pressed we want to perform a multiple selection\n        if (event.shiftKey) {\n            return this.multipleSelect(data);\n        }\n\n        // otherwise perform a single toggle selection\n        if (this.selectionService.isSelected(data)) {\n            this.deselect(data);\n            this._lastSelection = null;\n        } else {\n            this.select(data);\n            this._lastSelection = data;\n        }\n    }\n\n    keydown(event: KeyboardEvent, data: any): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(true);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(false);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.toggle(data);\n                this._lastSelection = this.selectionService.isSelected(data) ? data : null;\n                break;\n        }\n    }\n\n    multipleSelect(data: any): void {\n\n        // if there is no start item selected\n        if (!this._lastSelection) {\n            this.select(data);\n            return this._lastSelection = data;\n        }\n\n        // if there already is a start item then find the items in the range\n        this.select(...this.getSelectedItems(this._lastSelection, data));\n\n        // store the selection end point\n        this._lastSelection = data;\n    }\n\n    private getSelectedItems(start: any, end: any): any[] {\n\n        // get the latest dataset\n        const { dataset } = this.selectionService;\n\n        // get the indexes of the start and end point\n        const startIdx = dataset.indexOf(start);\n        const endIdx = dataset.indexOf(end);\n\n        // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n        return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n    }\n\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class SingleSelectListStrategy extends SelectionStrategy {\n\n    click(_event: MouseEvent, data: any): void {\n\n        if (!this.selectionService.isSelected(data)) {\n            // deselect all other items\n            this.deselectAll();\n        }\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // toggle the selected state of the item\n        this.toggle(data);\n    }\n\n    keydown(event: KeyboardEvent, data: any): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(true);\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(false);\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.click(null, data);\n                break;\n        }\n    }\n\n}","import { AfterContentInit, Component, ContentChildren, EventEmitter, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SelectionService } from '../../directives/selection/selection.service';\nimport { MultipleSelectListStrategy } from './multiple-select-list.strategy';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SingleSelectListStrategy } from './single-select-list.strategy';\n\n@Component({\n    selector: 'ux-select-list',\n    templateUrl: './select-list.component.html',\n    providers: [SelectionService],\n    host: {\n        role: 'list'\n    }\n})\nexport class SelectListComponent implements AfterContentInit, OnDestroy {\n\n    @Input() set multiple(multiple: boolean) {\n        this._selection.strategy.deselectAll();\n        this._selection.setStrategy(multiple ? new MultipleSelectListStrategy() : new SingleSelectListStrategy());\n    }\n\n    @Input() selected: any[] = [];\n    @Output() selectedChange = new EventEmitter<any[]>();\n\n    @ContentChildren(SelectListItemComponent) items: QueryList<SelectListItemComponent>;\n\n    private _subscription: Subscription;\n\n    constructor(private _selection: SelectionService) {\n        // set the selection strategy to single by default\n        this._selection.setStrategy(new SingleSelectListStrategy());\n\n        // emit the selection changes when they occur\n        this._subscription = this._selection.selection$.subscribe(selection => this.selectedChange.emit(selection));\n    }\n\n    ngAfterContentInit(): void {\n\n        // supply the initial item set\n        this._selection.dataset = this.items.map(item => item.data);\n\n        // if the item set changes update the list\n        this.items.changes.subscribe(() => this._selection.dataset = this.items.map(item => item.data));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SelectListComponent } from './select-list.component';\n\n@NgModule({\n    declarations: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n    exports: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n})\nexport class SelectListModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\nimport { SidePanelComponent } from './side-panel.component';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        FocusIfModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    templateUrl: './spark.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';    \n    private _barColor: string | string[] = [];\n    \n    @Input() \n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input() \n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input() \n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable, QueryList } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ResizableTableColumnComponent } from './resizable-table-column.component';\n\n@Injectable()\nexport class ResizableTableService {\n\n  /** Indicate when the columns are ready */\n  isInitialised = new BehaviorSubject<boolean>(false);\n\n  /** Determine if we are currently resizing */\n  isResizing: boolean = false;\n\n  /** Store the percentage widths of each column */\n  columns: ReadonlyArray<number> = [];\n\n  /** Store the current width of the table */\n  tableWidth: number = 0;\n\n  /** Store the QueryList of columns */\n  private _columns: QueryList<ResizableTableColumnComponent>;\n\n  /** Store the size of each column */\n  setColumns(columns: QueryList<ResizableTableColumnComponent>): void {\n\n    // store the current columns\n    this._columns = columns;\n\n    // store the sizes\n    this.columns = columns.map(column => (column.getNaturalWidth() / this.tableWidth) * 100);\n\n    // indicate we are now initialised\n    if (this.isInitialised.value === false) {\n      this.isInitialised.next(true);\n    }\n  }\n\n  /** Update the resizing state */\n  setResizing(isResizing: boolean): void {\n    this.isResizing = isResizing;\n  }\n\n  /** Get the width of a column in a specific unit */\n  getColumnWidth(index: number, unit: ColumnUnit, columns: ReadonlyArray<number> = this.columns): number {\n\n    switch (unit) {\n\n      case ColumnUnit.Percentage:\n        return columns[index];\n\n      case ColumnUnit.Pixel:\n        return (this.tableWidth / 100) * columns[index];\n    }\n\n  }\n\n  /** Allow setting the column size in any unit */\n  setColumnWidth(index: number, value: number, unit: ColumnUnit, columns: ReadonlyArray<number> = this.columns): ReadonlyArray<number> {\n\n    // create a new array so we keep the instance array immutable\n    const sizes = [...columns];\n\n    switch (unit) {\n\n      case ColumnUnit.Percentage:\n        sizes[index] = value;\n        break;\n\n      case ColumnUnit.Pixel:\n        sizes[index] = (value / this.tableWidth) * 100;\n        break;\n    }\n\n    // update the instance variable\n    return sizes;\n  }\n\n  /** Resize a column by a specific pixel amount */\n  resizeColumn(index: number, delta: number): void {\n\n    // get the sibling column that will also be resized\n    const sibling = this.getSiblingColumn(index);\n\n    // if there is no sibling that can be resized then stop here\n    if (!sibling) {\n      return;\n    }\n\n    // create a new array for the sizes\n    let columns = [...this.columns] as number[];\n\n    // resize the column to the desired size\n    columns = this.setColumnWidth(index, Math.round(this.getColumnWidth(index, ColumnUnit.Pixel) + delta), ColumnUnit.Pixel, columns) as number[];\n    columns = this.setColumnWidth(sibling, Math.round(this.getColumnWidth(sibling, ColumnUnit.Pixel) - delta), ColumnUnit.Pixel, columns) as number[];\n\n    // if the move is not possible then stop here\n    if (!this.isWidthValid(index, this.getColumnWidth(index, ColumnUnit.Pixel, columns)) || !this.isWidthValid(sibling, this.getColumnWidth(sibling, ColumnUnit.Pixel, columns))) {\n      return;\n    }\n\n    // check that we add up to exactly 100%\n    const total = columns.reduce((count, column) => column + count, 0);\n\n    // if the columns to not add to 100 ensure we make them\n    if (total !== 100) {\n      columns[index] += (100 - total);\n    }\n\n    // store the new sizes\n    this.columns = columns;\n  }\n\n  /** Determine whether a column is above or below its minimum width */\n  private isWidthValid(index: number, width: number): boolean {\n\n    // get the column at a given position\n    const column = this.getColumnInstance(index);\n\n    // determine if the specified width is greater than the min width\n    return column && width >= column.minWidth;\n  }\n\n  /** Get the next column in the sequence of columns */\n  private getSiblingColumn(index: number): number | null {\n\n    // find the first sibling that is not disabled\n    for (let idx = index + 1; idx < this.columns.length; idx++) {\n\n      const sibling = this.getColumnInstance(idx);\n\n      if (!sibling || !sibling.disabled) {\n        return idx;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the column class from our query list */\n  private getColumnInstance(index: number): ResizableTableColumnComponent | null {\n    return this._columns ? this._columns.toArray()[index] : null;\n  }\n\n}\n\nexport enum ColumnUnit {\n  Pixel,\n  Percentage\n}","import { Directive, ElementRef, HostBinding } from '@angular/core';\nimport { ColumnUnit, ResizableTableService } from './resizable-table.service';\n\n@Directive({\n  selector: '[uxResizableTableCell]'\n})\nexport class ResizableTableCellDirective {\n\n\n  /** The percentage width of the column */\n  @HostBinding('style.width') get width(): string {\n    return this._table.isResizing ?\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)}px` :\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%`;\n  }\n\n  /** The flex width of the column */\n  @HostBinding('style.flex') get flex(): string {\n\n    // if we are resizing then always return 'none' to allow free movement\n    if (this._table.isResizing) {\n      return 'none';\n    }\n\n    return this._table.isInitialised.value ? `0 1 ${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%` : '';\n  }\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService) { }\n\n  /** Get the column index this cell is part of */\n  private getCellIndex(): number {\n    return (this._elementRef.nativeElement as HTMLTableCellElement).cellIndex;\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { ColumnUnit, ResizableTableService } from './resizable-table.service';\n\n@Component({\n  selector: '[uxResizableTableColumn]',\n  templateUrl: './resizable-table-column.component.html',\n  host: {\n    class: 'ux-resizable-table-column'\n  }\n})\nexport class ResizableTableColumnComponent {\n\n  /** Disabled the column resizing */\n  @Input() disabled: boolean = false;\n\n  /** The percentage width of the column */\n  @HostBinding('style.width') get width(): string {\n\n    if (!this._table.isInitialised.value) {\n      return;\n    }\n\n    return this._table.isResizing ?\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)}px` :\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%`;\n  }\n\n  /** The flex width of the column */\n  @HostBinding('style.flex') get flex(): string {\n\n    // if we are resizing then always return 'none' to allow free movement\n    if (this._table.isResizing) {\n      return 'none';\n    }\n\n    return this._table.isInitialised.value ? `0 1 ${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%` : '';\n  }\n\n  /** Get the minimum width allowed by the column */\n  get minWidth(): number {\n    // determine the minimum width of the column based on its computed CSS value\n    const computed = parseFloat(getComputedStyle(this._elementRef.nativeElement).minWidth);\n\n    // if it is disabled use its current width - otherwise use its CSS min width if it is valid\n    return this.disabled ? this._elementRef.nativeElement.offsetWidth : isNaN(computed) ? 0 : computed;\n  }\n\n  /** Store the position of the mouse within the drag hanlde */\n  private _offset: number;\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService) { }\n\n  /** Get the natural pixel width of the column */\n  getNaturalWidth(): number {\n    return this._elementRef.nativeElement.offsetWidth;\n  }\n\n  /** When the dragging starts */\n  onDragStart(event: MouseEvent): void {\n\n    // determine the mouse position within the handle\n    this._offset = event.clientX - (event.target as HTMLElement).getBoundingClientRect().left;\n  }\n\n  /** When the mouse is moved */\n  onDragMove(event: MouseEvent, handle: HTMLDivElement): void {\n\n    // get the current mouse position\n    const mouseX = event.pageX - pageXOffset;\n\n    // position of the drag handle\n    const { left } = handle.getBoundingClientRect();\n\n    // determine how much the mouse has moved since the last update\n    const delta = mouseX - (left + this._offset);\n\n    // perform resizing\n    this._table.resizeColumn(this.getCellIndex(), delta);\n\n    this._table.setResizing(true);\n\n  }\n\n  /** When the dragging ends */\n  onDragEnd(): void {\n    this._table.setResizing(false);\n  }\n\n  /** Get the column index this cell is part of */\n  private getCellIndex(): number {\n    return (this._elementRef.nativeElement as HTMLTableCellElement).cellIndex;\n  }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, OnDestroy, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ResizableTableColumnComponent } from './resizable-table-column.component';\nimport { ResizableTableService } from './resizable-table.service';\nimport { ResizeService } from '../../../directives/resize/index';\n\n@Directive({\n  selector: '[uxResizableTable]',\n  providers: [ResizableTableService],\n  host: {\n    class: 'ux-resizable-table'\n  }\n})\nexport class ResizableTableDirective implements AfterViewInit, OnDestroy {\n\n  /** Get all the column headers */\n  @ContentChildren(ResizableTableColumnComponent, { descendants: true }) columns: QueryList<ResizableTableColumnComponent>;\n\n  /** Unsubscribe from the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService, resize: ResizeService) {\n    // watch for the table being resized\n    resize.addResizeListener(this._elementRef.nativeElement)\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(dimensions => _table.tableWidth = this.getScrollWidth());\n  }\n\n  /** Once we have the columns make them resizable and watch for changes to columns */\n  ngAfterViewInit(): void {\n\n    // ensure we initially set the table width\n    this._table.tableWidth = this.getScrollWidth();\n\n    // set the columns - prevent expression changed error\n    requestAnimationFrame(() => this._table.setColumns(this.columns));\n\n    // watch for any future changes to the columns\n    this.columns.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this._table.setColumns(this.columns));\n  }\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Get the smallest tbody width taking into account scrollbars (uxFixedHeaderTable) */\n  private getScrollWidth(): number {\n    return Array.from((this._elementRef.nativeElement as HTMLTableElement).tBodies)\n      .reduce((width, tbody) => Math.min(width, tbody.scrollWidth), (this._elementRef.nativeElement as HTMLTableElement).offsetWidth);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DragModule } from '../../directives/drag/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ResizableTableCellDirective } from './table-column-resize/resizable-table-cell.directive';\nimport { ResizableTableColumnComponent } from './table-column-resize/resizable-table-column.component';\nimport { ResizableTableDirective } from './table-column-resize/resizable-table.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        DragModule,\n        ResizeModule\n    ],\n    declarations: [\n        ResizableTableDirective,\n        ResizableTableColumnComponent,\n        ResizableTableCellDirective\n    ],\n    exports: [\n        ResizableTableDirective,\n        ResizableTableColumnComponent,\n        ResizableTableCellDirective\n    ]\n})\nexport class TableModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    templateUrl: './tab.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    templateUrl: './tabset.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetComponent } from './tabset.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    templateUrl: './timeline.component.html'\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\nlet uniqueId: number = 0;\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    templateUrl: './timeline-event.component.html'\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() id: string = `ux-timeline-event-${uniqueId++}`;\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    templateUrl: './toggleswitch.component.html',\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolbarSearchComponent } from './toolbar-search.component';\r\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\r\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\r\n\r\nconst DECLARATIONS = [\r\n    ToolbarSearchComponent,\r\n    ToolbarSearchFieldDirective,\r\n    ToolbarSearchButtonDirective\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: DECLARATIONS,\r\n    declarations: DECLARATIONS,\r\n    providers: [],\r\n})\r\nexport class ToolbarSearchModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    templateUrl: './virtual-scroll.component.html'\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\r\n\r\nimport { AutoGrowDirective } from './auto-grow.directive';\r\n\r\n@NgModule({\r\n    exports: [AutoGrowDirective],\r\n    declarations: [AutoGrowDirective]\r\n})\r\nexport class AutoGrowModule { }\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n  selector: '[uxOverflowObserver], [uxOverflowHorizontalObserver], [uxOverflowVerticalObserver]',\n  exportAs: 'ux-overflow-observer'\n})\nexport class OverflowDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  /** Allow a observable to be used to check for overflow */\n  @Input() trigger: Observable<void>;\n\n  /** Allow overflow to be within a range before emitting */\n  @Input() tolerance: number = 0;\n\n  /** Emit when there is a change to the overflow state - horizontal or vertical */\n  @Output() uxOverflowObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the horizontal axis */\n  @Output() uxOverflowHorizontalObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the vertical axis */\n  @Output() uxOverflowVerticalObserver = new EventEmitter<boolean>();\n\n  /** Store the overflow state on both axis */\n  private _state = { horizontalOverflow: false, verticalOverflow: false };\n\n  /** Unsubscribe from all the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** Set up the trigger if specified */\n  ngOnInit(): void {\n    if (this.trigger) {\n      this.trigger.pipe(takeUntil(this._onDestroy)).subscribe(() => this.checkForOverflow());\n    }\n  }\n\n  /** Perform an intial check for overflow */\n  ngAfterViewInit(): void {\n    requestAnimationFrame(() => this.checkForOverflow());\n  }\n\n  /** Unsubscribe from the trigger */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Programmatically trigger check for overflow */\n  checkForOverflow(): void {\n\n    const { offsetWidth, offsetHeight, scrollWidth, scrollHeight } = this._elementRef.nativeElement;\n    const horizontalOverflow = (scrollWidth - offsetWidth) > this.tolerance;\n    const verticalOverflow = (scrollHeight - offsetHeight) > this.tolerance;\n\n    if (horizontalOverflow !== this._state.horizontalOverflow) {\n      this.uxOverflowHorizontalObserver.emit(horizontalOverflow);\n    }\n\n    if (verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowVerticalObserver.emit(verticalOverflow);\n    }\n\n    if (horizontalOverflow !== this._state.horizontalOverflow || verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowObserver.emit((horizontalOverflow || verticalOverflow));\n    }\n\n    // store the state\n    this._state = { horizontalOverflow, verticalOverflow };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OverflowDirective } from './overflow/overflow-observer.directive';\n\n@NgModule({\n  exports: [OverflowDirective],\n  declarations: [OverflowDirective]\n})\nexport class ObserversModule { }\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { SelectionService } from './selection.service';\r\n\r\n@Directive({\r\n    selector: '[uxSelectionItem]',\r\n    exportAs: 'ux-selection-item'\r\n})\r\nexport class SelectionItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input() uxSelectionItem: any;\r\n\r\n    @Input() @HostBinding('class.ux-selection-selected')\r\n    set selected(selected: boolean) {\r\n        selected ? this.select() : this.deselect();\r\n    }\r\n\r\n    get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    @Input() tabindex: number = null;\r\n\r\n    @Output() selectedChange = new EventEmitter<boolean>();\r\n\r\n    @HostBinding('class.ux-selection-focused') active: boolean = false;\r\n\r\n    @HostBinding('attr.tabindex')\r\n    get attrTabIndex(): number {\r\n        return (this.tabindex !== null) ? this.tabindex : this._managedTabIndex;\r\n    }\r\n\r\n    private _selected: boolean = false;\r\n    private _managedTabIndex: number = -1;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _selectionService: SelectionService, private _elementRef: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        // if there is no associated data then throw an error\r\n        if (!this.uxSelectionItem) {\r\n            throw new Error('The uxSelectionItem directive must have data associated with it.');\r\n        }\r\n\r\n        // subscribe to selection changes on this item\r\n        this._selectionService.getSelectionState(this.uxSelectionItem).pipe(takeUntil(this._onDestroy)).subscribe(selected => {\r\n\r\n            // store the selected state\r\n            this._selected = selected;\r\n\r\n            // emit the selected state\r\n            this.selectedChange.emit(selected);\r\n        });\r\n\r\n        this._selected = this._selectionService.isSelected(this.uxSelectionItem);\r\n\r\n        this.selectedChange.emit(this._selected);\r\n\r\n        // subscribe to changes to the active state\r\n        this._selectionService.active$.pipe(takeUntil(this._onDestroy), map(active => active === this.uxSelectionItem)).subscribe(active => {\r\n\r\n            // store the focus state\r\n            this.active = active;\r\n\r\n            // if it is active then focus the element\r\n            if (active === true) {\r\n                this._selectionService.focus$.next(this.uxSelectionItem);\r\n                this._elementRef.nativeElement.focus();\r\n            }\r\n        });\r\n\r\n        // Subscribe to changes to the focus target\r\n        // This is mostly the same as active$, except that it has an initial value of the first item in the collection.\r\n        this._selectionService.focus$.pipe(takeUntil(this._onDestroy)).subscribe(focusTarget => {\r\n            this._managedTabIndex = (focusTarget === this.uxSelectionItem) ? 0 : -1;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    click(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.click(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    mousedown(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keydown(event: KeyboardEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isKeyboardEnabled) {\r\n            this._selectionService.strategy.keydown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('focus')\r\n    focus(): void {\r\n        // If tabbed to from outside the component, activate.\r\n        if (this._selectionService.active$.getValue() !== this.uxSelectionItem) {\r\n            this._selectionService.activate(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select this item using the current strategy\r\n     */\r\n    select(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.select(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselect this item using the current strategy\r\n     */\r\n    deselect(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.deselect(this.uxSelectionItem);\r\n        }\r\n    }\r\n}\r\n","import { AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\nimport { SelectionStrategy } from './strategies/selection.strategy';\n\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: any[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode | SelectionStrategy) {\n    this._selectionService.setStrategy(mode);\n  }\n\n  @Input() set clickSelection(isClickEnabled: boolean) {\n    this._selectionService.isClickEnabled = isClickEnabled;\n  }\n\n  @Input() set keyboardSelection(isKeyboardEnabled: boolean) {\n    this._selectionService.isKeyboardEnabled = isKeyboardEnabled;\n  }\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number = null;\n\n  @Output() uxSelectionChange = new EventEmitter<any[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective>;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _selectionService: SelectionService, private _cdRef: ChangeDetectorRef) {\n    _selectionService.selection$.pipe(takeUntil(this._onDestroy)).subscribe(items => this.uxSelectionChange.emit(items));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this.items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.update());\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n\n    // Make sure that a tab target has been defined so that the component can be tabbed to.\n    if (this._selectionService.focus$.getValue() === null && this._selectionService.dataset.length > 0) {\n      this._selectionService.focus$.next(this._selectionService.dataset[0]);\n    }\n\n    // The above could trigger a change in the computed tabindex for selection items\n    this._cdRef.detectChanges();\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nexport class TreeGridState {\n    readonly loading$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        public readonly level: number,\n        public readonly setSize: number,\n        public readonly positionInSet: number) {}\n}\n","import { ChangeDetectorRef, Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridLoadFunction } from './tree-grid-load-function.type';\nimport { TreeGridState } from './tree-grid-state.class';\n\n@Injectable()\nexport class TreeGridService implements OnDestroy {\n\n    /** The raw table data */\n    data$ = new BehaviorSubject<TreeGridItem[]>([]);\n\n    /** The flattened table data */\n    rows$ = new BehaviorSubject<TreeGridItem[]>([]);\n\n    /** The function to load child items */\n    loadChildren: TreeGridLoadFunction;\n\n    /** Ensure we destroy all observables correctly */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        this.data$.pipe(takeUntil(this._onDestroy)).subscribe(data => this.rows$.next(this.getFlattenedTree(data)));\n    }\n\n    /** Unsubscribe from all observables */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Set the expanded state of a row */\n    async setExpanded(item: TreeGridItem, expanded: boolean) {\n        if (expanded) {\n            await this.getChildren(item);\n            this.insertChildren(item);\n        } else {\n            this.removeChildren(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /** A function to flatten tree data */\n    private getFlattenedTree(data: TreeGridItem[], parent?: TreeGridItem): TreeGridItem[] {\n        // flatten the nodes at this level\n        return data.reduce((previous, item, index) => {\n\n            item.state = new TreeGridState(parent ? parent.state.level + 1 : 0, data.length, index + 1);\n\n            // Convert any child nodes\n            const children = (item.children && item.expanded) ? this.getFlattenedTree(item.children, item) : [];\n\n            // return the nodes in a flattened array\n            return [...previous, item, ...children];\n        }, []);\n    }\n\n    /** Load any children dynamically */\n    private async getChildren(item: TreeGridItem): Promise<void> {\n        if (!item.children && this.loadChildren) {\n            item.state.loading$.next(true);\n\n            try {\n                item.children = await this.getNormalizedChildren(this.loadChildren(item));\n            }\n            finally {\n                item.state.loading$.next(false);\n            }\n        }\n    }\n\n    /** We want to support an array, a promise and an observable. This will return all types as a promise */\n    private async getNormalizedChildren(response: TreeGridItem[] | Promise<TreeGridItem[]> | Observable<TreeGridItem[]>): Promise<TreeGridItem[]> {\n\n        // if it is already an observable do nothing\n        if (response instanceof Observable) {\n            return await response.toPromise();\n        }\n\n        // if it is a promise wrap it as an observable\n        if (response instanceof Promise) {\n            return await response;\n        }\n\n        // if it is an array then make it an observable\n        return response;\n    }\n\n    /** Insert the children into the flattened tree at the correct location */\n    private insertChildren(parent: TreeGridItem): void {\n        if (!parent.children) {\n            return;\n        }\n\n        const row = this.rows$.getValue();\n\n        const index = row.indexOf(parent);\n\n        if (index < 0) {\n            return;\n        }\n\n        // Skip duplicates - this could happen if an already expanded child has been inserted\n        const uniqueChildren = parent.children.filter(child => row.indexOf(child) === -1);\n\n        const childRows = this.getFlattenedTree(uniqueChildren, parent);\n\n        row.splice(index + 1, 0, ...childRows);\n    }\n\n    /** Remove all rows from the flattened tree */\n    private removeChildren(parent: TreeGridItem): void {\n\n        const rows = this.rows$.getValue();\n        const index = rows.indexOf(parent);\n\n        if (index < 0) {\n            return;\n        }\n\n        while (index + 1 < rows.length && rows[index + 1].state.level > parent.state.level) {\n            rows.splice(index + 1, 1);\n        }\n    }\n}\n","import { Directive, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs-compat/BehaviorSubject';\nimport { distinctUntilChanged, skip, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../common/operators/tick.operator';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridService } from './tree-grid.service';\n\n@Directive({\n    selector: '[uxTreeGridRow]',\n    exportAs: 'uxTreeGridRow',\n    host: {\n        '[class.treegrid-row]': 'true'\n    }\n})\nexport class TreeGridRowDirective implements OnInit, OnDestroy {\n\n    @Input('uxTreeGridRow')\n    item: TreeGridItem;\n\n    @Input()\n    canExpand: boolean;\n\n    @Input()\n    set expanded(expanded: boolean) {\n        this._expanded$.next(!!expanded);\n    }\n    get expanded(): boolean {\n        return this._expanded$.getValue();\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @HostBinding('class.treegrid-row-loading')\n    loading: boolean = false;\n\n    @HostBinding('class.treegrid-row-expanded')\n    isExpanded: boolean = false;\n\n    private _expanded$ = new BehaviorSubject(false);\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _treeGridService: TreeGridService) {\n        this._expanded$.pipe(skip(1), tick(), distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe(expanded => {\n            this.expandedChange.emit(expanded);\n            this._treeGridService.setExpanded(this.item, expanded);\n            this.isExpanded = expanded;\n        });\n    }\n\n    ngOnInit(): void {\n\n        if (!this.item || !this.item.state) {\n            throw new Error('uxTreeGridRow should be configured with an object emitted by uxTreeGrid.rows.');\n        }\n\n        this.item.state.loading$.pipe(takeUntil(this._onDestroy))\n            .subscribe(loading => this.loading = loading);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('keydown.ArrowLeft', ['$event'])\n    collapse(event?: Event): void {\n\n        this.expanded = false;\n\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.ArrowRight', ['$event'])\n    expand(event?: Event): void {\n\n        // take into account whether or not the item can expanded\n        this.expanded = this.canExpand && true;\n\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    toggle(): void {\n        this.expanded ? this.collapse() : this.expand();\n    }\n}","import { Directive, HostBinding, Input } from '@angular/core';\nimport { TreeGridRowDirective } from './tree-grid-row.directive';\n\n@Directive({\n    selector: '[uxTreeGridIndent]',\n})\nexport class TreeGridIndentDirective {\n\n    /** The amount each level should be indented by */\n    @Input() uxTreeGridIndent: number;\n\n    /** The padding value applied to each level */\n    @HostBinding('style.padding-left.px')\n    get indentation(): number {\n        return this._row && this._row.item ? 7 + (this._row.item.state.level * (this.uxTreeGridIndent || 25)) : 7;\n    }\n\n    constructor(private _row: TreeGridRowDirective) {}\n}","import { Directive, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridLoadFunction } from './tree-grid-load-function.type';\nimport { TreeGridService } from './tree-grid.service';\nimport { Subject } from 'rxjs/Subject';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n    selector: '[uxTreeGrid]',\n    providers: [TreeGridService],\n    host: {\n        class: 'treegrid'\n    }\n})\nexport class TreeGridDirective implements OnInit, OnDestroy {\n    @Input('uxTreeGrid')\n    set data(data: TreeGridItem[]) {\n        this._treeGridService.data$.next(data);\n    }\n\n    @Input()\n    set loadChildren(loadChildren: TreeGridLoadFunction) {\n        this._treeGridService.loadChildren = loadChildren;\n    }\n\n    @Input()\n    rows: TreeGridItem[];\n\n    @Output()\n    rowsChange = new EventEmitter<TreeGridItem[]>();\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _treeGridService: TreeGridService) {}\n\n    ngOnInit(): void {\n        this._treeGridService.rows$.pipe(takeUntil(this._onDestroy)).subscribe(rows => this.rowsChange.emit(rows));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { TreeGridIndentDirective } from './tree-grid-indent.directive';\nimport { TreeGridRowDirective } from './tree-grid-row.directive';\nimport { TreeGridDirective } from './tree-grid.directive';\n\n@NgModule({\n    declarations: [\n        TreeGridDirective,\n        TreeGridRowDirective,\n        TreeGridIndentDirective\n    ],\n    exports: [\n        TreeGridDirective,\n        TreeGridRowDirective,\n        TreeGridIndentDirective\n    ]\n})\nexport class TreeGridModule {}\n","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() template: string;\n    @Input() templateUrl: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: any[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange: EventEmitter<TreeGridOptions> = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n    @Output() currentRowChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() treeDataChange: EventEmitter<TreeGridData[]> = new EventEmitter<TreeGridData[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}\n","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}"]}