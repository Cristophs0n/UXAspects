{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.service.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion-panel/accordion-panel.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.component.ts","ng://@ux-aspects/ux-aspects/components/accordion/accordion.module.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","null","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.component.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/focus-within/focus-within.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/splitter/splitter-accessibility.directive.ts","ng://@ux-aspects/ux-aspects/common/operators/tick.operator.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.service.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/tabbable-list/tabbable-list.directive.ts","ng://@ux-aspects/ux-aspects/directives/accessibility/accessibility.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/components/color-picker/color-picker.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-subject.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-utils.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.service.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/interfaces/conduit-properties.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.decorator.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.service.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drop.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/check-list-item/facet-check-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/components/filters/events/filter-add-event.ts","ng://@ux-aspects/ux-aspects/components/filters/events/filter-remove-all-event.ts","ng://@ux-aspects/ux-aspects/components/filters/events/filter-remove-event.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.service.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-typeahead-highlight.pipe.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/custom-control/custom-control.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.service.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-link/navigation-link.directive.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-secondary-item/navigation-secondary-item.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/pagination/pagination.component.ts","ng://@ux-aspects/ux-aspects/components/pagination/pagination.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-focus.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-alt-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list-item/select-list-item.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/multiple-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/single-select-list.strategy.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.component.ts","ng://@ux-aspects/ux-aspects/components/select-list/select-list.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table.service.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table-column.component.ts","ng://@ux-aspects/ux-aspects/components/table/table-column-resize/resizable-table.directive.ts","ng://@ux-aspects/ux-aspects/components/table/table.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/observers/overflow/overflow-observer.directive.ts","ng://@ux-aspects/ux-aspects/directives/observers/observers.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-state.class.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.service.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-row.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid-indent.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.directive.ts","ng://@ux-aspects/ux-aspects/directives/tree-grid/tree-grid.module.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts"],"names":["AccordionPanelHeadingDirective","Directive","args","selector","AccordionService","Subject","prototype","collapseAll","this","collapse","next","Injectable","uniqueId","AccordionPanelComponent","accordion","_this","panelId","EventEmitter","subscribe","toggle","expanded","collapseOthers","expand","disabled","expandedChange","Component","template","host","class","role","Input","type","HostBinding","Output","AccordionComponent","_accordion","Object","defineProperty","providers","aria-multiselectable","AccordionModule","NgModule","imports","CommonModule","declarations","exports","BreadcrumbsComponent","clickCrumb","event","crumb","onClick","call","BreadcrumbsModule","RouterModule","extendStatics","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","e","rejected","result","done","then","apply","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","__spread","concat","ResizeService","_zone","ResizeObserver","elementDidResize","bind","WeakMap","ngOnDestroy","_observer","disconnect","addResizeListener","target","runOutsideAngular","observe","_targets","has","get","emitter","ReplaySubject","set","removeResizeListener","unobserve","entries","run","entries_1","tslib_1.__values","entries_1_1","entry","width","offsetWidth","height","offsetHeight","NgZone","ResizeDirective","_elementRef","_resizeService","_ngZone","ngOnInit","_subscription","nativeElement","pipe","debounceTime","throttle","uxResize","emit","unsubscribe","ElementRef","ResizeModule","CardTabContentDirective","CardTabsService","BehaviorSubject","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","getComputedStyle","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","id","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","key","colorValueSet","_colors","getColorValueByHex","_html","_element","document","createElement","className","innerHTML","appendChild","getColorValue","parentNode","removeChild","color","hex","replace","parseInt","substring","toString","ThemeColor","querySelector","Error","rgba","window","backgroundColor","match","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","colorName","toLowerCase","toRgba","a","_r","_g","_b","undefined","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","primary","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","BUTTON_WIDTHS","sm","md","lg","ColorPickerComponent","colors","normalizedColors","isArray","row","ColorPickerColor","selected","selected$","columns","columns$","buttonSize","buttonSize$","pairwise","takeUntil","_onDestroy","prev","curr","selectedChange","combineLatest","w","cssWidth","complete","updateColorValue","input","mode","inputPatterns","test","toggleColorEntryType","inputMode","exportAs","name","_color","_originalHexValue","_originalRgbaValue","FocusWithinDirective","_focusMonitor","ngZone","monitor","origin","uxFocusWithin","uxBlurWithin","stopMonitoring","FocusMonitor","SplitterAccessibilityDirective","_renderer","_platform","_splitter","dragProgress","updateGutterAttributes","ngAfterViewInit","onGutterChange","areas","changes","isPlatformBrowser","MutationObserver","childList","isSplitterGutter","focus","_gutters","getGutters","setGutterAttributes","gutters","idx","children","node","item","forEach","gutter","setAttribute","setGutterValueNow","setGutterValueMin","setGutterValueMax","index","area","displayedAreas","round","size","toArray","minSize","availableSize","_area","reduce","total","onKeydown","gutterKeydown","onIncreaseKey","setGutterPosition","preventDefault","onDecreaseKey","onHomeKey","getAreasFromGutter","delta","comp","onEndKey","tagName","refreshStyleSizes","indexOf","Renderer2","Inject","PLATFORM_ID","SplitComponent","ContentChildren","SplitAreaDirective","HostListener","tick","source","Observable","subscriber","requestAnimationFrame","err","TabbableListService","initialize","items","wrap","_items","focusKeyManager","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","_direction","withWrap","setFirstItemTabbable","onInit","initialized","ensureTabbableItem","activate","activeItemIndex","setActiveItem","isItemActive","activeItem","first","tabindex","focusTabbableItem","findIndex","allowAltModifier","altKey","allowCtrlModifier","ctrlKey","allowBoundaryKeys","which","HOME","setFirstItemActive","END","setLastItemActive","hierarchy","keyCode","DOWN_ARROW","RIGHT_ARROW","keyboardExpanded$","UP_ARROW","LEFT_ARROW","parent","sortItemsByHierarchy","list","topLevel","flattenHierarchy","flatList","sort","rank","nextId","TabbableListItemDirective","_tabbableList","focusMonitor","change","active","TabbableListDirective","ngAfterContentInit","_focusedElement","_orderedItems","QueryList","reset","notifyOnChanges","focusOnShow","returnFocus","HTMLElement","setTimeout","descendants","AccessibilityModule","A11yModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","Infinity","_propagateChange","_min","_max","_step","_disabled","increment","decrement","isValid","valid","onScroll","deltaY","wheelDelta","[class.has-error]","NumberPickerModule","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_tooltipService","fromEvent","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","firstChange","currentValue","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","delay","clearTimeout","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","includes","array","showTriggers","hideTriggers","isFocused","activeElement","removeAttribute","ViewContainerRef","Overlay","ScrollDispatcher","TooltipModule","OverlayModule","ObserversModule","entryComponents","ColorPickerModule","ColumnSortingDirective","events","toggleColumn","sorting","order","singleSort","toggleSingleColumn","toggleMultipleColumn","state","ColumnSortingState","NoSort","column","Ascending","Descending","_column","ColumnSortingComponent","_columnSorter","columnIdx","stateChange","changeState","ColumnSortingModule","ConduitSubject","conduit","zoneId","_subject","subject","getInitialValue","distinctUntilChanged","onOutput","getEvents","onInput","acceptsInput","subjects","getSubjects","subjectOne","subjectTwo","lastModified","getTime","producesOutput","zone","outputValue","Date","destroy","invokeSuperFunction","functionName","functionList","_i","func","ConduitZone","_zoneId","unregisterConduit","registerConduit","getConduitSubject","setZoneId","setConduitProperties","properties","conduitSubject","_conduit","prop","createConduit","registerConduits","component","_conduits","propertyKey","unregisterConduits","ConduitComponent","decorators","Optional","ConduitZoneComponent","_super","tslib_1.__extends","defaultConduitProps","CONDUITS","DashboardService","defaultOptions","dimensions$","visible","x","layout$","setLayoutData","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","forEachBlock","onResizeStart","action","_mouseEvent","bringToFront","onResizeDrag","mousePosX","pageX","pageXOffset","mousePosY","pageY","pageYOffset","handle","getBoundingClientRect","mouseX","left","mouseY","top","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","onDragStart","setWidgetOrigin","cacheWidgets","onDragEnd","_widgetOrigin","onDrag","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","wgt","widgetsToMove","this_1","space","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","splice","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","Rounding","RoundDownBelowHalf","RoundUpOverHalf","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundUp","getRowCount","emptyRow","sendToBack","stable","callback","DashboardComponent","dashboardService","layout","layoutChange","dashboardElement","onResize","DashboardWidgetComponent","regular","update","_columnSpan","_rowSpan","console","warn","random","getStackableValue","_row","setStackableValue","zIndex","dragstart","drag","dragend","property","DragService","onDrop","onDropEnter","onDropLeave","DragDirective","_drag","_mousedown$","draggable","dragStart","_isDragging","dragEvent","clone","cloneNode","addClass","group","data","model","_mousemove$","_mouseup$","dragMove","dragEnd","_clone","updateNodePosition","removeClass","_offset","clientX","clientY","inlineStyles","setStyle","styles","style","DropDirective","_dragService","isGroupAllowed","onMouseOver","_group","isMouseOver","isDragging","[class.ux-drop-hover]","DragModule","DashboardDragHandleDirective","elementRef","renderer","DECLARATIONS","gridify","range","start","end","dateRange","dates","setDate","getDate","compareDays","day1","day2","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","weekdays","weekdaysShort","weekday","timezones","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showMeridian","showSpinners","nowBtnText","ModeDirection","None","date","setViewportMonth","setViewportYear","date$","month$","year$","year","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","triggerDecrement","triggerIncrement","encapsulation","ViewEncapsulation","SpinButtonModule","TimeFormatPipe","transform","pad","Pipe","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","value$","getHours","hour","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","hourChange","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","aria-label","TimePickerModule","DayViewService","_datepicker","createDayGrid","setFocus","focused$","getDay","isToday","isActive","isCurrentMonth","grid$","selectedDay","DayViewComponent","datePicker","dayService","trackWeekByFn","trackDayByFn","_index","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","decrementTimezone","YearViewService","Subscription","_year","createYearGrid","_event","goToNextDecade","goToPreviousDecade","add","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","_timeout","preventScroll","focusIfScroll","focusIfDelay","FocusIfModule","DateTimePickerModule","forRoot","ngModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","TypeaheadOptionEvent","option","TypeaheadKeyService","handleKey","typeahead","open","moveHighlight","selectOnEnter","selectHighlighted","TypeaheadService","TypeaheadComponent","typeaheadElement","_changeDetector","_service","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","pageSize","arrayOrPromise","newOptions","open$","openChange","initOptions","highlighted$","highlightedKey","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","displayHtml","length_1","matchIndex","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","InfiniteScrollLoadButtonDirective","_template","_viewContainer","load","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","_updateRequests","filterOperator","request","check","auditTime","doRequest","enabled","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","loading","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","_subscriptions","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","subtree","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","of","from","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","scrollTop","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","current","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","scrollIntoView","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","TypeaheadModule","ReorderableHandleDirective","ReorderableModelDirective","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","isEmpty","getGroup","moves","canMove","_containers","getModelForElement","getModelFromElement","containers","c","mirrorContainer","on","sibling","drop","cancel","cloned","containerElement","isSameNode","ReorderableDirective","reorderableGroup","_container","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","reorderEnd","setTableCellWidths","captureCanvases","reorderingDisabled","handles","_handle","sourceCells","targetCells","cell","getPropertyValue","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","ReorderableModule","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","_announcer","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","tag","selectedFacet","announce","title","previousElementSibling","nextElementSibling","deselectAllFacets","trackBy","shiftRight","facetsReorderable","shiftFacet","shiftLeft","LiveAnnouncer","FacetBaseComponent","facetContainer","deselectAll","toggleFacetSelection","isFacetSelected","Host","FacetHeaderComponent","toggleExpand","canExpand","(click)","(keyup.enter)","[attr.aria-expanded]","[attr.aria-label]","FacetCheckListItemComponent","getLabel","FacetCheckListComponent","_focusKeyManager","activeIndex","toggleFacet","ViewChildren","FacetTypeaheadListItemComponent","FacetTypeaheadListComponent","typeaheadKeyService","maxResults","minCharacters","config","query$","tap","typeaheadOptions","mergeMap","getFacetObservable","updateTypeahead","query","typeaheadOpen","FacetTypeaheadHighlight","searchQuery","regex","RegExp","Facet","count","FilterAddEvent","FilterRemoveAllEvent","FilterRemoveEvent","FilterService","isSelected","initial","filters$","events$","remove","_filter","removeAll","FilterContainerComponent","filterService","filters","filtersChange","FilterBaseComponent","filtersContainer","removeFilter","addFilter","FilterDropdownComponent","_filterService","rxFilter","selectFilter","stopPropagation","FilterDynamicComponent","_defaultOptions","_options","typeaheadItems","getItems","maxIndividualItems","showTypeahead","selectOption","typeaheadOption","dropdown","clickOff","BsDropdownDirective","FilterTypeaheadHighlight","MenuNavigationService","MenuNavigationItemDirective","service","active$","setActive","activated","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","keyEnter","focusFirst","moveFirst","keydownHandler","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","ESCAPE","navigatedOut","nextIndex","menuOpen","DOCUMENT","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","isKeyMatch","ENTER","SPACE","menuPosition","EXPORTS","BsDropdownModule","MenuNavigationModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","onKeyDown","[class.horizontal]","[class.vertical]","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","close","setPrimaryButtonFocusable","isHorizontal","direction$","isVertical","setButtons","buttons","_buttons","btn","tabindex$","focusPrimaryButton","button","focusSibling","getFocusedButton","last","getButtonIndex","FloatingActionButtonComponent","fab","_tooltip","preserveWhitespaces","Attribute","FloatingActionButtonsComponent","animations","transition","opacity","stagger","animate","FloatingActionButtonsModule","ClickOutsideDirective","_initialised","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","PopoverModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","getChildren","children$","observer","child","nodes","_child","HierarchyBarComponent","hierarchyBar","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","HierarchyBarModule","SidePanelService","SidePanelComponent","inline","attachTo","openPanel","closePanel","clickHandler","closeOnExternalClick","ItemDisplayPanelComponent","visibleChange","panel","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","[attr.aria-labelledby]","WizardComponent","stepChange","invalidIndicator","setWizardStepIds","steps","stepChanging","StepChangingEvent","getCurrentStep","stepError","onNext","onPrevious","finish","onFinishing","onFinish","onCancel","gotoStep","stepIndex","stp","isLastStep","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","MarqueeWizardModule","WizardModule","FrameExtractionService","createVideoPlayer","videoPlayer","preload","src","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","skip","frames","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","duration","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","readyState","seekable","seeking","textTracks","videoTracks","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","canPlayType","addTextTrack","kind","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","hideSubtitleTracks","MediaPlayerBaseExtensionDirective","mediaPlayerService","ColorServiceModule","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","thumb","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","tooltips","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","diff","clamp","updateThumbPosition","eventPosition","MouseEvent","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","Number","toFixed","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","join","getSteps","output","showLabels","tk","t1","t2","destination","value1","value2","isSliderValue","obj1","obj2","SliderModule","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","volumeChangeEvent","mouseEnterVolume","volumeActive","mouseLeaveVolume","switchMap","timer","toggleMute","goToStart","goToEnd","isSubtitleActive","setSubtitleTrack","cues","line","getSubtitleTrack","[class.quiet]","MediaPlayerCustomControlDirective","MediaPlayerTimelineExtensionComponent","scrub","timeUpdateEvent","progressEvent","mousedown$","mousemove$","mouseup$","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","AudioService","_http","getAudioFileMetadata","mediaElement","responseType","response","filename","lastIndexOf","extension","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","getAudioBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","waveform","points","channel","arrayBuffer","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","createAnalyser","HttpClient","AudioServiceModule","HttpClientModule","MediaPlayerComponent","_audioService","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","DurationPipe","minutes","hours","days","DurationPipeModule","FileSizePipe","log","pow","FileSizePipeModule","NavigationItemComponent","_parent","_router","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","parentElement","levelClass","getLevelClass","setIndentWithoutArrow","_childrenChanges","some","indentWithoutArrow","[class.active]","[class.selected]","SkipSelf","Router","NavigationService","setExpanded","autoCollapse","collapseSiblings","siblings","parent_1","getParent","siblings_1","siblings_1_1","NavigationLinkDirective","_locationStrategy","_navigationService","_expanded$","navigationItem","ariaExpanded","updateNavigationState","updateAttributes","routerLink","commands","navigate","routerExtras","isActiveItem","href","getHref","indentChildren","urlTree","createUrlTree","prepareExternalUrl","serializeUrl","LocationStrategy","NavigationComponent","tree","hierarchyClasses","itemClick","needsIndent","NavigationModule","NotificationService","_colorService","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","updateItemsWithActiveRoute","secondaryNavigationAutoselect","secondary$","isParentOf","deselect","items$","updateItem","setItems","setParent","initialSelectedItem","setSecondaryNavigation","PageHeaderActiveNavigationItem","findActiveItem","exact","childItem","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","menuNavigationToggle","PageHeaderNavigationDropdownItemComponent","_pageHeaderService","_hover$","dropdownOpen","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationSecondaryItemDirective","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","indicatorX","indicatorWidth","PageHeaderComponent","condensed","_crumbs","crumbs","_logoBackground","_logoForeground","logoBackground","logoForeground","goBack","backClick","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","tabIndex","TabFocusDirective","_tabset","uxTabFocus","uniqueTabId","TabComponent","TabHeadingDirective","headingRef","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","TabsetModule","PageHeaderModule","PAGINATION_CONTROL_VALUE_ACCESSOR","PaginationComponent","_page","pages","getPages","onChange","pagesize","_pagesize","_total","onTouched","pageChange","trackByFn","pageCount","isPageVisible","numPages","maxSize","PaginationModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","RadioButtonModule","UNSET_FOCUS","groupId","SearchBuilderFocusService","focus$","clearFocus","SearchBuilderService","registerComponent","_components","cmp","registerComponents","components","getComponent","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","_searchBuilderFocusService","init","_id","removeAtIndex","SearchBuilderGroupComponent","searchBuilderGroupService","focusIndex","addField","removeFieldAtIndex","field","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","outlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","ComponentFactoryResolver","SearchBuilderComponent","_querySubscription","_validSubscription","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","_value$","_input$","_dropdownOpen","dropdownOpenChange","propagateChange","inputChange","allowNull","multiple","filter$","onfocus","singleInput","tagInput","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","inputKeyHandler","singleOptionSelected","TagInputEvent","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","validate","tags","_onTouchedHandler","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","commitTypeahead","commitInput","BACKSPACE","backspace","DELETE","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","tagValue","inputPattern","inputValid","tagPattern","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","BaseSearchComponent","validation","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchDateComponent","SearchSelectComponent","dropDirection","maxHeight","SearchTextComponent","SearchBuilderModule","SelectionStrategy","selectionService","setSelectionService","mousedown","keydown","selectAll","dataset","RowSelectionStrategy","shiftKey","multipleSelect","singleSelect","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","deactivate","startIdx","endIdx","activateSibling","RowAltSelectionStrategy","handleCursorKey","getSibling","SimpleSelectionStrategy","Set","SelectionService","_dataset","setFirstItemFocusable","_strategyToDestroy","selections","selection","selectionHasMutated","delete","getSelectionState","selection$","setStrategy","trim","setDisabled","isEnabled","SelectListItemComponent","onMouseDown","MultipleSelectListStrategy","_lastSelection","SingleSelectListStrategy","SelectListComponent","SelectListModule","SidePanelCloseDirective","SparkComponent","_theme","_trackColor","_barColor","values","val","SparkModule","ResizableTableService","setColumns","_columns","getNaturalWidth","tableWidth","isInitialised","setResizing","isResizing","unit","ColumnUnit","Percentage","Pixel","setColumnWidth","sizes","resizeColumn","getSiblingColumn","tslib_1.__spread","isWidthValid","getColumnInstance","ResizableTableCellDirective","_table","getCellIndex","cellIndex","ResizableTableColumnComponent","computed","onDragMove","onMoveLeft","onMoveRight","ResizableTableDirective","getScrollWidth","tBodies","tbody","TableModule","TimelineComponent","TimelineModule","TimelineEventComponent","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","blur","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","_embeddedView","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","OverflowDirective","horizontalOverflow","verticalOverflow","checkForOverflow","tolerance","_state","uxOverflowHorizontalObserver","uxOverflowVerticalObserver","uxOverflowObserver","SelectionItemDirective","_selectionService","_selected","_managedTabIndex","uxSelectionItem","focusTarget","isClickEnabled","isKeyboardEnabled","SelectionDirective","_cdRef","uxSelectionChange","SelectionModule","TreeGridState","setSize","positionInSet","TreeGridService","data$","rows$","getFlattenedTree","insertChildren","removeChildren","loadChildren","loading$","getNormalizedChildren","toPromise","uniqueChildren","childRows","rows","TreeGridRowDirective","_treeGridService","isExpanded","[class.treegrid-row]","TreeGridIndentDirective","uxTreeGridIndent","TreeGridDirective","rowsChange","TreeGridModule","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","TreeGridNg1Component","ThumbnailNg1Component","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","navigationMenuServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","pdfServiceFactory","pdfServiceProvider","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","Conduit","tslib_1.__assign"],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n@Directive({\n  selector: 'ux-accordion-panel-header'\n})\nexport class AccordionPanelHeadingDirective {\n\n}","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class AccordionService {\n\n    collapseOthers: boolean = false;\n    collapse = new Subject<void>();\n\n    collapseAll(): void {\n        this.collapse.next();\n    }\n}","import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\nimport { AccordionService } from '../accordion.service';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-accordion-panel',\n    templateUrl: './accordion-panel.component.html',\n    host: {\n        'class': 'panel panel-default',\n        'role': 'tab'\n    }\n})\nexport class AccordionPanelComponent {\n\n    @Input() panelId: string = `ux-accordion-panel-${uniqueId++}`;\n    @Input() headingId: string = `${this.panelId}-heading`;\n\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() @HostBinding('class.panel-open') expanded: boolean = false;\n\n    @Output() expandedChange = new EventEmitter<boolean>();\n\n    constructor(public accordion: AccordionService) {\n        accordion.collapse.subscribe(() => this.collapse());\n    }\n\n    toggle(): void {\n\n        if (this.expanded) {\n            this.collapse();\n            return;\n        }\n\n        // check if we should collapse others\n        if (this.accordion.collapseOthers) {\n            this.accordion.collapseAll();\n        }\n\n        // store the new expanded state\n        this.expand();\n    }\n\n    expand(): void {\n        if (this.disabled === false && this.expanded === false) {\n            this.expanded = true;\n            this.expandedChange.next(true);\n        }\n    }\n\n    collapse(): void {\n        if (this.disabled === false && this.expanded === true) {\n            this.expanded = false;\n            this.expandedChange.next(false);\n        }\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { AccordionService } from './accordion.service';\n\n@Component({\n    selector: 'ux-accordion',\n    templateUrl: './accordion.component.html',\n    providers: [ AccordionService ],\n    host: {\n        'class': 'panel-group',\n        'role': 'tablist',\n        'aria-multiselectable': 'true'\n    }\n})\nexport class AccordionComponent {\n\n    @Input() set collapseOthers(collapseOthers: boolean) {\n        this._accordion.collapseOthers = collapseOthers;\n    }\n\n    constructor(private _accordion: AccordionService) { }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccordionPanelHeadingDirective } from './accordion-panel/accordion-panel-heading.directive';\nimport { AccordionPanelComponent } from './accordion-panel/accordion-panel.component';\nimport { AccordionComponent } from './accordion.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ],\n    exports: [\n        AccordionComponent,\n        AccordionPanelComponent,\n        AccordionPanelHeadingDirective\n    ]\n})\nexport class AccordionModule { }","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    templateUrl: 'breadcrumbs.component.html'\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Injectable, NgZone, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _observer = new ResizeObserver(this.elementDidResize.bind(this));\n    private _targets = new WeakMap<HTMLElement, ReplaySubject<ResizeDimensions>>();\n\n    constructor(private _zone: NgZone) {}\n\n    ngOnDestroy(): void {\n        this._observer.disconnect();\n    }\n\n    addResizeListener(target: HTMLElement): ReplaySubject<ResizeDimensions> {\n        this._zone.runOutsideAngular(() => this._observer.observe(target));\n\n        if (this._targets.has(target)) {\n            return this._targets.get(target);\n        } else {\n            const emitter = new ReplaySubject<ResizeDimensions>();\n            this._targets.set(target, emitter);\n            return emitter;\n        }\n    }\n\n    removeResizeListener(target: HTMLElement): void {\n        this._observer.unobserve(target);\n    }\n\n    private elementDidResize(entries: ResizeObserverEntry[]): void {\n        this._zone.run(() => {\n            for (const entry of entries) {\n                if (this._targets.has(entry.target as HTMLElement)) {\n                    const emitter = this._targets.get(entry.target as HTMLElement);\n                    emitter.next({ width: (entry.target as HTMLElement).offsetWidth, height: (entry.target as HTMLElement).offsetHeight });\n                }\n            }\n        });\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._resizeService.removeResizeListener(this._elementRef.nativeElement);\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  templateUrl: './card-tab.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  templateUrl: './card-tabset.component.html',\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ResizeModule } from '../../directives/resize/index';\r\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\r\nimport { CardTabComponent } from './card-tab/card-tab.component';\r\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    ResizeModule\r\n  ],\r\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\r\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\r\n})\r\nexport class CardTabsModule { }\r\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    templateUrl: './checkbox.component.html',\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { pairwise, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ThemeColor } from '../../services/color/color.service';\n\n// Values corresponding to stylesheet\nconst BUTTON_MARGIN = 8;\nconst BUTTON_WIDTHS = {\n    'sm': 26,\n    'md': 32,\n    'lg': 40\n};\n\nlet uniqueId = 0;\n\n@Component({\n    selector: 'ux-color-picker',\n    exportAs: 'ux-color-picker',\n    templateUrl: 'color-picker.component.html'\n})\nexport class ColorPickerComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('attr.id')\n    id: string = `ux-color-picker-${uniqueId++}`;\n\n    @Input('colors')\n    set inputColors(colors: ColorPickerInputColors[] | ColorPickerInputColors[][]) {\n\n        let normalizedColors: ColorPickerInputColors[][];\n\n        // If it's a 1d array, convert it to 2d\n        if (colors.length === 0 || !Array.isArray(colors[0])) {\n            normalizedColors = [<ColorPickerInputColors[]>colors];\n        } else {\n            normalizedColors = <ColorPickerInputColors[][]>colors;\n        }\n\n        // Convert any string colors to ColorPickerColor\n        this.colors = normalizedColors.map(row => {\n            return row.map(color => color instanceof ColorPickerColor ? color : new ColorPickerColor(color, color));\n        });\n    }\n\n    @Input()\n    set selected(selected: ColorPickerColor) {\n        this.selected$.next(selected);\n    }\n\n    @Input()\n    set columns(columns: number) {\n        this.columns$.next(columns);\n    }\n\n    @Input()\n    buttonStyle: ColorPickerButtonStyle = 'circle';\n\n    @Input()\n    set buttonSize(buttonSize: ColorPickerButtonSize) {\n        this.buttonSize$.next(buttonSize);\n    }\n\n    @Input()\n    showTooltips: boolean = false;\n\n    @Input()\n    showInput: boolean = false;\n\n    @Input()\n    inputMode: ColorPickerInputMode = 'hex';\n\n    @Output()\n    selectedChange = new EventEmitter<ColorPickerColor>();\n\n    @Output()\n    inputSubmit = new EventEmitter<void>();\n\n    @HostBinding('style.width')\n    cssWidth = 'auto';\n\n    colors: ColorPickerColor[][] = [];\n    selected$ = new BehaviorSubject<ColorPickerColor>(null);\n    columns$ = new BehaviorSubject<number>(-1);\n    buttonSize$ = new BehaviorSubject<ColorPickerButtonSize>('md');\n    inputPatterns = {\n        'hex': /^#(?:[\\da-fA-F]{3}){1,2}$/,\n        'rgba': /^(?:rgb\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3}\\))|(?:rgba\\(\\d{1,3},\\s*\\d{1,3},\\s*\\d{1,3},\\s*\\d(\\.\\d+)?\\))$/\n    };\n\n    private _onDestroy = new Subject();\n\n    ngOnInit(): void {\n\n        // Skip emitting the initial selectedChange\n        this.selected$.pipe(pairwise(), takeUntil(this._onDestroy)).subscribe(([prev, curr]) => {\n            if (prev) {\n                this.selectedChange.emit(curr);\n            }\n        });\n\n        // Set the width based on column count and button size\n        combineLatest(this.columns$, this.buttonSize$)\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(([columns, buttonSize]) => {\n                if (columns > 0) {\n                    const w = columns * (BUTTON_WIDTHS[buttonSize] + (2 * BUTTON_MARGIN));\n                    this.cssWidth = `${w}px`;\n                } else {\n                    this.cssWidth = 'auto';\n                }\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateColorValue(input: string, mode: ColorPickerInputMode): void {\n        if (this.inputPatterns[mode].test(input)) {\n            this.selected$.next(new ColorPickerColor('Custom', input, mode));\n        }\n    }\n\n    toggleColorEntryType(): void {\n        this.inputMode = (this.inputMode === 'hex') ? 'rgba' : 'hex';\n    }\n}\n\nexport type ColorPickerInputColors = ColorPickerColor | string;\nexport type ColorPickerButtonStyle = 'square' | 'circle';\nexport type ColorPickerButtonSize = 'sm' | 'md' | 'lg';\nexport type ColorPickerInputMode = 'hex' | 'rgba';\n\n/**\n * Type representing a color, including its descriptive name.\n */\nexport class ColorPickerColor {\n\n    /**\n     * Human-readable name of the color.\n     */\n    name: string;\n\n    /**\n     * Hex value of the color, e.g. `#ffffff`.\n     */\n    get hex(): string {\n        return this._originalHexValue ? this._originalHexValue : this._color.toHex();\n    }\n\n    /**\n     * RGBA value of the color, e.g. `rgba(255, 255, 255, 1)`.\n     */\n    get rgba(): string {\n        return this._originalRgbaValue ? this._originalRgbaValue : this._color.toRgba();\n    }\n\n    get r(): number {\n        return parseInt(this._color.getRed());\n    }\n\n    get g(): number {\n        return parseInt(this._color.getGreen());\n    }\n\n    get b(): number {\n        return parseInt(this._color.getBlue());\n    }\n\n    get a(): number {\n        return parseFloat(this._color.getAlpha());\n    }\n\n    private _color: ThemeColor;\n    private _originalHexValue: string;\n    private _originalRgbaValue: string;\n\n    constructor(name: string, value: string, inputMode?: ColorPickerInputMode) {\n        this.name = name;\n        this._color = ThemeColor.parse(value);\n\n        // Preserve the format entered by the user if it's valid\n        if (inputMode === 'hex') {\n            this._originalHexValue = value;\n        } else if (inputMode === 'rgba') {\n            this._originalRgbaValue = value;\n        }\n    }\n\n    toString(): string {\n        return this._color.toRgba();\n    }\n}","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, NgZone, OnDestroy, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxFocusWithin],[uxBlurWithin]',\n})\nexport class FocusWithinDirective implements OnDestroy {\n\n    @Output() uxFocusWithin = new EventEmitter<void>();\n    @Output() uxBlurWithin = new EventEmitter<void>();\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor, ngZone: NgZone) {\n        _focusMonitor.monitor(this._elementRef.nativeElement, true)\n            .subscribe(origin => ngZone.run(() => origin ? this.uxFocusWithin.emit() : this.uxBlurWithin.emit()));\n    }\n\n    ngOnDestroy(): void {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n}","import { isPlatformBrowser } from '@angular/common';\nimport { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, OnDestroy, Output, PLATFORM_ID, QueryList, Renderer2 } from '@angular/core';\nimport { SplitAreaDirective, SplitComponent } from 'angular-split';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: 'split'\n})\nexport class SplitterAccessibilityDirective implements AfterViewInit, OnDestroy {\n\n    /** Emit an event whenever the gutter is moved using the keyboard */\n    @Output() gutterKeydown = new EventEmitter<KeyboardEvent>();\n\n    /** Find all the split areas */\n    @ContentChildren(SplitAreaDirective) areas: QueryList<SplitAreaDirective>;\n\n    /** Store all the gutter elements */\n    private _gutters: HTMLElement[] = [];\n\n    /** Watch for gutters being added or removed */\n    private _observer: MutationObserver;\n\n    /** Teardown our observables on destroy */\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Inject(PLATFORM_ID) private _platform: string,\n        private _splitter: SplitComponent\n    ) {\n        // update aria values when the a gutter is dragged\n        _splitter.dragProgress\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.updateGutterAttributes());\n    }\n\n    /** Once initialised make the gutters accessible */\n    ngAfterViewInit(): void {\n        // find the gutters\n        this.onGutterChange();\n\n        // if the number of split areas change then update the gutters and apply aria properties\n        this.areas.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.onGutterChange());\n\n        // we can't know when additional split-gutters appear using ContentChildren as the directive class is not exported and selector doesn't work - use mutation observer instead\n        if (isPlatformBrowser(this._platform)) {\n\n            // create the mutation observer\n            this._observer = new MutationObserver(() => this.onGutterChange());\n\n            // begin observing the child nodes\n            this._observer.observe(this._elementRef.nativeElement, { childList: true });\n        }\n    }\n\n    /** Destroy all observables and observers */\n    ngOnDestroy(): void {\n\n        if (this._observer) {\n            this._observer.disconnect();\n        }\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** We should focus the gutter when it is clicked */\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            (event.target as HTMLElement).focus();\n        }\n    }\n\n    /** Find all the gutters and set their attributes */\n    private onGutterChange(): void {\n        this._gutters = this.getGutters();\n        this.setGutterAttributes();\n    }\n\n    /** Get all the gutter elements */\n    private getGutters(): HTMLElement[] {\n        // This function uses DOM accessing properties - which won't work if server side rendered\n        if (isPlatformBrowser(this._platform)) {\n            const gutters: HTMLElement[] = [];\n\n            for (let idx = 0; idx < this._elementRef.nativeElement.children.length; idx++) {\n                const node = this._elementRef.nativeElement.children.item(idx);\n\n                if (this.isSplitterGutter(node as HTMLElement)) {\n                    gutters.push(node as HTMLElement);\n                }\n            }\n\n            return gutters;\n        }\n\n        return [];\n    }\n\n    /** Set the appropriate attributes on the gutter elements */\n    private setGutterAttributes(): void {\n        // apply attribute to every gutter\n        this._gutters.forEach(gutter => {\n            // apply the separator role\n            this._renderer.setAttribute(gutter, 'role', 'separator');\n\n            // make the gutters tabbable\n            this._renderer.setAttribute(gutter, 'tabindex', '0');\n\n            // set the value now aria property\n            this.updateGutterAttributes();\n        });\n    }\n\n    /** Apply the aria attribute values */\n    private updateGutterAttributes(): void {\n        // update the value now properties of each gutter\n        this._gutters.forEach((gutter, idx) => {\n            this.setGutterValueNow(gutter, idx);\n            this.setGutterValueMin(gutter, idx);\n            this.setGutterValueMax(gutter, idx);\n        });\n    }\n\n    /** Apply the value now aria attribute */\n    private setGutterValueNow(gutter: HTMLElement, index: number): void {\n        // get the matching split area\n        const area = this._splitter.displayedAreas[index];\n\n        // indicate the size\n        this._renderer.setAttribute(gutter, 'aria-valuenow', `${Math.round(area.size * 100)}`);\n    }\n\n    /** Apply the value min aria attribute */\n    private setGutterValueMin(gutter: HTMLElement, index: number): void {\n        // get the matching split area\n        const area = this.areas.toArray()[index];\n\n        // indicate the minimum size\n        this._renderer.setAttribute(gutter, 'aria-valuemin', `${Math.round(area.minSize * 100)}`);\n    }\n\n    /** Apply the value max aria attribute */\n    private setGutterValueMax(gutter: HTMLElement, index: number): void {\n        // get every other splitter area\n        const availableSize = this.areas\n            .filter((_area, idx) => index !== idx)\n            .reduce<number>((total, area) => total + area.minSize, 0);\n\n        // indicate the minimum size\n        this._renderer.setAttribute(gutter, 'aria-valuemax', `${100 - Math.round(availableSize * 100)}`);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.gutterKeydown.emit(event);\n        }\n    }\n\n    @HostListener('keydown.ArrowDown', ['$event'])\n    @HostListener('keydown.ArrowRight', ['$event'])\n    onIncreaseKey(event: KeyboardEvent): void {\n        // only perform a move if a gutter is focused\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.setGutterPosition(event.target as HTMLElement, -0.01);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.ArrowUp', ['$event'])\n    @HostListener('keydown.ArrowLeft', ['$event'])\n    onDecreaseKey(event: KeyboardEvent): void {\n        // only perform a move if a gutter is focused\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            this.setGutterPosition(event.target as HTMLElement, 0.01);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.Home', ['$event'])\n    onHomeKey(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            // get the affected panels\n            const areas = this.getAreasFromGutter(event.target as HTMLElement);\n\n            // set the previous area to it's minimum size\n            const delta = areas.previous.size - areas.previous.comp.minSize;\n\n            // update the sizes accordingly\n            this.setGutterPosition(event.target as HTMLElement, delta);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.End', ['$event'])\n    onEndKey(event: KeyboardEvent): void {\n        if (this.isSplitterGutter(event.target as HTMLElement)) {\n            // get the affected panels\n            const areas = this.getAreasFromGutter(event.target as HTMLElement);\n\n            // set the next area to it's minimum size\n            const delta = areas.next.size - areas.next.comp.minSize;\n\n            // update the sizes accordingly\n            this.setGutterPosition(event.target as HTMLElement, -delta);\n\n            // stop the browser from scrolling\n            event.preventDefault();\n        }\n    }\n\n    /** Determine if an element is a gutter */\n    private isSplitterGutter(element: HTMLElement): boolean {\n        return element.tagName === 'SPLIT-GUTTER';\n    }\n\n    /** Update the gutter position */\n    private setGutterPosition(gutter: HTMLElement, delta: number): void {\n        // get the affected panels\n        const areas = this.getAreasFromGutter(gutter);\n\n        // ensure we can perform the resize\n        if (areas.previous.size - delta < areas.previous.comp.minSize || areas.next.size + delta < areas.next.comp.minSize) {\n            return;\n        }\n\n        // perform the resize\n        areas.previous.size -= delta;\n        areas.next.size += delta;\n\n        // update the splitter - this is a private method but we need to call it\n        (this._splitter as any).refreshStyleSizes();\n\n        // update the gutter aria values\n        this.updateGutterAttributes();\n    }\n\n    /** Get the split areas associated with a given gutter */\n    private getAreasFromGutter(gutter: HTMLElement) {\n        const index = this._gutters.indexOf(gutter);\n\n        return {\n            previous: this._splitter.displayedAreas[index],\n            next: this._splitter.displayedAreas[index + 1]\n        };\n    }\n}\n","import { Observable } from 'rxjs/Observable';\n\n/**\n * This is a simple RxJS operator to allow us to avoid the\n * \"expression has changed after it was checked issue\"\n * by making the subscription asynchronous. We could just use a\n * delay operator but this uses a timeout which is significantly\n * slower than using requestAnimationFrame.\n */\nexport const tick = <T>() => (source: Observable<T>) => new Observable<T>((subscriber) => {\n    source.subscribe({\n        next(value: T) { requestAnimationFrame(() => subscriber.next(value)); },\n        error(err: any) { subscriber.error(err); },\n        complete() { subscriber.complete(); },\n    });\n});","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Injectable, OnDestroy, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\n\n@Injectable()\nexport class TabbableListService implements OnDestroy {\n\n    hierarchy: boolean = false;\n    allowAltModifier: boolean = true;\n    allowCtrlModifier: boolean = true;\n    allowBoundaryKeys: boolean = false;\n    focusKeyManager: FocusKeyManager<TabbableListItemDirective>;\n\n    private _items: QueryList<TabbableListItemDirective>;\n    private _direction: 'horizontal' | 'vertical';\n    private _onDestroy = new Subject<void>();\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    initialize(items: QueryList<TabbableListItemDirective>, direction: 'horizontal' | 'vertical', wrap: boolean): void {\n\n        // store the items\n        this._items = items;\n\n        // create the new focus key manager\n        this.focusKeyManager = new FocusKeyManager(items);\n\n        // set the direction of the list\n        direction === 'vertical' ? this.focusKeyManager.withVerticalOrientation() : this.focusKeyManager.withHorizontalOrientation('ltr');\n        this._direction = direction;\n\n        // enable wrapping if required\n        if (wrap) {\n            this.focusKeyManager.withWrap();\n        }\n\n        // make sure the first item in the list is tabbable\n        this.setFirstItemTabbable();\n\n        // call the init function on each item\n        this._items.forEach(item => item.onInit());\n\n        // if the list changes we need to ensure there is always at least one tabbable item\n        this._items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n\n            // call the on init function on any new items\n            this._items.filter(item => !item.initialized).forEach(item => item.onInit());\n\n            // ensure there is at least one item tabbable at all times\n            this.ensureTabbableItem();\n        });\n    }\n\n    activate(item: TabbableListItemDirective): void {\n\n        if (!item) {\n            return;\n        }\n\n        // get the item index\n        const index = this._items.toArray().indexOf(item);\n\n        // active the item if it is not already active\n        if (this.focusKeyManager.activeItemIndex !== index) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    isItemActive(item: TabbableListItemDirective): boolean {\n        return this.focusKeyManager.activeItem.id === item.id;\n    }\n\n    setFirstItemTabbable(): void {\n        // delay to prevent expression changed after check error\n        requestAnimationFrame(() => {\n            // find the first item that is not disabled\n            const first = this._items.find(item => !item.disabled);\n\n            if (first) {\n                first.tabindex = 0;\n            }\n        });\n    }\n\n    ensureTabbableItem(): void {\n        // check to see if any item is tabbable\n        const active = this._items.find(item => item.tabindex === 0);\n\n        if (!active) {\n            this.setFirstItemTabbable();\n        }\n    }\n\n    focusTabbableItem(): void {\n\n        if (!this._items) {\n            return;\n        }\n\n        // find the item in the list with a tab index\n        const index = this._items.toArray().findIndex(item => item.tabindex === 0);\n\n        // if an item was found then focus it\n        if (index !== -1) {\n            this.focusKeyManager.setActiveItem(index);\n        }\n    }\n\n\n    onKeydown(source: TabbableListItemDirective, event: KeyboardEvent): any {\n\n        // prevent anything happening when modifier keys are pressed if they have been disabled\n        if (!this.allowAltModifier && event.altKey || !this.allowCtrlModifier && event.ctrlKey) {\n            return;\n        }\n\n        this.focusKeyManager.onKeydown(event);\n\n        // if the key is a boundary key and boundary keys are enabled\n        if (this.allowBoundaryKeys) {\n            switch (event.which) {\n                case HOME:\n                    this.focusKeyManager.setFirstItemActive();\n                    event.preventDefault();\n                    break;\n\n                case END:\n                    this.focusKeyManager.setLastItemActive();\n                    event.preventDefault();\n                    break;\n            }\n        }\n\n        if (this.hierarchy) {\n\n            if ((this._direction === 'horizontal' && event.keyCode === DOWN_ARROW) ||\n                (this._direction === 'vertical' && event.keyCode === RIGHT_ARROW)) {\n                source.keyboardExpanded$.next(true);\n            } else if ((this._direction === 'horizontal' && event.keyCode === UP_ARROW) ||\n                (this._direction === 'vertical' && event.keyCode === LEFT_ARROW)) {\n\n                if (source.children.length > 0 && source.expanded) {\n                    source.keyboardExpanded$.next(false);\n                } else if (source.parent) {\n                    source.parent.keyboardExpanded$.next(false);\n                }\n            }\n        }\n    }\n\n    sortItemsByHierarchy(list: QueryList<TabbableListItemDirective>): TabbableListItemDirective[] {\n\n        const topLevel: TabbableListItemDirective[] = [];\n\n        // Populating children - clear previously generated collection\n        list.forEach(item => item.children = []);\n\n        // Populating children - map from child -> parent relationship\n        list.forEach(item => {\n            if (item.parent) {\n                item.parent.children.push(item);\n            } else {\n                topLevel.push(item);\n            }\n        });\n\n        // Flatten the tree to produce the cursor key order\n        return this.flattenHierarchy(topLevel);\n    }\n\n    private flattenHierarchy(items: TabbableListItemDirective[]): TabbableListItemDirective[] {\n        const flatList: TabbableListItemDirective[] = [];\n        items.forEach(item => {\n            item.children.sort((a, b) => a.rank - b.rank);\n            flatList.push(item, ...this.flattenHierarchy(item.children));\n        });\n        return flatList;\n    }\n}\n","import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';\nimport { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../../common/index';\nimport { TabbableListService } from './tabbable-list.service';\n\nlet nextId = 0;\n\n@Directive({\n    selector: '[uxTabbableListItem]',\n    exportAs: 'ux-tabbable-list-item'\n})\nexport class TabbableListItemDirective implements FocusableOption, OnDestroy {\n\n    @Input() parent: TabbableListItemDirective;\n\n    @Input() rank: number = 0;\n\n    @Input() disabled: boolean = false;\n\n    @Input() expanded: boolean = false;\n\n    @Output() expandedChange = new EventEmitter<boolean>();\n\n    @HostBinding() tabindex: number = -1;\n\n    id: number = nextId++;\n\n    initialized: boolean = false;\n\n    children: TabbableListItemDirective[] = [];\n\n    keyboardExpanded$ = new Subject<boolean>();\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _tabbableList: TabbableListService, private _elementRef: ElementRef, focusMonitor: FocusMonitor) {\n\n        this.keyboardExpanded$.pipe(tick(), takeUntil(this._onDestroy)).subscribe(expanded => {\n\n            // Emit event which may alter the DOM\n            this.expandedChange.emit(expanded);\n\n            // Activate the appropriate item\n            if (expanded) {\n                if (this.children.length > 0) {\n                    this._tabbableList.activate(this.children[0]);\n                }\n            } else {\n                this._tabbableList.activate(this);\n            }\n        });\n\n        // add classes to indicate the origin of the focus event\n        focusMonitor.monitor(_elementRef.nativeElement, false).pipe(takeUntil(this._onDestroy)).subscribe();\n    }\n\n    onInit(): void {\n        this.initialized = true;\n\n        this._tabbableList.focusKeyManager.change\n            .pipe(takeUntil(this._onDestroy), map(() => this._tabbableList.isItemActive(this)))\n            .subscribe(active => this.tabindex = active ? 0 : -1);\n    }\n\n    ngOnDestroy(): void {\n\n        // check if this is the currently focused item - if so we need to make another item tabbable\n        if (this.tabindex === 0) {\n            this._tabbableList.setFirstItemTabbable();\n        }\n\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('focus')\n    focus(): void {\n\n        // apply focus to the element\n        this._elementRef.nativeElement.focus();\n\n        // ensure the focus key manager updates the active item correctly\n        this._tabbableList.activate(this);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._tabbableList.onKeydown(this, event);\n    }\n}","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterContentInit, ContentChildren, Directive, Input, OnDestroy, QueryList } from '@angular/core';\nimport { TabbableListItemDirective } from './tabbable-list-item.directive';\nimport { TabbableListService } from './tabbable-list.service';\n\n@Directive({\n    selector: '[uxTabbableList]',\n    exportAs: 'ux-tabbable-list',\n    providers: [TabbableListService]\n})\nexport class TabbableListDirective implements AfterContentInit, OnDestroy {\n\n    /** Determine whether the up/down arrows should be used or the left/right arrows */\n    @Input() direction: 'horizontal' | 'vertical' = 'vertical';\n\n    /** Indicate whether or not focus should loop back to the first element after the last */\n    @Input() wrap: boolean = true;\n\n    /** Indicate whether or not the first item should receive focus on show - useful for modals and popovers */\n    @Input() focusOnShow: boolean = false;\n\n    /** Indicate whether or not focus should be returned to the previous element (only applicable when using focusOnShow) */\n    @Input() returnFocus: boolean = false;\n\n    /** Enabling handling of hierarchical lists via use of the `TabbableListItemDirective.parent` property. */\n    @Input() set hierarchy(value: boolean) { this._tabbableList.hierarchy = value; }\n\n    /** Prevent keyboard interaction when alt modifier key is pressed */\n    @Input() set allowAltModifier(value: boolean) { this._tabbableList.allowAltModifier = value; }\n\n    /** Prevent keyboard interaction when ctrl modifier key is pressed */\n    @Input() set allowCtrlModifier(value: boolean) { this._tabbableList.allowCtrlModifier = value; }\n\n    /** Focus the first or last item when Home or End keys are pressed */\n    @Input() set allowBoundaryKeys(value: boolean) { this._tabbableList.allowBoundaryKeys = value; }\n\n    /** Find all tabbable list items */\n    @ContentChildren(TabbableListItemDirective, { descendants: true }) items: QueryList<TabbableListItemDirective>;\n\n    private _focusedElement: HTMLElement;\n    private _orderedItems: QueryList<TabbableListItemDirective>;\n\n    get focusKeyManager(): FocusKeyManager<TabbableListItemDirective> {\n        return this._tabbableList.focusKeyManager;\n    }\n\n    constructor(private _tabbableList: TabbableListService) { }\n\n    ngAfterContentInit(): void {\n\n        // store the currently focused element\n        this._focusedElement = document.activeElement as HTMLElement;\n\n        if (this._tabbableList.hierarchy) {\n\n            // Sort items in a hierarchy\n            this._orderedItems = new QueryList<TabbableListItemDirective>();\n            this._orderedItems.reset(this._tabbableList.sortItemsByHierarchy(this.items));\n\n            // Ensure that the child items remain sorted\n            this.items.changes.subscribe(() => {\n                this._orderedItems.reset(this._tabbableList.sortItemsByHierarchy(this.items));\n                this._orderedItems.notifyOnChanges();\n            });\n\n        } else {\n\n            // Items are already in order\n            this._orderedItems = this.items;\n        }\n\n        // Set up the focus monitoring\n        this._tabbableList.initialize(this._orderedItems, this.direction, this.wrap);\n\n        // focus the first element if specified\n        if (this.focusOnShow) {\n            this._tabbableList.focusKeyManager.setFirstItemActive();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.returnFocus && this._focusedElement instanceof HTMLElement) {\n            setTimeout(() => this._focusedElement.focus());\n        }\n    }\n\n    focus(): void {\n        if (this._tabbableList.focusKeyManager && this._tabbableList.focusKeyManager.activeItem) {\n            this._tabbableList.focusKeyManager.activeItem.focus();\n        }\n    }\n\n    focusTabbableItem(): void {\n        this._tabbableList.focusTabbableItem();\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { NgModule } from '@angular/core';\nimport { FocusWithinDirective } from './focus-within/focus-within.directive';\nimport { SplitterAccessibilityDirective } from './splitter/splitter-accessibility.directive';\nimport { TabbableListItemDirective } from './tabbable-list/tabbable-list-item.directive';\nimport { TabbableListDirective } from './tabbable-list/tabbable-list.directive';\n\n@NgModule({\n    declarations: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective,\n        SplitterAccessibilityDirective\n    ],\n    imports: [\n        A11yModule\n    ],\n    exports: [\n        FocusWithinDirective,\n        TabbableListDirective,\n        TabbableListItemDirective,\n        SplitterAccessibilityDirective,\n    ]\n})\nexport class AccessibilityModule {}","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    templateUrl: './number-picker.component.html',\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  templateUrl: './tooltip.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { NumberPickerModule } from '../number-picker/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { ColorPickerComponent } from './color-picker.component';\n\n@NgModule({\n    imports: [\n        AccessibilityModule,\n        CommonModule,\n        FormsModule,\n        NumberPickerModule,\n        TooltipModule,\n    ],\n    exports: [ColorPickerComponent],\n    declarations: [ColorPickerComponent],\n    providers: [],\n})\nexport class ColorPickerModule { }\n","import { Directive, Input, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective implements OnDestroy {\n\n    @Input() singleSort: boolean;\n    events = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    toggleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n\n        // apply sorting based on the single or multiple sort\n        this.order = this.singleSort ? this.toggleSingleColumn(sorting) : this.toggleMultipleColumn(sorting);\n\n        // emit the latest order\n        this.events.next(this.order);\n\n        return this.order;\n    }\n\n    private toggleSingleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        return sorting.state === ColumnSortingState.NoSort ? [] : [{ key: sorting.key, state: sorting.state }];\n    }\n\n    private toggleMultipleColumn(sorting: ColumnSortingOrder): ColumnSortingOrder[] {\n        // reorder columns here\n        const idx = this.order.findIndex(column => column.key === sorting.key);\n\n        // if wasnt previously selected add to list\n        if (idx === -1) {\n            return [...this.order, { key: sorting.key, state: sorting.state }];\n        }\n\n        // if we are sorting it change the sorting order\n        if (sorting.state === ColumnSortingState.Ascending || sorting.state === ColumnSortingState.Descending) {\n            return [...this.order.filter(_column => _column.key !== sorting.key), { key: sorting.key, state: sorting.state }];\n        }\n\n        // Otherwise remove the item\n        return this.order.filter(_column => _column.key !== sorting.key);\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState;\n}\n\nexport enum ColumnSortingState {\n    Ascending = 'ascending',\n    Descending = 'descending',\n    NoSort = 'none'\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ColumnSortingDirective, ColumnSortingOrder, ColumnSortingState } from './column-sorting.directive';\n\n@Component({\n    selector: 'ux-column-sorting',\n    templateUrl: './column-sorting.component.html',\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent implements OnDestroy {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Output() stateChange = new EventEmitter<ColumnSortingState>();\n\n    order: number;\n    columnSortingState = ColumnSortingState;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _columnSorter: ColumnSortingDirective) {\n        this._columnSorter.events.pipe(takeUntil(this._onDestroy)).subscribe(event => {\n\n            // if we are sorting this column then find the matching data\n            const columnIdx = event.findIndex(_column => _column.key === this.key);\n\n            // if we are not sorting this column then mark it as NoSort\n            if (columnIdx === -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            this.order = event.length < 2 || columnIdx === -1 ? null : columnIdx + 1;\n\n            // Emit the latest change\n            this.stateChange.emit(this.state);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        switch (this.state) {\n\n            case ColumnSortingState.Ascending:\n                this.state = ColumnSortingState.Descending;\n                break;\n\n            case ColumnSortingState.Descending:\n                this.state = ColumnSortingState.NoSort;\n                break;\n\n            default:\n                this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._columnSorter.toggleColumn({ key: this.key, state: this.state });\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\n\nexport class ConduitSubject {\n\n    private _subject: Subject<any>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(public conduit: ConduitMetadata, private _zone: ConduitZone, public zoneId: string) {\n\n        // store the target subject object\n        this._subject = conduit.subject;\n\n        // check if there are any conduits that have supplied an initial value\n        this.getInitialValue();\n\n        // subscribe to changes to the source subject\n        this._subject.pipe(distinctUntilChanged(conduit.changeDetection), takeUntil(this._onDestroy))\n            .subscribe(this.onOutput.bind(this));\n\n        // subscribe to the zone events and root zone events\n        _zone.getEvents().pipe(filter(event => event.conduit.id === conduit.id), takeUntil(this._onDestroy)).subscribe(this.onInput.bind(this));\n    }\n\n    /** Check all allow inputs to see if there is a value we should initially set the conduit to */\n    getInitialValue(): void {\n\n        // if we do not accept inputs then do nothing\n        if (this.conduit.acceptsInput === false) {\n            return;\n        }\n\n        // return all subjects that are 1) Not itself 2) In a zone that is listed in acceptsInput 3) Have a currentValue set\n        const subjects = this._zone.getSubjects().filter(subject => {\n\n            // If this is itself or if it has not value to give us then do nothing\n            if (subject === this || subject.conduit.id !== this.conduit.id || !subject.conduit.hasOwnProperty('currentValue')) {\n                return false;\n            }\n\n            // if acceptsInput is true then we return every time\n            if (this.conduit.acceptsInput === true) {\n                return true;\n            }\n\n            if (Array.isArray(this.conduit.acceptsInput)) {\n                return this.conduit.acceptsInput.indexOf(subject.zoneId) !== -1;\n            }\n        });\n\n        // if there are no matches then do nothing\n        if (subjects.length === 0) {\n            return;\n        }\n\n        // otherwise sort by the last modified field\n        subjects.sort((subjectOne, subjectTwo) => subjectOne.conduit.lastModified.getTime() < subjectTwo.conduit.lastModified.getTime() ? 1 : -1);\n\n        // get the most recent value\n        this._subject.next(subjects[0].conduit.currentValue);\n    }\n\n    /** This will be triggered when a conduits value has changed */\n    onInput(event: ConduitEvent): void {\n        // if we dont accept input or we emitted this value then do nothing\n        if (this.conduit.acceptsInput === false || event.conduit === this.conduit) {\n            return;\n        }\n\n        // check if the conduit produces output - if not we only do something if we are in the same zone\n        if (event.conduit.producesOutput === false && event.zoneId !== this.zoneId) {\n            return;\n        }\n\n        // check if we only accept inputs from specific zones\n        if (Array.isArray(this.conduit.acceptsInput)) {\n            // check if the event came from an acceptable zone\n            if (!this.conduit.acceptsInput.find(zone => zone === event.zoneId)) {\n                return;\n            }\n        }\n\n        // if required transform the value\n        const outputValue = this.conduit.map ? this.conduit.map(event.value) : event.value;\n\n        // update the subject\n        this._subject.next(outputValue);\n    }\n\n    /** This will be fired when this conduit emits a new value */\n    onOutput(value: any): void {\n\n        // store the most recent value and when it was modified - can be used for any new conduits to lookup a value\n        this.conduit.currentValue = value;\n        this.conduit.lastModified = new Date();\n\n        // check if this should produce output\n        if (this.conduit.producesOutput) {\n            this._zone.emit({ conduit: this.conduit, zoneId: this.zoneId, value });\n        }\n    }\n\n    /** Unsubscribe once this subject is destroyed */\n    destroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","/** This utility is to ensure a all functions with the specified name are called in all super classes */\nexport function invokeSuperFunction(target: object, functionName: string): void {\n    // get all instances of the function\n    const functionList: Function[] = [];\n\n    // store the current prototype we are checking\n    let prototype: any = target;\n\n    // look through every base class and check it\n    do {\n        if (prototype.hasOwnProperty(functionName)) {\n            functionList.push(prototype[functionName]);\n        }\n\n        prototype = prototype.__proto__;\n    } while (prototype.__proto__);\n\n    // augment the top level function to call all the functions\n    target[functionName] = function (...args: any[]) {\n        functionList.forEach(func => func.call(target, ...args));\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitSubject } from './conduit-subject';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\n@Injectable()\nexport class ConduitZone implements OnDestroy {\n\n    /** Create a global subject store */\n    static subjects: ConduitSubject[] = [];\n\n    /** Expose an event stream of new values */\n    static events = new Subject<ConduitEvent>();\n\n    /** Store the zone name */\n    private _zoneId: string;\n\n    ngOnDestroy(): void {\n        // find all conduit subjects that are part of this zone\n        ConduitZone.subjects.filter(_subject => _subject.zoneId === this._zoneId)\n            .forEach(_subject => this.unregisterConduit(_subject.conduit));\n    }\n\n    /** Store reference to the repository and begin watching for and emitting changes */\n    registerConduit(conduit: ConduitMetadata): void {\n        ConduitZone.subjects.push(new ConduitSubject(conduit, this, this._zoneId));\n    }\n\n    /** Destroy a conduit */\n    unregisterConduit(conduit: ConduitMetadata): void {\n        const subject = this.getConduitSubject(conduit.subject);\n\n        if (subject) {\n            // remove the subject from the internal list of conduit subjects\n            ConduitZone.subjects = ConduitZone.subjects.filter(_subject => _subject !== subject);\n\n            // perform all unsubscriptions\n            subject.destroy();\n        }\n    }\n\n    /** Provide the zone with an ID */\n    setZoneId(zoneId: string): void {\n        this._zoneId = zoneId;\n    }\n\n    /** Emit a value to all zones for checking */\n    emit(event: ConduitEvent): void {\n        ConduitZone.events.next(event);\n    }\n\n    /** Retrieve a conduit subsject object from the rxjs subject */\n    getConduitSubject(subject: Subject<any>): ConduitSubject | null {\n        return ConduitZone.subjects.find(_subject => _subject.conduit.subject === subject);\n    }\n\n    /** Get all subjects from all zones */\n    getSubjects(): ConduitSubject[] {\n        return ConduitZone.subjects;\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n\n        // find the conduit with the matching subject\n        const conduitSubject = this.getSubjects().find(_conduit => _conduit.conduit.subject === subject);\n\n        // if a match was found update the properties\n        if (conduitSubject) {\n\n            // update each specified property\n            for (const prop in properties) {\n                conduitSubject.conduit[prop] = properties[prop];\n            }\n        }\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n\n        // register the conduit with the zone\n        this.registerConduit({ ...properties, subject });\n    }\n\n    /** Register all conduits in a component */\n    registerConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.registerConduit({ ...conduit, subject: component[conduit.propertyKey] }));\n        }\n    }\n\n    /** Register all conduits in a component */\n    unregisterConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.unregisterConduit(conduit));\n        }\n    }\n\n    /** Return the global event stream */\n    getEvents(): Subject<ConduitEvent> {\n        return ConduitZone.events;\n    }\n}\n","import { OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { invokeSuperFunction } from './conduit-utils';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\nexport class ConduitComponent implements OnInit, OnDestroy {\n\n    constructor(@Optional() protected _zone: ConduitZone) {\n        // we want to ensure these functions get called even if a class overrides them\n        invokeSuperFunction(this, 'ngOnInit');\n        invokeSuperFunction(this, 'ngOnDestroy');\n    }\n\n    /** We need to register the conduits with the zone when the component is initialised */\n    ngOnInit(): void {\n        // register the conduit in the zone and ensure it gets the correct instance of the target\n        this._zone.registerConduits(this);\n    }\n\n    /** We need to unregister the conduits when the component is destroyed */\n    ngOnDestroy(): void {\n        this._zone.unregisterConduits(this);\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n        this._zone.setConduitProperties(subject, properties);\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n        this._zone.createConduit(subject, properties);\n    }\n\n}\n","import { OnInit } from '@angular/core';\nimport { ConduitComponent } from './conduit.component';\n\nexport abstract class ConduitZoneComponent extends ConduitComponent implements OnInit {\n    abstract zoneId: string;\n\n    ngOnInit(): void {\n        this._zone.setZoneId(this.zoneId);\n    }\n}\n","export interface ConduitProperties {\n    id: number | string;\n    acceptsInput?: boolean | string[];\n    producesOutput?: boolean;\n    changeDetection?: (x: any, y: any) => boolean;\n    map?: any;\n}\n\nexport const defaultConduitProps: Partial<ConduitProperties> = {\n    acceptsInput: true,\n    producesOutput: true,\n};\n","import { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties, defaultConduitProps } from './interfaces/conduit-properties';\n\n/** Expose the property that conduits will be stored in */\nexport const CONDUITS = '_conduits';\n\n/** Create the conduit property decorator */\nexport function Conduit(properties: ConduitProperties | Function): PropertyDecorator {\n    return (target: Object, propertyKey: string) => {\n\n        if (typeof properties === 'function') {\n            properties = properties.call(null);\n        }\n\n        // if the target does not already have a conduit list then create one\n        if (!target.hasOwnProperty(CONDUITS)) {\n            Object.defineProperty(target, CONDUITS, { value: [] });\n        }\n\n        // add the conduit to the list ensuring all required properties are provided\n        target[CONDUITS].push({ ...defaultConduitProps, ...properties, target, propertyKey } as ConduitMetadata);\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _mouseEvent: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(delay(0), map((dimensions: DashboardDimensions) => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n\n    get options() {\n        return this.options$.getValue();\n    }\n\n    get widgets() {\n        return this.widgets$.getValue();\n    }\n\n    get stacked() {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions() {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth() {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    constructor() {\n        this.layout$.subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() * w1.getRow();\n            const w2Position = w2.getColumn() * w2.getRow();\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._mouseEvent = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._mouseEvent.pageX - pageXOffset;\n        const mousePosY = this._mouseEvent.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._mouseEvent = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._mouseEvent = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._mouseEvent.pageX && action.event.pageY === this._mouseEvent.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._mouseEvent.pageX;\n        const mouseY = action.event.pageY - this._mouseEvent.pageY;\n\n        // store the latest event\n        this._mouseEvent = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): void {\n        this._cache = this.widgets.map(widget => ({ id: widget.id, column: widget.getColumn(), row: widget.getRow() }));\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false): void {\n        this._cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    let requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    let available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            let distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() - 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveRight(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        const rounding = this._actionWidget.direction === ActionDirection.Left ||\n            this._actionWidget.direction === ActionDirection.Top ? Rounding.RoundDownBelowHalf : Rounding.RoundUpOverHalf;\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard',\n    templateUrl: './dashboard.component.html',\n    providers: [DashboardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements AfterViewInit {\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    constructor(public dashboardService: DashboardService) {\n        dashboardService.layout$.subscribe(layout => this.layoutChange.emit(layout));\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Component, Input, OnInit, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    templateUrl: './dashboard-widget.component.html'\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _subscription: Subscription;\n\n    constructor(public dashboardService: DashboardService) {\n        this._subscription = dashboardService.options$.subscribe(() => this.update());\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time \n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeStart({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class DragService implements OnDestroy {\n\n    /** Emit when dragging begins */\n    onDragStart = new Subject<UxDragEvent>();\n\n    /** Emit when dragging moves */\n    onDrag = new Subject<UxDragEvent>();\n\n    /** Emit when dragging ends */\n    onDragEnd = new Subject<UxDragEvent>();\n\n    /** Emit when the user is dragging over the drop area */\n    onDropEnter = new Subject<void>();\n\n    /** Emit when the user is dragging out of the drop area */\n    onDropLeave = new Subject<void>();\n\n    /** Emit when a drop occurs */\n    onDrop = new Subject<any>();\n\n    /** Destroy all observables */\n    ngOnDestroy(): void {\n        this.onDragStart.complete();\n        this.onDrag.complete();\n        this.onDragEnd.complete();\n        this.onDrop.complete();\n        this.onDropEnter.complete();\n        this.onDropLeave.complete();\n    }\n\n}\n\nexport type UxDragEvent = { group?: string, event?: MouseEvent, data?: any };","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DragService } from './drag.service';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    /** Detemine if we should show a clone when dragging */\n    @Input() clone: boolean = false;\n\n    /** Define the group the drag event belongs to */\n    @Input() group: string;\n\n    /** Associate some data with the drag event */\n    @Input() model: any;\n\n    /** Allow the dragging to be enabled/disabled */\n    @Input() draggable: boolean = true;\n\n    /** Emit an event when dragging starts */\n    @Output() onDragStart = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the mouse moves while dragging */\n    @Output() onDrag = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the dragging finishes */\n    @Output() onDragEnd = new EventEmitter<void>();\n\n    /** Emit when the user drops an item in a drop area */\n    @Output() onDrop = new EventEmitter<any>();\n\n    /** Emit when the user drags over a drop area */\n    @Output() onDropEnter = new EventEmitter<void>();\n\n    /** Emit when the user drags out of a drop area */\n    @Output() onDropLeave = new EventEmitter<void>();\n\n    /** Store the element we have cloned */\n    private _clone: Element;\n\n    /** Store the dragging state */\n    private _isDragging: boolean = false;\n\n    /** Store the mouse offset for the cloned element position */\n    private _offset: { x: number, y: number };\n\n    /** Create an observable from the mouse down event */\n    private _mousedown$ = fromEvent<MouseEvent>(this._elementRef.nativeElement, 'mousedown');\n\n    /** Create an observable from the mouse move event */\n    private _mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n\n    /** Create an observable from the mouse up event */\n    private _mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n    /** Use an observable to unsubscribe from all subscriptions */\n    protected _onDestroy = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, private _ngZone: NgZone, private _renderer: Renderer2, private _drag: DragService) {\n\n        // ensure all mouse down events on the object are captured\n        this._mousedown$.pipe(filter(() => this.draggable), takeUntil(this._onDestroy)).subscribe(this.dragStart.bind(this));\n\n        // emit the outputs when drag events occur\n        _drag.onDragStart.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(dragEvent => this.onDragStart.emit(dragEvent.event));\n\n        _drag.onDrag.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(dragEvent => this.onDrag.emit(dragEvent.event));\n\n        _drag.onDragEnd.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDragEnd.emit());\n\n        _drag.onDrop.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(event => this.onDrop.emit(event));\n\n        _drag.onDropEnter.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDropEnter.emit());\n\n        _drag.onDropLeave.pipe(takeUntil(this._onDestroy), filter(() => this._isDragging))\n            .subscribe(() => this.onDropLeave.emit());\n    }\n\n    /** Emit events and create clone when drag starts */\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this.clone) {\n            // clone the node\n            this.cloneNode(event);\n        }\n\n        // apply a class to the element being dragged\n        this._renderer.addClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // store the dragging state\n        this._isDragging = true;\n\n        // emit the drag start event\n        this._ngZone.run(() => this._drag.onDragStart.next({ event, group: this.group, data: this.model }));\n\n        this._mousemove$.pipe(takeUntil(this._mouseup$), takeUntil(this._onDestroy))\n            .subscribe(this.dragMove.bind(this), null, this.dragEnd.bind(this));\n    }\n\n    /** Emit event and update clone position when dragging moves */\n    dragMove(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this._clone) {\n            this.updateNodePosition(event);\n        }\n\n        // emit the drag start event\n        this._ngZone.run(() => this._drag.onDrag.next({ event, group: this.group, data: this.model }));\n    }\n\n    /** Emit event and destroy clone when dragging ends */\n    dragEnd(): void {\n        // if there was a clone, remove it\n        if (this._clone) {\n            this._renderer.removeChild(document.body, this._clone);\n            this._clone = null;\n        }\n\n        // remove the dragging class\n        this._renderer.removeClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // emit the on drag end output\n        this._ngZone.run(() => this._drag.onDragEnd.next({ group: this.group, data: this.model }));\n\n        // store the dragging state\n        this._isDragging = false;\n    }\n\n    /** Create an exact clone of an element */\n    cloneNode(event: MouseEvent): void {\n\n        // duplicate the node\n        this._clone = this._elementRef.nativeElement.cloneNode(true);\n\n        // store the position within the draggable element\n        const { top, left, width } = this._elementRef.nativeElement.getBoundingClientRect();\n        this._offset = { x: event.clientX - left, y: event.clientY - top };\n\n        // inline all styles so it looks identical regardless of its position in the DOM\n        this.inlineStyles(this._elementRef.nativeElement, this._clone);\n\n        // IE doesn't always calculate the correct width value using getComputedStyles... use bounding client value instead\n        this._renderer.setStyle(this._clone, 'width', width + 'px');\n\n        // ensure we can easily position the node an it is above all other elements\n        this._renderer.setAttribute(this._clone, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._clone, 'position', 'absolute');\n        this._renderer.setStyle(this._clone, 'z-index', '99999');\n\n        // apply a class to allow custom styling\n        this._renderer.addClass(this._clone, 'ux-drag-dragging-clone');\n\n        // insert the cloned element\n        this._renderer.appendChild(document.body, this._clone);\n\n        // set the cloned element initial position\n        this.updateNodePosition(event);\n    }\n\n    /** Position the clone relative to the mouse */\n    updateNodePosition(event: MouseEvent): void {\n        this._renderer.setStyle(this._clone, 'left', (event.pageX - this._offset.x) + 'px');\n        this._renderer.setStyle(this._clone, 'top', (event.pageY - this._offset.y) + 'px');\n    }\n\n    /** Inline all styles to ensure styling is consistent regardless of its position in the dom */\n    inlineStyles(source: Element, target: Element): void {\n        // get all the computed styles from the source element\n        const styles = getComputedStyle(source);\n\n        // inline every specified style\n        for (let idx = 0; idx < styles.length; idx++) {\n            const style = styles.item(idx);\n\n            if (style !== undefined) {\n                this._renderer.setStyle(target, styles[idx], styles[style]);\n            }\n        }\n\n        // ensure we dont capture any move events\n        this._renderer.setStyle(target, 'pointer-events', 'none');\n\n        // do the same for all the child elements\n        for (let idx = 0; idx < source.children.length; idx++) {\n            this.inlineStyles(source.children[idx], target.children[idx]);\n        }\n    }\n\n    /** Unsubscribe from all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { Directive, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DragService, UxDragEvent } from './drag.service';\n\n@Directive({\n    selector: '[uxDrop]',\n    host: {\n        '[class.ux-drop-hover]': 'isMouseOver && isDragging'\n    }\n})\nexport class DropDirective implements OnDestroy {\n\n    /** Define a specific group of dragged items to listen to */\n    @Input() group: string | string[];\n\n    /** Emit the model of the item dropped */\n    @Output() onDrop = new EventEmitter<any>();\n\n    /** Determine whether or not the mouse is within the drop region */\n    isMouseOver: boolean = false;\n\n    /** Determine whether or not we are currently dragging an item */\n    isDragging: boolean = false;\n\n    /** Store the group of the dragged item */\n    private _group: string;\n\n    /** Ensure we destroy all subscriptions */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _dragService: DragService) {\n        // subscribe to drag events\n        _dragService.onDragStart.pipe(takeUntil(this._onDestroy), filter(event => this.isGroupAllowed(event.group))).subscribe(this.onDragStart.bind(this));\n        _dragService.onDragEnd.pipe(takeUntil(this._onDestroy), filter(event => this.isGroupAllowed(event.group))).subscribe(this.onDragEnd.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Update the mouse over state */\n    @HostListener('mouseenter')\n    onMouseOver(): void {\n        if (this.isGroupAllowed(this._group)) {\n            this.isMouseOver = true;\n\n            // emit that we are over a drop area\n            this._dragService.onDropEnter.next();\n        }\n    }\n\n    /** Update the mouse over state */\n    @HostListener('mouseleave')\n    onMouseLeave(): void {\n\n        // always ensure this value is reset\n        this.isMouseOver = false;\n\n        // only emit the dropd leave event when appropriate\n        if (this.isGroupAllowed(this._group)) {\n            this._dragService.onDropLeave.next();\n        }\n    }\n\n    /** Update the dragging state */\n    onDragStart(event: UxDragEvent): void {\n        this.isDragging = true;\n        this._group = event.group;\n    }\n\n    /** Update the dragging state */\n    onDragEnd(event: UxDragEvent): void {\n\n        // update the dragging state\n        this.isDragging = false;\n\n        // clear the cached group\n        this._group = null;\n\n        // if the mouse is over and it is in an allowed group emit the dop event\n        if (this.isMouseOver && this.isGroupAllowed(event.group)) {\n            this.onDrop.emit(event.data);\n            this._dragService.onDrop.next(event.data);\n        }\n    }\n\n    /** Determine whether or not the event is part of the specified groups */\n    private isGroupAllowed(group: string): boolean {\n\n        // if no group specified allow all groups\n        if (!this.group) {\n            return true;\n        }\n\n        // if it is an array then ensure it is allowed\n        if (Array.isArray(this.group)) {\n            return !!this.group.find(_group => _group === group);\n        }\n\n        return this.group === group;\n    }\n}","import { NgModule } from '@angular/core';\nimport { DragDirective } from './drag.directive';\nimport { DragService } from './drag.service';\nimport { DropDirective } from './drop.directive';\n\n@NgModule({\n    exports:      [DragDirective, DropDirective],\n    declarations: [DragDirective, DropDirective],\n    providers:    [DragService]\n})\nexport class DragModule { }\n","import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\nimport { DragService } from '../../../directives/drag/index';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef,\n        ngZone: NgZone, renderer: Renderer2, drag: DragService) {\n\n        super(elementRef, ngZone, renderer, drag);\n\n        this.onDragStart.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.onDrag.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.onDragEnd.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DragModule } from '../../directives/drag/index';\n\nconst DECLARATIONS: any[] = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));\n\n/** Export the default set of time zone */\nexport const timezones: DateTimePickerTimezone[] = [\n    { name: 'GMT-11', offset: 660 },\n    { name: 'GMT-10', offset: 600 },\n    { name: 'GMT-9', offset: 540 },\n    { name: 'GMT-8', offset: 480 },\n    { name: 'GMT-7', offset: 420 },\n    { name: 'GMT-6', offset: 360 },\n    { name: 'GMT-5', offset: 300 },\n    { name: 'GMT-4', offset: 240 },\n    { name: 'GMT-3', offset: 180 },\n    { name: 'GMT-2', offset: 120 },\n    { name: 'GMT-1', offset: 60 },\n    { name: 'GMT', offset: 0 },\n    { name: 'GMT+1', offset: -60 },\n    { name: 'GMT+2', offset: -120 },\n    { name: 'GMT+3', offset: -180 },\n    { name: 'GMT+4', offset: -240 },\n    { name: 'GMT+5', offset: -300 },\n    { name: 'GMT+6', offset: -360 },\n    { name: 'GMT+7', offset: -420 },\n    { name: 'GMT+8', offset: -480 },\n    { name: 'GMT+9', offset: -540 },\n    { name: 'GMT+10', offset: -600 },\n    { name: 'GMT+11', offset: -660 },\n    { name: 'GMT+12', offset: -720 }\n];\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort, timezones, months, DateTimePickerTimezone, monthsShort } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n    timezones: DateTimePickerTimezone[] = timezones;\n    months: string[] = months;\n    monthsShort: string[] = monthsShort;\n}","import { Injectable, Optional } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator, weekdaysShort, timezones, DateTimePickerTimezone, months, monthsShort } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config ? this._config.showDate : true);\n    showTime$ = new BehaviorSubject<boolean>(this._config ? this._config.showTime : true);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config ? this._config.showTimezone : true);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config ? this._config.showSeconds : false);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config ? this._config.showMeridian : true);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config ? this._config.showSpinners : true);\n    weekdays$ = new BehaviorSubject<string[]>(this._config ? this._config.weekdays : weekdaysShort);\n    nowBtnText$ = new BehaviorSubject<string>(this._config ? this._config.nowBtnText : 'Today');\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config ? this._config.timezones : timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    months: string[] = this._config ? this._config.months : months;\n    monthsShort: string[] = this._config ? this._config.monthsShort : monthsShort;\n\n    private _subscription: Subscription;\n\n    constructor(@Optional() private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        const zones = this._config ? this._config.timezones : timezones;\n        return zones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DatePickerMode, DateTimePickerService } from './date-time-picker.service';\nimport { dateComparator, DateTimePickerTimezone, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  templateUrl: './date-time-picker.component.html',\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set months(months: string[]) {\n    this.datepicker.months = months;\n  }\n\n  @Input() set monthsShort(months: string[]) {\n    this.datepicker.monthsShort = months;\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(public datepicker: DateTimePickerService) {\n    datepicker.selected$.pipe(takeUntil(this._onDestroy), distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    datepicker.timezone$.pipe(takeUntil(this._onDestroy), distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    templateUrl: './spin-button.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n    transform(value: number, pad: boolean): string | number {\n        return value < 10 && pad ? '0' + value : value;\n    }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, forwardRef, Input, OnDestroy, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    templateUrl: './time-picker.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(this._datepicker.months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n\n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  templateUrl: './day-view.component.html',\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(_index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    templateUrl: './header.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: this._datepicker.monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n\n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    templateUrl: './month-view.component.html',\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    templateUrl: './time-view.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  templateUrl: './year-view.component.html',\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n    @Input() focusIfScroll: boolean = true;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus({ preventScroll: !this.focusIfScroll });\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ModuleWithProviders } from '@angular/core';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent]\n})\nexport class DateTimePickerModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: DateTimePickerModule,\n            providers: [\n                DateTimePickerConfig\n            ]\n        };\n    }\n}\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    templateUrl: './ebox.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { Injectable } from '@angular/core';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n\n                case 'Enter':\n                    if (typeahead.selectOnEnter) {\n                        typeahead.selectHighlighted();\n                    }\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    templateUrl: 'typeahead.component.html',\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input()\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n    @Input() selectOnEnter: boolean = false;\r\n    @Input() loading = false;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n    highlightedKey: string = null;\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _changeDetector: ChangeDetectorRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n\r\n                // Invoke the callback which may return an array or a promise.\r\n                const arrayOrPromise = this.options(pageNum, pageSize, filter);\r\n\r\n                // Map the results to an array of TypeaheadVisibleOption.\r\n                return Promise.resolve(arrayOrPromise).then(newOptions => {\r\n\r\n                    if (!Array.isArray(newOptions)) {\r\n                        return newOptions;\r\n                    }\r\n\r\n                    return newOptions.map((option: any) => {\r\n                        return {\r\n                            value: option,\r\n                            key: this.getKey(option)\r\n                        };\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.openChange.emit(next);\r\n\r\n            if (next) {\r\n                this.initOptions();\r\n            }\r\n        });\r\n\r\n        this.highlighted$.pipe(takeUntil(this._onDestroy)).subscribe((next) => {\r\n            this.highlightedKey = next ? next.key : null;\r\n            this.highlightedChange.emit(next ? next.value : null);\r\n        });\r\n\r\n        combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n            });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        const displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n            this._changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlight(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    selectHighlighted(): void {\r\n        if (this.highlighted) {\r\n            this.select({ value: this.highlighted, key: this.getKey(this.highlighted)});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n\r\n        this._changeDetector.detectChanges();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Directive } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableHandle]'\r\n})\r\nexport class ReorderableHandleDirective { }\r\n","import { Directive, Input, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[uxReorderableModel]'\r\n})\r\nexport class ReorderableModelDirective {\r\n\r\n    // allow the user to specify a model for the item - allows use with ngFor\r\n    @Input() uxReorderableModel: any;\r\n\r\n    // this can be used to identify which instance of the directive relates to which element\r\n    constructor(public elementRef: ElementRef) { }\r\n}\r\n","// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport { Drake } from 'dragula';\n// @ts-ignore\nimport * as dragulaNamespace from 'dragula/dist/dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { ReorderEvent } from '../../directives/reorderable/index';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    templateUrl: './facet-container.component.html'\n})\nexport class FacetContainerComponent implements OnDestroy {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    constructor(private _announcer: LiveAnnouncer) { }\n\n    ngOnDestroy(): void {\n        this.events.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet, tag?: HTMLElement): void {\n\n        // find the index of the item in the selected array\n        const idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n\n        // announce the facet removal\n        this._announcer.announce(`Option ${facet.title} deselected.`, 'assertive');\n\n        // focus another tag if there is one\n        if (tag) {\n            const sibling = tag.previousElementSibling || tag.nextElementSibling;\n\n            // if there is a sibling then focus it\n            if (sibling) {\n                (sibling as HTMLElement).focus();\n            }\n        }\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n\n        // announce the facet removal\n        this._announcer.announce(`All options deselected.`, 'assertive');\n    }\n\n    trackBy(_index: number, facet: Facet): string | number {\n        return facet.id || facet.title;\n    }\n\n    shiftRight(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, 1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved down.`);\n    }\n\n    shiftLeft(facet: Facet, element: HTMLElement): void {\n        // only move the item if reordering is allowed\n        if (this.facetsReorderable === false) {\n            return;\n        }\n\n        // perform the movement\n        this.shiftFacet(facet, -1);\n\n        // the item may become unfocused during the reorder so we should refocus it\n        requestAnimationFrame(() => element.focus());\n\n        // announce the move\n        this._announcer.announce(`Option ${facet.title} moved up.`);\n    }\n\n    private shiftFacet(facet: Facet, distance: number) {\n        const index = this.facets.indexOf(facet);\n        const target = index + distance;\n\n        // Ensure the move is valid\n        if (target < 0 || target === this.facets.length) {\n            return;\n        }\n\n        // Perform the move\n        this.facets.splice(index, 1);\n        this.facets.splice(target, 0, facet);\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}\n\nexport interface FacetReorderEvent extends ReorderEvent {\n    index: number;\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        const index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    templateUrl: './facet-header.component.html',\n    host: {\n        'role': 'button',\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()',\n        '[attr.aria-expanded]': 'expanded',\n        '[attr.aria-label]': 'header + \\' Facet: Activate to \\' + (expanded ? \\'collapse\\' : \\'expand\\')'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;\n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list-item',\n    templateUrl: './facet-check-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetCheckListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet = null;\n    @Input() selected: boolean = false;\n    @Input() tabbable: boolean = false;\n    @Output() selectedChange = new EventEmitter<Facet>();\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() itemBlur = new EventEmitter<void>();\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : '';\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, Input, QueryList, ViewChildren } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\nimport { FacetCheckListItemComponent } from './check-list-item/facet-check-list-item.component';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    templateUrl: './facet-check-list.component.html'\n})\nexport class FacetCheckListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n\n    @ViewChildren(FacetCheckListItemComponent) options: QueryList<FacetCheckListItemComponent>;\n\n    isFocused: boolean = false;\n    activeIndex: number = 0;\n\n    private _focusKeyManager: FocusKeyManager<FacetCheckListItemComponent>;\n\n    ngAfterViewInit(): void {\n        this._focusKeyManager = new FocusKeyManager(this.options)\n            .withVerticalOrientation();\n\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n}","import { FocusableOption } from '@angular/cdk/a11y';\nimport { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list-item',\n    templateUrl: './facet-typeahead-list-item.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FacetTypeaheadListItemComponent implements FocusableOption {\n\n    @Input() facet: Facet;\n    @Input() selected: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() tabbable: boolean = false;\n\n    @Output() itemFocus = new EventEmitter<void>();\n    @Output() selectedChange = new EventEmitter<Facet>();\n\n    @ViewChild('option') option: ElementRef;\n\n    get disabled(): boolean {\n        return this.facet && this.facet.disabled;\n    }\n\n    getLabel(): string {\n        return this.facet ? this.facet.title : null;\n    }\n\n    focus(): void {\n        this.option.nativeElement.focus();\n    }\n}\n","import { FocusKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { AfterViewInit, Component, ElementRef, Input, Pipe, PipeTransform, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { map, mergeMap, takeUntil, tap } from 'rxjs/operators';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { FacetContainerComponent } from '../facet-container.component';\nimport { Facet } from '../models/facet';\nimport { FacetTypeaheadListItemComponent } from './typeahead-list-item/facet-typeahead-list-item.component';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    templateUrl: './facet-typeahead-list.component.html'\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements AfterViewInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    @Input()\n    set typeaheadConfig(config: FacetTypeaheadListConfig) {\n        this._config = { placeholder: '', maxResults: 50, minCharacters: 1, ...config };\n    }\n\n    get typeaheadConfig(): FacetTypeaheadListConfig {\n        return this._config;\n    }\n\n    @ViewChildren(FacetTypeaheadListItemComponent) options: QueryList<FacetTypeaheadListItemComponent>;\n\n    query$ = new BehaviorSubject<string>('');\n    loading: boolean = false;\n    activeIndex: number = 0;\n    typeaheadId: string = `ux-facet-typeahead-${uniqueId++}`;\n    typeaheadOpen: boolean = false;\n    typeaheadOptions: Facet[] = [];\n    highlightedElement: HTMLElement;\n\n    private _config: FacetTypeaheadListConfig = { placeholder: '', maxResults: 50, minCharacters: 1 };\n    private _focusKeyManager: FocusKeyManager<FacetTypeaheadListItemComponent>;\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, facetContainer: FacetContainerComponent, elementRef: ElementRef, private _announcer: LiveAnnouncer) {\n        super(facetContainer, elementRef);\n    }\n\n    ngAfterViewInit(): void {\n\n        // set up search query subscription\n        this.query$.pipe(\n            takeUntil(this._onDestroy),\n            tap(() => {\n                this.loading = true;\n                this.typeaheadOptions = [];\n            }),\n            mergeMap(() => this.getFacetObservable().pipe(map(facets => {\n                return facets.filter(facet => !facet.disabled && !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .slice(0, this._config.maxResults);\n            })))\n        ).subscribe(facets => {\n            this.loading = false;\n            this.typeaheadOptions = facets;\n        });\n\n        this._focusKeyManager = new FocusKeyManager(this.options).withVerticalOrientation();\n        this._focusKeyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(index => this.activeIndex = index);\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        this._focusKeyManager.onKeydown(event);\n    }\n\n    onFocus(index: number): void {\n        if (this._focusKeyManager.activeItemIndex === -1) {\n            this._focusKeyManager.setActiveItem(index);\n        }\n    }\n\n    toggleFacet(index: number, facet: Facet): void {\n        this.toggleFacetSelection(facet);\n        this._focusKeyManager.setActiveItem(index);\n    }\n\n    /** Only show typeahead if we have enough characters */\n    updateTypeahead(query: string = ''): void {\n        this.typeaheadOpen = query.length >= this._config.minCharacters;\n    }\n\n    getFacetObservable(): Observable<Facet[]> {\n        return this.facets instanceof Observable ? this.facets : of(this.facets);\n    }\n\n    select(event: TypeaheadOptionEvent) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === event.option)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(event.option);\n\n        // clear the typeahead\n        this.query$.next('');\n\n        // announce the selected facet\n        this._announcer.announce(`${(event.option as Facet).title} selected.`);\n    }\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListItemComponent } from './facet-check-list/check-list-item/facet-check-list-item.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetTypeaheadHighlight, FacetTypeaheadListComponent } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FacetTypeaheadListItemComponent } from './facet-typeahead-list/typeahead-list-item/facet-typeahead-list-item.component';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetCheckListItemComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadListItemComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        A11yModule,\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Filter } from '../interfaces/filter.interface';\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}","export class FilterRemoveAllEvent {}","import { Filter } from '../interfaces/filter.interface';\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterAddEvent } from './events/filter-add-event';\nimport { FilterEvent } from './events/filter-event';\nimport { FilterRemoveAllEvent } from './events/filter-remove-all-event';\nimport { FilterRemoveEvent } from './events/filter-remove-event';\nimport { Filter } from './interfaces/filter.interface';\n\n@Injectable()\nexport class FilterService {\n\n    /** The list of active filters */\n    filters$ = new BehaviorSubject<Filter[]>([]);\n\n    /** Emit all the events when they occur */\n    events$ = new Subject<FilterEvent>();\n\n    add(filter: Filter): void {\n\n        // if the filter is already selected or it is the intial filter then do nothing\n        if (this.isSelected(filter) || filter.initial) {\n            return;\n        }\n\n        // update the list of active filters\n        this.filters$.next([...this.filters$.value, filter]);\n\n        // emit the event\n        this.events$.next(new FilterAddEvent(filter));\n    }\n\n    remove(filter: Filter): void {\n\n        // if the filter is not selected then do nothing\n        if (!this.isSelected(filter)) {\n            return;\n        }\n\n        // update the list of active filters\n        this.filters$.next(this.filters$.value.filter(_filter => _filter !== filter));\n\n        // emit the event\n        this.events$.next(new FilterRemoveEvent(filter));\n    }\n\n    removeAll(): void {\n\n        // empty the list of active filters\n        this.filters$.next([]);\n\n        // emit the event\n        this.events$.next(new FilterRemoveAllEvent());\n    }\n\n    isSelected(filter: Filter): boolean {\n        return this.filters$.value.indexOf(filter) > -1;\n    }\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterEvent } from './events/filter-event';\nimport { FilterService } from './filter.service';\nimport { Filter } from './interfaces/filter.interface';\n\n@Component({\n    selector: 'ux-filter-container',\n    templateUrl: './filter-container.component.html',\n    providers: [ FilterService ]\n})\nexport class FilterContainerComponent implements OnDestroy {\n\n    /** Allow filters to set from outside the component */\n    @Input() set filters(filters: Filter[]) { this.filterService.filters$.next(filters); }\n\n    /** Define the tooltip text */\n    @Input() clearTooltip: string;\n\n    /** Emit when the active filters chance */\n    @Output() filtersChange = new EventEmitter<Filter[]>();\n\n    /** Emit when a specific event occurs */\n    @Output() events = new EventEmitter<FilterEvent>();\n\n    /** Unsubscribe from the subscriptions on destroy */\n    private _onDestroy = new Subject<void>();\n\n    constructor(public filterService: FilterService) {\n\n        // subscribe to changes to the active filters\n        filterService.filters$.pipe(takeUntil(this._onDestroy), distinctUntilChanged())\n            .subscribe(filters => this.filtersChange.emit(filters));\n\n        // relay any events to the event emitter\n        this.filterService.events$.pipe(takeUntil(this._onDestroy))\n            .subscribe(event => this.events.emit(event));\n    }\n\n    /** Destroy all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FilterRemoveAllEvent } from '../events/filter-remove-all-event';\nimport { FilterContainerComponent } from '../filter-container.component';\nimport { Filter } from '../interfaces/filter.interface';\n\n/**\n * @deprecated\n * This should no longer be used as we now have the FilterService\n * which is easier to use than this base component.\n */\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent, private _announcer: LiveAnnouncer) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.filterService.add(_filter);\n            this._announcer.announce(`Filter ${_filter.name} selected.`);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.filterService.remove(_filter);\n        this._announcer.announce(`Filter ${_filter.name} deselected.`);\n    }\n\n}","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { filter as rxFilter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterRemoveAllEvent } from '../events/filter-remove-all-event';\nimport { FilterService } from '../filter.service';\nimport { Filter } from '../interfaces/filter.interface';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    templateUrl: './filter-dropdown.component.html',\n})\nexport class FilterDropdownComponent implements OnInit, OnDestroy {\n\n    /** The list of items to display in the dropdown */\n    @Input() filters: Filter[] = [];\n\n    /** Define an initial item to select */\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _filterService: FilterService) {\n        _filterService.events$.pipe(takeUntil(this._onDestroy), rxFilter(event => event instanceof FilterRemoveAllEvent))\n            .subscribe(() => this.removeFilter());\n\n        // ensure that the current selected filter is still selected when the active filters change\n        _filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            if (this.selected && filters.indexOf(this.selected) === -1) {\n                this.removeFilter();\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        this.selected = this.initial;\n\n        // check to see if any of the filters have been preselected or changes to selected filters\n        this._filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            filters.forEach(filter => {\n                if (this.filters.indexOf(filter) !== -1) {\n                    this.selected = filter;\n                }\n            });\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFilter(filter: Filter, event: MouseEvent) {\n        this.removeFilter();\n        this.selected = filter;\n        this._filterService.add(this.selected);\n\n        event.stopPropagation();\n        event.preventDefault();\n    }\n\n    removeFilter(): void {\n        this._filterService.remove(this.selected);\n        this.selected = this.initial;\n    }\n\n}","import { Component, ElementRef, HostListener, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter as rxFilter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TypeaheadKeyService, TypeaheadOptionEvent } from '../../typeahead/index';\nimport { FilterRemoveAllEvent } from '../events/filter-remove-all-event';\nimport { FilterService } from '../filter.service';\nimport { FilterDynamicListConfig } from '../interfaces/filter-dynamic-list-config.interface';\nimport { Filter } from '../interfaces/filter.interface';\n\nlet uniqueId = 1;\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    templateUrl: './filter-dynamic.component.html'\n})\nexport class FilterDynamicComponent implements OnDestroy {\n\n    /** The list of possible filter options */\n    @Input() filters: Filter[] = [];\n\n    /** Specify if there should be an initially selected filter */\n    @Input() initial: Filter;\n\n    /** Specify the typeahead options */\n    @Input() set options(options: FilterDynamicListConfig) { this._options = options; }\n\n    /** Get the options with the defaults for any missing options */\n    get options(): FilterDynamicListConfig {\n        return { ... this._defaultOptions, ...this._options };\n    }\n\n    /** Get the dropdown directive */\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    /** Generate a unique id for the typeahead */\n    typeaheadId: string = `ux-filter-dynamic-typeahead-${uniqueId++}`;\n\n    /** Store the current search query */\n    query$ = new BehaviorSubject<string>('');\n\n    /** Store the selected filter */\n    selected: Filter;\n\n    /** Indicate whether or not the typeahead should be shown */\n    showTypeahead: boolean = true;\n\n    /** Store the items that should be displayed in the typeahead */\n    typeaheadItems: string[] = [];\n\n    /** Store the currently highlighted element */\n    highlightedElement: HTMLElement;\n\n    /** Store the open state of the typeahead */\n    typeaheadOpen: boolean = false;\n\n    /** The default options */\n    private _defaultOptions: FilterDynamicListConfig = { placeholder: '', minCharacters: 3, maxResults: Infinity };\n\n    /** Store the user specified typeahead options */\n    private _options: FilterDynamicListConfig = { ...this._defaultOptions };\n\n    /** Unsubscribe from all subscriptions */\n    private _onDestroy = new Subject<void>();\n\n    constructor(public typeaheadKeyService: TypeaheadKeyService, private _filterService: FilterService, private _elementRef: ElementRef) {\n        // listen for remove all events in which case we should deselect event initial filters\n        _filterService.events$.pipe(takeUntil(this._onDestroy), rxFilter(event => event instanceof FilterRemoveAllEvent))\n            .subscribe(() => this.removeFilter());\n\n        // ensure that the current selected filter is still selected when the active filters change\n        _filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            if (this.selected && filters.indexOf(this.selected) === -1) {\n                this.removeFilter();\n            }\n        });\n    }\n\n    /** Set up the initial conditions */\n    ngOnInit(): void {\n\n        // The initially selected item should be set the the specified initial item\n        this.selected = this.initial;\n\n        // watch for changes to the selected filters\n        this._filterService.filters$.pipe(takeUntil(this._onDestroy)).subscribe(filters => {\n            filters.forEach(filter => {\n                if (this.filters.indexOf(filter) !== -1) {\n                    this.selected = filter;\n                }\n            });\n        });\n\n        // get the items to be displayed in the typeahead\n        this.typeaheadItems = this.getItems();\n\n        // determine if we should show the typeahead control\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    /** Cleanup all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Get the items to display in the typeahead based on the search query */\n    getItems(): string[] {\n        const query = this.query$.value.toLowerCase();\n\n        return this.filters.filter(item => item !== this.initial && item.name.toLowerCase().indexOf(query) !== -1)\n            .map(item => item.name)\n            .slice(0, this._options.maxResults);\n    }\n\n    /** Handle selection of a typeahead options */\n    selectOption(typeaheadOption: TypeaheadMatch): void {\n\n        // remove any current filters\n        this.removeFilter();\n\n        // find the filter that corresponds to the selected item\n        this.selected = this.filters.find(_filter => _filter.name === typeaheadOption.value);\n\n        // store the selection in the service\n        this._filterService.add(this.selected);\n\n        // clear the search query\n        this.query$.next('');\n\n        // hide the dropdown\n        this.dropdown.hide();\n    }\n\n    /** If a click occurred that was outside the dropdown then close the dropdown */\n    @HostListener('document:click', ['$event.target'])\n    clickOff(target: HTMLElement): void {\n\n        // if the click was outside the dropdown then close it\n        if (!(this._elementRef.nativeElement as HTMLElement).contains(target)) {\n            this.query$.next('');\n            this.dropdown.hide();\n        }\n    }\n\n    /** If a filter needs removed, and is not the initial filter then remove it */\n    removeFilter(): void {\n\n        // check if the filter we want to remove is the initial filter\n        if (this.selected !== this.initial) {\n            this._filterService.remove(this.selected);\n            this.selected = this.initial;\n        }\n\n        // clear the search query\n        this.query$.next('');\n    }\n\n    /** Select a specific filter */\n    selectFilter(filter: Filter): void {\n\n        // clear any current filters\n        this.removeFilter();\n\n        // store the newly selected filter\n        this.selected = filter;\n\n        // store the filter in the service\n        this._filterService.add(this.selected);\n    }\n\n    /** Update typeahead items and visibility */\n    updateTypeahead(query: string): void {\n        this.typeaheadOpen = query.length >= this._options.minCharacters;\n        this.typeaheadItems = this.getItems();\n    }\n\n    /** Select a filter from a typeahead item */\n    select(event: TypeaheadOptionEvent): void {\n        // find the filter with the matching name\n        const filter = this.filters.find(_filter => _filter.name === event.option);\n\n        if (filter) {\n            this.selectFilter(filter);\n        }\n    }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'filterTypeaheadHighlight'\n})\nexport class FilterTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        const regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"filter-typeahead-highlighted\">${value.match(regex)}</b>`);\n    }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter<void>();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.pipe(filter(item => item === this))\n            .subscribe(() => this.setActive());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { DOWN_ARROW, END, ESCAPE, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) private _document: any\n    ) { }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this.toggleButton.keyEnter.pipe(takeUntil(this._onDestroy))\n                .subscribe(() => this.focusFirst());\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this.items.changes.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this._itemsOrdered = this.items.toArray());\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.which) {\n\n            case UP_ARROW:\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case DOWN_ARROW:\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case LEFT_ARROW:\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case RIGHT_ARROW:\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case HOME:\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case END:\n                this.moveLast();\n                handled = true;\n                break;\n\n            case ESCAPE:\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { DOWN_ARROW, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    @Output()\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.which)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => this.keyEnter.emit());\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: number): boolean {\n        switch (key) {\n            case ENTER:\n            case SPACE:\n                return true;\n\n            case UP_ARROW:\n                return this.menuPosition === 'top';\n\n            case DOWN_ARROW:\n                return this.menuPosition === 'bottom';\n\n            case LEFT_ARROW:\n                return this.menuPosition === 'left';\n\n            case RIGHT_ARROW:\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { TypeaheadModule } from '../typeahead/typeahead.module';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent } from './filter-dynamic/filter-dynamic.component';\nimport { FilterTypeaheadHighlight } from './filter-dynamic/filter-typeahead-highlight.pipe';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent,\n    FilterTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        MenuNavigationModule,\n        CommonModule,\n        TypeaheadModule,\n        A11yModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    templateUrl: './flippable-card.component.html',\n    host: {\n        'tabindex': '0',\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean): void {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped(): void {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click')\n    clickTrigger(): void {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter')\n    hoverEnter(): void {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave')\n    hoverExit(): void {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    @HostListener('keydown.space', ['$event'])\n    @HostListener('keydown.spacebar', ['$event']) // IE uses different naming\n    onKeyDown(event: KeyboardEvent): void {\n        if (this.trigger !== 'manual') {\n            this.toggleFlipped();\n            event.preventDefault();\n        }\n    }\n}\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable, QueryList } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n    direction$ = new BehaviorSubject<FloatingActionButtonDirection>('top');\n\n    private _buttons: QueryList<FloatingActionButtonComponent>;\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n\n        // make the first button tabbable again\n        this.setPrimaryButtonFocusable();\n    }\n\n    isHorizontal(): boolean {\n        return this.direction$.value === 'left' || this.direction$.value === 'right';\n    }\n\n    isVertical(): boolean {\n        return this.direction$.value === 'top' || this.direction$.value === 'bottom';\n    }\n\n    setButtons(buttons: QueryList<FloatingActionButtonComponent>): void {\n        this._buttons = buttons;\n\n        // make the first button tabbable\n        this.setPrimaryButtonFocusable();\n    }\n\n    /** Make only the first button tabbable */\n    setPrimaryButtonFocusable(): void {\n        this._buttons.forEach(btn => btn.tabindex$.next(btn.primary ? 0 : -1));\n    }\n\n    focusPrimaryButton(): void {\n        this.focus(this._buttons.find(btn => btn.primary));\n    }\n\n    focus(button: FloatingActionButtonComponent): void {\n\n        // if the button is not defined then do nothing\n        if (!button) {\n            return;\n        }\n\n        // set the button tab index\n        this._buttons.forEach(btn => btn.tabindex$.next(button === btn ? 0 : -1));\n\n        // apply the focus\n        button.focus();\n    }\n\n    focusSibling(next: boolean): void {\n\n        // if the buttons are not visible then do nothing\n        if (this.open$.value === false) {\n            return;\n        }\n\n        // get the current focused item\n        const button = this.getFocusedButton();\n\n        if (next && button === this._buttons.last) {\n            return this.focus(this._buttons.first);\n        } else if (!next && button === this._buttons.first) {\n            return this.focus(this._buttons.last);\n        }\n\n        // find the sibling button\n        const sibling = this._buttons.toArray()[this.getButtonIndex(button) + (next ? 1 : -1)];\n\n        // focus the next button\n        this.focus(sibling);\n    }\n\n    private getFocusedButton(): FloatingActionButtonComponent {\n        return this._buttons.find(btn => btn.tabindex$.value === 0);\n    }\n\n    private getButtonIndex(button: FloatingActionButtonComponent): number {\n        return this._buttons.toArray().findIndex(btn => btn === button);\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';\n","import { DOWN_ARROW, ENTER, ESCAPE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';\nimport { AfterViewInit, Attribute, ChangeDetectionStrategy, Component, ElementRef, HostListener, Input, OnDestroy, Optional, ViewChild } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipDirective } from '../tooltip/index';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    templateUrl: './floating-action-button.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent implements AfterViewInit, OnDestroy {\n\n    @Input() icon: string;\n    @Input('aria-label') ariaLabel: string;\n    @ViewChild('button') button: ElementRef;\n\n    primary: boolean = false;\n    tabindex$ = new BehaviorSubject<number>(-1);\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService, @Optional() private _tooltip: TooltipDirective) {\n        this.primary = primary !== null;\n    }\n\n    ngAfterViewInit(): void {\n        if (this._tooltip) {\n            // ensure the tooltip gets hidden when the button is hidden\n            this.fab.open$.pipe(takeUntil(this._onDestroy), filter(isOpen => !isOpen && !this.primary))\n                .subscribe(() => this._tooltip.hide());\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    onFocus(): void {\n        // ensure the tooltip gets shown\n        if (this._tooltip) {\n            this._tooltip.show();\n        }\n    }\n\n    onBlur(): void {\n        // ensure the tooltip gets hidden\n        if (this._tooltip) {\n            this._tooltip.hide();\n        }\n    }\n\n    close(): void {\n        this.fab.close();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n\n        switch (event.which) {\n\n            case UP_ARROW:\n                if (this.fab.isVertical()) {\n                    this.fab.focusSibling(this.fab.direction$.value !== 'bottom');\n                    event.preventDefault();\n                }\n                break;\n\n            case DOWN_ARROW:\n                if (this.fab.isVertical()) {\n                    this.fab.focusSibling(this.fab.direction$.value === 'bottom');\n                    event.preventDefault();\n                }\n                break;\n\n            case LEFT_ARROW:\n                if (this.fab.isHorizontal()) {\n                    this.fab.focusSibling(this.fab.direction$.value !== 'right');\n                    event.preventDefault();\n                }\n                break;\n\n            case RIGHT_ARROW:\n                if (this.fab.isHorizontal()) {\n                    this.fab.focusSibling(this.fab.direction$.value === 'right');\n                    event.preventDefault();\n                }\n                break;\n\n            case ENTER:\n                this.fab.focusPrimaryButton();\n                break;\n\n            case ESCAPE:\n                this.fab.focusPrimaryButton();\n                this.fab.close();\n                break;\n\n        }\n\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, EventEmitter, HostListener, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\nimport { FloatingActionButtonDirection, FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    templateUrl: './floating-action-buttons.component.html',\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    /** Specify the direction that the FAB should display */\n    @Input() set direction(direction: FloatingActionButtonDirection) { this.fab.direction$.next(direction); }\n\n    /** Emit whenever the open state changes */\n    @Output() openChange = new EventEmitter<boolean>();\n\n    /** Get all child FAB buttons */\n    @ContentChildren(FloatingActionButtonComponent) buttons: QueryList<FloatingActionButtonComponent>;\n\n    private _subscription: Subscription = new Subscription();\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) {\n        this._subscription.add(this.fab.open$.subscribe(value => this.openChange.emit(value)));\n    }\n\n    ngAfterViewInit(): void {\n        this.fab.setButtons(this.buttons);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    /** Often a click event makes the element appear - if so we can end up closing it immediately */\n    private _initialised: boolean = false;\n\n    constructor(private _elementRef: ElementRef) {\n        setTimeout(() => this._initialised = true);\n    }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._initialised && this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  templateUrl: './popover.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Observer } from 'rxjs/Observer';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { first } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HierarchyBarService {\r\n\r\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _root: HierarchyBarNode;\r\n    private _nodes: HierarchyBarNode[] = [];\r\n\r\n    /**\r\n     * Store the root node of the hierarchy tree\r\n     */\r\n    setRootNode(root: HierarchyBarNode) {\r\n\r\n        // store the root node\r\n        this._root = root;\r\n\r\n        // create a flat structure of nodes\r\n        this._nodes = this.getNodeList(root);\r\n\r\n        // flatten the array - based on the selected node\r\n        this.nodes$.next(this.getSelectedChildren(root));\r\n    }\r\n\r\n    /**\r\n     * Select a node. This causes all nodes to be\r\n     * deselected and the path to the selected node\r\n     * to be selected\r\n     */\r\n    selectNode(node: HierarchyBarNode): void {\r\n\r\n        // deselect all nodes\r\n        this.deselectAll();\r\n\r\n        // ensure the current node is selected and its parents\r\n        this.select(node);\r\n\r\n        // emit a new node list to trigger change detection\r\n        this.nodes$.next(this.getSelectedChildren(this._root));\r\n    }\r\n\r\n    /**\r\n     * Handles getting children with support for both arrays and observables\r\n     */\r\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\r\n\r\n        if (Array.isArray(node.children)) {\r\n            return of({ loading: false, children: node.children });\r\n        }\r\n\r\n        const children$: Observable<HierarchyBarNode[]> = node.children;\r\n\r\n        // if it is an observable then handle loading\r\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\r\n            // emit initial value\r\n            observer.next({ loading: true, children: [] });\r\n\r\n            // now wait until the children observable completes\r\n            children$.pipe(first()).subscribe(children => {\r\n\r\n                // replace the observable with an array for future loading\r\n                node.children = children;\r\n\r\n                // rebuild the node tree\r\n                this.setRootNode(this._root);\r\n\r\n                // emit the latest value\r\n                observer.next({ loading: false, children: children });\r\n\r\n                // close the observable stream\r\n                observer.complete();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Traverses all the parents to ensure they are selected\r\n     */\r\n    private select(node: HierarchyBarNode): void {\r\n        node.selected = true;\r\n\r\n        if (node.parent) {\r\n            this.select(node.parent);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselects all nodes\r\n     */\r\n    private deselectAll(): void {\r\n        this._nodes.forEach(node => node.selected = false);\r\n    }\r\n\r\n    /**\r\n     * Gets all the nodes in the tree as a flat array.\r\n     * It also stores the parent node in a parent property\r\n     * on the node for easy traversal in both directions\r\n     */\r\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        // if there are no children then return only itself\r\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\r\n            return [node];\r\n        }\r\n\r\n        // store the parent property\r\n        node.children.forEach(child => child.parent = node);\r\n\r\n        // get all descendants of this node\r\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\r\n\r\n        return [node, ...descendants];\r\n    }\r\n\r\n    /**\r\n     * Gets all selected nodes from the parent node.\r\n     */\r\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\r\n\r\n        if (node.children instanceof Observable) {\r\n            return [node];\r\n        }\r\n\r\n        // get the children - and account for when there is none\r\n        const children = node.children || [];\r\n\r\n        // check if any child is selected\r\n        const child = children.find(_child => _child.selected);\r\n\r\n        // return the remaining chain of selected items\r\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\r\n    }\r\n}\r\n\r\nexport interface HierarchyBarNode {\r\n    icon?: string;\r\n    title: string;\r\n    selected?: boolean;\r\n    parent?: HierarchyBarNode;\r\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\r\n}\r\n\r\nexport interface HierarchyBarNodeChildren {\r\n    loading: boolean;\r\n    children: HierarchyBarNode[];\r\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { debounceTime } from 'rxjs/operators';\r\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\r\n\r\n@Component({\r\n    selector: 'ux-hierarchy-bar',\r\n    templateUrl: './hierarchy-bar.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    viewProviders: [HierarchyBarService]\r\n})\r\nexport class HierarchyBarComponent implements OnDestroy {\r\n\r\n    @Input() set root(node: HierarchyBarNode) {\r\n        this.hierarchyBar.setRootNode(node);\r\n    }\r\n\r\n    @Input() set selected(node: HierarchyBarNode) {\r\n        this.hierarchyBar.selectNode(node);\r\n    }\r\n\r\n    @Input() loadingIndicator: TemplateRef<any>;\r\n\r\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\r\n    @ViewChild('nodelist') nodelist: ElementRef;\r\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\r\n\r\n    overflow$ = new BehaviorSubject<boolean>(false);\r\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\r\n\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(public hierarchyBar: HierarchyBarService) {\r\n\r\n        // subscribe to changes in the selected node\r\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\r\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\r\n\r\n        // store subscriptions\r\n        this._subscription.add(selected);\r\n        this._subscription.add(changed);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * When there is overflow ensure that the rightmost\r\n     * node remains in view at all times. The nodes no longer\r\n     * visible be be displayed in a popover available on the\r\n     * overflow indicator\r\n     */\r\n    scrollIntoView(): void {\r\n\r\n        if (!this.nodelist) {\r\n            return;\r\n        }\r\n\r\n        // get the native element\r\n        const { nativeElement } = this.nodelist;\r\n\r\n        // emit whether or not there is overflow\r\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\r\n\r\n        // if the hierarchy bar contents do not overflow then do nothing\r\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\r\n\r\n            // determine the amount of overflow\r\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\r\n\r\n            // determine which nodes are not fully visible\r\n            this.overflowNodes$.next(\r\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\r\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\r\n            );\r\n\r\n            // move the scroll position to always show the last itme\r\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\r\n        }\r\n    }\r\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { PopoverModule } from '../popover/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule,\n        AccessibilityModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SidePanelService } from './side-panel.service';\n\n@Component({\n    selector: 'ux-side-panel',\n    exportAs: 'ux-side-panel',\n    templateUrl: 'side-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel'\n    }\n})\nexport class SidePanelComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('class.open')\n    get open(): boolean {\n        return this.service.open$.value;\n    }\n\n    set open(value: boolean) {\n        this.service.open$.next(value);\n    }\n\n    @Input()\n    @HostBinding('class.inline')\n    inline = false;\n\n    @Input()\n    attachTo: 'window' | 'container' = 'window';\n\n    @Input()\n    width: string | number = '50%';\n\n    @Input()\n    top: string | number = '0';\n\n    @Input()\n    @HostBinding('attr.aria-modal')\n    modal = false;\n\n    @Input()\n    @HostBinding('class.animate')\n    animate = false;\n\n    @Input()\n    closeOnExternalClick = false;\n\n    @Input()\n    focusOnShow: boolean = false;\n\n    @Output()\n    openChange = new EventEmitter<boolean>();\n\n    get position() {\n        if (this.inline) {\n            return 'static';\n        }\n        if (this.attachTo === 'container') {\n            return 'absolute';\n        }\n        return 'fixed';\n    }\n\n    get cssWidth(): string {\n        if (typeof this.width === 'number') {\n            return this.width === 0 ? '0' : this.width + 'px';\n        }\n        return this.width;\n    }\n\n    get cssTop(): string {\n        if (typeof this.top === 'number') {\n            return this.top === 0 ? '0' : this.top + 'px';\n        }\n        return this.top;\n    }\n\n    @HostBinding('style.width')\n    get componentWidth(): string {\n        if (this.inline) {\n            return this.open ? this.cssWidth : '0';\n        }\n        return null;\n    }\n\n    get hostWidth() {\n        return this.inline ? '100%' : this.cssWidth;\n    }\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor(\n        protected service: SidePanelService,\n        private _elementRef: ElementRef\n    ) { }\n\n    ngOnInit() {\n        this.service.open$.pipe(takeUntil(this._onDestroy)).subscribe(isOpen => this.openChange.emit(isOpen));\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    openPanel() {\n        this.service.open();\n    }\n\n    @HostListener('document:keyup.escape')\n    closePanel() {\n        this.service.close();\n    }\n\n    @HostListener('document:click', ['$event'])\n    clickHandler(event: MouseEvent) {\n        if (!this.open || !this.closeOnExternalClick) {\n            return;\n        }\n\n        const target = event.target as HTMLElement;\n\n        if (!this._elementRef.nativeElement.contains(target) ||\n            (target && target.classList.contains('modal-backdrop'))) {\n            this.closePanel();\n        }\n    }\n}","import { Component, ContentChild, Directive, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\nimport { SidePanelService } from '../side-panel/side-panel.service';\n\n@Directive({\n    selector: '[uxItemDisplayPanelContent]'\n})\nexport class ItemDisplayPanelContentDirective { }\n\n@Directive({\n    selector: '[uxItemDisplayPanelFooter]'\n})\nexport class ItemDisplayPanelFooterDirective { }\n\n@Component({\n    selector: 'ux-item-display-panel',\n    templateUrl: './item-display-panel.component.html',\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel ux-item-display-panel'\n    }\n})\nexport class ItemDisplayPanelComponent extends SidePanelComponent implements OnInit {\n\n    @Input() header: string;\n\n    @Input() boxShadow: boolean = true;\n\n    @Input() closeVisible: boolean = true;\n\n    get preventClose(): boolean {\n        return !this.closeOnExternalClick;\n    }\n\n    @Input()\n    set preventClose(value: boolean) {\n        this.closeOnExternalClick = !value;\n    }\n\n    @Input() shadow: boolean = false;\n\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\n    @ViewChild('panel') panel: ElementRef;\n\n    /**\n     * @deprecated\n     * Title used for adding tooltips and shouldn't be used as an input\n     * instead header will be used. This is here to support backward compatibility only\n     * this property should not be used.\n     */\n    @Input()\n    set title(value: string) {\n        this.header = value;\n    }\n\n    get title() {\n        return this.header;\n    }\n\n    @Input()\n    set visible(visible: boolean) {\n        this.open = visible;\n    }\n\n    get visible() {\n        return this.open;\n    }\n\n    constructor(service: SidePanelService, elementRef: ElementRef) {\n        super(service, elementRef);\n\n        this.animate = false;\n        this.closeOnExternalClick = true;\n    }\n\n    ngOnInit() {\n        this.service.open$.pipe(distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe(isVisible => this.visibleChange.emit(isVisible));\n    }\n\n    focus(): void {\n        if (this.panel) {\n            this.panel.nativeElement.focus();\n        }\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FocusIfModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter, Host, HostBinding, Inject, forwardRef } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    templateUrl: './wizard-step.component.html',\n    host: {\n        'role': 'tabpanel',\n        '[attr.aria-labelledby]': 'id + \"-label\"'\n    }\n})\nexport class WizardStepComponent {\n\n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input()\n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n\n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    @HostBinding('attr.aria-expanded')\n    get active(): boolean {\n        return this._active;\n    }\n\n    @HostBinding('id') id: string;\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { WizardStepComponent } from './wizard-step.component';\n\nlet uniqueId: number = 0;\n\n@Component({\n    selector: 'ux-wizard',\n    templateUrl: './wizard.component.html',\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit, OnDestroy {\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextAriaLabel: string = 'Go to the next step';\n    @Input() previousAriaLabel: string = 'Go to the previous step';\n    @Input() cancelAriaLabel: string = 'Cancel the wizard';\n    @Input() finishAriaLabel: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n    @Output() stepError = new EventEmitter<number>();\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    id: string = `ux-wizard-${uniqueId++}`;\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    private _step: number = 0;\n    private _onDestroy = new Subject<void>();\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n\n        // initially set the ids for each step\n        this.setWizardStepIds();\n\n        // if the steps change then update the ids\n        this.steps.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.setWizardStepIds());\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Set ids for each of the wizard steps */\n    setWizardStepIds(): void {\n        this.steps.forEach((step, idx) => step.id = `${this.id}-step-${idx}`);\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            this.stepError.next(this.step);\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();\n                } else {\n                    this.stepError.next(this.step);\n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\nimport { AccessibilityModule } from '../../directives/accessibility/accessibility.module';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule,\n        AccessibilityModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    templateUrl: './marquee-wizard-step.component.html'\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    templateUrl: './marquee-wizard.component.html',\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(filter((event: MarqueeWizardValidEvent) => !event.valid))\n            .subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        } else {\n            this.stepError.next(this.step);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            } else {\n                this.stepError.next(this.step);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule,\n        AccessibilityModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<Event> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe(() => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: ReplaySubject<boolean> = new ReplaySubject<boolean>();\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        const interval = setInterval(() => {\n\n            const buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) { }\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList | Array<any> {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : [];\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): Array<TextTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.textTracks) : [];\n    }\n\n    get videoTracks(): Array<VideoTrack> {\n        return this._mediaPlayer ? Array.from(this._mediaPlayer.videoTracks) : [];\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        if (this._mediaPlayer) {\n            this._mediaPlayer.volume = value;\n        }\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: 'subtitles' | 'captions' | 'descriptions' | 'chapters' | 'metadata', label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange() {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n\n    hideSubtitleTracks(): void {\n        for (let index = 0; index < this.textTracks.length; index++) {\n            this.textTracks[index].mode = 'hidden';\n        }\n    }\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    templateUrl: './slider.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb?: string;\n    lowerThumb?: string;\n    upperThumb?: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { timer } from 'rxjs/observable/timer';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SliderOptions, SliderSize } from '../../../slider/index';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\nlet uniqueId: number = 1;\n\n@Component({\n    selector: 'ux-media-player-controls',\n    templateUrl: './controls.component.html',\n    host: {\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    volumeActive: boolean = false;\n    volumeFocus: boolean = false;\n    returnFocus: boolean = true;\n    subtitlesId: string = `ux-media-player-subtitle-popover-${uniqueId++}`;\n    subtitlesOpen: boolean = false;\n    mouseEnterVolume = new Subject<void>();\n    mouseLeaveVolume = new Subject<void>();\n\n    options: SliderOptions = {\n        handles: {\n            aria: {\n                thumb: 'Volume'\n            }\n        },\n        track: {\n            colors: {\n                lower: '#666'\n            },\n            height: SliderSize.Narrow,\n            ticks: {\n                major: {\n                    show: false\n                },\n                minor: {\n                    show: false\n                }\n            }\n        }\n    };\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n\n        this.mouseEnterVolume.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        this.mouseLeaveVolume.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(this.mouseEnterVolume))), takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        this.volume = this.volume === 0 ? this._previousVolume : 0;\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    isSubtitleActive(): boolean {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    setSubtitleTrack(track: TextTrack): void {\n        // hide all tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n\n        // set the position of the subtitle track\n        for (let idx = 0; idx < track.cues.length; idx++) {\n            const cue: any = track.cues[idx];\n            cue.line = -3;\n        }\n\n        // activate the selected one\n        track.mode = 'showing';\n\n    }\n\n    getSubtitleTrack(): string {\n        for (let idx = 0; idx < this.mediaPlayerService.textTracks.length; idx++) {\n            if (this.mediaPlayerService.textTracks[idx].mode === 'showing') {\n                return this.mediaPlayerService.textTracks[idx].label;\n            }\n        }\n\n        return 'No subtitles';\n    }\n\n}","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxMediaPlayerCustomControl]',\n})\nexport class MediaPlayerCustomControlDirective {}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    templateUrl: './timeline.component.html',\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'mediaPlayerService.quietMode || mediaPlayerService.fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.mediaPlayerService.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({\n                    start: (buffered.start(idx) / this.mediaPlayerService.duration) * 100,\n                    end: (buffered.end(idx) / this.mediaPlayerService.duration) * 100\n                });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n\n    /** Skip a number of seconds in any direction */\n    skip(seconds: number): void {\n        let target = this.current + seconds;\n\n        // ensure that the target position is within the bounds of the clip\n        if (target < 0) {\n            target = 0;\n        }\n\n        if (target > this.mediaPlayerService.duration) {\n            target = this.mediaPlayerService.duration;\n        }\n\n        this.mediaPlayerService.currentTime = target;\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: HttpClient) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.get(mediaElement.src, { responseType: 'blob' }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: response.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.get(url, { responseType: 'arraybuffer' }).subscribe(response => {\n                this.getAudioBuffer(response).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpClientModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { debounceTime, takeUntil, tap } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    templateUrl: './media-player.component.html',\n    providers: [MediaPlayerService],\n    host: {\n        '(keydown.Space)': 'mediaPlayerService.togglePlay(); $event.preventDefault()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering || focused',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange()',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange()'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    focused: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    @Input() crossorigin: 'use-credentials' | 'anonymous' = 'use-credentials';\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            tap(() => this.hovering = true),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n\n        // initially hide all text tracks\n        this.mediaPlayerService.hideSubtitleTracks();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { SliderModule } from '../slider/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { MediaPlayerCustomControlDirective } from './extensions/controls/custom-control/custom-control.directive';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerComponent } from './media-player.component';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent,\n    MediaPlayerCustomControlDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule,\n        SliderModule,\n        AccessibilityModule,\n        A11yModule,\n        ClickOutsideModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class MediaPlayerModule { }\n","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators/filter';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    templateUrl: './navigation-item.component.html',\n    host: {\n        '[class.active]': 'active',\n        '[class.selected]': 'expanded',\n    }\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() expanded: boolean = false;\n    @Input() link: string;\n\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional()\n        @SkipSelf()\n        private _parent: NavigationItemComponent,\n        private _router: Router\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe(event => {\n            // Expand this component if it or a descendant is active.\n            this.expanded = this.hasActiveLink(this.link);\n        });\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            let levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy () {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n        // If this component has a link, check if it is active.\n        if (link && this._router.isActive(link, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n            // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { NavigationItem } from './navigation-item.inferface';\n\n@Injectable()\nexport class NavigationService {\n\n    items: NavigationItem[];\n\n    autoCollapse: boolean = true;\n\n    setExpanded(source: NavigationItem, expanded: boolean): void {\n        if (expanded && this.autoCollapse) {\n            this.collapseSiblings(source);\n        }\n    }\n\n    private collapseSiblings(source: NavigationItem): void {\n        let siblings = this.items;\n        for (let item of this.items) {\n            const parent = this.getParent(source, item);\n            if (parent) {\n                siblings = parent.children;\n                break;\n            }\n        }\n\n        for (let item of siblings) {\n            if (item !== source) {\n                this.collapseAll(item);\n            }\n        }\n    }\n\n    private collapseAll(item: NavigationItem): void {\n        item.expanded = false;\n        if (item.children) {\n            for (let child of item.children) {\n                this.collapseAll(child);\n            }\n        }\n    }\n\n    private getParent(target: NavigationItem, item: NavigationItem): NavigationItem {\n        if (item.children) {\n            for (let child of item.children) {\n                if (child === target) {\n                    return item;\n                }\n            }\n        }\n\n        return null;\n    }\n}","import { LocationStrategy } from '@angular/common';\nimport { Directive, HostBinding, HostListener, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../../common/index';\nimport { NavigationItem } from '../navigation-item.inferface';\nimport { NavigationService } from '../navigation.service';\n\n@Directive({\n    selector: '[uxNavigationLink]',\n    exportAs: 'uxNavigationLink'\n})\nexport class NavigationLinkDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input()\n    navigationItem: NavigationItem;\n\n    @Input()\n    set expanded(value: boolean) {\n        this._expanded$.next(value);\n    }\n\n    @Input()\n    canExpand: boolean;\n\n    @Input()\n    @HostBinding('class.indent')\n    indent: boolean;\n\n    @HostBinding('attr.href')\n    href: string;\n\n    @HostBinding('attr.role')\n    role: string;\n\n    @HostBinding('attr.aria-expanded')\n    ariaExpanded: string = 'undefined';\n\n    isActive: boolean;\n\n    indentChildren: boolean;\n\n    private _expanded$ = new Subject<boolean>();\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _router: Router,\n        private _locationStrategy: LocationStrategy,\n        private _navigationService: NavigationService\n    ) { }\n\n    ngOnInit(): void {\n\n        this._expanded$.pipe(takeUntil(this._onDestroy), tick()).subscribe(expanded => {\n            if (this.navigationItem.children && this.navigationItem.children.length > 0) {\n                this.ariaExpanded = `${expanded}`;\n                this._navigationService.setExpanded(this.navigationItem, expanded);\n            }\n        });\n\n        this._router.events\n            .pipe(filter(event => event instanceof NavigationEnd), takeUntil(this._onDestroy))\n            .subscribe(this.updateNavigationState.bind(this));\n\n        this.updateNavigationState();\n\n        this.updateAttributes();\n    }\n\n    ngOnChanges(): void {\n        this.updateAttributes();\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('click', ['$event'])\n    @HostListener('keydown.enter', ['$event'])\n    activated(event: Event): boolean {\n\n        if (this.navigationItem.routerLink) {\n            const commands = Array.isArray(this.navigationItem.routerLink) ? this.navigationItem.routerLink : [this.navigationItem.routerLink];\n            this._router.navigate(commands, this.navigationItem.routerExtras);\n        }\n\n        // Toggle expanded state (relevant only if it has children)\n        this.navigationItem.expanded = !this.navigationItem.expanded;\n\n        // Invoke the custom click handler if specified\n        if (this.navigationItem.click) {\n            this.navigationItem.click(event, this.navigationItem);\n        }\n\n        return false;\n    }\n\n    private updateNavigationState(): void {\n        this.isActive = this.isActiveItem(this.navigationItem);\n\n        if (this.navigationItem.children) {\n            const activeChild = this.navigationItem.children.find(child => this.isActiveItem(child));\n            if (activeChild) {\n                this.navigationItem.expanded = true;\n            }\n        }\n    }\n\n    private updateAttributes(): void {\n\n        this.href = this.getHref();\n        this.role = (this.navigationItem.children && this.navigationItem.children.length > 0) ? 'button' : 'treeitem';\n\n        this.indentChildren = this.navigationItem.children && this.navigationItem.children.some(item => item.children && item.children.length > 0);\n    }\n\n    private getHref(): string {\n\n        if (this.navigationItem.routerLink) {\n            const commands = Array.isArray(this.navigationItem.routerLink) ? this.navigationItem.routerLink : [this.navigationItem.routerLink];\n            const urlTree = this._router.createUrlTree(commands, this.navigationItem.routerExtras);\n            return this._locationStrategy.prepareExternalUrl(this._router.serializeUrl(urlTree));\n        }\n\n        return null;\n    }\n\n    private isActiveItem(item: NavigationItem): boolean {\n\n        if (item.routerLink) {\n            const commands = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            const urlTree = this._router.createUrlTree(commands, item.routerExtras);\n            return this._router.isActive(urlTree, true);\n        }\n\n        return false;\n    }\n}","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { NavigationItem } from './navigation-item.inferface';\nimport { NavigationService } from './navigation.service';\n\n@Component({\n    selector: 'ux-navigation',\n    templateUrl: './navigation.component.html',\n    providers: [NavigationService]\n})\nexport class NavigationComponent {\n\n    /** The navigation items to populate the menu with. */\n    @Input()\n    set items(items: NavigationItem[]) {\n        this._navigationService.items = items;\n    }\n    get items(): NavigationItem[] {\n        return this._navigationService.items;\n    }\n\n    /** Whether to present the menu as a hierarchical tree. */\n    @Input()\n    tree: boolean = true;\n\n    /** Whether to collapse other menu items when expanding a menu item. */\n    @Input()\n    set autoCollapse(autoCollapse: boolean) {\n        this._navigationService.autoCollapse = autoCollapse;\n    }\n\n    @ContentChild('uxNavigationItem')\n    navigationItemTemplate: TemplateRef<any>;\n\n    hierarchyClasses = [\n        '',\n        'nav-second-level',\n        'nav-third-level',\n        'nav-fourth-level',\n        'nav-fifth-level',\n    ];\n\n    get depthLimit(): number {\n        return this.tree ? this.hierarchyClasses.length : 2;\n    }\n\n    constructor(private _navigationService: NavigationService) { }\n\n    itemClick(item: NavigationItem, event: Event): void {\n\n        // Toggle expanded state (relevant only if it has children)\n        item.expanded = !item.expanded;\n\n        // Invoke the custom click handler if specified\n        if (item.click) {\n            item.click(event, item);\n        }\n    }\n\n    /**\n     * Returns true if the sets of items needs to be indented to make room for one or more expander.\n     */\n    needsIndent(items: NavigationItem[]): boolean {\n        return items && items.some(item => item.children && item.children.length > 0);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\nimport { NavigationLinkDirective } from './navigation-link/navigation-link.directive';\nimport { NavigationComponent } from './navigation.component';\n\n@NgModule({\n    imports: [\n        AccessibilityModule,\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent,\n        NavigationLinkDirective\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { ColorService } from '../../services/color/index';\r\n\r\n@Injectable()\r\nexport class NotificationService {\r\n\r\n    // provide default options\r\n    options: NotificationOptions = {\r\n        duration: 4,\r\n        height: 100,\r\n        spacing: 10,\r\n        backgroundColor: this._colorService.getColor('accent').toHex(),\r\n        iconColor: this._colorService.getColor('accent').toHex()\r\n    };\r\n\r\n    direction: NotificationListDirection = 'above';\r\n\r\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \r\n\r\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\r\n\r\n        options = { ...this.options, ...options };\r\n\r\n        const notificationRef: NotificationRef = {\r\n            templateRef: templateRef,\r\n            duration: options.duration,\r\n            date: new Date(),\r\n            visible: true,\r\n            height: options.height,\r\n            spacing: options.spacing,\r\n            backgroundColor: options.backgroundColor,\r\n            iconColor: options.iconColor,\r\n            data: data\r\n        };\r\n\r\n        const notifications = this.notifications$.getValue();\r\n\r\n        if (this.direction === 'above') {\r\n            notifications.unshift(notificationRef);\r\n        } else {\r\n            notifications.push(notificationRef);\r\n        }\r\n\r\n        this.notifications$.next(notifications);\r\n\r\n        // remove notification after delay\r\n        if (options.duration !== 0) {\r\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\r\n        }\r\n\r\n        return notificationRef;\r\n    }\r\n\r\n    getHistory(): NotificationRef[] {\r\n        return this.notifications$.getValue();\r\n    }\r\n\r\n    dismiss(notificationRef: NotificationRef): void {\r\n        notificationRef.visible = false;\r\n        this.notifications$.next(this.notifications$.getValue());\r\n    }\r\n    \r\n    dismissAll(): void {\r\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\r\n        this.notifications$.next(this.notifications$.getValue());        \r\n    }\r\n\r\n    constructor(private _colorService: ColorService) {\r\n    }\r\n}\r\n\r\nexport interface NotificationRef {\r\n    templateRef: TemplateRef<any>;\r\n    duration: number;\r\n    date: Date;\r\n    visible?: boolean;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n    data: { [key: string]: any };\r\n}\r\n\r\nexport interface NotificationOptions {\r\n    duration?: number;\r\n    height?: number;\r\n    spacing?: number;\r\n    backgroundColor?: string;\r\n    iconColor?: string;\r\n}\r\n\r\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    templateUrl: './notification-list.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { filter, map, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n    secondaryNavigationAutoselect = false;\n\n    private _onDestroy = new Subject();\n\n    constructor(private _router: Router) {\n\n        this.selected$\n            .pipe(takeUntil(this._onDestroy), map(selected => this.getRoot(selected)))\n            .subscribe(root => this.selectedRoot$.next(root));\n\n        this._router.events\n            .pipe(takeUntil(this._onDestroy), filter(e => e instanceof NavigationEnd))\n            .subscribe(this.updateItemsWithActiveRoute.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        if (!item) {\n            return;\n        }\n\n        if (item.routerLink) {\n\n            // Trigger router navigation\n            const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            this._router.navigate(routerLink, item.routerExtras);\n\n        } else if (this.secondaryNavigationAutoselect && item.children && item.children.length > 0) {\n\n            // Select the first child in secondaryNavigationAutoselect mode\n            this.select(item.children[0]);\n\n        } else {\n\n            // if we are in secondary navigation mode and we click a parent - dont deselect the child\n            if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n                return;\n            }\n\n            // Otherwise select the given item\n            this.selected$.next(item);\n        }\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    updateItem(item: PageHeaderNavigationItem, selected: PageHeaderNavigationItem): void {\n        // Item is selected if it is the selected item, or one of the selected item's ancestors.\n        item.selected = item === selected || this.isParentOf(selected, item);\n\n        if (item === selected) {\n            // call the select function if present\n            if (item.select) {\n                item.select.call(item, item);\n            }\n        }\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n\n        // Set up the initally selected item\n        // If nothing is set as selected, using the initial route\n        const initialSelectedItem = items.find(item => item.selected === true);\n        if (initialSelectedItem) {\n            this.select(initialSelectedItem);\n        } else {\n            this.updateItemsWithActiveRoute();\n        }\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n\n    private updateItemsWithActiveRoute(): void {\n        const activeItem = new PageHeaderActiveNavigationItem();\n        for (var item of this.items$.getValue()) {\n            this.findActiveItem(item, activeItem);\n            if (activeItem.exact) {\n                break;\n            }\n        }\n\n        if (activeItem.item) {\n            this.selected$.next(activeItem.item);\n        }\n    }\n\n    private findActiveItem(item: PageHeaderNavigationItem, activeItem: PageHeaderActiveNavigationItem): void {\n\n        if (item.routerLink) {\n\n            const routerLink = Array.isArray(item.routerLink) ? item.routerLink : [item.routerLink];\n            const urlTree = this._router.createUrlTree(routerLink, item.routerExtras);\n\n            if (this._router.isActive(urlTree, true) && !activeItem.exact) {\n\n                // When the item route is an exact match, no need to look any further\n                activeItem.item = item;\n                activeItem.exact = true;\n\n                return;\n            }\n\n            if (this._router.isActive(urlTree, false)) {\n\n                // Store an inexact match and continue looking\n                activeItem.item = item;\n                activeItem.exact = false;\n            }\n        }\n\n        if (item.children) {\n            for (let childItem of item.children) {\n                this.findActiveItem(childItem, activeItem);\n                if (activeItem.exact) {\n                    return;\n                }\n            }\n        }\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;\n\nclass PageHeaderActiveNavigationItem {\n    item: PageHeaderNavigationItem;\n    exact: boolean;\n}\n","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    templateUrl: './icon-menu.component.html'\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    templateUrl: './navigation-dropdown-item.component.html'\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    templateUrl: './navigation-item.component.html'\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _onDestroy = new Subject();\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        this._pageHeaderService.selected$.pipe(takeUntil(this._onDestroy)).subscribe(next => {\n\n            // Update selected state for this item\n            this._pageHeaderService.updateItem(this.item, next);\n\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this.menu.onHidden\n                .pipe(takeUntil(this._onDestroy))\n                .subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    select(): void {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { delay, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { PageHeaderService } from '../../page-header.service';\r\nimport { PageHeaderNavigationItem } from '../navigation.component';\r\n\r\n@Directive({\r\n    selector: '[uxPageHeaderNavigationSecondaryItem]'\r\n})\r\nexport class PageHeaderNavigationSecondaryItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('uxPageHeaderNavigationSecondaryItem')\r\n    item: PageHeaderNavigationItem;\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _pageHeaderService: PageHeaderService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this._pageHeaderService.selected$.pipe(delay(0), takeUntil(this._onDestroy)).subscribe(next => {\r\n\r\n            // Update selected state for this item\r\n            this._pageHeaderService.updateItem(this.item, next);\r\n\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { NavigationExtras } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    templateUrl: './navigation.component.html',\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    routerLink?: string | any[];\n    routerExtras?: NavigationExtras;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Component, ContentChild, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    templateUrl: 'page-header.component.html',\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() title: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: 'left' | 'right' | 'center' = 'center';\n\n    @Input()\n    set secondaryNavigationAutoselect(value: boolean) {\n        this._pageHeaderService.secondaryNavigationAutoselect = value;\n    }\n\n    get secondaryNavigationAutoselect(): boolean {\n        return this._pageHeaderService.secondaryNavigationAutoselect;\n    }\n\n    @Input()\n    set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input()\n    set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input()\n    set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input() crumbsStyle: 'standard' | 'small' = 'standard';\n\n    @Input()\n    set logoBackground(color: string) {\n        this._logoBackground = this._colorService.resolve(color);\n    }\n\n    get logoBackground(): string {\n        return this._logoBackground;\n    }\n\n    @Input()\n    set logoForeground(color: string) {\n        this._logoForeground = this._colorService.resolve(color);\n    }\n\n    get logoForeground(): string {\n        return this._logoForeground;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this.logoBackground = color;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this.logoForeground = color;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChild('title') titleTemplate: TemplateRef<any>;\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _logoBackground: string;\n    private _logoForeground: string;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    templateUrl: './tab.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    templateUrl: './tabset.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetComponent } from './tabset.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationSecondaryItemDirective } from './navigation/navigation-secondary-item/navigation-secondary-item.directive';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderComponent } from './page-header.component';\nimport { TabsetModule } from '../tabset/index';\n\n@NgModule({\n    imports: [\n        BreadcrumbsModule,\n        BsDropdownModule.forRoot(),\n        ColorServiceModule,\n        CommonModule,\n        MenuNavigationModule,\n        ResizeModule,\n        RouterModule,\n        TabsetModule\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent,\n        PageHeaderNavigationSecondaryItemDirective\n    ]\n})\nexport class PageHeaderModule { }\n","import { Component, EventEmitter, forwardRef, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const PAGINATION_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => PaginationComponent),\n  multi: true\n};\n\n@Component({\n  selector: 'ux-pagination',\n  templateUrl: './pagination.component.html',\n  providers: [PAGINATION_CONTROL_VALUE_ACCESSOR]\n})\nexport class PaginationComponent implements OnInit, ControlValueAccessor {\n\n  /** Specify if we should show the next and previous buttons */\n  @Input() directionButtons: boolean = true;\n\n  /** Limit the number of pages shown at any given time */\n  @Input() maxSize: number = 5;\n\n  /** Specify if the component should be disabled */\n  @Input() disabled: boolean = false;\n\n  /** Apply classes to the bootstrap pagination element */\n  @Input('class') classes: string;\n\n  /** Allow custom class to be added to page buttons */\n  @Input() pageBtnClass: string;\n\n  /** Aria Label for the component navigation */\n  @Input('aria-label') ariaLabel: string = 'Pagination Navigation';\n\n  /** Aria label for the previous button */\n  @Input() previousAriaLabel: string = 'Navigate to the previous page';\n\n  /** Aria label for the next button */\n  @Input() nextAriaLabel: string = 'Navigate to the next page';\n\n  /** Specify the index of the active page */\n  @Input() set page(page: number) {\n\n    // do nothing if the page has not changed\n    if (page === this._page) {\n      return;\n    }\n\n    this._page = page;\n    this.pages = this.getPages();\n\n    // mark this component as changed\n    this.onChange(this.page);\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  /** Define a custom template for the previous button */\n  @Input() previousBtnTemplate: TemplateRef<any>;\n\n  /** Define a custom template for the next button */\n  @Input() nextBtnTemplate: TemplateRef<any>;\n\n  /** Specify the page size */\n  @Input() set itemsPerPage(pagesize: number) {\n    this._pagesize = pagesize;\n    this.pages = this.getPages();\n  }\n\n  /** Specify how many items there are in total */\n  @Input() set totalItems(total: number) {\n    this._total = total;\n    this.pages = this.getPages();\n  }\n\n  /** Emit the current page number */\n  @Output() pageChange = new EventEmitter<number>();\n\n  /** Emit the total number of pages */\n  @Output() numPages = new EventEmitter<number>();\n\n  /** Store a list of pages to display in the UI */\n  pages: ReadonlyArray<Page> = [];\n\n  /** ControlValueAccessor functions */\n  onTouched: Function = () => {};\n  onChange: Function = () => {};\n\n  isKeyboardEvent: boolean = false;\n\n  private _page: number = 1;\n  private _total: number = 100;\n  private _pagesize: number = 10;\n\n  get pageCount(): number {\n    return Math.ceil(this._total / this._pagesize);\n  }\n\n  ngOnInit(): void {\n    this.pages = this.getPages();\n  }\n\n  select(index: number): void {\n\n    // find the page we want to go to\n    const target = this.pages.find(page => page.index === index);\n\n    // if the page is out of bounds then do nothing\n    if (!target) {\n      return;\n    }\n\n    // mark this component as touched\n    this.onTouched();\n\n    // set this as the current page\n    this.page = target.index;\n\n    // update the visible pages\n    this.pages = this.getPages();\n\n    // emit the current page\n    this.pageChange.emit(this.page);\n  }\n\n  trackByFn(_index: number, item: Page): number {\n    return item.index;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  writeValue(page: number): void {\n    this.page = page;\n  }\n\n  private getPages(): Page[] {\n\n    // create a new array to store the pages\n    const pages: Page[] = [];\n\n    // create all possible pages\n    for (let index = 1; index <= this.pageCount; index++) {\n      pages.push({ index, visible: this.isPageVisible(index) });\n    }\n\n    // emit the number of pages\n    this.numPages.emit(this.pageCount);\n\n    return pages;\n  }\n\n  private isPageVisible(index: number): boolean {\n\n    // if we do not have a max size specified or the number of pages is less than the max size then it is always visible\n    if (!this.maxSize || this.pageCount <= this.maxSize) {\n      return true;\n    }\n\n    // find the starting position\n    let start = Math.max(1, Math.ceil(this.page - (this.maxSize / 2)));\n    const end = Math.min(start + this.maxSize, this.pageCount + 1);\n\n    // if the range is less than the max size we need to adjust the starting point\n    const range = end - start;\n\n    if (range < this.maxSize) {\n      start = start - (this.maxSize - range);\n    }\n\n    // if the item equals the start position or is less than the end position then show it\n    return index >= start && index < end;\n  }\n}\n\nexport interface Page {\n  index: number;\n  visible: boolean;\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { PaginationComponent } from './pagination.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    A11yModule,\n    AccessibilityModule,\n    FocusIfModule\n  ],\n  declarations: [\n    PaginationComponent\n  ],\n  exports: [\n    PaginationComponent\n  ]\n})\nexport class PaginationModule { }\n","import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        role: 'progressbar'\n    }\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() @HostBinding('attr.aria-valuemin') min: number = 0;\n    @Input() @HostBinding('attr.aria-valuemax') max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n\n    /** When indeteminate we should omit the valuenow label */\n    @HostBinding('attr.aria-valuenow') get valueNow() {\n        return this.indeterminate ? null : this.value;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    templateUrl: './radiobutton.component.html',\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nconst UNSET_FOCUS: SearchBuilderFocus = { groupId: null, index: -1 };\n\n@Injectable()\nexport class SearchBuilderFocusService {\n\n    focus$ = new BehaviorSubject<SearchBuilderFocus>(UNSET_FOCUS);\n\n    /**\n     * Set focus on a search builder component.\n     * @param groupId The `id` of the group containing the component.\n     * @param index The (zero-based) index of the component.\n     */\n    setFocus(groupId: string, index: number): void {\n        this.focus$.next({ groupId: groupId, index: index });\n    }\n\n    /**\n     * Removes focus from all components. If focus is not on a search builder component, this does nothing.\n     */\n    clearFocus(): void {\n        this.focus$.next(UNSET_FOCUS);\n    }\n}\n\nexport interface SearchBuilderFocus {\n    groupId: string;\n    index: number;\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(\n    private _searchBuilderService: SearchBuilderService,\n    private _searchBuilderFocusService: SearchBuilderFocusService\n  ) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query and return focus to the previous field.\n   */\n  removeAtIndex(index: number): void {\n\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(index, 1);\n\n    // Focus the previous item if available\n    this._searchBuilderFocusService.setFocus(this._id, index <= 0 ? 0 : index - 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  templateUrl: './search-builder-group.component.html',\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit, OnDestroy {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  focusIndex: number = -1;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(\n    public searchBuilderGroupService: SearchBuilderGroupService,\n    private _searchBuilderFocusService: SearchBuilderFocusService\n  ) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have an id attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n\n    // Track focus for child components\n    this._searchBuilderFocusService.focus$.pipe(takeUntil(this._onDestroy)).subscribe(focus => {\n      this.focusIndex = (focus.groupId === this.id) ? focus.index : -1;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  addField(event: MouseEvent): void {\n    this.add.emit(event);\n  }\n\n  removeFieldAtIndex(index: number, field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.removeAtIndex(index);\n    this.remove.emit(field);\n  }\n\n  setFocus(index: number): void {\n    this._searchBuilderFocusService.setFocus(this.id, index);\n  }\n\n  clearFocus(): void {\n    this._searchBuilderFocusService.clearFocus();\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\nimport { delay, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderFocusService } from '../search-builder-focus.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { BaseSearchComponent } from '../search-components/base-search.component';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit, OnDestroy {\n\n    @Input('uxSearchBuilderOutlet') outlet: string;\n    @Input('uxSearchBuilderOutletContext') context: any;\n    @Input('uxSearchBuilderOutletGroupId') groupId: string;\n    @Input('uxSearchBuilderOutletIndex') index: number;\n\n    private _componentRef: ComponentRef<BaseSearchComponent>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderFocusService: SearchBuilderFocusService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.outlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory<BaseSearchComponent>(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.context.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.context;\n        this._componentRef.instance.config = config;\n\n        this._searchBuilderFocusService.focus$\n            .pipe(distinctUntilChanged(), delay(0), takeUntil(this._onDestroy))\n            .subscribe(focus => {\n                this._componentRef.instance.focus = (focus.groupId === this.groupId && focus.index === this.index);\n            });\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  templateUrl: './search-builder.component.html',\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\r\nimport { Component, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, delay, distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TagInputComponent } from '../tag-input/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    templateUrl: 'select.component.html',\r\n    providers: [SELECT_VALUE_ACCESSOR],\r\n    host: {\r\n        'tabindex': '0'\r\n    }\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    set value(value: any) {\r\n        this._value$.next(value);\r\n    }\r\n    get value() {\r\n        return this._value$.value;\r\n    }\r\n\r\n    @Input()\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n    }\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n\r\n    @Input()\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n    @Input() autocomplete: string = 'off';\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('tagInput') tagInput: TagInputComponent;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value$ = new BehaviorSubject<any>(null);\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Emit change events\r\n        this._value$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.valueChange.emit(value);\r\n            this.propagateChange(value);\r\n        });\r\n\r\n        this._input$.pipe(takeUntil(this._onDestroy), distinctUntilChanged()).subscribe(value => {\r\n            this.inputChange.emit(value);\r\n        });\r\n\r\n        // Changes to the input field\r\n        this._input$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        this.filter$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            filter(value => value && value.length > 0)\r\n        ).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // Update the single-select input when the model changes\r\n        this._value$.pipe(\r\n            takeUntil(this._onDestroy),\r\n            distinctUntilChanged(),\r\n            delay(0),\r\n            filter(value => value !== null && !this.multiple)\r\n        ).subscribe(value => {\r\n            this.input = this.getDisplay(value);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('focus')\r\n    onfocus(): void {\r\n        if (this.singleInput) {\r\n            this.singleInput.nativeElement.focus();\r\n        } else if (this.tagInput) {\r\n            this.tagInput.focus();\r\n        }\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this.value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { BACKSPACE, DELETE, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { tick } from '../../common/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    exportAs: 'ux-tag-input',\r\n    templateUrl: 'tag-input.component.html',\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input() autocomplete: string = 'off';\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    /**\r\n     * @deprecated\r\n     * Workaround for EL-3224 - No longer needed\r\n     */\r\n    @Input() trackAriaDescendant: boolean = true;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n    typeahead: TypeaheadComponent;\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _subscription: Subscription;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit(): void {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n\r\n        this.typeaheadQuery.changes.pipe(takeUntil(this._onDestroy))\r\n            .subscribe((query) => this.connectTypeahead(query.first));\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    writeValue(value: any[]): void {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    /**\r\n     * Set focus on the input field.\r\n     */\r\n    focus(): void {\r\n        if (this.tagInput) {\r\n            this.tagInput.nativeElement.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate(): void {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.which) {\r\n            case ENTER:\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n\r\n            case BACKSPACE:\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            case DELETE:\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n\r\n            case LEFT_ARROW:\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n\r\n            case RIGHT_ARROW:\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout')\r\n    focusOutHandler(): void {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler(): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput(): void {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any): void {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param delta Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(delta: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += delta;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number): void {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput(): void {\r\n\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number): void {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible(): boolean {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent): void {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n            this._subscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._subscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            // Set up event handler for the highlighted element\r\n            // Added a delay to move it out of the current change detection cycle\r\n            this._subscription.add(\r\n                this.typeahead.highlightedElementChange.pipe(tick())\r\n                    .subscribe((element: HTMLElement) => this.highlightedElement = element)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.which) {\r\n            case SPACE:\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    get id(): string {\n        return `ux-search-builder-search-component-${this._id}`;\n    }\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n    focus: boolean;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    constructor(private _searchBuilderService: SearchBuilderService) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    templateUrl: './date-range.component.html'\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  templateUrl: './date.component.html'\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  templateUrl: './select.component.html'\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  templateUrl: './text.component.html'\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AccessibilityModule } from '../../directives/accessibility/index';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { PopoverModule } from '../popover/index';\nimport { SelectModule } from '../select/index';\nimport { SearchBuilderFocusService } from './search-builder-focus.service';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\n\n@NgModule({\n  imports: [\n    AccessibilityModule,\n    CommonModule,\n    DateTimePickerModule,\n    FocusIfModule,\n    FormsModule,\n    PopoverModule,\n    SelectModule,\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ],\n  providers: [\n    SearchBuilderFocusService\n  ]\n})\nexport class SearchBuilderModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy {\n\n  constructor(protected selectionService?: SelectionService) { }\n\n  setSelectionService(selectionService: SelectionService): void {\n    this.selectionService = selectionService;\n  }\n\n  mousedown(event: MouseEvent, data: any): void { }\n\n  click(event: MouseEvent, data: any): void { }\n\n  keydown(event: KeyboardEvent, data: any): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: any[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: any[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: any[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n\n    // call deselect on all items in the dataset\n    this.selectionService.deselectAll();\n  }\n\n  destroy(): void { }\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy extends SelectionStrategy {\n\n  // store the most recently selected row\n  private _selection: Selection = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n      case DOWN_ARROW:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n\n      case SPACE:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data, true);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: any, activate: boolean = false): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n\n    // if we want to keep the item activated then activate\n    if (activate) {\n      this.selectionService.activate(data);\n    }\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: any): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  protected multipleSelect(data: any): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: any): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: any): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  protected clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): any[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.which === UP_ARROW);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection {\n  start: any;\n  end: any;\n}\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\r\nimport { RowSelectionStrategy } from './row-selection.strategy';\r\n\r\nexport class RowAltSelectionStrategy extends RowSelectionStrategy {\r\n    keydown(event: KeyboardEvent, data: any): void {\r\n        switch (event.which) {\r\n            case UP_ARROW:\r\n            case DOWN_ARROW:\r\n                event.preventDefault();\r\n                this.handleCursorKey(event, data);\r\n                break;\r\n\r\n            case SPACE:\r\n                event.preventDefault();\r\n                this.selectionService.strategy.toggle(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the sibling item when arrow keys are pressed\r\n     */\r\n    private handleCursorKey(event: KeyboardEvent, data: any): void {\r\n        // determine which modifier keys are pressed\r\n        const { ctrlKey, shiftKey } = event;\r\n\r\n        // if no modifier keys are pressed then deselect all and clear the selection\r\n        if (!ctrlKey && !shiftKey) {\r\n            this.deselectAll();\r\n            this.clearSelection(false);\r\n        }\r\n\r\n        if (ctrlKey) {\r\n            this.selectionService.activateSibling(event.which === UP_ARROW);\r\n        } else {\r\n            const sibling = this.selectionService.getSibling(event.which === UP_ARROW);\r\n            this.multipleSelect(sibling ? sibling : data);\r\n        }\r\n    }\r\n}\r\n","import { DOWN_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy extends SelectionStrategy {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(_event: MouseEvent, data: any): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.which) {\n\n      case UP_ARROW:\n        event.preventDefault();\n        return this.selectionService.activateSibling(true);\n\n      case DOWN_ARROW:\n        event.preventDefault();\n        return this.selectionService.activateSibling(false);\n\n      case SPACE:\n        event.preventDefault();\n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: any): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowAltSelectionStrategy } from './strategies/row-alt-selection.strategy';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n\n  set dataset(dataset: ReadonlyArray<any>) {\n    this._dataset = dataset;\n    if (this._dataset.indexOf(this._active) === -1) {\n      this.setFirstItemFocusable();\n    }\n  }\n\n  get dataset(): ReadonlyArray<any> {\n    return this._dataset;\n  }\n\n  strategy: SelectionStrategy = new SimpleSelectionStrategy(this);\n  isEnabled: boolean = true;\n  isClickEnabled: boolean = true;\n  isKeyboardEnabled: boolean = true;\n\n  focus$ = new BehaviorSubject<any>(null);\n  active$ = new BehaviorSubject<any>(null);\n  selection$ = new BehaviorSubject<any[]>([]);\n\n  private _active: any;\n  private _dataset: ReadonlyArray<any> = [];\n  private _selection = new Set();\n  private _strategyToDestroy: SelectionStrategy = this.strategy;\n\n  ngOnDestroy(): void {\n    if (this._strategyToDestroy) {\n      this._strategyToDestroy.destroy();\n    }\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: any[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: any[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove all items from the list of selected items\n   */\n  deselectAll(): void {\n    // remove all items in the array\n    this.deselect(...this._dataset);\n\n    // clear the set in case any items have been removed from the DOM but are still selected\n    this._selection.clear();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: any[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: any): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  getSelectionState(data: any): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setStrategy(mode: SelectionMode | SelectionStrategy): void {\n\n    if (this._strategyToDestroy) {\n      // Destroy previous strategy if it was created internally\n      this._strategyToDestroy.destroy();\n      this._strategyToDestroy = null;\n    }\n\n    if (mode instanceof SelectionStrategy) {\n\n      // Custom strategy - pass in the service instance\n      this.strategy = mode;\n      this.strategy.setSelectionService(this);\n\n    } else {\n\n      switch (mode.toLowerCase().trim()) {\n\n        case 'simple':\n          this.strategy = this._strategyToDestroy = new SimpleSelectionStrategy(this);\n          break;\n\n        case 'row':\n          this.strategy = this._strategyToDestroy = new RowSelectionStrategy(this);\n          break;\n\n        case 'row-alt':\n          this.strategy = this._strategyToDestroy = new RowAltSelectionStrategy(this);\n          break;\n\n        default:\n          throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple', 'row', or 'row-alt'.`);\n      }\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: any): void {\n    this._active = data;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this._active = null;\n    this.active$.next(this._active);\n  }\n\n  /**\n   * Return the next or previous sibling of the current active item.\n   * @param previous If true, the previous sibling will be returned.\n   */\n  getSibling(previous: boolean = false): any {\n\n    // check if there is a current active item\n    if (!this._active) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(this._active);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    return target;\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): any {\n\n    const target = this.getSibling(previous);\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.isEnabled = !disabled;\n\n    // clear any stateful data\n    this._active = null;\n    this.active$.next(this._active);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n\n  private setFirstItemFocusable(): void {\n    if (this._dataset.length > 0) {\n      this.focus$.next(this._dataset[0]);\n      this._active = this._dataset[0];\n    } else {\n      this._active = null;\n    }\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row' | 'row-alt';","import { Component, ElementRef, HostBinding, HostListener, Input, OnDestroy } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionService } from '../../../directives/selection/selection.service';\n\n@Component({\n    selector: 'ux-select-list-item',\n    templateUrl: './select-list-item.component.html',\n    host: {\n        role: 'listitem'\n    }\n})\nexport class SelectListItemComponent implements OnDestroy {\n\n    @Input() data: any;\n    @HostBinding('tabindex') tabindex: number = -1;\n\n    @HostBinding('class.selected')\n    @HostBinding('attr.aria-selected')\n    set selected(isSelected: boolean) {\n        isSelected ? this._selection.select(this.data) : this._selection.deselect(this.data);\n    }\n\n    get selected(): boolean {\n        return this._selection.isSelected(this.data);\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _selection: SelectionService, elementRef: ElementRef) {\n\n        _selection.active$.pipe(takeUntil(this._onDestroy), filter(data => data === this.data)).subscribe(active => {\n            _selection.focus$.next(active);\n            elementRef.nativeElement.focus();\n        });\n\n        // make this item tabbable or not based on the focused element\n        _selection.focus$.pipe(takeUntil(this._onDestroy))\n            .subscribe(focused => this.tabindex = focused === this.data ? 0 : -1);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('mousedown', ['$event'])\n    onMouseDown(event: MouseEvent): void {\n        this._selection.strategy.mousedown(event, this.data);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent): void {\n        this._selection.strategy.click(event, this.data);\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeydown(event: KeyboardEvent): void {\n        this._selection.strategy.keydown(event, this.data);\n    }\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class MultipleSelectListStrategy extends SelectionStrategy {\n\n    private _lastSelection: any;\n\n    /** Prevent the browser from highlighting text on shift click */\n    mousedown(event: MouseEvent): void {\n        event.preventDefault();\n    }\n\n    click(event: MouseEvent, data: any): void {\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // if the shift key is pressed we want to perform a multiple selection\n        if (event.shiftKey) {\n            return this.multipleSelect(data);\n        }\n\n        // otherwise perform a single toggle selection\n        if (this.selectionService.isSelected(data)) {\n            this.deselect(data);\n            this._lastSelection = null;\n        } else {\n            this.select(data);\n            this._lastSelection = data;\n        }\n    }\n\n    keydown(event: KeyboardEvent, data: any): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(true);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                const sibling = this.selectionService.activateSibling(false);\n\n                if (event.shiftKey) {\n                    this.select(data, sibling);\n                    this._lastSelection = sibling;\n                }\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.toggle(data);\n                this._lastSelection = this.selectionService.isSelected(data) ? data : null;\n                break;\n        }\n    }\n\n    multipleSelect(data: any): void {\n\n        // if there is no start item selected\n        if (!this._lastSelection) {\n            this.select(data);\n            return this._lastSelection = data;\n        }\n\n        // if there already is a start item then find the items in the range\n        this.select(...this.getSelectedItems(this._lastSelection, data));\n\n        // store the selection end point\n        this._lastSelection = data;\n    }\n\n    private getSelectedItems(start: any, end: any): any[] {\n\n        // get the latest dataset\n        const { dataset } = this.selectionService;\n\n        // get the indexes of the start and end point\n        const startIdx = dataset.indexOf(start);\n        const endIdx = dataset.indexOf(end);\n\n        // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n        return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n    }\n\n}","import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';\nimport { SelectionStrategy } from '../../directives/selection/strategies/selection.strategy';\n\nexport class SingleSelectListStrategy extends SelectionStrategy {\n\n    click(_event: MouseEvent, data: any): void {\n\n        if (!this.selectionService.isSelected(data)) {\n            // deselect all other items\n            this.deselectAll();\n        }\n\n        // activate the clicked item\n        this.selectionService.activate(data);\n\n        // toggle the selected state of the item\n        this.toggle(data);\n    }\n\n    keydown(event: KeyboardEvent, data: any): void {\n\n        switch (event.which) {\n\n            case UP_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(true);\n                break;\n            }\n\n            case DOWN_ARROW: {\n                event.preventDefault();\n                this.selectionService.activateSibling(false);\n                break;\n            }\n\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this.click(null, data);\n                break;\n        }\n    }\n\n}","import { AfterContentInit, Component, ContentChildren, EventEmitter, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SelectionService } from '../../directives/selection/selection.service';\nimport { MultipleSelectListStrategy } from './multiple-select-list.strategy';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SingleSelectListStrategy } from './single-select-list.strategy';\n\n@Component({\n    selector: 'ux-select-list',\n    templateUrl: './select-list.component.html',\n    providers: [SelectionService],\n    host: {\n        role: 'list'\n    }\n})\nexport class SelectListComponent implements AfterContentInit, OnDestroy {\n\n    @Input() set multiple(multiple: boolean) {\n        this._selection.strategy.deselectAll();\n        this._selection.setStrategy(multiple ? new MultipleSelectListStrategy() : new SingleSelectListStrategy());\n    }\n\n    @Input() selected: any[] = [];\n    @Output() selectedChange = new EventEmitter<any[]>();\n\n    @ContentChildren(SelectListItemComponent) items: QueryList<SelectListItemComponent>;\n\n    private _subscription: Subscription;\n\n    constructor(private _selection: SelectionService) {\n        // set the selection strategy to single by default\n        this._selection.setStrategy(new SingleSelectListStrategy());\n\n        // emit the selection changes when they occur\n        this._subscription = this._selection.selection$.subscribe(selection => this.selectedChange.emit(selection));\n    }\n\n    ngAfterContentInit(): void {\n\n        // supply the initial item set\n        this._selection.dataset = this.items.map(item => item.data);\n\n        // if the item set changes update the list\n        this.items.changes.subscribe(() => this._selection.dataset = this.items.map(item => item.data));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\nimport { SelectListItemComponent } from './select-list-item/select-list-item.component';\nimport { SelectListComponent } from './select-list.component';\n\n@NgModule({\n    declarations: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n    exports: [\n        SelectListComponent,\n        SelectListItemComponent\n    ],\n})\nexport class SelectListModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/focus-if.module';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\nimport { SidePanelComponent } from './side-panel.component';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        FocusIfModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    templateUrl: './spark.component.html',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';    \n    private _barColor: string | string[] = [];\n    \n    @Input() \n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input() \n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input() \n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable, QueryList } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ResizableTableColumnComponent } from './resizable-table-column.component';\n\n@Injectable()\nexport class ResizableTableService {\n\n  /** Indicate when the columns are ready */\n  isInitialised = new BehaviorSubject<boolean>(false);\n\n  /** Determine if we are currently resizing */\n  isResizing: boolean = false;\n\n  /** Store the percentage widths of each column */\n  columns: ReadonlyArray<number> = [];\n\n  /** Store the current width of the table */\n  tableWidth: number = 0;\n\n  /** Store the QueryList of columns */\n  private _columns: QueryList<ResizableTableColumnComponent>;\n\n  /** Store the size of each column */\n  setColumns(columns: QueryList<ResizableTableColumnComponent>): void {\n\n    // store the current columns\n    this._columns = columns;\n\n    // store the sizes\n    this.columns = columns.map(column => (column.getNaturalWidth() / this.tableWidth) * 100);\n\n    // indicate we are now initialised\n    if (this.isInitialised.value === false) {\n      this.isInitialised.next(true);\n    }\n  }\n\n  /** Update the resizing state */\n  setResizing(isResizing: boolean): void {\n    this.isResizing = isResizing;\n  }\n\n  /** Get the width of a column in a specific unit */\n  getColumnWidth(index: number, unit: ColumnUnit, columns: ReadonlyArray<number> = this.columns): number {\n\n    switch (unit) {\n\n      case ColumnUnit.Percentage:\n        return columns[index];\n\n      case ColumnUnit.Pixel:\n        return (this.tableWidth / 100) * columns[index];\n    }\n\n  }\n\n  /** Allow setting the column size in any unit */\n  setColumnWidth(index: number, value: number, unit: ColumnUnit, columns: ReadonlyArray<number> = this.columns): ReadonlyArray<number> {\n\n    // create a new array so we keep the instance array immutable\n    const sizes = [...columns];\n\n    switch (unit) {\n\n      case ColumnUnit.Percentage:\n        sizes[index] = value;\n        break;\n\n      case ColumnUnit.Pixel:\n        sizes[index] = (value / this.tableWidth) * 100;\n        break;\n    }\n\n    // update the instance variable\n    return sizes;\n  }\n\n  /** Resize a column by a specific pixel amount */\n  resizeColumn(index: number, delta: number): void {\n\n    // get the sibling column that will also be resized\n    const sibling = this.getSiblingColumn(index);\n\n    // if there is no sibling that can be resized then stop here\n    if (!sibling) {\n      return;\n    }\n\n    // create a new array for the sizes\n    let columns = [...this.columns] as number[];\n\n    // resize the column to the desired size\n    columns = this.setColumnWidth(index, Math.round(this.getColumnWidth(index, ColumnUnit.Pixel) + delta), ColumnUnit.Pixel, columns) as number[];\n    columns = this.setColumnWidth(sibling, Math.round(this.getColumnWidth(sibling, ColumnUnit.Pixel) - delta), ColumnUnit.Pixel, columns) as number[];\n\n    // if the move is not possible then stop here\n    if (!this.isWidthValid(index, this.getColumnWidth(index, ColumnUnit.Pixel, columns)) || !this.isWidthValid(sibling, this.getColumnWidth(sibling, ColumnUnit.Pixel, columns))) {\n      return;\n    }\n\n    // check that we add up to exactly 100%\n    const total = columns.reduce((count, column) => column + count, 0);\n\n    // if the columns to not add to 100 ensure we make them\n    if (total !== 100) {\n      columns[index] += (100 - total);\n    }\n\n    // store the new sizes\n    this.columns = columns;\n  }\n\n  /** Determine whether a column is above or below its minimum width */\n  private isWidthValid(index: number, width: number): boolean {\n\n    // get the column at a given position\n    const column = this.getColumnInstance(index);\n\n    // determine if the specified width is greater than the min width\n    return column && width >= column.minWidth;\n  }\n\n  /** Get the next column in the sequence of columns */\n  private getSiblingColumn(index: number): number | null {\n\n    // find the first sibling that is not disabled\n    for (let idx = index + 1; idx < this.columns.length; idx++) {\n\n      const sibling = this.getColumnInstance(idx);\n\n      if (!sibling || !sibling.disabled) {\n        return idx;\n      }\n    }\n\n    return null;\n  }\n\n  /** Get the column class from our query list */\n  private getColumnInstance(index: number): ResizableTableColumnComponent | null {\n    return this._columns ? this._columns.toArray()[index] : null;\n  }\n\n}\n\nexport enum ColumnUnit {\n  Pixel,\n  Percentage\n}","import { Directive, ElementRef, HostBinding } from '@angular/core';\nimport { ColumnUnit, ResizableTableService } from './resizable-table.service';\n\n@Directive({\n  selector: '[uxResizableTableCell]'\n})\nexport class ResizableTableCellDirective {\n\n\n  /** The percentage width of the column */\n  @HostBinding('style.width') get width(): string {\n    return this._table.isResizing ?\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)}px` :\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%`;\n  }\n\n  /** The flex width of the column */\n  @HostBinding('style.flex') get flex(): string {\n\n    // if we are resizing then always return 'none' to allow free movement\n    if (this._table.isResizing) {\n      return 'none';\n    }\n\n    return this._table.isInitialised.value ? `0 1 ${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%` : '';\n  }\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService) { }\n\n  /** Get the column index this cell is part of */\n  private getCellIndex(): number {\n    return (this._elementRef.nativeElement as HTMLTableCellElement).cellIndex;\n  }\n}\n","import { Component, ElementRef, HostBinding, Input } from '@angular/core';\nimport { ColumnUnit, ResizableTableService } from './resizable-table.service';\n\n@Component({\n  selector: '[uxResizableTableColumn]',\n  templateUrl: './resizable-table-column.component.html',\n  host: {\n    class: 'ux-resizable-table-column'\n  }\n})\nexport class ResizableTableColumnComponent {\n\n  /** Disabled the column resizing */\n  @Input() disabled: boolean = false;\n\n  /** The percentage width of the column */\n  @HostBinding('style.width') get width(): string {\n\n    if (!this._table.isInitialised.value) {\n      return;\n    }\n\n    return this._table.isResizing ?\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Pixel)}px` :\n      `${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%`;\n  }\n\n  /** The flex width of the column */\n  @HostBinding('style.flex') get flex(): string {\n\n    // if we are resizing then always return 'none' to allow free movement\n    if (this._table.isResizing) {\n      return 'none';\n    }\n\n    return this._table.isInitialised.value ? `0 1 ${this._table.getColumnWidth(this.getCellIndex(), ColumnUnit.Percentage)}%` : '';\n  }\n\n  /** Get the minimum width allowed by the column */\n  get minWidth(): number {\n    // determine the minimum width of the column based on its computed CSS value\n    const computed = parseFloat(getComputedStyle(this._elementRef.nativeElement).minWidth);\n\n    // if it is disabled use its current width - otherwise use its CSS min width if it is valid\n    return this.disabled ? this._elementRef.nativeElement.offsetWidth : isNaN(computed) ? 0 : computed;\n  }\n\n  /** Store the position of the mouse within the drag hanlde */\n  private _offset: number;\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService) { }\n\n  /** Get the natural pixel width of the column */\n  getNaturalWidth(): number {\n    return this._elementRef.nativeElement.offsetWidth;\n  }\n\n  /** When the dragging starts */\n  onDragStart(event: MouseEvent): void {\n\n    // determine the mouse position within the handle\n    this._offset = event.clientX - (event.target as HTMLElement).getBoundingClientRect().left;\n  }\n\n  /** When the mouse is moved */\n  onDragMove(event: MouseEvent, handle: HTMLDivElement): void {\n\n    // get the current mouse position\n    const mouseX = event.pageX - pageXOffset;\n\n    // position of the drag handle\n    const { left } = handle.getBoundingClientRect();\n\n    // determine how much the mouse has moved since the last update\n    const delta = mouseX - (left + this._offset);\n\n    // perform resizing\n    this._table.resizeColumn(this.getCellIndex(), delta);\n\n    this._table.setResizing(true);\n\n  }\n\n  /** When the dragging ends */\n  onDragEnd(): void {\n    this._table.setResizing(false);\n  }\n\n  onMoveLeft(): void {\n    this._table.resizeColumn(this.getCellIndex(), -10);\n  }\n\n  onMoveRight(): void {\n    this._table.resizeColumn(this.getCellIndex(), 10);\n  }\n\n  /** Get the column index this cell is part of */\n  private getCellIndex(): number {\n    return (this._elementRef.nativeElement as HTMLTableCellElement).cellIndex;\n  }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, OnDestroy, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ResizableTableColumnComponent } from './resizable-table-column.component';\nimport { ResizableTableService } from './resizable-table.service';\nimport { ResizeService } from '../../../directives/resize/index';\n\n@Directive({\n  selector: '[uxResizableTable]',\n  providers: [ResizableTableService],\n  host: {\n    class: 'ux-resizable-table'\n  }\n})\nexport class ResizableTableDirective implements AfterViewInit, OnDestroy {\n\n  /** Get all the column headers */\n  @ContentChildren(ResizableTableColumnComponent, { descendants: true }) columns: QueryList<ResizableTableColumnComponent>;\n\n  /** Unsubscribe from the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef, private _table: ResizableTableService, resize: ResizeService) {\n    // watch for the table being resized\n    resize.addResizeListener(this._elementRef.nativeElement)\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(dimensions => _table.tableWidth = this.getScrollWidth());\n  }\n\n  /** Once we have the columns make them resizable and watch for changes to columns */\n  ngAfterViewInit(): void {\n\n    // ensure we initially set the table width\n    this._table.tableWidth = this.getScrollWidth();\n\n    // set the columns - prevent expression changed error\n    requestAnimationFrame(() => this._table.setColumns(this.columns));\n\n    // watch for any future changes to the columns\n    this.columns.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this._table.setColumns(this.columns));\n  }\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Get the smallest tbody width taking into account scrollbars (uxFixedHeaderTable) */\n  private getScrollWidth(): number {\n    return Array.from((this._elementRef.nativeElement as HTMLTableElement).tBodies)\n      .reduce((width, tbody) => Math.min(width, tbody.scrollWidth), (this._elementRef.nativeElement as HTMLTableElement).offsetWidth);\n  }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { DragModule } from '../../directives/drag/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ResizableTableCellDirective } from './table-column-resize/resizable-table-cell.directive';\nimport { ResizableTableColumnComponent } from './table-column-resize/resizable-table-column.component';\nimport { ResizableTableDirective } from './table-column-resize/resizable-table.directive';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        DragModule,\n        ResizeModule,\n        A11yModule\n    ],\n    declarations: [\n        ResizableTableDirective,\n        ResizableTableColumnComponent,\n        ResizableTableCellDirective\n    ],\n    exports: [\n        ResizableTableDirective,\n        ResizableTableColumnComponent,\n        ResizableTableCellDirective\n    ]\n})\nexport class TableModule {}\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    templateUrl: './timeline.component.html'\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\nlet uniqueId: number = 0;\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    templateUrl: './timeline-event.component.html'\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() id: string = `ux-timeline-event-${uniqueId++}`;\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    templateUrl: './toggleswitch.component.html',\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ToolbarSearchComponent } from './toolbar-search.component';\r\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\r\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\r\n\r\nconst DECLARATIONS = [\r\n    ToolbarSearchComponent,\r\n    ToolbarSearchFieldDirective,\r\n    ToolbarSearchButtonDirective\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: DECLARATIONS,\r\n    declarations: DECLARATIONS,\r\n    providers: [],\r\n})\r\nexport class ToolbarSearchModule { }\r\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    templateUrl: './virtual-scroll.component.html'\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\r\n\r\nimport { AutoGrowDirective } from './auto-grow.directive';\r\n\r\n@NgModule({\r\n    exports: [AutoGrowDirective],\r\n    declarations: [AutoGrowDirective]\r\n})\r\nexport class AutoGrowModule { }\r\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n  selector: '[uxOverflowObserver], [uxOverflowHorizontalObserver], [uxOverflowVerticalObserver]',\n  exportAs: 'ux-overflow-observer'\n})\nexport class OverflowDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  /** Allow a observable to be used to check for overflow */\n  @Input() trigger: Observable<void>;\n\n  /** Allow overflow to be within a range before emitting */\n  @Input() tolerance: number = 0;\n\n  /** Emit when there is a change to the overflow state - horizontal or vertical */\n  @Output() uxOverflowObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the horizontal axis */\n  @Output() uxOverflowHorizontalObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the vertical axis */\n  @Output() uxOverflowVerticalObserver = new EventEmitter<boolean>();\n\n  /** Store the overflow state on both axis */\n  private _state = { horizontalOverflow: false, verticalOverflow: false };\n\n  /** Unsubscribe from all the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** Set up the trigger if specified */\n  ngOnInit(): void {\n    if (this.trigger) {\n      this.trigger.pipe(takeUntil(this._onDestroy)).subscribe(() => this.checkForOverflow());\n    }\n  }\n\n  /** Perform an intial check for overflow */\n  ngAfterViewInit(): void {\n    requestAnimationFrame(() => this.checkForOverflow());\n  }\n\n  /** Unsubscribe from the trigger */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Programmatically trigger check for overflow */\n  checkForOverflow(): void {\n\n    const { offsetWidth, offsetHeight, scrollWidth, scrollHeight } = this._elementRef.nativeElement;\n    const horizontalOverflow = (scrollWidth - offsetWidth) > this.tolerance;\n    const verticalOverflow = (scrollHeight - offsetHeight) > this.tolerance;\n\n    if (horizontalOverflow !== this._state.horizontalOverflow) {\n      this.uxOverflowHorizontalObserver.emit(horizontalOverflow);\n    }\n\n    if (verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowVerticalObserver.emit(verticalOverflow);\n    }\n\n    if (horizontalOverflow !== this._state.horizontalOverflow || verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowObserver.emit((horizontalOverflow || verticalOverflow));\n    }\n\n    // store the state\n    this._state = { horizontalOverflow, verticalOverflow };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OverflowDirective } from './overflow/overflow-observer.directive';\n\n@NgModule({\n  exports: [OverflowDirective],\n  declarations: [OverflowDirective]\n})\nexport class ObserversModule { }\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { SelectionService } from './selection.service';\r\n\r\n@Directive({\r\n    selector: '[uxSelectionItem]',\r\n    exportAs: 'ux-selection-item'\r\n})\r\nexport class SelectionItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input() uxSelectionItem: any;\r\n\r\n    @Input()\r\n    @HostBinding('class.ux-selection-selected')\r\n    @HostBinding('attr.aria-selected')\r\n    set selected(selected: boolean) {\r\n        selected ? this.select() : this.deselect();\r\n    }\r\n\r\n    get selected(): boolean {\r\n        return this._selected;\r\n    }\r\n\r\n    @Input() tabindex: number = null;\r\n\r\n    @Output() selectedChange = new EventEmitter<boolean>();\r\n\r\n    @HostBinding('class.ux-selection-focused') active: boolean = false;\r\n\r\n    @HostBinding('attr.tabindex')\r\n    get attrTabIndex(): number {\r\n        return (this.tabindex !== null) ? this.tabindex : this._managedTabIndex;\r\n    }\r\n\r\n    private _selected: boolean = false;\r\n    private _managedTabIndex: number = -1;\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _selectionService: SelectionService, private _elementRef: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n\r\n        // if there is no associated data then throw an error\r\n        if (!this.uxSelectionItem) {\r\n            throw new Error('The uxSelectionItem directive must have data associated with it.');\r\n        }\r\n\r\n        // subscribe to selection changes on this item\r\n        this._selectionService.getSelectionState(this.uxSelectionItem).pipe(takeUntil(this._onDestroy)).subscribe(selected => {\r\n\r\n            // store the selected state\r\n            this._selected = selected;\r\n\r\n            // emit the selected state\r\n            this.selectedChange.emit(selected);\r\n        });\r\n\r\n        this._selected = this._selectionService.isSelected(this.uxSelectionItem);\r\n\r\n        this.selectedChange.emit(this._selected);\r\n\r\n        // subscribe to changes to the active state\r\n        this._selectionService.active$.pipe(takeUntil(this._onDestroy), map(active => active === this.uxSelectionItem)).subscribe(active => {\r\n\r\n            // store the focus state\r\n            this.active = active;\r\n\r\n            // if it is active then focus the element\r\n            if (active === true) {\r\n                this._selectionService.focus$.next(this.uxSelectionItem);\r\n                this._elementRef.nativeElement.focus();\r\n            }\r\n        });\r\n\r\n        // Subscribe to changes to the focus target\r\n        // This is mostly the same as active$, except that it has an initial value of the first item in the collection.\r\n        this._selectionService.focus$.pipe(takeUntil(this._onDestroy)).subscribe(focusTarget => {\r\n            this._managedTabIndex = (focusTarget === this.uxSelectionItem) ? 0 : -1;\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    click(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.click(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    mousedown(event: MouseEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isClickEnabled) {\r\n            this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keydown(event: KeyboardEvent): void {\r\n        if (this._selectionService.isEnabled && this._selectionService.isKeyboardEnabled) {\r\n            this._selectionService.strategy.keydown(event, this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    @HostListener('focus')\r\n    focus(): void {\r\n        // If tabbed to from outside the component, activate.\r\n        if (this._selectionService.active$.getValue() !== this.uxSelectionItem) {\r\n            this._selectionService.activate(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select this item using the current strategy\r\n     */\r\n    select(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.select(this.uxSelectionItem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deselect this item using the current strategy\r\n     */\r\n    deselect(): void {\r\n        if (this._selectionService.isEnabled) {\r\n            this._selectionService.strategy.deselect(this.uxSelectionItem);\r\n        }\r\n    }\r\n}\r\n","import { AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\nimport { SelectionStrategy } from './strategies/selection.strategy';\n\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: any[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode | SelectionStrategy) {\n    this._selectionService.setStrategy(mode);\n  }\n\n  @Input() set clickSelection(isClickEnabled: boolean) {\n    this._selectionService.isClickEnabled = isClickEnabled;\n  }\n\n  @Input() set keyboardSelection(isKeyboardEnabled: boolean) {\n    this._selectionService.isKeyboardEnabled = isKeyboardEnabled;\n  }\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number = null;\n\n  @Output() uxSelectionChange = new EventEmitter<any[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective>;\n\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _selectionService: SelectionService, private _cdRef: ChangeDetectorRef) {\n    _selectionService.selection$.pipe(takeUntil(this._onDestroy)).subscribe(items => this.uxSelectionChange.emit(items));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this.items.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => this.update());\n  }\n\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n\n    // Make sure that a tab target has been defined so that the component can be tabbed to.\n    if (this._selectionService.focus$.getValue() === null && this._selectionService.dataset.length > 0) {\n      this._selectionService.focus$.next(this._selectionService.dataset[0]);\n    }\n\n    // The above could trigger a change in the computed tabindex for selection items\n    this._cdRef.detectChanges();\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.isEnabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nexport class TreeGridState {\n    readonly loading$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        public readonly level: number,\n        public readonly setSize: number,\n        public readonly positionInSet: number) {}\n}\n","import { ChangeDetectorRef, Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridLoadFunction } from './tree-grid-load-function.type';\nimport { TreeGridState } from './tree-grid-state.class';\n\n@Injectable()\nexport class TreeGridService implements OnDestroy {\n\n    /** The raw table data */\n    data$ = new BehaviorSubject<TreeGridItem[]>([]);\n\n    /** The flattened table data */\n    rows$ = new BehaviorSubject<TreeGridItem[]>([]);\n\n    /** The function to load child items */\n    loadChildren: TreeGridLoadFunction;\n\n    /** Ensure we destroy all observables correctly */\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        this.data$.pipe(takeUntil(this._onDestroy)).subscribe(data => this.rows$.next(this.getFlattenedTree(data)));\n    }\n\n    /** Unsubscribe from all observables */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Set the expanded state of a row */\n    async setExpanded(item: TreeGridItem, expanded: boolean) {\n        if (expanded) {\n            await this.getChildren(item);\n            this.insertChildren(item);\n        } else {\n            this.removeChildren(item);\n        }\n\n        this._changeDetector.detectChanges();\n    }\n\n    /** A function to flatten tree data */\n    private getFlattenedTree(data: TreeGridItem[], parent?: TreeGridItem): TreeGridItem[] {\n        // flatten the nodes at this level\n        return data.reduce((previous, item, index) => {\n\n            item.state = new TreeGridState(parent ? parent.state.level + 1 : 0, data.length, index + 1);\n\n            // Convert any child nodes\n            const children = (item.children && item.expanded) ? this.getFlattenedTree(item.children, item) : [];\n\n            // return the nodes in a flattened array\n            return [...previous, item, ...children];\n        }, []);\n    }\n\n    /** Load any children dynamically */\n    private async getChildren(item: TreeGridItem): Promise<void> {\n        if (!item.children && this.loadChildren) {\n            item.state.loading$.next(true);\n\n            try {\n                item.children = await this.getNormalizedChildren(this.loadChildren(item));\n            }\n            finally {\n                item.state.loading$.next(false);\n            }\n        }\n    }\n\n    /** We want to support an array, a promise and an observable. This will return all types as a promise */\n    private async getNormalizedChildren(response: TreeGridItem[] | Promise<TreeGridItem[]> | Observable<TreeGridItem[]>): Promise<TreeGridItem[]> {\n\n        // if it is already an observable do nothing\n        if (response instanceof Observable) {\n            return await response.toPromise();\n        }\n\n        // if it is a promise wrap it as an observable\n        if (response instanceof Promise) {\n            return await response;\n        }\n\n        // if it is an array then make it an observable\n        return response;\n    }\n\n    /** Insert the children into the flattened tree at the correct location */\n    private insertChildren(parent: TreeGridItem): void {\n        if (!parent.children) {\n            return;\n        }\n\n        const row = this.rows$.getValue();\n\n        const index = row.indexOf(parent);\n\n        if (index < 0) {\n            return;\n        }\n\n        // Skip duplicates - this could happen if an already expanded child has been inserted\n        const uniqueChildren = parent.children.filter(child => row.indexOf(child) === -1);\n\n        const childRows = this.getFlattenedTree(uniqueChildren, parent);\n\n        row.splice(index + 1, 0, ...childRows);\n    }\n\n    /** Remove all rows from the flattened tree */\n    private removeChildren(parent: TreeGridItem): void {\n\n        const rows = this.rows$.getValue();\n        const index = rows.indexOf(parent);\n\n        if (index < 0) {\n            return;\n        }\n\n        while (index + 1 < rows.length && rows[index + 1].state.level > parent.state.level) {\n            rows.splice(index + 1, 1);\n        }\n    }\n}\n","import { Directive, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs-compat/BehaviorSubject';\nimport { distinctUntilChanged, skip, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { tick } from '../../common/operators/tick.operator';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridService } from './tree-grid.service';\n\n@Directive({\n    selector: '[uxTreeGridRow]',\n    exportAs: 'uxTreeGridRow',\n    host: {\n        '[class.treegrid-row]': 'true'\n    }\n})\nexport class TreeGridRowDirective implements OnInit, OnDestroy {\n\n    @Input('uxTreeGridRow')\n    item: TreeGridItem;\n\n    @Input()\n    canExpand: boolean;\n\n    @Input()\n    set expanded(expanded: boolean) {\n        this._expanded$.next(!!expanded);\n    }\n    get expanded(): boolean {\n        return this._expanded$.getValue();\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @HostBinding('class.treegrid-row-loading')\n    loading: boolean = false;\n\n    @HostBinding('class.treegrid-row-expanded')\n    isExpanded: boolean = false;\n\n    private _expanded$ = new BehaviorSubject(false);\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _treeGridService: TreeGridService) {\n        this._expanded$.pipe(skip(1), tick(), distinctUntilChanged(), takeUntil(this._onDestroy)).subscribe(expanded => {\n            this.expandedChange.emit(expanded);\n            this._treeGridService.setExpanded(this.item, expanded);\n            this.isExpanded = expanded;\n        });\n    }\n\n    ngOnInit(): void {\n\n        if (!this.item || !this.item.state) {\n            throw new Error('uxTreeGridRow should be configured with an object emitted by uxTreeGrid.rows.');\n        }\n\n        this.item.state.loading$.pipe(takeUntil(this._onDestroy))\n            .subscribe(loading => this.loading = loading);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    @HostListener('keydown.ArrowLeft', ['$event'])\n    collapse(event?: Event): void {\n\n        this.expanded = false;\n\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    @HostListener('keydown.ArrowRight', ['$event'])\n    expand(event?: Event): void {\n\n        // take into account whether or not the item can expanded\n        this.expanded = this.canExpand && true;\n\n        if (event) {\n            event.preventDefault();\n        }\n    }\n\n    toggle(): void {\n        this.expanded ? this.collapse() : this.expand();\n    }\n}","import { Directive, HostBinding, Input } from '@angular/core';\nimport { TreeGridRowDirective } from './tree-grid-row.directive';\n\n@Directive({\n    selector: '[uxTreeGridIndent]',\n})\nexport class TreeGridIndentDirective {\n\n    /** The amount each level should be indented by */\n    @Input() uxTreeGridIndent: number;\n\n    /** The padding value applied to each level */\n    @HostBinding('style.padding-left.px')\n    get indentation(): number {\n        return this._row && this._row.item ? 7 + (this._row.item.state.level * (this.uxTreeGridIndent || 25)) : 7;\n    }\n\n    constructor(private _row: TreeGridRowDirective) {}\n}","import { Directive, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { TreeGridItem } from './tree-grid-item.interface';\nimport { TreeGridLoadFunction } from './tree-grid-load-function.type';\nimport { TreeGridService } from './tree-grid.service';\nimport { Subject } from 'rxjs/Subject';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n    selector: '[uxTreeGrid]',\n    providers: [TreeGridService],\n    host: {\n        class: 'treegrid'\n    }\n})\nexport class TreeGridDirective implements OnInit, OnDestroy {\n    @Input('uxTreeGrid')\n    set data(data: TreeGridItem[]) {\n        this._treeGridService.data$.next(data);\n    }\n\n    @Input()\n    set loadChildren(loadChildren: TreeGridLoadFunction) {\n        this._treeGridService.loadChildren = loadChildren;\n    }\n\n    @Input()\n    rows: TreeGridItem[];\n\n    @Output()\n    rowsChange = new EventEmitter<TreeGridItem[]>();\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _treeGridService: TreeGridService) {}\n\n    ngOnInit(): void {\n        this._treeGridService.rows$.pipe(takeUntil(this._onDestroy)).subscribe(rows => this.rowsChange.emit(rows));\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { TreeGridIndentDirective } from './tree-grid-indent.directive';\nimport { TreeGridRowDirective } from './tree-grid-row.directive';\nimport { TreeGridDirective } from './tree-grid.directive';\n\n@NgModule({\n    declarations: [\n        TreeGridDirective,\n        TreeGridRowDirective,\n        TreeGridIndentDirective\n    ],\n    exports: [\n        TreeGridDirective,\n        TreeGridRowDirective,\n        TreeGridIndentDirective\n    ]\n})\nexport class TreeGridModule {}\n","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() template: string;\n    @Input() templateUrl: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, EventEmitter, Injector, Input, Output } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: any[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange: EventEmitter<TreeGridOptions> = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n    @Output() currentRowChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() treeDataChange: EventEmitter<TreeGridData[]> = new EventEmitter<TreeGridData[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}\n","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}"]}