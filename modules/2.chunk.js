webpackJsonp([2],{1336:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(36),l=e(35),s=e(19),d=e(206),c=e(119),h=e(118),u=e(205),p=e(207),b=e(1409),g=e(1410),f=e(1411),m=e(1421),v=e(1412),y=e(1413),C=e(1414),x=e(1415),w=e(1417),k=e(1416),S=e(1418),D=e(1419),T=e(1420),L=e(1422),z=e(1425),R=e(1424),N=e(1423),H=e(1426),j=[b.ChartsBarChartNg1Component,g.ChartsHorizontalBarChartNg1Component,f.ChartsStackedBarChartNg1Component,m.ChartsPeityChartNg1Component,v.ChartsDonutChartNg1Component,y.ChartsNestedDonutChartNg1Component,C.ChartsFlotOptionsNg1Component,x.ChartsLineChartNg1Component,w.ChartsStackedLineChartNg1Component,k.ChartsMultipleAxisLineChartNg1Component,S.ChartsLiveChartNg1Component,D.ChartsOrganizationChartNg1Component,T.ChartsPartitionMapNg1Component,L.ChartsSankeyChartNg1Component,z.ChartsSparkChartNg1Component,R.ChartsSocialChartNg1Component,N.ChartsScrollableChartNg1Component,H.ChartsTimelineChartNg1Component],P=function(){function t(t,r){r.registerResolver(t)}return t}();P=n([a.NgModule({imports:[u.DocumentationComponentsModule,p.TabsModule,l.FormsModule,i.CommonModule,h.RadioButtonModule,d.WrappersModule,s.RouterModule.forChild(c.ResolverService.resolveRouteComponents(e(120)))],exports:j,declarations:j,entryComponents:j,providers:[]}),o("design:paramtypes",[a.ComponentFactoryResolver,c.ResolverService])],P),r.ChartsPageModule=P},1409:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1892),this.jsCode=e(1893),this.accessibilityCode=e(1891),this.codepen={html:this.htmlCode,js:[this.jsCode],htmlAttributes:{"ng-controller":"BarChartCtrl as bc"}},this.data=[{label:"bar",data:[[1,34],[2,25],[3,19],[4,34],[5,32],[6,44]],forecastData:[[7,50],[8,67]]}],this.options={series:{bars:{show:!0,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.1}]},barWidth:.5,lineWidth:1,align:"center"},highlightColor:t.getColor("chart1").setAlpha(.2).toRgba(),forecastFillColor:t.getColor("chart1").setAlpha(.3).toRgba(),forecastColor:t.getColor("chart1").setAlpha(.8).toRgba(),forecastHighLightColor:t.getColor("chart1").setAlpha(.2).toRgba(),forecastDashStyle:[5]},xaxis:{tickDecimals:0,color:t.getColor("secondary").toHex(),ticks:[[1,".doc"],[2,".ppt"],[3,".pdf"],[4,".xls"],[5,".html"],[6,".txt"],[7,".csv"],[8,".mht"]]},colors:[t.getColor("primary").toRgb()],grid:{color:t.getColor("grey4").toHex(),hoverable:!0,clickable:!0,borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:t.getColor("grey2").setAlpha(.5).toRgba(),bottom:t.getColor("grey2").setAlpha(.5).toRgba()}},legend:{show:!1},tooltip:{show:!0,shifts:{x:0,y:-30},content:function(t,r,e){return"x: %x, y: "+e}}}}return t}();s=n([a.Component({selector:"uxd-charts-bar-chart-ng1",template:e(1647),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsBarChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsBarChartNg1Component=s},1410:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1894),this.jsCode=e(1895),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"HorizontalBarChartCtrl as bc"},js:[this.jsCode]},this.data=[{label:"bar",data:[[34,1],[25,2],[19,3],[34,4],[32,5],[44,6]]}],this.options={series:{bars:{show:!0,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.1}]},barWidth:.5,lineWidth:1,horizontal:!0,align:"center"},highlightColor:[t.getColor("chart1").setAlpha(.2).toRgba()],valueLabels:{show:!0,valign:"top",plotAxis:"y",xoffset:-30,yoffset:-5,font:"13px 'Source Sans Pro'",fontcolor:"#545454",labelFormatter:function(t){return[".doc",".ppt",".pdf",".xls",".html",".txt"][parseInt(t)-1]}}},xaxis:{tickDecimals:0,color:[t.getColor("secondary").toHex()]},yaxis:{ticks:[]},colors:[t.getColor("chart1").toRgb()],grid:{color:[t.getColor("grey4").toHex()],hoverable:!0,clickable:!0,borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[t.getColor("grey1").setAlpha(.2).toRgba()],bottom:[t.getColor("grey1").setAlpha(.2).toRgba()]}},legend:{show:!1},tooltip:{show:!0,shifts:{x:0,y:-38},content:function(t,r,e){return"x: "+r+", y: "+[".doc",".ppt",".pdf",".xls",".html",".txt"][parseInt(e)-1]}}}}return t}();s=n([a.Component({selector:"uxd-charts-horizontal-bar-chart-ng1",template:e(1648),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsHorizontalBarChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsHorizontalBarChartNg1Component=s},1411:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1897),this.jsCode=e(1898),this.accessibilityCode=e(1896),this.legendHtml=e(1900),this.legendCss=e(1899),this.legendJs=e(1901),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"StackedBarChartCtrl as bc"},js:[this.jsCode]};for(var r={chartColor1:t.getColor("chart1").setAlpha(.7).toRgba(),chartColor2:t.getColor("chart2").setAlpha(.7).toRgba(),chartColor3:t.getColor("chart3").setAlpha(.7).toRgba(),chartHover1:t.getColor("chart1").setAlpha(.2).toRgba(),chartHover2:t.getColor("chart2").setAlpha(.3).toRgba(),chartHover3:t.getColor("chart3").setAlpha(.3).toRgba(),forecastColor1:t.getColor("chart1").setAlpha(.3).toRgba(),forecastColor2:t.getColor("chart2").setAlpha(.2).toRgba(),forecastColor3:t.getColor("chart3").setAlpha(.2).toRgba(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),transparent:"rgba(0, 0, 0, 0)",borderColor:t.getColor("grey2").toHex()},n=[],o=[],a=[],i=[],l=[],s=[],d=1;d<=10;d+=1)n.push([d,Math.floor(1e4*Math.random())]),o.push([d,Math.floor(1e4*Math.random())]),a.push([d,Math.floor(1e4*Math.random())]);for(var d=11;d<=13;d++)i.push([d,Math.floor(1e4*Math.random())]),l.push([d,Math.floor(1e4*Math.random())]),s.push([d,Math.floor(1e4*Math.random())]);this.data=[{label:"Sales 1",data:n,color:[r.chartColor1],highlightColor:[r.chartHover1],forecastData:i,forecastFillColor:[r.forecastColor1],forecastColor:[r.chartColor1],forecastHighLightColor:[r.chartHover1],forecastDashStyle:[5]},{label:"Sales 2",data:o,color:[r.chartColor2],highlightColor:[r.chartHover2],forecastData:l,forecastFillColor:[r.forecastColor2],forecastColor:[r.chartColor2],forecastHighLightColor:[r.chartColor2],forecastDashStyle:[5]},{label:"Sales 3",data:a,color:[r.chartColor3],highlightColor:[r.chartHover3],forecastData:s,forecastFillColor:[r.forecastColor3],forecastColor:[r.chartColor3],forecastHighLightColor:[r.chartHover3],forecastDashStyle:[5]}],this.options={series:{stack:!0,bars:{show:!0,barWidth:.6,lineWidth:0,align:"center"}},xaxis:{tickColor:"transparent"},yaxis:{tickFormatter:this.euroFormatter},grid:{color:[r.gridColor],hoverable:!0,clickable:!0,tickcolor:[r.tickColor],borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[r.borderColor],bottom:[r.borderColor]}},legend:{show:!0,container:"#legendHolderBar",noColumns:0},tooltip:{show:!0,shifts:{x:0,y:-44},content:'<strong>%s</strong><br/><span class="font-size-small"> %y in cycle %x</span>'}}}return t.prototype.euroFormatter=function(t,r){return t.toFixed(r.tickDecimals)+"€"},t}();s=n([a.Component({selector:"uxd-charts-stacked-bar-chart-ng1",template:e(1649),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsStackedBarChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsStackedBarChartNg1Component=s},1412:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(118),l=e(117),s=function(){function t(t){this.colorService=t,this.chartHtml=e(1903),this.chartJs=e(1904),this.accessibilityHtml=e(1902),this.labelsHtml=e(1905),this.labelsJs=e(1906),this.legendJs=e(1908),this.legendCss=e(1907),this.codepen={html:this.chartHtml,htmlAttributes:{"ng-controller":"DonutChartCtrl as dc"},js:[this.chartJs]};var r={chartColor1:t.getColor("chart1").toRgb(),chartColor2:t.getColor("chart2").toRgb(),chartColor3:t.getColor("chart3").toRgb(),chartColor4:t.getColor("chart4").toRgb(),chartColor5:t.getColor("chart5").toRgb(),chartHover1:t.getColor("chart1").setAlpha(.2).toRgba(),chartHover2:t.getColor("chart2").setAlpha(.3).toRgba(),chartHover3:t.getColor("chart3").setAlpha(.3).toRgba(),chartHover4:t.getColor("chart4").setAlpha(.3).toRgba(),chartHover5:t.getColor("chart5").setAlpha(.3).toRgba(),gridColor:t.getColor("grey4").toHex(),labelColor:t.getColor("grey2").toHex()};this.data=[{label:"Sales 1",data:25,color:[r.chartColor1],highlightColor:[r.chartHover1]},{label:"Sales 2",data:15,color:[r.chartColor2],highlightColor:[r.chartHover2]},{label:"Sales 3",data:18,color:[r.chartColor3],highlightColor:[r.chartHover3]},{label:"Sales 4",data:20,color:[r.chartColor4],highlightColor:[r.chartHover4]},{label:"Sales 5",data:10,color:[r.chartColor5],highlightColor:[r.chartHover5]}],this.options={series:{pie:{show:!0,innerRadius:.7,centerLabel:{show:!0,color:r.gridColor,text:"65%",font:"Source Sans Pro",fontSize:18,paddingX:4,paddingY:0,textBaseline:"bottom"},subLabel:{show:!0,color:r.chartColor1,text:"Sales",font:"Source Sans Pro",fontSize:22,paddingX:1,paddingY:10,textBaseline:"middle"},donutLabel:{show:!0,color:r.labelColor,text:"Proprietary",font:"Source Sans Pro",fontSize:20},stroke:{width:0}}},grid:{hoverable:!0},tooltip:{show:!0,shifts:{x:0,y:-30},content:"%p.0%, %s"},legend:{show:!0,backgroundColor:"transparent",labelFormatter:function(t){return'<span class="legend-styling">'+t+"</span>"},labelBoxBorderColor:"transparent"}}}return t.prototype.onPlotClick=function(){},t.prototype.onPlotHover=function(){},t}();s=n([a.Component({selector:"uxd-charts-donut-chart-ng1",template:e(1650),changeDetection:a.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ChartsDonutChartNg1Component"),o("design:paramtypes",[i.ColorService])],s),r.ChartsDonutChartNg1Component=s},1413:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1910),this.jsCode=e(1911),this.cssCode=e(1909),this.codepen={html:this.htmlCode,js:[this.jsCode],css:[this.cssCode],htmlAttributes:{"ng-controller":"NestedDonutChartCtrl as dc"}},this.data=[{label:"documents",color:t.getColor("chart1").toHex(),value:23456},{label:"reviewed",color:t.getColor("chart2").toHex(),value:19876},{label:"produced",color:t.getColor("chart3").toHex(),value:11123}],this.options={size:100,donutWidth:4,donutSpacing:4,hoverAnimation:!0,onHover:function(){},onClick:function(){},tooltip:{show:!0,content:function(t){return'<div style="display: inline-block; width: 10px; height: 10px; margin-right: 2px; background-color: '+t.color+'"></div> <b>'+t.value+"</b> "+t.label},shifts:{x:0,y:0}}}}return t}();s=n([a.Component({selector:"uxd-charts-nested-donut-chart",template:e(1651),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsNestedDonutChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsNestedDonutChartNg1Component=s},1414:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i};Object.defineProperty(r,"__esModule",{value:!0});var o=e(1),a=e(117),i=function(){function t(){}return t}();i=n([o.Component({selector:"uxd-charts-flot-options-ng1",template:e(1652),changeDetection:o.ChangeDetectionStrategy.OnPush}),a.DocumentationSectionComponent("ChartsFlotOptionsNg1Component")],i),r.ChartsFlotOptionsNg1Component=i},1415:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1913),this.jsCode=e(1914),this.accessibilityHtml=e(1912),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"LineChartCtrl as lc"},js:[this.jsCode]};var r={chartColor:t.getColor("chart1").toRgb(),chartForecast:t.getColor("chart1").setAlpha(.06).toRgba(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),borderColor:t.getColor("grey2").setAlpha(.5).toRgba()};this.data=[{label:"line",data:[[1,34],[2,25],[3,19],[4,34],[5,32],[6,44]],forecastData:[[7,45],[8,50],[9,55]]}],this.options={series:{lines:{show:!0,lineWidth:1,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.1}]}},shadowSize:0,highlightColor:[r.chartColor],forecastFillColor:[r.chartForecast],forecastColor:[r.chartColor],forecastDashStyle:[5]},xaxis:{tickDecimals:0},colors:[r.chartColor],grid:{color:[r.gridColor],hoverable:!0,clickable:!0,tickColor:[r.tickColor],borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[r.borderColor],bottom:[r.borderColor]}},legend:{show:!1},tooltip:{show:!0,shifts:{x:0,y:-35},content:"x: %x, y: %y"}}}return t}();s=n([a.Component({selector:"uxd-charts-line-chart-ng1",template:e(1653),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsLineChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsLineChartNg1Component=s},1416:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)},a=this&&this.__param||function(t,r){return function(e,n){r(e,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});var i=e(1),l=e(117),s=e(118),d=function(){function t(t,r){this.htmlCode=e(1915),this.jsCode=e(1916),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"MultipleAxisLineChartCtrl as lc"},js:[this.jsCode]};var n={chart1Color:t.getColor("chart1").toRgb(),chart2Color:t.getColor("chart2").toRgb(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),borderColor:t.getColor("grey2").setAlpha(.5).toRgba()},o=r.getOilPrices(),a=r.getExchangeRates();this.data=[{data:o,label:"Oil price ($)",lines:{show:!0,fill:!0,lineWidth:1,fillColor:{colors:[{opacity:.1},{opacity:.1}]}},shadowSize:0,highlightColor:[n.chart1Color]},{data:a,label:"USD/EUR exchange rate",yaxis:2,lines:{show:!0,fill:!0,lineWidth:1,fillColor:{colors:[{opacity:.2},{opacity:.2}]}},shadowSize:0,highlightColor:[n.chart2Color]}],this.options={xaxes:[{mode:"time"}],yaxes:[{min:0},{position:"right",alignTicksWithAxis:1,tickFormatter:this.euroFormatter}],legend:{position:"sw"},colors:[n.chart1Color,n.chart2Color],grid:{color:[n.gridColor],clickable:!0,tickColor:[n.tickColor],borderWidth:{bottom:1,left:1,top:0,right:0},borderColor:{bottom:[n.borderColor],left:[n.borderColor]},hoverable:!0},tooltip:{show:!0,shifts:{x:0,y:-35},content:"%s for %x was %y",xDateFormat:"%y-%0m-%0d"}}}return t.prototype.euroFormatter=function(t,r){return t.toFixed(r.tickDecimals)+"€"},t}();d=n([i.Component({selector:"uxd-charts-multiple-axis-line-chart-ng1",template:e(1654),changeDetection:i.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ChartsMultipleAxisLineChartNg1Component"),a(1,i.Inject("flotDataService")),o("design:paramtypes",[s.ColorService,Object])],d),r.ChartsMultipleAxisLineChartNg1Component=d},1417:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1918),this.jsCode=e(1919),this.accessibilityHtml=e(1917),this.legendHtml=e(1921),this.legendCss=e(1920),this.legendJs=e(1922),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"StackedLineChartCtrl as lc"},js:[this.jsCode]};for(var r={chart1Color:t.getColor("chart1").toRgb(),chart2Color:t.getColor("chart2").toRgb(),chart3Color:t.getColor("chart3").toRgb(),chart1Fill:t.getColor("chart1").setAlpha(.2).toRgba(),chart2Fill:t.getColor("chart2").setAlpha(.2).toRgba(),chart3Fill:t.getColor("chart3").setAlpha(.2).toRgba(),chart1Hover:t.getColor("chart1").setAlpha(.3).toRgba(),chart2Hover:t.getColor("chart2").setAlpha(.3).toRgba(),chart3Hover:t.getColor("chart3").setAlpha(.3).toRgba(),chart1Forecast:t.getColor("chart1").setAlpha(.06).toRgba(),chart2Forecast:t.getColor("chart2").setAlpha(.06).toRgba(),chart3Forecast:t.getColor("chart3").setAlpha(.06).toRgba(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),borderColor:t.getColor("grey2").setAlpha(.5).toRgba()},n=[],o=[],a=[],i=[],l=[],s=[],d=1;d<=10;d+=1)n.push([d,Math.floor(1e4*Math.random())]),o.push([d,Math.floor(1e4*Math.random())]),a.push([d,Math.floor(1e4*Math.random())]);for(var d=11;d<=13;d+=1)i.push([d,Math.floor(1e4*Math.random())]),l.push([d,Math.floor(1e4*Math.random())]),s.push([d,Math.floor(1e4*Math.random())]);this.data=[{label:"Sales 1",data:n,color:[r.chart1Color],fillColor:r.chart1Fill,highlightColor:[r.chart1Hover],shadowSize:0,forecastData:i,forecastFillColor:[r.chart1Forecast],forecastColor:[r.chart1Color],forecastHighLightColor:[r.chart1Hover]},{label:"Sales 2",data:o,color:[r.chart2Color],fillColor:r.chart2Fill,highlightColor:[r.chart2Hover],shadowSize:0,forecastData:l,forecastFillColor:[r.chart2Forecast],forecastColor:[r.chart2Color],forecastDashStyle:[5],forecastHighLightColor:[r.chart2Hover]},{label:"Sales 3",data:a,color:[r.chart3Color],fillColor:[r.chart3Fill],highlightColor:[r.chart3Hover],shadowSize:0,forecastData:s,forecastFillColor:[r.chart3Forecast],forecastColor:[r.chart3Color],forecastDashStyle:[5],forecastHighLightColor:[r.chart3Hover]}],this.options={series:{stack:!0,lines:{show:!0,fill:!0}},yaxis:{tickFormatter:this.euroFormatter},xaxis:{tickDecimals:0},grid:{color:[r.gridColor],hoverable:!0,clickable:!0,tickcolor:[r.tickColor],borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[r.borderColor],bottom:[r.borderColor]}},legend:{show:!0,container:"#legendHolderLine",noColumns:0},tooltip:{show:!0,shifts:{x:0,y:-35},content:"%s - %y in cycle %x"}}}return t.prototype.euroFormatter=function(t,r){return t.toFixed(r.tickDecimals)+"€"},t}();s=n([a.Component({selector:"uxd-charts-stacked-line-chart-ng1",template:e(1655),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsStackedLineChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsStackedLineChartNg1Component=s},1418:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){var r=this;this.livedata=[],this.htmlCode=e(1923),this.jsCode=e(1924),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"LiveChartCtrl as lc"},js:[this.jsCode]};var n={primary:t.getColor("chart1").toRgb(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),borderColor:t.getColor("grey2").setAlpha(.5).toRgba(),white:"#FFFFFF"};this.series=[{data:this.getRandomData(),lines:{fill:!0,lineWidth:1,fillColor:{colors:[{opacity:.1},{opacity:.1}]}},shadowSize:0}],this.options={grid:{color:[n.gridColor],tickColor:[n.tickColor],borderWidth:{top:0,bottom:1,left:1,right:0},borderColor:{bottom:[n.borderColor],left:[n.borderColor]},minBorderMargin:20,labelMargin:10,backgroundColor:{colors:[[n.white],[n.white]]},margin:{top:8,bottom:20,left:20},markings:function(t){for(var r=[],e=t.xaxis,o=Math.floor(e.min);o<e.max;o+=2*e.tickSize)r.push({xaxis:{from:o,to:o+e.tickSize},color:[n.white]});return r}},colors:[n.primary],xaxis:{tickFormatter:function(){return""}},yaxis:{min:0,max:110},legend:{show:!0}},setInterval(function(){r.series[0].data=r.getRandomData()},40)}return t.prototype.getRandomData=function(){for(this.livedata.length&&(this.livedata=this.livedata.slice(1));this.livedata.length<300;){var t=this.livedata.length?this.livedata[this.livedata.length-1]:50,r=t+10*Math.random()-5;this.livedata.push(r<0?0:r>100?100:r)}for(var e=[],n=0;n<this.livedata.length;++n)e.push([n,this.livedata[n]]);return e},t}();s=n([a.Component({selector:"uxd-charts-live-chart-ng1",template:e(1656),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsLiveChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsLiveChartNg1Component=s},1419:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(8).Chance(),s=function(){function t(){var t=this;this.htmlCode=e(1927),this.jsCode=e(1928),this.cssCode=e(1926),this.nodeHtml=e(1925),this.searchHtml=e(1929),this.codepen={html:this.htmlCode,htmlTemplates:[{id:"chart-node.html",content:this.nodeHtml},{id:"search-item.html",content:this.searchHtml}],htmlAttributes:{"ng-controller":"OrganizationChartDemoCtrl as vm"},js:[this.jsCode],css:[this.cssCode]};var r=e(209),n=e(1640),o={name:l.name(),position:"International Manager",phone:l.phone(),email:"inat_manager@company.com",image:r},a={name:l.name(),position:"Chief Technical Officer",phone:l.phone(),email:"cto@company.com",image:r};this.options={hierarchyBar:{image:function(t){return t.image}},nodes:{template:e(1633)},reveal:function(){if(t.data.name===o.name)return a.children=[t.data],t.data=a,!1;o.children=[t.data],t.data=o},search:{enabled:!0,placeholder:"Enter name or job title",template:e(1634),query:function(t,r){return r.name.toLowerCase().indexOf(t.toLowerCase())!==-1||r.position.toLowerCase().indexOf(t.toLowerCase())!==-1}}},this.data={name:l.name(),position:"National Manager",phone:l.phone(),email:"nat_manager@company.com",image:r,children:[{name:l.name(),position:"Regional Manager",phone:l.phone(),email:"reg_manager@company.com",image:r,children:[{name:l.name(),position:"Assistant",phone:l.phone(),email:"assistant@company.com",image:r,children:[{name:l.name(),position:"Human Resources",phone:l.phone(),email:"hr@company.com",image:n},{name:l.name(),position:"Engineer",phone:l.phone(),email:"tech@company.com",image:n},{name:l.name(),position:"Quality Assurance",phone:l.phone(),email:"qa@company.com",image:n}]},{name:l.name(),position:"Manager",phone:l.phone(),email:"manager@company.com",active:!0,image:n,children:[{name:l.name(),position:"Sales",phone:l.phone(),email:"sales1@company.com",image:n},{name:l.name(),position:"Office Administrator",phone:l.phone(),email:"office_admin@company.com",image:n,children:[{name:l.name(),position:"Receptionist",phone:l.phone(),email:"reception@company.com",image:n}]},{name:l.name(),position:"Sales",phone:l.phone(),email:"sales2@company.com",image:n}]},{name:l.name(),position:"Head of Accounting",phone:l.phone(),email:"accounting@company.com",image:n,children:[{name:l.name(),position:"Accountant",phone:l.phone(),email:"accountant1@company.com",image:n},{name:l.name(),position:"Accountant",phone:l.phone(),email:"accountant2@company.com",image:n}]}]}]}}return t}();s=n([a.Component({selector:"uxd-charts-organization-chart-ng1",template:e(1657)}),i.DocumentationSectionComponent("ChartsOrganizationChartNg1Component"),o("design:paramtypes",[])],s),r.ChartsOrganizationChartNg1Component=s},1420:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(8).Chance(),s=function(){function t(){this.htmlCode=e(1931),this.jsCode=e(1932),this.cssCode=e(1930),this.popoverHtml=e(1933),this.popoverJs=e(1934),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"PartitionMapCtrl as vm"},htmlTemplates:[{id:"templateId.html",content:this.popoverHtml}],js:[this.jsCode,this.popoverJs],css:[this.cssCode]},this.options={edit:{text:"Edit",image:e(1643),click:function(){},editor:{enabled:!0,finishText:"Done",noGroupsText:"No groups available",availableGroups:["Custodian","Language","Data Source"],maxRows:3,minRows:1,onFinish:function(){}}},select:function(){},maximize:{disableScrolling:!1,buttonVisible:!0,isMaximized:!1,fillScreen:!0,sidePanelWidth:235,shouldResize:!0,onToggle:function(){}},popoverTemplate:e(1635),popoverEnabled:!0,valueFormatter:function(t){return t.toLocaleString()},noDataLabel:"No data to display",loadingLabel:"Loading...",popoverDelay:650},this.isLoading=!1,this.data=[{label:"Home",image:e(1641),groupName:"Hard Drives",children:[{label:l.name(),groupName:"Custodian",children:[{label:"English",groupName:"Language",children:[{label:"Email",groupName:"Data Source",value:40},{label:"Microsoft Word",groupName:"Data Source",value:10}]},{label:"German",groupName:"Language",children:[{label:"Email",groupName:"Data Source",value:10},{label:"Microsoft Word",groupName:"Data Source",value:5}]}]},{label:l.name(),groupName:"Custodian",children:[{label:"English",groupName:"Language",children:[{label:"Email",groupName:"Data Source",value:15},{label:"Microsoft Word",groupName:"Data Source",value:5}]},{label:"German",groupName:"Language",children:[{label:"Email",groupName:"Data Source",value:10},{label:"Microsoft Word",groupName:"Data Source",value:5}]}]}]}]}return t}();s=n([a.Component({selector:"uxd-charts-partition-map-ng1",template:e(1658),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsPartitionMapNg1Component"),o("design:paramtypes",[])],s),r.ChartsPartitionMapNg1Component=s},1421:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1935),this.jsCode=e(1936),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"PeityChartCtrl as pc"},js:[this.jsCode]};var r={chartColor1:t.getColor("chart1").toRgb(),chartColor2:t.getColor("chart2").toRgb(),chartFill1:t.getColor("chart1").setAlpha(.2).toRgba()};this.lineChart={data_1:[5,3,9,6,5,9,7,3,5,2],data_2:[5,3,2,-1,-3,-2,2,3,5,2],data_3:[0,-3,-6,-4,-5,-4,-7,-3,-5,-2],options:{fill:[r.chartFill1],stroke:[r.chartColor1]}},this.updatingLineChart={data:[5,3,9,6,5,9,7,3,5,2,5,3,9,6,5,9,7,3,5,2],options:{fill:[r.chartFill1],stroke:[r.chartColor1],width:64},method:function(t){var r=Math.round(10*Math.random()),e=t;return e.shift(),e.push(r),e},updateinterval:300},this.barChart={data_1:[5,3,9,6,5,9,7,3,5,2],data_2:[5,3,2,-1,-3,-2,2,3,5,2],options:{fill:[[r.chartColor1],[r.chartColor2]]}}}return t}();s=n([a.Component({selector:"uxd-charts-peity-charts-ng1",template:e(1659),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsPeityChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsPeityChartNg1Component=s},1422:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=function(){function t(){this.resizeId=null,this.container={},this.chart={},this.htmlCode=e(1937),this.jsCode=e(1938),this.dataJs=e(1940),this.optionsJs=e(1941),this.clickJs=e(1939),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"SankeyCtrl as vm"},js:[this.jsCode]},this.data={columns:[{id:"data_source",name:"Repository",ordinal:0},{id:"extraction_type",name:"Extraction",ordinal:1},{id:"classification",name:"Classification",ordinal:2},{id:"disposition_type",name:"Disposition",ordinal:3}],nodes:[{name:"Not Classified",type:"classification",id:0,value:130,datasize:362969649},{name:"Classified",type:"classification",id:1,value:243,datasize:326502171},{name:"Phone Records",type:"data_source",id:2,value:14,datasize:512125362},{name:"Lync Conversation",type:"data_source",id:3,value:32,datasize:62160},{name:"Device Backup",type:"data_source",id:4,value:50,datasize:33409254},{name:"Data Archive (Internal)",type:"data_source",id:5,value:104,datasize:35125228},{name:"Exchange",type:"data_source",id:6,value:173,datasize:108749816},{name:"Archived",type:"disposition_type",id:7,value:12,datasize:14860510},{name:"Deleted",type:"disposition_type",id:8,value:34,datasize:32517566},{name:"On Hold",type:"disposition_type",id:9,value:68,datasize:535140573},{name:"Image",type:"extraction_type",id:10,value:16,datasize:2286386},{name:"Audio",type:"extraction_type",id:11,value:22,datasize:525843218},{name:"Text",type:"extraction_type",id:12,value:335,datasize:161342216}],links:[{source:0,target:7,value:4,datasize:348},{source:0,target:8,value:4,datasize:23572},{source:1,target:7,value:8,datasize:14860162},{source:1,target:9,value:27,datasize:217971281},{source:1,target:8,value:30,datasize:32493994},{source:0,target:9,value:41,datasize:317169292},{source:5,target:11,value:4,datasize:6741424},{source:6,target:11,value:4,datasize:6976432},{source:5,target:10,value:6,datasize:73059},{source:6,target:10,value:10,datasize:2213327},{source:2,target:11,value:14,datasize:512125362},{source:3,target:12,value:32,datasize:62160},{source:4,target:12,value:50,datasize:33409254},{source:5,target:12,value:94,datasize:28310745},{source:6,target:12,value:159,datasize:99560057},{source:11,target:1,value:4,datasize:187339593},{source:10,target:0,value:6,datasize:226298},{source:10,target:1,value:10,datasize:2060088},{source:11,target:0,value:18,datasize:338503625},{source:12,target:0,value:105,datasize:24239726},{source:12,target:1,value:230,datasize:137102490}]},this.options={linkHoverHL:!0,col:{headerLabelSpacing:25,paddingTop:0,paddingBottom:0,headerLabelLength:18},block:{truncateThreshold:18,minWidth:120,calloutData:{topLeft:{key:"datasize",nodeLabel:!1,defaultShow:!1,valueUnit:"B",label:"data",binary:!0,click:this.clickTopLeft},topRight:{key:"value",nodeLabel:!1,defaultShow:!0,valueUnit:null,label:"items"},bottomRight:{},bottomLeft:{key:"name",nodeLabel:!0,defaultShow:!0}}},overflow:{tooltip:{label:"items",showTooltip:!0}}}}return t.prototype.click=function(){},t.prototype.clickTopLeft=function(){},t}();l=n([a.Component({selector:"uxd-charts-sankey-chart-ng1",template:e(1660),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsSankeyChartNg1Component"),o("design:paramtypes",[])],l),r.ChartsSankeyChartNg1Component=l},1423:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(118),s=function(){function t(t){this.htmlCode=e(1942),this.jsCode=e(1943),this.optionsJs=e(1944),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"ScrollableChartCtrl as sc"},js:[this.jsCode]};var r={chartColor:t.getColor("chart1").toRgb(),chartHover:t.getColor("chart2").setAlpha(.2).toRgba(),gridColor:t.getColor("grey4").toHex(),tickColor:t.getColor("grey6").toHex(),borderColor:t.getColor("grey2").setAlpha().toRgba(),white:"#fff"};this.data=[{label:"bar",data:[[1,34],[2,25],[3,19],[4,34],[5,32],[6,44],[7,12],[8,27],[9,15],[10,48],[11,40],[12,36]]}],this.options={series:{bars:{show:!0,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.1}]},barWidth:.5,lineWidth:1,align:"center"},highlightColor:[r.chartHover]},xaxis:{tickDecimals:0,color:[r.white],ticks:[[1,".doc"],[2,".ppt"],[3,".pdf"],[4,".xls"],[5,".html"],[6,".txt"],[7,".png"],[8,".bmp"],[9,".gif"],[10,".svg"],[11,".ttf"],[12,".wav"]],scrollable:{enabled:!0,range:4,lowerBound:.5,upperBound:12.5,color:[r.chartColor],callback:function(){}}},colors:[r.chartColor],grid:{color:[r.gridColor],hoverable:!0,clickable:!0,borderWidth:{left:1,bottom:1,right:0,top:0},borderColor:{left:[r.borderColor],bottom:[r.borderColor]}},legend:{show:!1},tooltip:{show:!0,shifts:{x:0,y:-30},content:function(t,r,e){return"x: %x, y: "+e}}}}return t}();s=n([a.Component({selector:"uxd-charts-scrollable-chart-ng1",template:e(1661),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsScrollableChartNg1Component"),o("design:paramtypes",[l.ColorService])],s),r.ChartsScrollableChartNg1Component=s},1424:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=e(8).Chance(),s=function(){function t(){this.showMaximizeControl=!1,this.startMaximized=!1,this.htmlCode=e(1948),this.jsCode=e(1949),this.apiHtml=e(1945),this.apiJs=e(1946),this.buttonsJs=e(1947),this.clickJs=e(1950),this.communitiesJs=e(1954),this.layoutJs=e(1957),this.stateJs=e(1960),this.stylesJs=e(1961),this.titleJs=e(1962),this.codepen={html:e(1952),htmlAttributes:{"ng-controller":"SocialCtrl as vm"},htmlTemplates:[{id:"nodeDetails.html",content:e(1958)},{id:"nodePopover.html",content:e(1959)},{id:"edgeDetails.html",content:e(1955)},{id:"edgePopover.html",content:e(1956)}],js:[e(1953)],css:[e(1951)]},this.chartTitle={title:"Entire network",timeout:3e3,nodeSelectedTitle:"Social interactions with {{node}}",edgeSelectedTitle:"Social interactions between {{source}} and {{target}}",stageSelectedTitle:"Entire network"},this.templates={edgeDetail:e(1636),edgePopover:e(1637),nodeDetail:e(1638),nodePopover:e(1639)},this.api={selectedNode:null,selectedEdge:null,onNodeClick:this.onNodeClick(),onEdgeClick:this.onEdgeClick(),onStageClick:this.onStageClick(),onNodeHover:this.onNodeClick(),onEdgeHover:this.onEdgeClick()},this.communities={example_group_1:{color:"#00cceb",style:"stroke"}},this.detailStyle={node:{width:"235px",height:"99%"},edge:{width:"40vw",height:"150px","min-width":"524px","max-height":"176px"}},this.options={neighborViewOnSelect:!0,minNodeSize:5,maxNodeSize:12},this.edgeWeightInfluence=!1,this.forceAtlasDuration=1700,this.minLabels=5;for(var t=[{id:0,label:l.name()},{id:1,label:l.name()},{id:2,label:l.name()},{id:3,label:l.name()},{id:4,label:l.name()},{id:5,label:l.name()},{id:6,label:l.name()},{id:7,label:l.name()},{id:8,label:l.name()},{id:9,label:l.name()},{id:10,label:l.name()},{id:11,label:l.name()},{id:12,label:l.name()},{id:13,label:l.name()},{id:14,label:l.name()},{id:15,label:l.name()},{id:16,label:l.name()},{id:17,label:l.name()},{id:18,label:l.name()},{id:19,label:l.name()},{id:20,label:l.name()},{id:21,label:l.name()},{id:22,label:l.name()},{id:23,label:l.name()},{id:24,label:l.name()},{id:25,label:l.name()},{id:26,label:l.name()},{id:27,label:l.name()},{id:28,label:l.name()},{id:29,label:l.name()},{id:30,label:l.name()},{id:31,label:l.name(),community:"example_group_1"},{id:32,label:l.name()},{id:33,label:l.name()},{id:34,label:l.name()},{id:35,label:l.name()},{id:36,label:l.name()},{id:37,label:l.name()},{id:38,label:l.name(),community:"example_group_1"},{id:39,label:l.name()},{id:40,label:l.name()},{id:41,label:l.name()},{id:42,label:l.name()},{id:43,label:l.name()},{id:44,label:l.name()},{id:45,label:l.name()},{id:46,label:l.name()},{id:47,label:l.name()},{id:48,label:l.name()},{id:49,label:l.name()},{id:50,label:l.name()},{id:51,label:l.name()},{id:52,label:l.name()},{id:53,label:l.name()},{id:54,label:l.name()},{id:55,label:l.name()},{id:56,label:l.name()},{id:57,label:l.name()},{id:58,label:l.name()},{id:59,label:l.name()},{id:60,label:l.name()},{id:61,label:l.name()},{id:62,label:l.name()},{id:63,label:l.name()},{id:64,label:l.name()},{id:65,label:l.name(),community:"example_group_1"},{id:66,label:l.name()},{id:67,label:l.name()},{id:68,label:l.name()},{id:69,label:l.name()},{id:70,label:l.name(),community:"example_group_1"},{id:71,label:l.name()},{id:72,label:l.name()},{id:73,label:l.name()},{id:74,label:l.name()},{id:75,label:l.name()},{id:76,label:l.name()}],r={},n=0;n<t.length;n+=1){var o=t[n].label.replace(" ","").toLowerCase();t[n].additional={fullName:o+"@business.com"},r[t[n].id]=t[n]}for(var a=[{source:1,target:0,value:1},{source:2,target:0,value:8},{source:3,target:0,value:10},{source:3,target:2,value:6},{source:4,target:0,value:1},{source:5,target:0,value:1},{source:6,target:0,value:1},{source:7,target:0,value:1},{source:8,target:0,value:2},{source:9,target:0,value:1},{source:11,target:10,value:1},{source:11,target:3,value:3},{source:11,target:2,value:3},{source:11,target:0,value:5},{source:12,target:11,value:1},{source:13,target:11,value:1},{source:14,target:11,value:1},{source:15,target:11,value:1},{source:17,target:16,value:4},{source:18,target:16,value:4},{source:18,target:17,value:4},{source:19,target:16,value:4},{source:19,target:17,value:4},{source:19,target:18,value:4},{source:20,target:16,value:3},{source:20,target:17,value:3},{source:20,target:18,value:3},{source:20,target:19,value:4},{source:21,target:16,value:3},{source:21,target:17,value:3},{source:21,target:18,value:3},{source:21,target:19,value:3},{source:21,target:20,value:5},{source:22,target:16,value:3},{source:22,target:17,value:3},{source:22,target:18,value:3},{source:22,target:19,value:3},{source:22,target:20,value:4},{source:22,target:21,value:4},{source:23,target:16,value:3},{source:23,target:17,value:3},{source:23,target:18,value:3},{source:23,target:19,value:3},{source:23,target:20,value:4},{source:23,target:21,value:4},{source:23,target:22,value:4},{source:23,target:12,value:2},{source:23,target:11,value:9},{source:24,target:23,value:2},{source:24,target:11,value:7},{source:25,target:24,value:13},{source:25,target:23,value:1},{source:25,target:11,value:12},{source:26,target:24,value:4},{source:26,target:11,value:31},{source:26,target:16,value:1},{source:26,target:25,value:1},{source:27,target:11,value:17},{source:27,target:23,value:5},{source:27,target:25,value:5},{source:27,target:24,value:1},{source:27,target:26,value:1},{source:28,target:11,value:8},{source:28,target:27,value:1},{source:29,target:23,value:1},{source:29,target:27,value:1},{source:29,target:11,value:2},{source:30,target:23,value:1},{source:31,target:30,value:2},{source:31,target:11,value:3},{source:31,target:23,value:2},{source:31,target:27,value:1},{source:32,target:11,value:1},{source:33,target:11,value:2},{source:33,target:27,value:1},{source:34,target:11,value:3},{source:34,target:29,value:2},{source:35,target:11,value:3},{source:35,target:34,value:3},{source:35,target:29,value:2},{source:36,target:34,value:2},{source:36,target:35,value:2},{source:36,target:11,value:2},{source:36,target:29,value:1},{source:37,target:34,value:2},{source:37,target:35,value:2},{source:37,target:36,value:2},{source:37,target:11,value:2},{source:37,target:29,value:1},{source:38,target:34,value:2},{source:38,target:35,value:2},{source:38,target:36,value:2},{source:38,target:37,value:2},{source:38,target:11,value:2},{source:38,target:29,value:1},{source:39,target:25,value:1},{source:40,target:25,value:1},{source:41,target:24,value:2},{source:41,target:25,value:3},{source:42,target:41,value:2},{source:42,target:25,value:2},{source:42,target:24,value:1},{source:43,target:11,value:3},{source:43,target:26,value:1},{source:43,target:27,value:1},{source:44,target:28,value:3},{source:44,target:11,value:1},{source:45,target:28,value:2},{source:47,target:46,value:1},{source:48,target:47,value:2},{source:48,target:25,value:1},{source:48,target:27,value:1},{source:48,target:11,value:1},{source:49,target:26,value:3},{source:49,target:11,value:2},{source:50,target:49,value:1},{source:50,target:24,value:1},{source:51,target:49,value:9},{source:51,target:26,value:2},{source:51,target:11,value:2},{source:52,target:51,value:1},{source:52,target:39,value:1},{source:53,target:51,value:1},{source:54,target:51,value:2},{source:54,target:49,value:1},{source:54,target:26,value:1},{source:55,target:51,value:6},{source:55,target:49,value:12},{source:55,target:39,value:1},{source:55,target:54,value:1},{source:55,target:26,value:21},{source:55,target:11,value:19},{source:55,target:16,value:1},{source:55,target:25,value:2},{source:55,target:41,value:5},{source:55,target:48,value:4},{source:56,target:49,value:1},{source:56,target:55,value:1},{source:57,target:55,value:1},{source:57,target:41,value:1},{source:57,target:48,value:1},{source:58,target:55,value:7},{source:58,target:48,value:7},{source:58,target:27,value:6},{source:58,target:57,value:1},{source:58,target:11,value:4},{source:59,target:58,value:15},{source:59,target:55,value:5},{source:59,target:48,value:6},{source:59,target:57,value:2},{source:60,target:48,value:1},{source:60,target:58,value:4},{source:60,target:59,value:2},{source:61,target:48,value:2},{source:61,target:58,value:6},{source:61,target:60,value:2},{source:61,target:59,value:5},{source:61,target:57,value:1},{source:61,target:55,value:1},{source:62,target:55,value:9},{source:62,target:58,value:17},{source:62,target:59,value:13},{source:62,target:48,value:7},{source:62,target:57,value:2},{source:62,target:41,value:1},{source:62,target:61,value:6},{source:62,target:60,value:3},{source:63,target:59,value:5},{source:63,target:48,value:5},{source:63,target:62,value:6},{source:63,target:57,value:2},{source:63,target:58,value:4},{source:63,target:61,value:3},{source:63,target:60,value:2},{source:63,target:55,value:1},{source:64,target:55,value:5},{source:64,target:62,value:12},{source:64,target:48,value:5},{source:64,target:63,value:4},{source:64,target:58,value:10},{source:64,target:61,value:6},{source:64,target:60,value:2},{source:64,target:59,value:9},{source:64,target:57,value:1},{source:64,target:11,value:1},{source:65,target:63,value:5},{source:65,target:64,value:7},{source:65,target:48,value:3},{source:65,target:62,value:5},{source:65,target:58,value:5},{source:65,target:61,value:5},{source:65,target:60,value:2},{source:65,target:59,value:5},{source:65,target:57,value:1},{source:65,target:55,value:2},{source:66,target:64,value:3},{source:66,target:58,value:3},{source:66,target:59,value:1},{source:66,target:62,value:2},{source:66,target:65,value:2},{source:66,target:48,value:1},{source:66,target:63,value:1},{source:66,target:61,value:1},{source:66,target:60,value:1},{source:67,target:57,value:3},{source:68,target:25,value:5},{source:68,target:11,value:1},{source:68,target:24,value:1},{source:68,target:27,value:1},{source:68,target:48,value:1},{source:68,target:41,value:1},{source:69,target:25,value:6},{source:69,target:68,value:6},{source:69,target:11,value:1},{source:69,target:24,value:1},{source:69,target:27,value:2},{source:69,target:48,value:1},{source:69,target:41,value:1},{source:70,target:25,value:4},{source:70,target:69,value:4},{source:70,target:68,value:4},{source:70,target:11,value:1},{source:70,target:24,value:1},{source:70,target:27,value:1},{source:70,target:41,value:1},{source:70,target:58,value:1},{source:71,target:27,value:1},{source:71,target:69,value:2},{source:71,target:68,value:2},{source:71,target:70,value:2},{source:71,target:11,value:1},{source:71,target:48,value:1},{source:71,target:41,value:1},{source:71,target:25,value:1},{source:72,target:26,value:2},{source:72,target:27,value:1},{source:72,target:11,value:1},{source:73,target:48,value:2},{source:74,target:48,value:2},{source:74,target:73,value:3},{source:75,target:69,value:3},{source:75,target:68,value:3},{source:75,target:25,value:3},{source:75,target:48,value:1},{source:75,target:41,value:1},{source:75,target:70,value:1},{source:75,target:71,value:1},{source:76,target:64,value:1},{source:76,target:65,value:1},{source:76,target:66,value:1},{source:76,target:63,value:1},{source:76,target:62,value:1},{source:76,target:48,value:1},{source:76,target:58,value:1}],i=0;i<a.length;i+=1){r[a[i].target].additional.received=r[a[i].target].additional.received||{},r[a[i].target].additional.sent=r[a[i].target].additional.sent||{},r[a[i].source].additional.received=r[a[i].source].additional.received||{},r[a[i].source].additional.sent=r[a[i].source].additional.sent||{};var s=Math.round(10*Math.random()),d=Math.round(10*Math.random());r[a[i].target].additional.received[a[i].source]=s,r[a[i].target].additional.sent[a[i].source]=d,r[a[i].source].additional.received[a[i].target]=d,r[a[i].source].additional.sent[a[i].target]=s}var c=[];for(var h in r)if(r.hasOwnProperty(h)){var u=0,p=0;for(var b in r[h].additional.sent)u+=r[h].additional.sent[b];for(var g in r[h].additional.received)p+=r[h].additional.received[g];r[h].additional.volume=p+u,c.push(r[h])}this.data={nodes:t,edges:a}}return t.prototype.compareNodes=function(t,r){return t.setInExternal.ratio<r.setInExternal.ratio?1:t.setInExternal.ratio>r.setInExternal.ratio?-1:0},t.prototype.onNodeClick=function(){var t=this;return function(r){if(!r.neighborNodes){var e=r.getNeighbors();r.neighborNodes=e.nodes;var n=e.edges,o=function(r){return function(){t.api.setSelectedEdgeById(Object.keys(n[r])[0])}};r.neighbourList=[];for(var a in r.neighborNodes)r.neighborNodes[a].setInExternal={ratio:Math.round((r.neighborNodes[a].additional.sent[r.id]+r.neighborNodes[a].additional.received[r.id])/r.additional.volume*100),goToEdge:o(a)},r.neighbourList.push(r.neighborNodes[a]);r.neighbourList.sort(t.compareNodes)}}},t.prototype.onEdgeClick=function(){var t=this;return function(r){r.sourceNode||(r.sourceNode=r.getSourceNode(),r.sourceNode.goTo=function(){t.api.setSelectedNodeById(r.sourceNode.id)},r.targetNode=r.getTargetNode(),r.targetNode.goTo=function(){t.api.setSelectedNodeById(r.targetNode.id)})}},t.prototype.onStageClick=function(){return function(){}},t}();s=n([a.Component({selector:"uxd-charts-social-chart-ng1",template:e(1662)}),i.DocumentationSectionComponent("ChartsSocialChartNg1Component"),o("design:paramtypes",[])],s),r.ChartsSocialChartNg1Component=s},1425:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)};Object.defineProperty(r,"__esModule",{value:!0});var a=e(1),i=e(117),l=function(){function t(){this.htmlCode=e(1964),this.jsCode=e(1965),this.cssCode=e(1963),this.tooltipsHtml=e(1966),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"SparkChartCtrl as vm"},js:[this.jsCode],css:[this.cssCode]},this.charts=[{type:"spark-chart1",value:35,fillHeight:10,topLeftLabel:"<span class='spark-label hidden-xxxs'><span class='large'>21.7</span><span class='medium light'>&nbsp;MB&nbsp;&nbsp;Items&nbsp;&nbsp;(35%)</span></span>",tooltip:"Spark Line indicator - 2.17MB of 8.2GB occupied (35%)"},{type:"spark-chart3",value:30,fillHeight:5,inlineLabel:"30%"},{type:"spark-chart2",value:35,fillHeight:10,topLeftLabel:"<span class='spark-label hidden-xxxs'><span class='large'>21.7</span><span class='medium light'>&nbsp;MB&nbsp;&nbsp;Items&nbsp;&nbsp;(35%)</span></span>",bottomLeftLabel:'<span class="spark-label hidden-xxxs"><span class="medium light">INDEX COVERAGE</span></span>',tooltip:"Spark Line indicator - 2.17MB of 8.2GB occupied (35%)"},{type:"spark-chart3",value:30,fillHeight:5,inlineLabel:'<span class="spark-label hidden-spark"><span class="x-large">30%</span></span>',topLeftLabel:'<span class="spark-label hidden-xxs"><span class="small">STORAGE ON HOLD</span></span>'},{type:"spark-chart4",value:55,fillHeight:10,topLeftLabel:"<span class='spark-label hidden-xxs'><span class='large'>8.6</span><span class='medium light'>&nbsp;GB&nbsp;Disk Space&nbsp;&nbsp;(55%)</span></span>"},{type:"spark-chart5",value:30,fillHeight:10,topLeftLabel:"30%",topRightLabel:'<span class="spark-label hidden-spark"><span class="medium light">75.0M</span></span>',bottomLeftLabel:'<span class="spark-label hidden-xxxs"><span class="medium light">ITEMS ON HOLD</span></span>',bottomRightLabel:'<span class="spark-label hidden-xxs"><span class="medium light">TOTAL</span></span>'},{type:"spark-vibrant1",value:55,fillHeight:10,topLeftLabel:"<span class='spark-label hidden-xxs'><span class='large'>8.6</span><span class='medium light'>&nbsp;GB&nbsp;Disk Space&nbsp;&nbsp;(55%)</span></span>"},{type:"spark-vibrant2",value:30,fillHeight:10,topLeftLabel:"30%",bottomLeftLabel:'<span class="spark-label hidden-xxxs"><span class="medium light">ITEMS ON HOLD</span></span>',topRightLabel:'<span class="spark-label hidden-spark"><span class="medium light">75.0M</span></span>',bottomRightLabel:'<span class="spark-label hidden-xxs"><span class="medium light">TOTAL</span></span>'}]}return t}();l=n([a.Component({selector:"uxd-charts-spark-chart-ng1",template:e(1663),changeDetection:a.ChangeDetectionStrategy.OnPush}),i.DocumentationSectionComponent("ChartsSparkChartNg1Component"),o("design:paramtypes",[])],l),r.ChartsSparkChartNg1Component=l},1426:function(t,r,e){"use strict";var n=this&&this.__decorate||function(t,r,e,n){var o,a=arguments.length,i=a<3?r:null===n?n=Object.getOwnPropertyDescriptor(r,e):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,r,e,n);else for(var l=t.length-1;l>=0;l--)(o=t[l])&&(i=(a<3?o(i):a>3?o(r,e,i):o(r,e))||i);return a>3&&i&&Object.defineProperty(r,e,i),i},o=this&&this.__metadata||function(t,r){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,r)},a=this&&this.__param||function(t,r){return function(e,n){r(e,n,t)}};Object.defineProperty(r,"__esModule",{value:!0});var i=e(1),l=e(117),s=e(118),d=function(){function t(t,r){var n=this;this.lineDataService=t,this.htmlCode=e(1967),this.jsCode=e(1968),this.serviceJs=e(1970),this.rescaleJs=e(1969),this.codepen={html:this.htmlCode,htmlAttributes:{"ng-controller":"TimelineChartCtrl as tc"},js:[this.jsCode]};var o={chartColor:r.getColor("chart1").toRgb(),chartFill:r.getColor("chart1").setAlpha(.2).toRgba(),gridColor:r.getColor("grey4").toHex(),tickColor:r.getColor("grey6").toHex(),borderColor:r.getColor("grey2").setAlpha(.5).toRgba(),transparent:"rgba(0, 0, 0, 0)"},a=12057084e5,i=1217628e6,l=this.randomTimelineData();this.timelineData=[{data:l,lines:{show:!0,fill:!0,lineWidth:1,fillColor:{colors:[{opacity:0},{opacity:.3}]}},shadowSize:0}],this.timelineOptions={xaxes:[{mode:"time"}],yaxes:[{min:0,max:200,show:!1}],colors:[o.chartColor],grid:{color:[o.gridColor],tickColor:[o.transparent]},tooltip:!1,timeline:{color:o.chartFill,start:a,end:i,zoom:{enabled:!0,minimumRange:6048e5},keyboardNavigation:!0,dragHandles:{width:5,color:o.chartColor,tooltips:{enabled:!0,onHover:!0,onDrag:!0,onDragEnd:!1},tooltipFormatter:function(t){var r=new Date(t),e=["January","February","March","April","May","June","July","August","September","October","November","December"];return r.getDate()+" "+e[r.getMonth()]+" "+r.getFullYear()}},enabled:!0,callback:function(t){n.detailedOptions.xaxes[0].min=t.start,n.detailedOptions.xaxes[0].max=t.end}}},this.detailedData=[{data:l,lines:{show:!0,fill:!0,lineWidth:1,fillColor:{colors:[{opacity:.1},{opacity:.1}]}},shadowSize:0}],this.detailedOptions={xaxes:[{mode:"time",min:a,max:i,tickColor:[o.transparent]}],yaxes:[{min:0,max:201}],legend:{show:!1},colors:[o.chartColor],grid:{color:[o.gridColor],tickColor:[o.tickColor],borderWidth:{bottom:1,left:1,top:0,right:0},borderColor:{bottom:[o.borderColor],left:[o.borderColor]},hoverable:!0},tooltip:{show:!0,shifts:{x:0,y:-48},content:"<strong>%x</strong><br/>%y,000 items added"}}}return t.prototype.randomTimelineData=function(){for(var t=11676924e5,r=12209112e5,e=3456e5,n=[],o=t;o<=r;o+=e)o>120445771e4&&o<1207142075e3||(n.push(o),n.push(Math.floor(70*Math.random()+80)));return n=this.lineDataService.addZeroPoints(n,2592e5)},t}();d=n([i.Component({selector:"uxd-charts-timeline-chart-ng1",template:e(1664),changeDetection:i.ChangeDetectionStrategy.OnPush}),l.DocumentationSectionComponent("ChartsTimelineChartNg1Component"),a(0,i.Inject("lineDataService")),o("design:paramtypes",[Object,s.ColorService])],d),r.ChartsTimelineChartNg1Component=d},1633:function(t,r,e){t.exports=e.p+"docs/app/pages/charts/sections/organization-chart/organization-chart-ng1/snippets/chart-node.html"},1634:function(t,r,e){t.exports=e.p+"docs/app/pages/charts/sections/organization-chart/organization-chart-ng1/snippets/search-item.html"},1635:function(t,r,e){t.exports=e.p+"docs/app/pages/charts/sections/partition-map/partition-map-ng1/snippets/popover.html"},1636:function(t,r,e){t.exports=e.p+"docs/app/pages/charts/sections/social-chart/social-chart-ng1/snippets/edge-detail.html"},1637:function(t,r,e){t.exports=e.p+"docs/app/pages/charts/sections/social-chart/social-chart-ng1/snippets/edge-popover.html"},1638:function(t,r,e){t.exports=e.p+"docs/app/pages/charts/sections/social-chart/social-chart-ng1/snippets/node-detail.html"},1639:function(t,r,e){t.exports=e.p+"docs/app/pages/charts/sections/social-chart/social-chart-ng1/snippets/node-popover.html"},1640:function(t,r,e){t.exports=e.p+"assets/IconCustodianColorized.png"},1641:function(t,r,e){t.exports=e.p+"assets/home.png"},1643:function(t,r,e){t.exports=e.p+"assets/pencil.png"},1645:function(t,r,e){t.exports=e.p+"assets/social-chart-layout-1.png"},1646:function(t,r,e){t.exports=e.p+"assets/social-chart-layout-2.png"},1647:function(t,r){t.exports='<div class="flot-chart">\r\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">label</td>\r\n                <td>string</td>\r\n                <td>Label name specified in the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">data</td>\r\n                <td>number or array</td>\r\n                <td>An array of coordinates in chart e.g. [ [x1, y1], [x2, y2], ... ]</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastData</td>\r\n                <td>number or array</td>\r\n                <td>An array of coordinates defining the forecast or future data, e.g [ [x1, y1], [x2, y2], ... ]</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>Bar Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the bar chart data and\r\n    options respectively. Dataset and Options are defined within the BarChartCtrl.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<blockquote>\r\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the <code>sr-only</code>    class to make the text hidden but visible to screen readers, and give the container a <code>tabindex</code> attribute\r\n    so it can be reached with the keyboard, and place it near the chart.</p>\r\n\r\n<uxd-snippet language="html" [code]="accessibilityCode"></uxd-snippet>'},1648:function(t,r){t.exports='<div class="flot-chart">\r\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n    <tbody><tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">horizontal</td>\r\n        <td>boolean</td>\r\n        <td>If true the bars will be presented horizontally.</td>\r\n        <td>true</td>\r\n    </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<p>Horizontal Bar Charts are defined by the <code>flot</code> directive. The dataset and options attributes define the chart data and options respectively.\r\nDataset and Options are defined within the HorizontalBarChartCtrl.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<blockquote>\r\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>Horizontal bar charts are an enhanced version of bar charts. For more information on options, refer to the bar chart documentation.</p>\r\n\r\n<blockquote>\r\n  <p>Refer to <a href="https://github.com/winne27/flot-valuelabels/wiki">flot-valuelabels</a> for more options on value labels.</p>\r\n</blockquote>'},1649:function(t,r){t.exports='<div class="flot-chart-stack">\r\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">label</td>\r\n                <td>string</td>\r\n                <td>Label name specified in the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">data</td>\r\n                <td>number or array</td>\r\n                <td>An array of coordinates defining the data, e.g. [ [x1, y1], [x2, y2], ... ]</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>color</td>\r\n                <td>Defines the color of each section.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">highlightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastFillColor</td>\r\n                <td>color</td>\r\n                <td>Defines the fill color for the portion representing forecast data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastColor</td>\r\n                <td>color</td>\r\n                <td>Defines the stroke color for the portion representing forecast data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastHighLightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover for the portion representing forecast\r\n                    data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastDashStyle</td>\r\n                <td>array</td>\r\n                <td>Defines a list of numbers that specifies distances to alternately draw a line and a gap (in coordinate space\r\n                    units). Similar to this property in HTML5 Canvas. Default is [5].</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastData</td>\r\n                <td>number or array</td>\r\n                <td>An array of coordinates defining the forecast or future data, e.g. [ [x1, y1], [x2, y2], ... ]</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>Stacked Bar Charts are defined by the <code>flot</code> directive. The dataset and options attributes\r\n    define the chart data and options respectively.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">stack</td>\r\n                <td>boolean</td>\r\n                <td>If set to true shows the chart in stacked form.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<blockquote>\r\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>Stacked bar charts are an enhanced version of bar charts. For more information on options, refer to the bar chart documentation.</p>\r\n\r\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the\r\n    <code\r\n       >sr-only</code> class to make the text hidden but visible to screen readers, and give the container a <code>tabindex</code>        attribute so it can be reached with the keyboard, and place it near the chart.</p>\r\n\r\n<uxd-snippet language="html" [code]="accessibilityCode"></uxd-snippet>\r\n\r\n<p>The legends are custom-styled in this example. To place the legends separately from the chart, you can define a <code>div</code>    with an id and specify this in legend options. The <code>div</code> is then placed below the\r\n    HTML of the stacked bar chart. The styles and options applied here are:</p>\r\n\r\n<tabset>\r\n    <tab heading="Legend HTML">\r\n        <uxd-snippet language="html" [code]="legendHtml"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Legend CSS">\r\n        <uxd-snippet language="css" [code]="legendCss"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Legend Options">\r\n        <uxd-snippet language="javascript" [code]="legendJs"></uxd-snippet>\r\n    </tab>\r\n</tabset>'},1650:function(t,r){t.exports='<div class="flot-chart">\r\n    <ux-flot-ng1 [dataset]="data" [options]="options" (on-plot-click)="onPlotClick(event, pos, item)" (on-hover-click)="onPlotHover(event, pos, item)">\r\n    </ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">label</td>\r\n                <td>string</td>\r\n                <td>Label name specified in the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">data</td>\r\n                <td>number or array</td>\r\n                <td>A number in the donut chart defining the area of each donut section.</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>color</td>\r\n                <td>Defines the color of each donut section.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">highlightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>Donut Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the donut chart data\r\n    and options respectively. Dataset and Options are defined within the DonutChartCtrl.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="chartHtml"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="chartJs"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">series</td>\r\n                <td>string</td>\r\n                <td>Defines the chart type and its layout. Values include \'lines\', \'bar\' and \'points\', e.g. if data represents\r\n                    a donut chart, then the value is set to \'pie\'.</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">grid</td>\r\n                <td>array</td>\r\n                <td>Helps configure the grid options.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>Chart layout parameters are explained below. These are defined in <code>series</code>.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>If set to true displays the chart.</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">innerRadius</td>\r\n                <td>number</td>\r\n                <td>Sets the radius of the donut hole. If value is between 0 and 1 (inclusive) then it will use that as a percentage\r\n                    of the radius, otherwise it will use the value as a direct pixel length.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">centerLabel</td>\r\n                <td>array</td>\r\n                <td>Defines how a label should be shown in the center of the donut.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">subLabel</td>\r\n                <td>array</td>\r\n                <td>Defines how a label should be shown in the center of the donut beneath the center label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">donutLabel</td>\r\n                <td>array</td>\r\n                <td>Defines how a label should be shown beneath the donut.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">width</td>\r\n                <td>number</td>\r\n                <td>Defined inside stroke object, pixel width of the border of each slice.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>centerLabel</code>.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>Whether or not the chart should show a center label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>string</td>\r\n                <td>Specifies the color to be used for the center label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">text</td>\r\n                <td>string</td>\r\n                <td>The text to display in the center label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">font</td>\r\n                <td>string</td>\r\n                <td>The name of the font family to be used by the label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fontSize</td>\r\n                <td>number</td>\r\n                <td>The desired font size of the label. The size may be reduced automatically to fit the label inside the donut.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">paddingX</td>\r\n                <td>number</td>\r\n                <td>Defines the horizontal padding required to center the position.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">paddingY</td>\r\n                <td>number</td>\r\n                <td>Defines the vertical padding required to center the position.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">textBaseline</td>\r\n                <td>HTML</td>\r\n                <td>Canvas textBaseline property, defines the position of the label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>subLabel</code>.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>Whether or not the chart should show a sub label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>string</td>\r\n                <td>Specifies the color to be used for the sub label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">text</td>\r\n                <td>string</td>\r\n                <td>The text to display in the sub label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">font</td>\r\n                <td>string</td>\r\n                <td>The name of the font family to be used by the label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fontSize</td>\r\n                <td>number</td>\r\n                <td>The desired font size of the label. The size may be reduced automatically to fit the label inside the donut.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">paddingX</td>\r\n                <td>number</td>\r\n                <td>Defines the horizontal padding required to center the position.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">paddingY</td>\r\n                <td>number</td>\r\n                <td>Defines the vertical padding required to center the position.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">textBaseline</td>\r\n                <td>HTML</td>\r\n                <td>Canvas textBaseline property, defines the position of the label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>donutLabel</code>.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>Whether or not the chart should show a donut label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>string</td>\r\n                <td>Specifies the color to be used for the donut label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">text</td>\r\n                <td>string</td>\r\n                <td>The text to display in the donut label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">font</td>\r\n                <td>string</td>\r\n                <td>The name of the font family to be used by the label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fontSize</td>\r\n                <td>number</td>\r\n                <td>The desired font size of the label. The size may be reduced automatically to fit the label inside the donut.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>Grid options are explained below.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">hoverable</td>\r\n                <td>boolean</td>\r\n                <td>If set to true enables interactivity in the grid.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<blockquote>\r\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the <code>sr-only</code>    class to make the text hidden but visible to screen readers, and give the container a <code>tabindex</code> attribute\r\n    so it can be reached with the keyboard, and place it near the chart.</p>\r\n\r\n<uxd-snippet [code]="accessibilityHtml"></uxd-snippet>\r\n\r\n<h4 id="dynamic-chart-labels">Dynamic Chart Labels</h4>\r\n\r\n<p>If the text displayed in the chart labels needs to be changed dynamically, add the <code>donut-labels</code> attribute to\r\n    the <code>flot</code> directive and add the following to the controller. Now if any of the values in this object change\r\n    the labels will automatically update to reflect the new values.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="labelsHtml"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="labelsJs"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<h4 id="custom-legend-styling">Custom Legend Styling</h4>\r\n\r\n<p>If you wish to apply your own styling to the legend (e.g labels), this can be done by specifying properties in the <code>legend</code>    object, which is contained within the Chart Options. For example, <code>labelFormatter</code>. This is a function that\r\n    allows you to format the labels as required. In the example below, any series that is very small (&lt;2%) will have its\r\n    label in the legend updated. This is useful when a series is too small visually to be seen on the chart so that the user\r\n    understands why it is not visible.</p>\r\n\r\n<tabset>\r\n\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="legendJs"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="CSS">\r\n        <uxd-snippet language="css" [code]="legendCss"></uxd-snippet>\r\n    </tab>\r\n\r\n</tabset>'},1651:function(t,r){t.exports='<div class="nested-donut-example">\r\n    <div class="nested-donut-text">\r\n        <div>\r\n            <p class="documents"><span>23,456</span><span> documents</span></p>\r\n            <p class="reviewed"><span>19,876</span><span> reviewed</span></p>\r\n            <p class="produced"><span>11,123</span><span> produced</span></p>\r\n        </div>\r\n    </div>\r\n    <ux-nested-donut-ng1 [dataset]="data" [options]="options"></ux-nested-donut-ng1>\r\n</div>\r\n<hr>\r\n\r\n<p>The available options are:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">size</td>\r\n                <td>number</td>\r\n                <td>Defines the diameter of the chart. (default: 150). This will also accept a percentage value in the form of\r\n                    a string, e.g. "50%".</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">donutWidth</td>\r\n                <td>number</td>\r\n                <td>Defines the width of each ring. (default: 4)</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">donutSpacing</td>\r\n                <td>number</td>\r\n                <td>Defines the spacing between each ring. (default: 4)</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">hoverAnimation</td>\r\n                <td>boolean</td>\r\n                <td>Defines whether or not ring should show a hover effect when the mouse is over it (default: true)</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">onHover</td>\r\n                <td>function</td>\r\n                <td>Defines a function to be called when a ring is hovered. The function should accept one argument that will\r\n                    contain the data corresponding to the hovered ring.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">onClick</td>\r\n                <td>function</td>\r\n                <td>Defines a function to be called when a ring is clicked. The function should accept one argument that will\r\n                    contain the data corresponding to the clicked ring.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">centerLabel</td>\r\n                <td>object</td>\r\n                <td>Defines the content and appearance of a center label if one is defined.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">tooltip</td>\r\n                <td>object</td>\r\n                <td>Defines tooltip options.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>centerLabel.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>Whether or not the chart should show a center label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">text</td>\r\n                <td>string</td>\r\n                <td>Defines the content of the center label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>color</td>\r\n                <td>Defines the color of the center label text.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">font</td>\r\n                <td>string</td>\r\n                <td>Defines the font family of the center label.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fontSize</td>\r\n                <td>number</td>\r\n                <td>Defines the font size of the center label. Take into account the size of the chart when considering a font\r\n                    size to ensure text is suitably displayed within the chart.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>tooltip.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>Defines whether a tooltip should show when a ring is hovered (default: true)</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">content</td>\r\n                <td>function</td>\r\n                <td>Defines the content of the tooltip. The function should accept one argument which will contain the data corresponding\r\n                    to the ring that was hovered. The function should return a HTML string.</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">shifts</td>\r\n                <td>object</td>\r\n                <td>Defines how the tooltip should be offset from the mouse position.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>shifts.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">x</td>\r\n                <td>number</td>\r\n                <td>Defines how many pixels left or right the tooltip should be positioned from the mouse position (default:\r\n                    0)</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">y</td>\r\n                <td>number</td>\r\n                <td>Defines how many pixels up or down the tooltip should be positioned from the mouse position (default: 0)</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>Nested Donut Charts are defined by the <code>nested-donut</code> directive. The dataset and options\r\n    attributes define the nested donut chart data and options respectively. Dataset and Options are defined within the NestedDonutChartCtrl.</p>\r\n\r\n<blockquote>\r\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="CSS">\r\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>'},1652:function(t,r){t.exports='<p>Listed below are the options which can be specified in the controller for a chart:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">series</td>\r\n                <td>string</td>\r\n                <td>Defines the chart type and its layout. Values include \'lines\', \'bars\', \'points\', \'pie\' etc. E.g. If data\r\n                    represents a bar chart, then the value is set to \'bars\' etc.</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">xaxis</td>\r\n                <td>array</td>\r\n                <td>Configures the X-axis with options like show, color, etc.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">yaxis</td>\r\n                <td>array</td>\r\n                <td>Configures the Y-axis with options.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">margin</td>\r\n                <td>object</td>\r\n                <td>Defined with "top", "left", "bottom" and "right", space in pixels between the canvas edge and the grid.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">markings</td>\r\n                <td>array</td>\r\n                <td>Markings, used to draw simple lines and rectangular areas in the background of the plot. It can be an array\r\n                    of ranges in the form of &#123; xaxis: &#123; from, to &#125;, yaxis: &#123; from, to &#125; &#125; or a function(above example) that\r\n                    returns this range (note: markings are only used for Live Charts).</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">colors</td>\r\n                <td>array(colors)</td>\r\n                <td>Specifies colors used to represent a chart.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">grid</td>\r\n                <td>array</td>\r\n                <td>Helps configure the grid options</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">legend</td>\r\n                <td>array</td>\r\n                <td>Defines the data series labels and label boxes with the color of the series</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">tooltip</td>\r\n                <td>array</td>\r\n                <td>Defines how a tooltip should be shown</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">onPlotClick</td>\r\n                <td>function</td>\r\n                <td>Called when plot area is clicked. Parameters are event, the position and a nearby data item object. This\r\n                    option works when the "clickable" attribute is set to true</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">onPlotHover</td>\r\n                <td>function</td>\r\n                <td>Called when plot area is hovered. Parameters are event, the position and a nearby data item object. This\r\n                    option works when the "hoverable" attribute is set to true. If "autoHighlight" is true (the default),\r\n                    nearby data items are highlighted automatically.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>series</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>If set to true the chart is displayed.</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fillColor</td>\r\n                <td>array(colors)</td>\r\n                <td>Specifies the colors of the fill. If more than one color is specified this will produce a gradient.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fill</td>\r\n                <td>boolean or number</td>\r\n                <td>If set to true fills the chart with colors in the fillColors property. A number between 0 and 1 defines the\r\n                    opacity of the fill.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">lineWidth</td>\r\n                <td>number</td>\r\n                <td>Defines the thickness of the line or outline in pixels.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">align</td>\r\n                <td>string</td>\r\n                <td>Centers the axis labels if set to `center`.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">highlightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastFillColor</td>\r\n                <td>color</td>\r\n                <td>Defines the fill color for the portion representing forecast data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastColor</td>\r\n                <td>color</td>\r\n                <td>Defines the stroke color for the portion representing forecast data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastHighLightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover for the portion representing forecast\r\n                    data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastDashStyle</td>\r\n                <td>array</td>\r\n                <td>Default is [5], defines a list of numbers that specifies distances to alternately draw a line and a gap (in\r\n                    coordinate space units). Similar to this property in HTML5 Canvas.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">shadowSize</td>\r\n                <td>number</td>\r\n                <td>Default size of shadows in pixels. Set it to 0 to remove shadows.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">horizontal</td>\r\n                <td>boolean</td>\r\n                <td>If true the bars will be presented horizontally (note: this can only be set for Bar Charts).</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">stack</td>\r\n                <td>boolean</td>\r\n                <td>If set to true shows the chart in stacked form (note: this can only be used to create Stacked Bar/Line Charts).</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">valueLabels</td>\r\n                <td>array</td>\r\n                <td>Allows labels to be displayed beside bars or data points.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>valueLabels</code></p>\r\n\r\n<table class="table">\r\n    <tbody>\r\n        <tr>\r\n            <th>Property</th>\r\n            <th>Type</th>\r\n            <th>Description</th>\r\n            <th>Optional</th>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">show</td>\r\n            <td>boolean</td>\r\n            <td>When set to true labels will be displayed.</td>\r\n            <td>true</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">valign</td>\r\n            <td>string</td>\r\n            <td>Defines the vertical alignment of the text. The available options are: \'top\', \'above\', \'below\', \'middle\' or \'bottom\'.</td>\r\n            <td>true</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">plotAxis</td>\r\n            <td>string</td>\r\n            <td>Defines the axis you wish to display the values of. The available options are: \'x\' or \'y\'.</td>\r\n            <td>true</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">xoffset</td>\r\n            <td>number</td>\r\n            <td>Defines the number of pixels the label should move to the left or right of its original position.</td>\r\n            <td>true</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">yoffset</td>\r\n            <td>number</td>\r\n            <td>Defines the number of pixels the label should move up or down from its original position.</td>\r\n            <td>true</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">font</td>\r\n            <td>string</td>\r\n            <td>Defines the font size and font family the labels should use.</td>\r\n            <td>true</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">fontColor</td>\r\n            <td>color</td>\r\n            <td>Sets the text color of the labels.</td>\r\n            <td>true</td>\r\n        </tr>\r\n        <tr>\r\n            <td class="attribute">labelFormatter</td>\r\n            <td>function</td>\r\n            <td>Should accept one argument that will contain the axis position of the associated data. The function can be used\r\n                to change the text in the label and should do this by returning the desired text.</td>\r\n            <td>true</td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>xaxis</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>If set to true displays the axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">tickDecimals</td>\r\n                <td>null or number</td>\r\n                <td>Default is auto-detected, describes ticks of the axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">min</td>\r\n                <td>number</td>\r\n                <td>Set the start value of the x-axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">max</td>\r\n                <td>number</td>\r\n                <td>Set the end value of the x-axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>color</td>\r\n                <td>Defines the color of the axis lines.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">ticks</td>\r\n                <td>array</td>\r\n                <td>Sets the x-axis labels to a specified value.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">tickFormatter</td>\r\n                <td>function</td>\r\n                <td>Defines how ticks are formatted.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">mode</td>\r\n                <td>null or time</td>\r\n                <td>Defines how data is represented on the x-axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">position</td>\r\n                <td>string</td>\r\n                <td>Set as "top" or "bottom", specifies the position of the axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>yaxis</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>If set to true displays the axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">min</td>\r\n                <td>number</td>\r\n                <td>Set the start value of the y-axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">max</td>\r\n                <td>number</td>\r\n                <td>Set the end value of the y-axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">tickFormatter</td>\r\n                <td>function</td>\r\n                <td>Defines how ticks are formatted.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">alignTicksWithAxis</td>\r\n                <td>null or number</td>\r\n                <td>Aligns the ticks of this axis with the ticks of the other axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">position</td>\r\n                <td>string</td>\r\n                <td>Set as "right" or "left", specifies the position of the axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>grid</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>color</td>\r\n                <td>Specifies the color of the grid lines.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">hoverable</td>\r\n                <td>boolean</td>\r\n                <td>If set to true enables interactivity in the grid.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">clickable</td>\r\n                <td>boolean</td>\r\n                <td>If set to true enables interactivity in the grid.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">borderWidth</td>\r\n                <td>number or object</td>\r\n                <td>Defines the width of the grid border.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">tickColor</td>\r\n                <td>null or color</td>\r\n                <td>Specifies the colors of the ticks in an axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">borderColor</td>\r\n                <td>color</td>\r\n                <td>Defines the border grid lines.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">preventOverlap</td>\r\n                <td>boolean</td>\r\n                <td>If set to true this will prevent any x-axis labels from overlapping.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">minBorderMargin</td>\r\n                <td>number or null</td>\r\n                <td>Specifies the default minimum margin around the border. Used to make sure that points aren\'t accidentally\r\n                    clipped by the canvas edge.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">backgroundColor</td>\r\n                <td>color or object</td>\r\n                <td>Specifies the background color or background gradient colors of the chart.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>legend</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>If set to true shows the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">container</td>\r\n                <td>string</td>\r\n                <td>The id or class name of the container to hold the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">noColumns</td>\r\n                <td>number</td>\r\n                <td>The number of columns for the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">position</td>\r\n                <td>string</td>\r\n                <td>"ne" or "nw" or "se" or "sw", defines the position of the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>tooltip</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>Set to true to show the tooltip.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">cssClass</td>\r\n                <td>string</td>\r\n                <td>Set to the name of a custom css class to style the tooltip.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">defaultTheme</td>\r\n                <td>boolean</td>\r\n                <td>Set to false if you are using a custom css class.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">snap</td>\r\n                <td>boolean</td>\r\n                <td>Set to true to have tooltip in fixed position. When set to false, the tooltip moves along with the mouse\r\n                    pointer.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">shifts</td>\r\n                <td>array</td>\r\n                <td>Values to shift tooltip position relative to the mouse pointer for x and y, negative values are allowed.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">content</td>\r\n                <td>string or function</td>\r\n                <td>Specifies the tooltip text e.g. "x : %x, y : %y" - displays x : x-value, y : y-value. Function can be used\r\n                    if you require more control over how the content is generated. Note that if you wish to access the axis\r\n                    labels rather than the number value (co-ordinates) assigned to them when using a function, you must use\r\n                    the "%" identifier followed by the axis (x or y) rather than the "xval" or "yval" parameters that are\r\n                    passed to the function.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">xDateFormat</td>\r\n                <td>String</td>\r\n                <td>provides the format of the x-axis Date.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>'},1653:function(t,r){t.exports='<div class="flot-chart">\r\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n    <tbody><tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">label</td>\r\n        <td>string</td>\r\n        <td>Label name specified in the legend.</td>\r\n        <td>true</td>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">data</td>\r\n        <td>number or array</td>\r\n        <td>An array of coordinates in the chart e.g. [ [x1, y1], [x2, y2], ... ]</td>\r\n        <td>false</td>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">forecastData</td>\r\n        <td>number or array</td>\r\n        <td>An array of coordinates defining the forecast or future data.</td>\r\n        <td>true</td>\r\n    </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<p>Line Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the line chart data and options respectively.\r\nDataset and Options are defined within the LineChartCtrl.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<blockquote>\r\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the sr-only class to make the text hidden but visible to screen readers, and give the container a tabindex attribute so it can be reached with the keyboard, and place it near the chart.</p>\r\n\r\n<uxd-snippet language="html" [code]="accessibilityHtml"></uxd-snippet>'},1654:function(t,r){t.exports='<div class="flot-chart">\r\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">label</td>\r\n                <td>string</td>\r\n                <td>Label name specified in the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">data</td>\r\n                <td>array</td>\r\n                <td>Coordinates in the chart e.g. [ [x1, y1], [x2, y2], ... ]</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">lines</td>\r\n                <td>object</td>\r\n                <td>Defines the parameters of the axis line.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>lines</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">show</td>\r\n                <td>boolean</td>\r\n                <td>If set to true displays the chart.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fillColor</td>\r\n                <td>array</td>\r\n                <td>Specifies the colors of the fill. If more than one color is specified this will produce a gradient.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fill</td>\r\n                <td>boolean or number</td>\r\n                <td>If set to true fills the chart with colors in the fillColors property. A number between 0 and 1 defines the\r\n                    opacity of the fill.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">lineWidth</td>\r\n                <td>number</td>\r\n                <td>Defines the thickness of the line or outline in pixels.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">highlightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">shadowSize</td>\r\n                <td>number</td>\r\n                <td>Default size of shadows in pixels. Set it to 0 to remove shadows.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>MultiAxes Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the multiaxes chart\r\n    data and options respectively. Dataset and Options are defined within the MultipleAxisLineChartCtrl.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<p>The following attributes should be defined within <code>options</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">xaxis</td>\r\n                <td>array</td>\r\n                <td>Defines if more than one x-axis is used.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">yaxis</td>\r\n                <td>array</td>\r\n                <td>Defines if more than one y-axis is used.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>xaxis</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">mode</td>\r\n                <td>null or time</td>\r\n                <td>Defines how data is represented on the x-axes.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>yaxis</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">min</td>\r\n                <td>number</td>\r\n                <td>Defines the minimum value of the y-axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">alignTicksWidthAxis</td>\r\n                <td>null or number</td>\r\n                <td>Aligns the ticks of this axis with the ticks of the other axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">position</td>\r\n                <td>string</td>\r\n                <td>Set as "top" or "bottom" or "right" or "left", specifies the position of the axis.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">tickFormatter</td>\r\n                <td>function</td>\r\n                <td>Defines how ticks are formatted.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<blockquote>\r\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>To support users of assistive technologies, provide a text summary of the chart with an <code>aria-label</code> or <code>span</code>    hidden with the <code>sr-only</code> class. For multiple axes charts the most appropriate information to convey will\r\n    vary depending on the chart’s purpose.</p>'},1655:function(t,r){t.exports='<div class="flot-chart-stack">\r\n    <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">label</td>\r\n                <td>string</td>\r\n                <td>Label name specified in the legend.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">data</td>\r\n                <td>number or array</td>\r\n                <td>An array of coordinates in the chart e.g. [ [x1, y1], [x2, y2], ... ]</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">color</td>\r\n                <td>color</td>\r\n                <td>Defines the color of each line.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fillColor</td>\r\n                <td>color</td>\r\n                <td>Defines the color of the filled area beneath each line.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">highlightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastFillColor</td>\r\n                <td>color</td>\r\n                <td>Defines the fill color for the portion representing forecast data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastColor</td>\r\n                <td>color</td>\r\n                <td>Defines the stroke color for the portion representing forecast data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastHighlightColor</td>\r\n                <td>color</td>\r\n                <td>Default color of the translucent overlay used to highlight on mouse hover for the portion representing forecast\r\n                    data.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastDashStyle</td>\r\n                <td>array</td>\r\n                <td>Default is [5], defines a list of numbers that specifies distances to alternately draw a line and a gap (in\r\n                    coordinate space units). Similar to this property in HTML5 Canvas.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">forecastData</td>\r\n                <td>number or array</td>\r\n                <td>Coordinates defining the forecast or future data. An array of coordinates in chart e.g. [ [x1, y1], [x2,\r\n                    y2], ... ]</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">shadowSize</td>\r\n                <td>number</td>\r\n                <td>Default size of shadows in pixels. Set it to 0 to remove shadows.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>Stacked Line Charts are defined by the <code>flot</code> directive. The dataset and options attributes define the chart data\r\n    and options respectively. Dataset and Options are defined within the StackedLineChartCtrl.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">stack</td>\r\n                <td>boolean</td>\r\n                <td>If set to true shows the chart in stacked form.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<blockquote>\r\n    <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>Stacked line charts are an enhanced version of line charts. For more information on options, refer to the line chart documentation.</p>\r\n\r\n<p>To convey chart information to users with assistive technologies, you can include a text version of the data. Use the <code>sr-only</code>    class to make the text hidden but visible to screen readers, and give the container a <code>tabindex</code> attribute\r\n    so it can be reached with the keyboard, and place it near the chart.</p>\r\n\r\n<uxd-snippet language="html" [code]="accessibilityHtml"></uxd-snippet>\r\n\r\n<p>The legends are custom-styled in this example. To place the legends separately from the chart, you can define a <code>div</code>    with an id and specify this in legend options. The styles and options applied here are:</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="legendHtml"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="CSS">\r\n        <uxd-snippet language="css" [code]="legendCss"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="legendJs"></uxd-snippet>\r\n    </tab>\r\n\r\n</tabset>'},1656:function(t,r){t.exports='<div class="flot-chart">\r\n    <ux-flot-ng1 [dataset]="series" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n    <tbody><tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">data</td>\r\n        <td>number or array</td>\r\n        <td>Coordinates in the Live chart.</td>\r\n        <td>false</td>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">series</td>\r\n        <td>string</td>\r\n        <td>Defines the chart type and its layout. Values include \'lines\', \'bar\' and \'points\'.</td>\r\n        <td>false</td>\r\n    </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>series</code></p>\r\n\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n    <tbody><tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">lineWidth</td>\r\n        <td>number</td>\r\n        <td>Defines the thickness of the line chart.</td>\r\n        <td>true</td>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">show</td>\r\n        <td>boolean</td>\r\n        <td>If set to true displays the chart.</td>\r\n        <td>false</td>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">fillColor</td>\r\n        <td>array</td>\r\n        <td>Specifies the colors of the fill. For Line chart this produces area graphs. If more than one color is specified this will produce a gradient.</td>\r\n        <td>true</td>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">fill</td>\r\n        <td>boolean or number</td>\r\n        <td>If set to true fills the chart with colors in the fillColors property. A number between 0 and 1 defines the opacity of the fill.</td>\r\n        <td>true</td>\r\n    </tr>\r\n    <tr>\r\n        <td class="attribute">shadowSize</td>\r\n        <td>number</td>\r\n        <td>Default size of shadows in pixels. Set it to 0 to remove shadows.</td>\r\n        <td>true</td>\r\n    </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<p>Live Charts are defined by the <code>flot</code> directive. The dataset and options attribute define the live chart data and options respectively.\r\nDataset and Options are defined within the LiveChartCtrl.</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n  <tbody><tr>\r\n    <th>Property</th>\r\n    <th>Type</th>\r\n    <th>Description</th>\r\n    <th>Optional</th>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">markings</td>\r\n    <td>array</td>\r\n    <td>Markings used to draw simple lines and rectangular areas in the background of the plot. It can be an array of ranges in the form of &#123; xaxis: &#123; from, to &#125;, yaxis: &#123; from, to &#125; &#125; or a function(above example) that returns this range.</td>\r\n    <td>true</td>\r\n  </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<blockquote>\r\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>To support users of assistive technologies, provide a text summary of the chart with an <code>aria-label</code> or <code>span</code> hidden with the <code>sr-only</code> class. For live charts the most appropriate information to convey will vary depending on the chart’s purpose, but may typically be the highest or most recent data point.</p>'},1657:function(t,r){t.exports='<div class="organization-chart-demo-container">\r\n    <ux-organization-chart-ng1 [(data)]="data" [(options)]="options"></ux-organization-chart-ng1>\r\n</div>\r\n\r\n<br>\r\n\r\n<ux-radiobutton [(ngModel)]="this.options.connector" option="curved">Curved Connector</ux-radiobutton>\r\n<br>\r\n<ux-radiobutton [(ngModel)]="this.options.connector" option="elbow">Elbow Connector</ux-radiobutton>\r\n\r\n<hr>\r\n\r\n<p>The organization chart can be used to present hierarchical data in an interactive and user friendly way. The chart can be\r\n    added to a page using the following code:</p>\r\n\r\n<tabset>\r\n\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n    <tab heading="Node HTML">\r\n        <uxd-snippet language="html" [code]="nodeHtml"></uxd-snippet>        \r\n    </tab>\r\n    <tab heading="Search HTML">\r\n        <uxd-snippet language="html" [code]="searchHtml"></uxd-snippet>        \r\n    </tab>\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>        \r\n    </tab>\r\n    <tab heading="CSS">\r\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>        \r\n    </tab>\r\n</tabset>\r\n\r\n<p>The organization chart is designed to fill the size of the parent element.</p>\r\n\r\n<p>The following attributes can be used to configure the chart:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Binding</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">data</td>\r\n                <td>object</td>\r\n                <td>variable</td>\r\n                <td>The data the chart should display. The object can contain any properties, however any child items should\r\n                    be listed in an array under a <code>children</code> property.</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">options</td>\r\n                <td>object</td>\r\n                <td>variable</td>\r\n                <td>Allows you to configure the appearance and behavior of the chart. All available options can be found in the\r\n                    table below.</td>\r\n                <td>false</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<h4 id="chart-options">Chart Options</h4>\r\n\r\n<p>All of the following options are optional, with the exception of the node template, and the default value will be used when\r\n    an option has not been specified.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">transition</td>\r\n                <td>number</td>\r\n                <td>Specifies the duration of any animations used in the chart in milliseconds (default: 750).</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">levels</td>\r\n                <td>number</td>\r\n                <td>Specifies number of node levels to show initially. Eg. 1 will show the root node and any of its immediate\r\n                    children (default: 1).</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">reveal</td>\r\n                <td>function</td>\r\n                <td>If specified an arrow will appear above the root node. When clicked this function will be called. This could\r\n                    be used for updating the data in the chart to show more parent levels in the hierarchy. To hide the button\r\n                    after it has been clicked the function should return <code>false</code>.\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">hierarchyBar</td>\r\n                <td>object</td>\r\n                <td>Specifies the appearance and behavior of the breadcrumb bar along the top of the chart.</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">nodes</td>\r\n                <td>object</td>\r\n                <td>Specifies the appearance and behavior of the nodes displayed in the chart. See table below for more info.</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">connector</td>\r\n                <td>string</td>\r\n                <td>Specifies the style of connector, <code>curved</code> or <code>elbow</code>. If unspecified the curved connector\r\n                    will be used.</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">search</td>\r\n                <td>object</td>\r\n                <td>Specifies whether the search functionality should be enabled and how it should be configured.</td>\r\n            </tr>\r\n\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<blockquote>\r\n    <p><strong>Note</strong>: Refer to the <a routerLink="/components/hierarchy-bar">Hierarchy Bar Options</a> for ‘hierarchyBar’\r\n        object attributes.</p>\r\n</blockquote>\r\n\r\n<h4 id="node-options">Node Options</h4>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">template</td>\r\n                <td>string</td>\r\n                <td>The url of a template file that will be inserted into each node.</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">toggle</td>\r\n                <td>boolean</td>\r\n                <td>If true, then clicking anywhere within a node will toggle the expanded/collapsed state of the node. Setting\r\n                    it to false will require you to manually expand and contract nodes (default: true).</td>\r\n            </tr>\r\n\r\n\r\n            <tr>\r\n                <td class="attribute">size</td>\r\n                <td>object</td>\r\n                <td>Specifies the size of each node in pixels. It should have a <code>width</code> and <code>height</code> property\r\n                    (default: width - 210, height - 90).</td>\r\n            </tr>\r\n\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<h4 id="search-options">Search Options</h4>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">enabled</td>\r\n                <td>boolean</td>\r\n                <td>If true the search icon will appear at the top of the chart allowing a user to search all chart nodes and\r\n                    quickly navigate to them. (default: false)</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">template</td>\r\n                <td>string</td>\r\n                <td>This should specify the url to a custom template file for the typeahead results. The default template will\r\n                    show one line of text from a <code>name</code> property on a node. See <a href="http://angular-ui.github.io/bootstrap/versioned-docs/0.13.3/#/typeahead">UI Bootstrap</a>                    for more information on typeahead templates.</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">placeholder</td>\r\n                <td>string</td>\r\n                <td>Specifies placeholder text to show in the search input field. (default: \'\')</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">query</td>\r\n                <td>function</td>\r\n                <td>This function controls which items are suggested for any given search query. The function should expect two\r\n                    arguments, the first is the search query and the second is a node model. This function should return\r\n                    true if the node meets the search criteria and false if it does not. By default the nodes are filtered\r\n                    based on a case insensitive match on a <code>name</code> property.</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">selected</td>\r\n                <td>function</td>\r\n                <td>Specifies a callback function that will be called when a search item has been selected. The select node model\r\n                    will be passed as an argument to the function.</td>\r\n            </tr>\r\n\r\n            <tr>\r\n                <td class="attribute">key</td>\r\n                <td>string</td>\r\n                <td>The primary identity property on a node model. This will be displayed in the search input field when an item\r\n                    is selected. (default: \'name\')</td>\r\n            </tr>\r\n\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<h4 id="node-template">Node Template</h4>\r\n\r\n<p>The node template will be compiled with a scope containing the data specific to that node. This can be used by the template\r\n    to display the information within the node. Additionally several functions are also exposed on the scope.</p>\r\n\r\n<ul>\r\n    <li><code>getChildCount</code> - this will return the number of children the node has.</li>\r\n    <li><code>getExpanded</code> - will return <code>true</code> if the node\r\n        is in the expanded state otherwise will return <code>false</code>.</li>\r\n    <li><code>expandNode</code> - will make the node reveal its children.</li>\r\n    <li><code>collapseNode</code> - will make the node hide its children.</li>\r\n</ul>'},1658:function(t,r){t.exports='<div class="partition-map-box">\r\n  <ux-partition-map-ng1 [chartData]="data" [chartOptions]="options" [chartLoading]="isLoading"></ux-partition-map-ng1>\r\n</div>\r\n<hr>\r\n\r\n<p>There are several attributes that you can supply for the chart:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">chart-data</td>\r\n        <td>array</td>\r\n        <td>This should contain the data to be displayed on the chart.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">chart-options</td>\r\n        <td>array</td>\r\n        <td>This should contain options to describe the presentation of the chart and any event functions.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">chart-loading</td>\r\n        <td>array</td>\r\n        <td>This will state whether or not to show the loading overlay.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p><br> Each segment can have the following data:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">groupName</td>\r\n        <td>string</td>\r\n        <td>This defines the group a segment is part of. This is used for editing the partition map.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">label</td>\r\n        <td>string</td>\r\n        <td>This defines the text to be displayed on the segment.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">value</td>\r\n        <td>number</td>\r\n        <td>This defines the size of each segment. A value must be defined if the segment has no children. If it has children\r\n          a value should not be specified, as the value will be calculated from the values of its children.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">children</td>\r\n        <td>array</td>\r\n        <td>This defines the child segments.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">image</td>\r\n        <td>string</td>\r\n        <td>This defines an image to appear above the text in the segment.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">color</td>\r\n        <td>color</td>\r\n        <td>This defines the color of the segment. If no color is specified, one will be selected automatically.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>Segments can also have custom data that may be useful. These additional properties will have no effect on how the chart is\r\n  displayed, however this data can be used to display more information in the popover or help identify which item has been\r\n  clicked, for example by adding an id. Any items that have a value of zero will be grouped together in a single segment\r\n  and placed to the right side under its parent segment.</p>\r\n\r\n<p>The Partition Map is defined by the <code>partition-map</code> directive.</p>\r\n\r\n<tabset>\r\n  <tab heading="HTML">\r\n    <uxd-snippet language="html" [code]="this.htmlCode"></uxd-snippet>\r\n  </tab>\r\n  <tab heading="Javascript">\r\n    <uxd-snippet language="javascript" [code]="this.jsCode"></uxd-snippet>\r\n  </tab>\r\n</tabset>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">edit</td>\r\n        <td>object</td>\r\n        <td>Allows a clickable edit region on the root node.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">select</td>\r\n        <td>function</td>\r\n        <td>Defines a function to be called when a segment is clicked. It should accept two arguments which will contain the\r\n          data of the selected segment and the element of the selected segment.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">maximize</td>\r\n        <td>object</td>\r\n        <td>Defines if the chart should be able to maximize and how it should present itself when maximized.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">popoverEnabled</td>\r\n        <td>boolean</td>\r\n        <td>Defines whether a popover should appear when a segment is hovered over. If not specified it will default to true.\r\n          This will only affect the hover popover and when maximized the docked popover will still be present.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">popoverTemplate</td>\r\n        <td>string</td>\r\n        <td>Defines a template file that will display in the popover alongside the list of child nodes. Note that you can also\r\n          create a template in a `script` tag with a unique ID in your HTML file. The popoverTemplate string can then be\r\n          set to this ID to use that template.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">valueFormatter</td>\r\n        <td>function</td>\r\n        <td>Defines a function to format segment values. In the popover a list of child segments are displayed alongside their\r\n          values. If you would like to alter how these numbers are presented use this function to do so. It accepts one argument\r\n          which will be the original number, and expects a string or number value to be returned.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">noDataLabel</td>\r\n        <td>string</td>\r\n        <td>Defines the text to display if the data is empty.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">loadingLabel</td>\r\n        <td>string</td>\r\n        <td>Defines the text to display on the loading overlay.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">popoverDelay</td>\r\n        <td>number</td>\r\n        <td>Defines how long (in milliseconds) a user must hover over a segment before showing the popover. The default value\r\n          is 650.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">buttonOffset</td>\r\n        <td>object</td>\r\n        <td>Defines the position of the maximize/minimize button.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes are defined within <code>edit</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">text</td>\r\n        <td>string</td>\r\n        <td>Defines the text to display in the edit region.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">image</td>\r\n        <td>string</td>\r\n        <td>Defines the image to display in the edit region above the text.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">click</td>\r\n        <td>function</td>\r\n        <td>Defines the function to be called when the edit region is clicked and allows you to implement editing functionality.\r\n          It should accept one argument which will provide data for the root segment.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">editor</td>\r\n        <td>object</td>\r\n        <td>Helps configure the default partition map editor functionality.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes are defined within <code>editor</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">enabled</td>\r\n        <td>boolean</td>\r\n        <td>If true the editor will appear when the edit button is clicked.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">finishedText</td>\r\n        <td>string</td>\r\n        <td>This will set the text below the button that the user will click to finish editing. The default text is \'Done\'.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">noGroupsText</td>\r\n        <td>string</td>\r\n        <td>This will set the text in the dropdown if there are no available groups. The default text is \'No groups available\'.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">availableGroups</td>\r\n        <td>array(strings)</td>\r\n        <td>This will define all the possible groups the user can choose from the dropdown. The initial groups displayed are\r\n          taken from the partition map data.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">maxRows</td>\r\n        <td>number</td>\r\n        <td>The maximum number of rows the partition map can have (this does not include the root segment). The default is 3.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">minRows</td>\r\n        <td>number</td>\r\n        <td>The minimum number of rows the partition map can have (this does not include the root segment). The default is 0.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onFinish</td>\r\n        <td>function</td>\r\n        <td>This function will be called when the user has finished editing. The function should accept one argument which will\r\n          contain an array of groups the user selected in order from highest to lowest. In this function the chart data should\r\n          be updated accordingly.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes are defined within <code>maximize</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">buttonVisible</td>\r\n        <td>boolean</td>\r\n        <td>Defines if the maximize/minimize button should be visible.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">disableScrolling</td>\r\n        <td>boolean</td>\r\n        <td>Defines if page scrolling should be disabled when the chart is maximized.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">isMaximized</td>\r\n        <td>boolean</td>\r\n        <td>Defines if the chart should present itself in the maximized state initially.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">fillScreen</td>\r\n        <td>boolean</td>\r\n        <td>Defines if the maximized chart should fill the remaining space on the screen, or fill the container element.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">sidePanelWidth</td>\r\n        <td>number</td>\r\n        <td>Defines the width of the side panel when the Partition Map is maximized. The default value is 235.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">shouldResize</td>\r\n        <td>boolean</td>\r\n        <td>Defines if the chart should resize to fill the container (or remaining screen space) when the maximize/minimize button\r\n          is clicked. The default value is `true.` This is useful if you wish to see the side panel without having to resize\r\n          the map. Note: If you set `isMaximized` to true and `shouldResize` to false, the map will load with the side panel\r\n          displayed.\r\n        </td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onToggle</td>\r\n        <td>function</td>\r\n        <td>Defines a function to be called when the maximize/minimize button is clicked. It should accept one argument which\r\n          will represent the state the chart is transitioning to - `true` for maximized and `false` for minimized. To prevent\r\n          the default maximize/minimize behavior, make the function return `true`.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes are defined within <code>buttonOffset</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">maximize</td>\r\n        <td>object</td>\r\n        <td>Defines the offset for the button when in the maximized state.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">minimize</td>\r\n        <td>object</td>\r\n        <td>Defines the offset for the button when in the minimized state.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes are defined within the <code>maximize</code> property in <code>buttonOffset</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">x</td>\r\n        <td>number</td>\r\n        <td>Defines how many pixels left or right to offset the button from the default position when the chart is maximized.\r\n          A positive number indicates moving the button to the right and a negative number indicates moving the button to\r\n          the left.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">y</td>\r\n        <td>number</td>\r\n        <td>Defines how many pixels up or down to offset the button from the default position when the chart is maximized. A\r\n          positive number indicates moving the button down and a negative number indicates moving the button up.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes are defined within the <code>minimize</code> property of <code>buttonOffset</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">x</td>\r\n        <td>number</td>\r\n        <td>Defines how many pixels left or right to offset the button from the default position when the chart is minimized.\r\n          A positive number indicates moving the button to the right and a negative number indicates moving the button to\r\n          the left.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">y</td>\r\n        <td>number</td>\r\n        <td>Defines how many pixels up or down to offset the button from the default position when the chart is minimized. A\r\n          positive number indicates moving the button down and a negative number indicates moving the button up.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<h4 id="maximizing">Maximizing</h4>\r\n\r\n<p>To allow a partition map to be maximized a container must be specified. To identify the container apply the <code>partition-container</code>  class to the element. It is recommended that it be applied to the <code>div</code> element containing the main page content\r\n  (which will often have the class <code>wrapper-content</code>), this way any navigation, headers or toolbars will not be\r\n  obstructed. The container will be used to position and size the maximized partition map on the page. If it should fill\r\n  the screen there is a <code>fillScreen</code> option that can be set to true.</p>\r\n\r\n<p>The maximize/minimize button will by default toggle the presentation of the chart, however other actions can be performed\r\n  when the button is clicked by providing an <code>onToggle</code> function in the options. The default functionality will\r\n  still occur even if you have provided an <code>onToggle</code> function, however it can be prevented by ensuring the <code>onToggle</code>  function returns a value of <code>true.</code></p>\r\n\r\n<h4 id="popover">Popover</h4>\r\n\r\n<p>The partition map requires a template to be defined which will be displayed in the popover when a segment is hovered over,\r\n  or when the chart is maximized in the docked panel on the right side.</p>\r\n\r\n<p>The popover may have different sizes depending on where it is presented and the template should allow for this. Below are\r\n  details on each presentation and how to apply a style specific to them.</p>\r\n\r\n<ul>\r\n  <li>\r\n    <p>The default presentation occurs when a segment is hovered over and a popover will appear with a list of the segments\r\n      children on the right side.</p>\r\n  </li>\r\n  <li>\r\n    <p>The second presentation occurs when a segment is hovered over that has no children. The template will then fill the whole\r\n      popover. In this case the template will have a parent CSS class of <code>.full-width</code> which can be used to provide\r\n      styling specific for this presentation.</p>\r\n  </li>\r\n  <li>\r\n    <p>The third presentation occurs when the partition map has been maximized. The popover will then be docked to the right\r\n      of the chart. In this case the template will have a parent CSS class of <code>.docked</code> which can be used to provide\r\n      styling specific for this presentation.</p>\r\n  </li>\r\n</ul>\r\n\r\n<p>The popover template will have access to the following data about the segment selected/hovered:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">children</td>\r\n        <td>array</td>\r\n        <td>If the segment has any children this contains the data on them.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">color</td>\r\n        <td>string</td>\r\n        <td>This will contain the color of the current segment.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">data</td>\r\n        <td>object</td>\r\n        <td>This will contain the original segment data specified, including any custom data.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">depth</td>\r\n        <td>number</td>\r\n        <td>This represents the level the segment is on the chart.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">key</td>\r\n        <td>string</td>\r\n        <td>This will contain the label displayed on the segment.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">value</td>\r\n        <td>number</td>\r\n        <td>This will contain the value of the current segment.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes are defined within <code>data</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">label</td>\r\n        <td>string</td>\r\n        <td>The label specified for the segment.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">image</td>\r\n        <td>string</td>\r\n        <td>The image file specified for the segment (if one was specified).</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">children</td>\r\n        <td>array</td>\r\n        <td>The child segments if any were specified.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">parents</td>\r\n        <td>array</td>\r\n        <td>The parent segments if any exist. The list is ordered starting with the immediate parent and moving up until the\r\n          root node is reached.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">value</td>\r\n        <td>number</td>\r\n        <td>The value of the segment if one was specified.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>Any additional custom data that you specified for this segment will also be found here. In this example <code>groupName</code>  was added to each segment, and it is here this data can be accessed</p>\r\n\r\n<p>The code used for the popover template in the example above can be found below:</p>\r\n\r\n<tabset>\r\n  <tab heading="HTML">\r\n    <uxd-snippet language="html" [code]="this.popoverHtml"></uxd-snippet>\r\n  </tab>\r\n  <tab heading="Javascript">\r\n    <uxd-snippet language="javascript" [code]="this.popoverJs"></uxd-snippet>\r\n  </tab>\r\n  <tab heading="CSS">\r\n    <uxd-snippet language="css" [code]="this.cssCode"></uxd-snippet>\r\n  </tab>\r\n</tabset>'},1659:function(t,r){t.exports='<div class="demo-attributes table-responsive">\r\n    <table class="table table-bordered white-bg">\r\n        <thead>\r\n            <tr>\r\n                <th>Graph</th>\r\n                <th>Code</th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td>\r\n                    <ux-peity-line-chart-ng1 [data]="lineChart.data_1" [options]="lineChart.options"></ux-peity-line-chart-ng1>\r\n                </td>\r\n                <td>\r\n                    <code>&lt;line-chart data=&quot;pc.LineChart.data_1&quot; options=&quot;pc.LineChart.options&quot;&gt;&lt;/line-chart&gt;</code>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <ux-peity-line-chart-ng1 [data]="lineChart.data_2" [options]="lineChart.options"></ux-peity-line-chart-ng1>\r\n                </td>\r\n                <td>\r\n                    <code>&lt;line-chart data=&quot;pc.LineChart.data_2&quot; options=&quot;pc.LineChart.options&quot;&gt;&lt;/line-chart&gt;</code>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <ux-peity-line-chart-ng1 [data]="lineChart.data_3" [options]="lineChart.options"></ux-peity-line-chart-ng1>\r\n                </td>\r\n                <td>\r\n                    <code>&lt;line-chart data=&quot;pc.LineChart.data_3&quot; options=&quot;pc.LineChart.options&quot;&gt;&lt;/line-chart&gt;</code>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <ux-peity-bar-chart-ng1 [data]="barChart.data_1" [options]="barChart.options"></ux-peity-bar-chart-ng1>\r\n                </td>\r\n                <td>\r\n                    <code>&lt;bar-chart data=&quot;pc.BarChart.data_1&quot; options=&quot;pc.BarChart.options&quot;&gt;&lt;/bar-chart&gt;</code>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <ux-peity-bar-chart-ng1 [data]="barChart.data_2" [options]="barChart.options"></ux-peity-bar-chart-ng1>\r\n                </td>\r\n                <td>\r\n                    <code>&lt;bar-chart data=&quot;pc.BarChart.data_2&quot; options=&quot;pc.BarChart.options&quot;&gt;&lt;/bar-chart&gt;</code>\r\n                </td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <ux-peity-updating-line-chart-ng1 [data]="updatingLineChart.data" [method]="updatingLineChart.method" [options]="updatingLineChart.options" [updateinterval]="updatingLineChart.updateinterval"></ux-peity-updating-line-chart-ng1>\r\n                </td>\r\n                <td>\r\n                    <code>&lt;updating-linechart data=&quot;pc.UpdatingLineChart.data&quot; method=&quot;pc.UpdatingLineChart.method&quot; options=&quot;pc.UpdatingLineChart.options&quot; updateinterval=&quot;pc.UpdatingLineChart.updateinterval&quot;&gt;&lt;/updating-linechart&gt;</code>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>In the template, pass <code>pc.UpdatingLineChart.data</code> to define the chart data, <code>pc.UpdatingLineChart.options</code> to define the \r\nchart rendering options, <code>pc.UpdatingLineChart.method</code> to define the method that generates updated values and <code>pc.UpdatingLineChart.updateinterval</code> \r\nto define the interval.</p>\r\n\r\n<p>Updating Line Charts are rendered by passing the <code>data</code>, <code>options</code>, <code>method</code> and <code>updateinterval</code> parameters to the controller.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n  <tbody><tr>\r\n    <th>Name</th>\r\n    <th>Type</th>\r\n    <th>Description</th>\r\n    <th>Optional</th>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">data</td>\r\n    <td>array</td>\r\n    <td>Array of data points for the chart to display.</td>\r\n    <td>false</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">stroke</td>\r\n    <td>string</td>\r\n    <td>Provides the color of the stroke in a chart.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">fill</td>\r\n    <td>string</td>\r\n    <td>Written inside the options, these are the colors used to fill line or bar chart.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">width</td>\r\n    <td>number</td>\r\n    <td>Number, defines the width of the graph.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">height</td>\r\n    <td>number</td>\r\n    <td>Number, defines the height of the graph.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">method</td>\r\n    <td>function</td>\r\n    <td>Function that updates the line chart. Parameters: oldData; Return Parameter: newData.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">updateinterval</td>\r\n    <td>number</td>\r\n    <td>Milliseconds, time interval for re-generation.</td>\r\n    <td>true</td>\r\n  </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n    \r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\n<p>To provide accessibility for users with assistive technologies, include a <code>span</code> with the <code>sr-only</code> class which conveys the same information as the chart. \r\nFor updating charts and line charts, the most appropriate information to provide will depend on the purpose of the chart.</p>'},1660:function(t,r){t.exports='<ux-sankey-ng1 [chartData]="data" [options]="options" [click]="click"></ux-sankey-ng1>\r\n\r\n<hr>\r\n\r\n<p>The Sankey Chart allows transfers and flows within a system to be presented visually.</p>\r\n\r\n<p>To create a Sankey chart, use the <code>sankey</code> directive.</p>\r\n\r\n<uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n\r\n<p>The data for the chart should be set with the <code>chart-data</code> attribute. There are two optional attributes, a <code>click</code> attribute for handling interaction, and an <code>options</code> attribute for configuration of the chart.</p>\r\n\r\n<h4 id="chart-data">Chart-Data</h4>\r\n\r\n<p>Sankey Charts are composed of a number of nodes representing areas of a system. These are arranged into columns and connected by links. The required format for the chart data is as shown:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="dataJs"></uxd-snippet>\r\n\r\n<p>Each column should be defined with a <code>name</code> and an <code>id</code>. The value given for <code>ordinal</code> defines the order in which the columns will be presented.</p>\r\n\r\n<p>Node items should have a <code>name</code> and <code>id</code>. The <code>type</code> property should correspond to the <code>id</code> of a column. The <code>value</code> property should hold the value for the node. The example code also uses another property, <code>datasize</code>, which represents file size in bytes. Additional properties such as this can have arbitrary names; they will be mapped to internal properties depending on the <code>options</code> object which is supplied. Additional properties supplied must be numeric.</p>\r\n\r\n<p>The links should have a <code>source</code> and <code>target</code>, which must correspond to the ids of the nodes which need to be connected. Each link in the chart requires a definition of this kind. Links can also have data associated with them, which will affect their size on the chart. If the <code>value</code> of a node is higher than the total of the values of the links exiting that node, the excess values will be represented with an overflow link (shown above as the orange links exiting the Not Classifed and Classified nodes in the example).</p>\r\n\r\n<p>When defining links, ensure that only nodes in adjacent columns are connected.</p>\r\n\r\n<p>To convey chart information to assistive technologies, include a text summary of the data. Use the <code>.sr-only</code> class to make the text hidden but visible to screen readers, and set the <code>tabIndex</code> attribute on the element so it can be reached with the keyboard.</p>\r\n\r\n<h4 id="options">Options</h4>\r\n\r\n<p>The configuration object for the Sankey Chart allows data properties to be mapped to positions on the chart nodes.</p>\r\n\r\n<uxd-snippet language="javascript" [code]="optionsJs"></uxd-snippet>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">linkHoverHL</td>\r\n      <td>boolean</td>\r\n      <td>Determines whether to have a link hover highlight. Default is <code>true</code>.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">linkTooltip</td>\r\n      <td>object</td>\r\n      <td>Configuration for tooltips on the Sankey ribbons. See the <code>linkTooltip</code> object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">col</td>\r\n      <td>object</td>\r\n      <td>Configuration for the column header. See the <code>col</code> object definition below.</td>\r\n      <td>false</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">block</td>\r\n      <td>object</td>\r\n      <td>Configuration for the chart blocks. See the <code>block</code> object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">overflow</td>\r\n      <td>object</td>\r\n      <td>Configuration for the overflow links. See the <code>overflow</code> object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">showColNumber</td>\r\n      <td>boolean</td>\r\n      <td>Determines whether the column number is shown in the header. Default is <code>false</code>.</td>\r\n      <td>true</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The <code>linkTooltip</code> object is defined as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">show</td>\r\n      <td>boolean</td>\r\n      <td>Determines whether the tooltip is shown. Default is <code>true</code>.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">label</td>\r\n      <td>string</td>\r\n      <td>Text to show in the tooltip, as a suffix to the numeric value.</td>\r\n      <td>true</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The <code>col</code> object is defined as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">paddingTop</td>\r\n      <td>number</td>\r\n      <td>Space in pixels between the header and the top of the chart column.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">paddingBottom</td>\r\n      <td>number</td>\r\n      <td>Space in pixels at the bottom of the chart.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">headerLabelLength</td>\r\n      <td>number</td>\r\n      <td>The number of characters after which column content is truncated.</td>\r\n      <td>false</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">headerLabelSpacing</td>\r\n      <td>number</td>\r\n      <td>The number of pixels between the column number (if visible) and the label.</td>\r\n      <td>false</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The <code>block</code> object is defined as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">minWidth</td>\r\n      <td>number</td>\r\n      <td>Minimum width of the block in pixels. This depends on the container and columns, if the value is set too low it will revert\r\n        to a default value.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">minHeight</td>\r\n      <td>number</td>\r\n      <td>Minimum height of the block in pixels. Setting this to smaller values will show a greater differentiation in box size.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">calloutData</td>\r\n      <td>object</td>\r\n      <td>Configuration for the values shown in the blocks. See the <code>calloutData</code> object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The <code>calloutData</code> object is defined as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">topLeft</td>\r\n      <td>object</td>\r\n      <td>Configuration for the top left section of the blocks. See the callout section object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">topRight</td>\r\n      <td>object</td>\r\n      <td>Configuration for the top right section of the blocks. See the callout section object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">bottomRight</td>\r\n      <td>object</td>\r\n      <td>Configuration for the bottom right section of the blocks. See the callout section object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">bottomLeft</td>\r\n      <td>object</td>\r\n      <td>Configuration for the bottom left section of the blocks. See the callout section object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The callout section (<code>topLeft</code>, <code>topRight</code>, <code>bottomRight</code>, <code>bottomLeft</code>) object is defined as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">key</td>\r\n      <td>string</td>\r\n      <td>Specifies the key of the value from the data source to be displayed.</td>\r\n      <td>false</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">nodeLabel</td>\r\n      <td>boolean</td>\r\n      <td>Set to true for the value which defines the name of the node. This will be truncated to ensure it fits inside the block.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">defaultShow</td>\r\n      <td>boolean</td>\r\n      <td>Determines whether the data will be visible without hover. Default is <code>true</code>.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">label</td>\r\n      <td>string</td>\r\n      <td>Describes the unit of measurement for the data.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">valueUnit</td>\r\n      <td>string</td>\r\n      <td>Provides a data-formatter for certain data types - the letter supplied here will receive a prefix (K, M, G, etc.) as appropriate\r\n        and the associated value will be scaled. In the above example all values for file size are given in bytes and automatically\r\n        formatted to GB, MB etc. by supplying the value B.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">binary</td>\r\n      <td>boolean</td>\r\n      <td>Set to <code>true</code> to use binary prefixes (e.g. k = 1024) instead of decimal (k = 1000). This is particularly useful\r\n        for showing file sizes.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">valueFormatter</td>\r\n      <td>function</td>\r\n      <td>Allows the value to be formatted as desired. The argument to the function is the numeric value, and it should return a\r\n        formatted string. This may be useful for locale presentation, using the <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString"><code>toLocaleString</code></a>\t\t\t\tfunction.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">click</td>\r\n      <td>function</td>\r\n      <td>Allows an on click function to be added to the callout and returns the data.</td>\r\n      <td>true</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The <code>overflow</code> object is defined as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">tooltip</td>\r\n      <td>string</td>\r\n      <td>Configuration for the tooltip on overflow links. See the <code>overflow.tooltip</code> object definition below.</td>\r\n      <td>true</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The <code>overflow.tooltip</code> object is defined as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table m-t">\r\n    <tbody><tr>\r\n      <th>Name</th>\r\n      <th>Type</th>\r\n      <th>Description</th>\r\n      <th>Optional</th>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">showTooltip</td>\r\n      <td>boolean</td>\r\n      <td>Determines whether a tooltip will be shown on overflow links. Default is <code>true</code>.</td>\r\n      <td>true</td>\r\n    </tr>\r\n    <tr>\r\n      <td class="attribute">label</td>\r\n      <td>string</td>\r\n      <td>Text to show in the tooltip, as a suffix to the numeric value.</td>\r\n      <td>true</td>\r\n    </tr>\r\n  </tbody></table>\r\n</div>\r\n\r\n<p>The Sankey chart will grow and shrink in size where possible to fit the space available to it. To have further control over the size of the chart provide styling for the <code>.sankey</code> class.</p>\r\n\r\n<h4 id="click">Click</h4>\r\n\r\n<p>This attribute allows a function to be passed to the Sankey chart which exposes the behaviour of clicking on a node. The code sample below shows the function being passed in the above example. The node object clicked will be passed to this function, and exposes the same attributes as when the data source was initially supplied, as well as the HTML and SVG elements the node comprises.</p>\r\n\r\n<uxd-snippet language="javascript" [code]="clickJs"></uxd-snippet>\r\n\r\n<h4 id="responsiveness">Responsiveness</h4>\r\n\r\n<p>The Sankey Chart has certain limitations when it comes to responsiveness. This is because the blocks must have a minimum width and height in order to accurately portray data. If the data set consists of multiple columns/blocks then the chart will only be responsive above a specific width/height. This varies depending on the number of columns/blocks and the <code>block.minWidth</code> and <code>block.minHeight</code> properties specified in the chart options.</p>'},1661:function(t,r){t.exports='<div class="flot-chart">\r\n  <ux-flot-ng1 [dataset]="data" [options]="options"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>Bar charts and line charts can be extended to have scrolling capabilities for cases when the chart has to display large amounts of data.</p>\r\n\r\n<p>To make a chart scrollable we need to define a <code>scrollable</code> object under the xaxis options.</p>\r\n\r\n<uxd-snippet language="javascript" [code]="optionsJs"></uxd-snippet>\r\n\r\n<hr>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n  <tbody><tr>\r\n    <th>Property</th>\r\n    <th>Type</th>\r\n    <th>Description</th>\r\n    <th>Optional</th>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">scrollable</td>\r\n    <td>array</td>\r\n    <td>Helps configure the scrolling behavior.</td>\r\n    <td>true</td>\r\n  </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>scrollable</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n  <tbody><tr>\r\n    <th>Property</th>\r\n    <th>Type</th>\r\n    <th>Description</th>\r\n    <th>Optional</th>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">enabled</td>\r\n    <td>boolean</td>\r\n    <td>Set to true if scrolling will be enabled.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">range</td>\r\n    <td>number</td>\r\n    <td>Represents the size of each page in relation to the points on the x-axis. For example, in the chart above a value of 4 will initially show any points between 0.5 and 4.5. When the next button is clicked it will show points between 4.5 and 8.5</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">lowerBound</td>\r\n    <td>number</td>\r\n    <td>Represents the minimum point on the x-axis that can be scrolled to. Once the chart is at this position the scroll left button will be hidden.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">upperBound</td>\r\n    <td>number</td>\r\n    <td>Represents the maximum point on the x-axis that can be scrolled to. Once the chart is at this point the scroll right button will be hidden.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">color</td>\r\n    <td>color</td>\r\n    <td>Sets the color of the scroll buttons.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">callback</td>\r\n    <td>function</td>\r\n    <td>Will be called when the chart is scrolled. It should take in one parameter that will contain two properties.</td>\r\n    <td>true</td>\r\n  </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The following attributes should be defined within <code>callback</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n<table class="table">\r\n  <tbody><tr>\r\n    <th>Property</th>\r\n    <th>Type</th>\r\n    <th>Description</th>\r\n    <th>Optional</th>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">start</td>\r\n    <td>number</td>\r\n    <td>Contains the minimum value on the x-axis that is currently visible.</td>\r\n    <td>true</td>\r\n  </tr>\r\n  <tr>\r\n    <td class="attribute">end</td>\r\n    <td>number</td>\r\n    <td>Contains the maximum value on the x-axis that is currently visible.</td>\r\n    <td>true</td>\r\n  </tr>\r\n</tbody></table>\r\n</div>\r\n\r\n<blockquote>\r\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>Scrollable charts are an enhanced version of bar/line charts. For more information on adding a bar or line chart, refer to the appropriate chart documentation.</p>'},1662:function(t,r,e){t.exports='<div class="social-chart-container">\r\n  <ux-social-chart-ng1 [data]="data" width="100%" height="550px" [(api)]="api" [communities]="communities" [detailStyle]="detailStyle"\r\n    nodeDetail="{{ templates.nodeDetail }}" edgeDetail="{{ templates.edgeDetail }}" nodePopover="{{ templates.nodePopover }}"\r\n    edgePopover="{{ templates.edgePopover }}" [forceAtlasDuration]="forceAtlasDuration" nodeSizeAttribute="\'volume\'" [startMaximized]="startMaximized"\r\n    [showMaximizeControl]="showMaximizeControl" socialChartContainer="social-chart-container" [options]="options" [chartTitle]="chartTitle"\r\n    [edgeWeightInfluence]="edgeWeightInfluence" [minLabels]="minLabels">\r\n  </ux-social-chart-ng1>\r\n</div>\r\n\r\n<div class="m-t m-b-sm">\r\n  <pre *ngIf="!api.selectedNode || !api.selectedNode.id">No node selected</pre>\r\n  <pre *ngIf="api.selectedNode && api.selectedNode.id">Selected: {{ api.selectedNode.label }}, with id {{ api.selectedNode.id }}</pre>\r\n</div>\r\n<div>\r\n  <pre *ngIf="!api.selectedEdge || !api.selectedEdge.id">No edge selected</pre>\r\n  <pre *ngIf="api.selectedEdge && api.selectedEdge.id">Selected: {{ api.selectedEdge.source }} to {{ api.selectedEdge.target }}</pre>\r\n</div>\r\n\r\n<div class="row">\r\n  <div class="m-b-sm col-md-6 col-sm-3">\r\n    <label>Select Node (by id): </label>\r\n\r\n    <div class="input-group">\r\n      <input type="text" class="form-control" [(ngModel)]="nodeIdInput" placeholder="e.g. 5">\r\n      <div class="input-group-btn">\r\n        <button type="button" class="btn button-secondary" (click)="api.setSelectedNodeById(nodeIdInput)">UPDATE</button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div class="m-b-sm col-md-6 col-sm-3">\r\n    <label>Select Edge (by id):</label>\r\n\r\n    <div class="input-group">\r\n      <input type="text" class="form-control" [(ngModel)]="edgeIdInput" placeholder="e.g. e15">\r\n      <div class="input-group-btn">\r\n        <button type="button" class="btn button-secondary" (click)="api.setSelectedEdgeById(edgeIdInput)">UPDATE</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>The <code>social-chart</code> directive accepts the following parameters:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">data</td>\r\n        <td>object</td>\r\n        <td>The data to be displayed in the chart.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">width</td>\r\n        <td>string</td>\r\n        <td>The dimensions of the chart container (all CSS dimension units accepted). Note that the containing element must have\r\n          specified dimensions in order to use percentage values.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">height</td>\r\n        <td>string</td>\r\n        <td>The dimensions of the chart container (all CSS dimension units accepted). Note that the containing element must have\r\n          specified dimensions in order to use percentage values.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">api</td>\r\n        <td>object</td>\r\n        <td>A host object for returned objects and functions.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">communities</td>\r\n        <td>object</td>\r\n        <td>A map of node types to colors and styles.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">detail-style</td>\r\n        <td>object</td>\r\n        <td>CSS styles to override the detail panel container styling.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">popover-style</td>\r\n        <td>object</td>\r\n        <td>CSS styles to override the popover panel container styling.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">node-detail</td>\r\n        <td>URL</td>\r\n        <td>The HTML template for the node detail panel.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">edge-detail</td>\r\n        <td>URL</td>\r\n        <td>The HTML template for the edge detail panel.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">node-popover</td>\r\n        <td>URL</td>\r\n        <td>The HTML template for the node popover panel.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">edge-popover</td>\r\n        <td>URL</td>\r\n        <td>The HTML template for the edge popover panel.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">force-atlas-duration</td>\r\n        <td>number</td>\r\n        <td>Time in milliseconds to run the ForceAtlas2 layout algorithm (default 1800).</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">node-size-attribute</td>\r\n        <td>expression</td>\r\n        <td>The node attribute to be used to calculate relative sizes (see below).</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">start-maximized</td>\r\n        <td>boolean</td>\r\n        <td>When true the chart will initially be shown full-screen.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">show-maximize-control</td>\r\n        <td>boolean</td>\r\n        <td>When true the fullscreen display toggle button will be shown.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">fullscreen-button-position</td>\r\n        <td>object</td>\r\n        <td>Override the placement of the fullscreen display toggle button (see below).</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">social-chart-container</td>\r\n        <td>string</td>\r\n        <td>Class name of the container element for full-screen display.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">local-strings</td>\r\n        <td>object</td>\r\n        <td>Localizable strings for internal control labels and tooltips (see below).</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">options</td>\r\n        <td>options</td>\r\n        <td>Additional configuration parameters.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">chart-title</td>\r\n        <td>object</td>\r\n        <td>Configuration options for the title which is displayed when the chart is fullscreen.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">edge-weight-influence</td>\r\n        <td>boolean</td>\r\n        <td>When true the edge weight will be taken into account when positioning the nodes (see layout section).</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">min-labels</td>\r\n        <td>number</td>\r\n        <td>When specified the chart will add labels to at least this many nodes where possible. If a node or edge has been selected\r\n          then only the nodes with focus are eligible to have labels added to them. Labels are added based on the node size,\r\n          with the largest getting labels added first. Nodes near the edges of the chart will also not get labels added to\r\n          them to ensure labels will be fully visible. For more control over when nodes should display labels use the <code>labelThreshold</code>          option.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The Social Chart is defined by the <code>social-chart</code> directive. The nodes should have a\r\n  <code>label</code> and <code>id</code> defined.</p>\r\n\r\n<tabset>\r\n  <tab heading="HTML">\r\n    <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n  </tab>\r\n\r\n  <tab heading="Javascript">\r\n    <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n  </tab>\r\n</tabset>\r\n\r\n<p>Nodes can also have the optional <code>community</code> attribute set, which should be a string corresponding to an entry\r\n  in the <code>communities</code> map passed to the directive (see below). Extra data properties can be set to the <code>additional</code>  property; this object will be copied to the nodes rendered in the chart, and so can contain any required information or\r\n  properties.</p>\r\n\r\n<p>The edges should have a <code>source</code> and <code>target</code> defined which should correspond to the ids of nodes.</p>\r\n\r\n<p>Edges may also have an optional <code>weight</code> property which should be an arbitrary value that represents the strength\r\n  of the relationship between the nodes that the edge connects. The higher the value the closer the nodes connected by that\r\n  edge will be positioned together where possible (see layout section).</p>\r\n\r\n<p>Edges will be assigned ids based on the order they arrive in the graph, prefixed with the letter ‘e’.</p>\r\n\r\n<uxd-snippet language="javascript" [code]="layoutJs"></uxd-snippet>\r\n\r\n<p>Edges also support the additional property described above.</p>\r\n\r\n<h4 id="api-object">Api Object</h4>\r\n\r\n<p>The API object is a host object that contains some properties and functions for the chart, and should be passed to the directive\r\n  with null properties for <code>selectedNode</code> and <code>selectedEdge</code>. These properties will be populated then\r\n  updated with values from the chart as the user interacts with it. Note the initial state of the graph should be set with\r\n  the methods below. When rendered, chart nodes will have the <code>getNeighbors</code> function available, which returns\r\n  a map of all the node’s 1st degree connections and their edges. Chart edges will have the <code>getSourceNode</code> and\r\n  <code>getTargetNode</code> functions available, which return node objects.</p>\r\n\r\n<p>The chart can be driven via two methods also exposed in this object - these functions are added to the supplied API object\r\n  after the chart is instantiated for use in the developer’s own controller context:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">setSelectedNodeById</td>\r\n        <td>function</td>\r\n        <td>Updates the currently selected node.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">SetSelectedEdgeById</td>\r\n        <td>function</td>\r\n        <td>Updates the currently selected edge.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>Node Ids are persisted from the original data source; edge Ids are generated based on the order the edges arrive in the graph\r\n  and prefixed with the letter ‘e’. Use of these methods is demonstrated below the chart on this page. The code for the two\r\n  text inputs is as shown, showing how to control the chart from an external controller:</p>\r\n\r\n<uxd-snippet language="html" [code]="apiHtml"></uxd-snippet>\r\n\r\n<p>To execute custom logic on the node, edge, or stage click events, the following functions should be set on the API object.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onNodeClick</td>\r\n        <td>function</td>\r\n        <td>Invoked with the selected/hovered node as a parameter.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onNodeHover</td>\r\n        <td>function</td>\r\n        <td>Invoked with the selected/hovered node as a parameter.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onEdgeClick</td>\r\n        <td>function</td>\r\n        <td>Invoked with the selected/hovered node as a parameter.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onEdgeHover</td>\r\n        <td>function</td>\r\n        <td>Invoked with the selected/hovered node as a parameter.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onStageClick</td>\r\n        <td>function</td>\r\n        <td>Invoked with no parameters.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onLoadComplete</td>\r\n        <td>function</td>\r\n        <td>Invoked with no parameters, when the graph is initially loaded and the initial layout algorithm has completed.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onToggleFullscreen</td>\r\n        <td>function</td>\r\n        <td>Invoked with no parameters when the fullscreen/standard toggle button is clicked, if this button is shown. <b>Important:</b>          this function should return a value:\r\n          <ul>\r\n            <li><code>true</code> - perform the default toggle between fullscreen and standard.</li>\r\n            <li><code>false</code> - do not perform the toggle.</li>\r\n          </ul>\r\n        </td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>To access external objects and API calls that may be required to populate on-demand values, remember that a function closure\r\n  will have access to its original context when executing. For example, if the API object was defined like this:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="apiJs"></uxd-snippet>\r\n\r\n<p>You can define the functions in the following way (this example uses random values in place of where you could perform API\r\n  calls):\r\n</p>\r\n\r\n<uxd-snippet language="javascript" [code]="clickJs"></uxd-snippet>\r\n\r\n<p>Functions defined in this way will have access to the context where you created the original “vm.api” object even when they\r\n  are executed in the context of the chart’s internal code.</p>\r\n\r\n<h4 id="chart-title">Chart Title</h4>\r\n\r\n<p>The chart title object contains the properties required for displaying the optional title when the social chart is fullscreen.</p>\r\n\r\n<p>The chart title will accept the following properties.</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">title</td>\r\n        <td>string</td>\r\n        <td>The initial title string which will be displayed before the chart has been used.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">timeout</td>\r\n        <td>number</td>\r\n        <td>The time in milliseconds before the title fades, if this is not defined the title will be permanently displayed.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">nodeSelectedTitle</td>\r\n        <td>string</td>\r\n        <td>\r\n          <p ng-non-bindable="">The string which will replace the title when a node is selected, <code ngNonBindable>{{ node }}</code> will be replaced by the\r\n            name of the currently selected node.</p>\r\n        </td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">edgeSelectedTitle</td>\r\n        <td>string</td>\r\n        <td>\r\n          <p ng-non-bindable="">The string which will replace the title when an edge is selected, <code ngNonBindable>{{ source }}</code> and <code ngNonBindable>{{ target }}</code>            will be replaced by the name of the source and target nodes.</p>\r\n        </td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">stageSelectedTitle</td>\r\n        <td>string</td>\r\n        <td>The string which will replace the title when the stage is clicked.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<uxd-snippet language="javascript" [code]="titleJs"></uxd-snippet>\r\n\r\n<h4 id="communities">Communities</h4>\r\n\r\n<p>Communities allow styles and colors to be set for groups of nodes. The default render will be a solid fill in the default\r\n  chart color; here this can be changed to any color and to a stroke style. An example community is shown:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="communitiesJs"></uxd-snippet>\r\n\r\n<p>Nodes which should receive this style should have a <code>community</code> attribute set to example_group_1. The <code>color</code>  attribute can be any CSS color value, and the <code>style</code> attribute can be set to <code>stroke</code> or <code>fill</code>  (the default).\r\n</p>\r\n\r\n<h4 id="detail-and-popover-templates">Detail and Popover Templates</h4>\r\n\r\n<p>The HTML templates set to the node and edge detail parameters will be used to display the detail panels for selected nodes\r\n  and edges. The templates bound here will have access to the <code>sc.selectedNode</code> and\r\n  <code>sc.selectedEdge</code> values. The popover is shown when hovering a node or edge and has access to the <code>sc.hoveredItem</code>  value, which will be an edge or node object.</p>\r\n\r\n<p>These templates are optional, however the callbacks described above for selection and hover events will be fired whether\r\n  these templates are supplied or not. The Detail Panels have a small “close” button in the top right-hand corner, when this\r\n  is clicked, the selected node or edge will be deselected. To remove this button, pass an <code>option</code> object to\r\n  the directive with the <code>showDetailCloseButton</code> flag set to false.</p>\r\n\r\n<h4 id="detail-and-popover-style">Detail and Popover Style</h4>\r\n\r\n<p>The templates supplied for both the Detail Panels and the Popover Panels will be fit inside containers. To override the styles\r\n  of these containers use the <code>detail-style</code> parameter for the Detail Panels and the\r\n  <code>popover-style</code> parameter for the Popover Panels:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="stylesJs"></uxd-snippet>\r\n\r\n<h4 id="tooltips">Tooltips</h4>\r\n\r\n<p>The chart contains some tooltips which are rendered internally. In order to localize the text displayed here, pass the\r\n  <code>local-strings</code> parameter. This should be an object map of keys to localized strings. The following properties\r\n  can be mapped:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">title</td>\r\n        <td>string</td>\r\n        <td>The name of your chart; defaults to "Entire Network" in English.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">reset</td>\r\n        <td>string</td>\r\n        <td>Localized string for English word "reset".</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">zoomIn</td>\r\n        <td>string</td>\r\n        <td>Localized string for English phrase "Zoom In".</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">zoomOut</td>\r\n        <td>string</td>\r\n        <td>Localized string for English phrase "Zoom Out".</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<h4 id="initial-state">Initial State</h4>\r\n\r\n<p>The initial state of the graph will be zoomed to show all nodes. The <code>onLoadComplete</code> API call is available for\r\n  changing this behaviour. For example, to start the graph with a particular node selected, the following code could be used:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="stateJs"></uxd-snippet>\r\n\r\n<h4 id="full-screen-mode">Full Screen Mode</h4>\r\n\r\n<p>To allow a Social Chart to be maximized, a container must be specified. To identify the container, set the <code>social-chart-container</code>  attribute on the directive to be the string name of a class and set that class on a page element. It is recommended that\r\n  it be applied to the <code>div</code> element containing the main page content (which will often have the class <code>wrapper-content</code>),\r\n  this way any navigation, headers or toolbars will not be obstructed. The container will be used to position the Social\r\n  Chart on the page, but the width and height will grow to fill the page. The chart size can then be toggled via a button\r\n  which will be presented near the top-right of the render area when the <code>show-maximize-control</code> attribute is\r\n  passed as <code>true</code>. By default, the chart does not open in its maximized appearance - you can change this behaviour\r\n  by setting the <code>start-maximized</code> attribute to <code>true</code>.</p>\r\n\r\n<p>To perform custom logic when this button is pressed, including disabling the standard fullscreen/standard view toggle behaviour\r\n  whilst using the button for another purpose, see the optional <code>onToggleFullscreen</code> described above.</p>\r\n\r\n<p>By default the button will appear in the top-right; to control the placement of this, pass the <code>fullscreen-button-position</code>  attribute. This should be an object with a definition for one or both of <code>maximize</code> (i.e. the button that switches\r\n  to fullscreen) and <code>minimize</code> (the button that switches from fullscreen back to the standard view). CSS Positioning\r\n  values should be used, as the button will be absolutely positioned. An example is given below:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="buttonsJs"></uxd-snippet>\r\n\r\n<p>This example uses <code>%</code> but other units are also acceptable.</p>\r\n\r\n<h4 id="rendering">Rendering</h4>\r\n\r\n<p>By default, nodes will be rendered at a size based on their degree. If a node contains a value for the <code>size</code>  property, this will be used instead.</p>\r\n\r\n<p>If the <code>node-size-attribute</code> parameter is passed to the directive, the <code>additional</code> property of each\r\n  node will be inspected for a numerical property of this name. Note that the value passed to this parameter should be an\r\n  expression (i.e. resolving to a property on your controller); to pass a string directly in the HTML where the directive\r\n  is instantiated, wrap it in a second set of alternate quotation marks. The sizes of the nodes will then be interpolated\r\n  between a minimum and maximum size, based on the value of this property. The minimum and maximum sizes should be configured\r\n  via the <code>options</code> parameter of the directive, using the <code>minNodeSize</code> and <code>maxNodeSize</code>  properties respectively. These are set to 0 and 8 by default. If both are set to 0, then the calculated size of the node\r\n  will be used without interpolation.</p>\r\n\r\n<p>The <code>labelThreshold</code> property can also be set using the <code>options</code> object, and determines how large\r\n  a node should be to have its label displayed. This is relative to the camera zoom level and defaults to 7.</p>\r\n\r\n<p>When a node is selected, the camera will attempt to pan so that this node is centred in the viewport and the majority of\r\n  the 1st degree nodes remain visible. You can adjust this behaviour by setting the <code>adjustCameraCenter</code> property\r\n  on the <code>options</code> object (default: true). The camera position when a node is selected will then be translated\r\n  according to the container size and the current camera zoom level, and can be further adjusted via a value supplied as\r\n  <code>cameraCenterOffset</code> in the <code>options</code>.</p>\r\n\r\n<h4 id="layout">Layout</h4>\r\n\r\n<p>By default the layout of the graph is calculated using the ForceAtlas2 algorithm. This algorithm does not have a natural\r\n  termination point, so must be stopped manually after a period of time. The <code>force-atlas-duration</code> attribute\r\n  determines how long the chart will render before it is shown. For larger charts, higher values should be used to ensure\r\n  an evenly spaced appearance. The default is 1800 (milliseconds).</p>\r\n\r\n<p>When a node is selected, the selected node and all 1st degree neighbor nodes will be highlighted. The layout of these neighboring\r\n  nodes can be configured using the <code>neighborViewOnSelect</code> property of the <code>options</code> object. The possible\r\n  values are:</p>\r\n\r\n<ul>\r\n  <li>\r\n    <p><code>true</code> - The 1st degree neighbors will be arranged in an ellipse around the selected node, fitting to the\r\n      viewport. The camera will be centred on the selected node, and the camera zoom level will be the same for all nodes.\r\n      This is the default behaviour.</p>\r\n  </li>\r\n  <li>\r\n    <p><code>false</code> - The node positions remain unchanged when a node is selected. The camera will be centred on the selected\r\n      node, but the zoom level will be adjusted to present as many 1st degree neighbors as possible.\r\n    </p>\r\n  </li>\r\n</ul>\r\n\r\n<p>Additionally the layout can be influenced by edge weights. This will position the nodes with the largest weights closer to\r\n  each other where possible. Depending on the number of nodes in the chart increasing the <code>force-atlas-duration</code>  may improve the layout. To utilize this layout option a <code>weight</code> property should be added to edges:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="layoutJs"></uxd-snippet>\r\n\r\n<p>If no weight property is given to an edge it will be assumed to have a weight of zero. Finally the <code>edge-weight-influence</code>  attribute needs to be set to a value of <code>true</code>.</p>\r\n\r\n<p>The different layouts can be seen below:</p>\r\n\r\n<div class="social-sreenshot-container">\r\n  <div class="screenshot">\r\n    <img src="'+e(1645)+'" width="350" height="350">\r\n    <p class="m-t-sm">Regular Force Atlas Layout</p>\r\n  </div>\r\n  <div class="screenshot">\r\n    <img src="'+e(1646)+'" width="350" height="350">\r\n    <p class="m-t-sm">Edge Weight Influence Enabled</p>\r\n  </div>\r\n</div>\r\n\r\n<blockquote>\r\n  <p><strong>Note</strong>: Refer to <a href="https://github.com/jacomyal/sigma.js/wiki/Settings">Sigma JS</a> for more options.</p>\r\n</blockquote>'},1663:function(t,r){t.exports='<div class="row">\r\n\r\n    <ux-spark-ng1 [type]="charts[0].type" [value]="charts[0].value" [fillheight]="charts[0].fillHeight" [topLeftLabel]="charts[0].topLeftLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5" sparkTooltip="{{ charts[0].tooltip }}"></ux-spark-ng1>\r\n\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n\r\n    <ux-spark-ng1 [type]="charts[1].type" [value]="charts[1].value" [fillheight]="charts[1].fillHeight" [inlineLabel]="charts[1].inlineLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5"></ux-spark-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="row">\r\n\r\n    <ux-spark-ng1 [type]="charts[2].type" [value]="charts[2].value" [fillheight]="charts[2].fillHeight" [topLeftLabel]="charts[2].topLeftLabel"\r\n        [bottomLeftLabel]="charts[2].bottomLeftLabel" class="col-md-5 col-sm-5 col-xs-5" sparkTooltip="{{ charts[2].tooltip }}"></ux-spark-ng1>\r\n\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n\r\n    <ux-spark-ng1 [type]="charts[3].type" [value]="charts[3].value" [fillheight]="charts[3].fillHeight" [inlineLabel]="charts[3].inlineLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5" [topLeftLabel]="charts[3].topLeftLabel"></ux-spark-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="row">\r\n    <ux-spark-ng1 [type]="charts[4].type" [value]="charts[4].value" [fillheight]="charts[4].fillHeight" [topLeftLabel]="charts[4].topLeftLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5"></ux-spark-ng1>\r\n\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n\r\n    <ux-spark-ng1 [type]="charts[5].type" [value]="charts[5].value" [fillheight]="charts[5].fillHeight" [topLeftLabel]="charts[5].topLeftLabel"\r\n        [bottomLeftLabel]="charts[5].bottomLeftLabel" [topRightLabel]="charts[5].topRightLabel" [bottomRightLabel]="charts[5].bottomRightLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5"></ux-spark-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="row">\r\n\r\n    <ux-spark-ng1 [type]="charts[6].type" [value]="charts[6].value" [fillheight]="charts[6].fillHeight" [topLeftLabel]="charts[6].topLeftLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5"></ux-spark-ng1>\r\n\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n\r\n    <ux-spark-ng1 [type]="charts[7].type" [value]="charts[7].value" [fillheight]="charts[7].fillHeight" [topLeftLabel]="charts[7].topLeftLabel"\r\n        [bottomLeftLabel]="charts[7].bottomLeftLabel" [topRightLabel]="charts[7].topRightLabel" [bottomRightLabel]="charts[7].bottomRightLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5"></ux-spark-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>Spark Line indicator can be created using the <code>spark</code> directive. The attributes of the spark line are explained\r\n    below:\r\n</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">type</td>\r\n                <td>string</td>\r\n                <td>Defines the class name that is used to specify the spark line color.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">value</td>\r\n                <td>number</td>\r\n                <td>Indicates the current value of the spark line (progress).</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">fillheight</td>\r\n                <td>number</td>\r\n                <td>Indicates the current value of the spark fill (height).</td>\r\n                <td>false</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">inlineLabel</td>\r\n                <td>HTML</td>\r\n                <td>Defines the spark line label and works if inline.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">top</td>\r\n                <td>number</td>\r\n                <td>Indicates the top margin alignment of the spark line.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">topLeftLabel</td>\r\n                <td>string</td>\r\n                <td>Defines the top left label value.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">topRightLabel</td>\r\n                <td>string</td>\r\n                <td>Defines the top right label value.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">bottomLeftLabel</td>\r\n                <td>string</td>\r\n                <td>Defines the bottom left label value.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">bottomRightLabel</td>\r\n                <td>string</td>\r\n                <td>Defines the bottom right label value.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-tooltip</td>\r\n                <td>string</td>\r\n                <td>Defines the value of the tooltip on the spark chart.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n\r\n<p>You can also create your own class to use for the spark colors. Name your class and specify a <code>background-color</code>.\r\n    Within this class you must specify a <code>fill</code> class which also has a <code>background-color</code> set as the\r\n    fill for the spark chart. See an example below:</p>\r\n\r\n<tabset>\r\n    <tab heading="HTML">\r\n        <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="Javascript">\r\n        <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n    </tab>\r\n\r\n    <tab heading="CSS">\r\n        <uxd-snippet language="css" [code]="cssCode"></uxd-snippet>\r\n    </tab>\r\n</tabset>\r\n\r\nMultiline tooltips can be added to the Spark Line indicator using the `spark-tooltip` attribute to the spark directive.\r\n\r\n<uxd-snippet language="html" [code]="tooltipsHtml"></uxd-snippet>\r\n\r\n<p>Colors are defined from the set of chart colors and the pre-defined class choices are as follows:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n    <table class="table">\r\n        <tbody>\r\n            <tr>\r\n                <th>Property</th>\r\n                <th>Type</th>\r\n                <th>Description</th>\r\n                <th>Optional</th>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-chart1</td>\r\n                <td>color</td>\r\n                <td>@chart1 fill, 0.1 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-chart2</td>\r\n                <td>color</td>\r\n                <td>@chart2 fill, 0.2 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-chart3</td>\r\n                <td>color</td>\r\n                <td>@chart3 fill, 0.2 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-chart4</td>\r\n                <td>color</td>\r\n                <td>@chart4 fill, 0.2 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-chart5</td>\r\n                <td>color</td>\r\n                <td>@chart5 fill, 0.2 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-chart6</td>\r\n                <td>color</td>\r\n                <td>@chart6 fill, 0.2 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-ok</td>\r\n                <td>color</td>\r\n                <td>@ok fill, 0.25 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-warning</td>\r\n                <td>color</td>\r\n                <td>@warning fill, 0.25 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n            <tr>\r\n                <td class="attribute">spark-critical</td>\r\n                <td>color</td>\r\n                <td>@critical fill, 0.25 background opacity.</td>\r\n                <td>true</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>'},1664:function(t,r){t.exports='<div class="flot-chart-timeline">\r\n  <ux-flot-ng1 [dataset]="timelineData" [options]="timelineOptions"></ux-flot-ng1>\r\n</div>\r\n\r\n<div class="flot-chart">\r\n  <ux-flot-ng1 [dataset]="detailedData" [options]="detailedOptions"></ux-flot-ng1>\r\n</div>\r\n\r\n<hr>\r\n\r\n<p>Timeline Charts are defined by the <code>flot</code> directive. The dataset and options attributes define the chart data\r\n  and options respectively. Dataset and Options are defined within the TimelineChartCtrl.</p>\r\n\r\n<tabset>\r\n  <tab heading="HTML">\r\n    <uxd-snippet language="html" [code]="htmlCode"></uxd-snippet>\r\n  </tab>\r\n\r\n  <tab heading="Javascript">\r\n    <uxd-snippet language="javascript" [code]="jsCode"></uxd-snippet>\r\n  </tab>\r\n</tabset>\r\n\r\n<p>The <code>lineDataService</code> can be used to add zero-points to the data. This makes the y coordinates as zero when there\r\n  is no data within a specified offset and the graph will lie at the x-axis within this interval.</p>\r\n\r\n<p>The <code>lineDataService</code> contains the method <code>addZeroPoints</code> which should be called to add the zero points\r\n  to the data. This method accepts two parameters:</p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">datapoints</td>\r\n        <td>number or array</td>\r\n        <td>Returns data points with the zero points added. The returned data is an array of coordinates.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">offset</td>\r\n        <td>number</td>\r\n        <td>The zero points are added if there is an interval between the coordinates greater than the offset value passed. The\r\n          default offset value is 1.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>An example of how the <code>lineDataService</code> can be used in the controller is shown below:</p>\r\n\r\n<uxd-snippet language="javascript" [code]="serviceJs"></uxd-snippet>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">data</td>\r\n        <td>number or array</td>\r\n        <td>It is an array of coordinates in Timeline Chart. E.g. [ [x1, y1], [x2, y2], ... ]</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">lines</td>\r\n        <td>object</td>\r\n        <td>Defines the parameters of the axis line.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>lines.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">show</td>\r\n        <td>boolean</td>\r\n        <td>If set to true displays the chart.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">fill</td>\r\n        <td>boolean or number</td>\r\n        <td>If set to true fills the chart with colors in the fillColors property. A number between 0 and 1 defines the opacity\r\n          of the fill.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">fillColor</td>\r\n        <td>array(colors)</td>\r\n        <td>Specifies the colors of the fill. If more than one color is specified this will produce a gradient.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">lineWidth</td>\r\n        <td>number</td>\r\n        <td>Defines the thickness of the line or outline in pixels.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">shadowSize</td>\r\n        <td>number</td>\r\n        <td>Default size of shadows in pixels. Set it to 0 to remove shadows.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">xaxes</td>\r\n        <td>array</td>\r\n        <td>Defines if more than one x-axis is used.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">yaxes</td>\r\n        <td>array</td>\r\n        <td>Defines if more than one y-axis is used.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">timeline</td>\r\n        <td>array</td>\r\n        <td>Helps configure the selection area on the chart.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>xaxes.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">mode</td>\r\n        <td>null or time</td>\r\n        <td>Defines how data is represented on the x-axes.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">min</td>\r\n        <td>number</td>\r\n        <td>Defines the minimum value of the x-axis.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">max</td>\r\n        <td>number</td>\r\n        <td>Defines the maximum value of the x-axis.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">tickColor</td>\r\n        <td>null or string(color)</td>\r\n        <td>Specifies the colors of the ticks in the x-axis.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>yaxes.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">show</td>\r\n        <td>boolean</td>\r\n        <td>If set to true displays the axis.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">min</td>\r\n        <td>number</td>\r\n        <td>Defines the minimum value of the y-axis.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">max</td>\r\n        <td>number</td>\r\n        <td>Defines the maximum value of the y-axis.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>timeline.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">color</td>\r\n        <td>string</td>\r\n        <td>Specifies the color of the selected area.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">start</td>\r\n        <td>number</td>\r\n        <td>Defines the position on the x axis that the selection should initially start.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">end</td>\r\n        <td>number</td>\r\n        <td>Defines the position on the x axis that the selection should initially end.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">keyboardNavigation</td>\r\n        <td>boolean</td>\r\n        <td>Defines if arrow keys are allowed to move selected area.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">enabled</td>\r\n        <td>boolean</td>\r\n        <td>If set to true this will enable selection on the grid.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">zoom</td>\r\n        <td>array</td>\r\n        <td>Helps configure chart zooming.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">dragHandles</td>\r\n        <td>array</td>\r\n        <td>This helps configure the handles on either end of the selection that the user can drag.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">callback</td>\r\n        <td>functional</td>\r\n        <td>This will be called whenever the selected range changes. It should accept one argument that will be an object containing\r\n          two values.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>zoom.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">enabled</td>\r\n        <td>boolean</td>\r\n        <td>Defines if chart should zoom when the range is changed.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">minimumRange</td>\r\n        <td>number</td>\r\n        <td>Defines the smallest range the chart will allow to be selected.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>dragHandles.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">width</td>\r\n        <td>number</td>\r\n        <td>Defines the width of the handles.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">color</td>\r\n        <td>string</td>\r\n        <td>Defines the color of the handles.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">tooltips</td>\r\n        <td>array</td>\r\n        <td>Helps configure tooltips on the selection region.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">tooltipFormatter</td>\r\n        <td>function</td>\r\n        <td>Use this function to define the tooltip text. It should accept one parameter which will be the value on the x axis\r\n          and should return a string.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>tooltips.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">enabled</td>\r\n        <td>boolean</td>\r\n        <td>If set to true shows the tooltip on the selection region based on the onHover, onDrag and onDrag options.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onHover</td>\r\n        <td>boolean</td>\r\n        <td>If set to true the tooltip will show when the cursor is over the selection region.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onDrag</td>\r\n        <td>boolean</td>\r\n        <td>If set to true the tooltip will show when the selection region is being dragged/resized.</td>\r\n        <td>true</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">onDragEnd</td>\r\n        <td>boolean</td>\r\n        <td>If set to true the tooltip will show when the chart has finished being dragged/resized but the mouse is still pressed.</td>\r\n        <td>true</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<p>The following attributes should be defined within <code>callback.</code></p>\r\n\r\n<div class="demo-attributes table-responsive">\r\n  <table class="table">\r\n    <tbody>\r\n      <tr>\r\n        <th>Property</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Optional</th>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">start</td>\r\n        <td>number</td>\r\n        <td>The position on the x-axis where the selected area starts.</td>\r\n        <td>false</td>\r\n      </tr>\r\n      <tr>\r\n        <td class="attribute">end</td>\r\n        <td>number</td>\r\n        <td>The position on the x-axis where the selected area ends.</td>\r\n        <td>false</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>\r\n\r\n<blockquote>\r\n  <p><strong>Note</strong>: Refer to the <a routerLink="/charts/flot-options">Flot Options</a> page for details of chart options.</p>\r\n</blockquote>\r\n\r\n<p>It may be desirable to rescale the Y axis on the detailed chart to show a more appropriate scale based on the new range of\r\n  data being displayed. The following function has been designed to work with the above sample code and the function should\r\n  be called after the chart range has been changed.</p>\r\n\r\n<uxd-snippet language="javascript" [code]="rescaleJs"></uxd-snippet>\r\n\r\n<blockquote>\r\n  <p><strong>Note</strong>: Refer to the <a routerLink="/components/facets">Facets</a> page to see an example of Y axis rescaling.\r\n    This is seen in the Line Chart Example with Facet Panel.</p>\r\n</blockquote>'},1891:function(t,r){t.exports='<span tabindex="0" class="sr-only">\r\n    <span ng-repeat="item in bc.barChart.data[0].data">{{item[1]}},</span>\r\n</span>'},1892:function(t,r){t.exports='<div class="flot-chart">\r\n    <flot dataset="bc.data" options="bc.options" on-plot-click="bc.barChart.onPlotClick(event,pos,item)"\r\n        on-hover-click="bc.barChart.onPlotHover(event,pos,item)">\r\n    </flot>\r\n</div>'},1893:function(t,r){t.exports="angular.module(\"app\").controller(\"BarChartCtrl\", BarChartCtrl);\r\n\r\nBarChartCtrl.$inject = ['$colorService'];\r\n\r\nfunction BarChartCtrl($colorService) {\r\n    var bc = this;\r\n\r\n    bc.data = [{\r\n        label: 'bar',\r\n        data: [\r\n            [1, 34],\r\n            [2, 25],\r\n            [3, 19],\r\n            [4, 34],\r\n            [5, 32],\r\n            [6, 44]\r\n        ],\r\n        forecastData: [\r\n            [7, 50],\r\n            [8, 67]\r\n        ]\r\n    }];\r\n\r\n    bc.options = {\r\n        series: {\r\n            bars: {\r\n                show: true,\r\n                fill: true,\r\n                fillColor: {\r\n                    colors: [{\r\n                        opacity: 0.1\r\n                    }, {\r\n                        opacity: 0.1\r\n                    }]\r\n                },\r\n                barWidth: 0.5,\r\n                lineWidth: 1,\r\n                align: 'center'\r\n            },\r\n            highlightColor: $colorService.getColor(\"chart1\").setAlpha(0.2).toRgba(),\r\n            forecastFillColor: $colorService.getColor(\"chart1\").setAlpha(0.3).toRgba(),\r\n            forecastColor: $colorService.getColor(\"chart1\").setAlpha(0.8).toRgba(),\r\n            forecastHighLightColor: $colorService.getColor(\"chart1\").setAlpha(0.2).toRgba(),\r\n            forecastDashStyle: [5]\r\n        },\r\n        xaxis: {\r\n            tickDecimals: 0,\r\n            color: $colorService.getColor(\"secondary\").toHex(),\r\n            ticks: [\r\n                [1, '.doc'],\r\n                [2, '.ppt'],\r\n                [3, '.pdf'],\r\n                [4, '.xls'],\r\n                [5, '.html'],\r\n                [6, '.txt'],\r\n                [7, '.csv'],\r\n                [8, '.mht']\r\n            ]\r\n\r\n        },\r\n        colors: [$colorService.getColor('primary').toRgb()],\r\n        grid: {\r\n            color: $colorService.getColor('grey4').toHex(),\r\n            hoverable: true,\r\n            clickable: true,\r\n            borderWidth: {\r\n                left: 1,\r\n                bottom: 1,\r\n                right: 0,\r\n                top: 0\r\n            },\r\n            borderColor: {\r\n                left: $colorService.getColor(\"grey2\").setAlpha(0.5).toRgba(),\r\n                bottom: $colorService.getColor(\"grey2\").setAlpha(0.5).toRgba()\r\n            }\r\n        },\r\n        legend: {\r\n            show: false\r\n        },\r\n        tooltip: {\r\n            show: true,\r\n            shifts: {\r\n                x: 0,\r\n                y: -30\r\n            },\r\n            content: function (label, xval, yval) {\r\n                var content = 'x: ' + '%x' + ', y: ' + yval;\r\n                return content;\r\n            }\r\n        }\r\n    };\r\n}"},1894:function(t,r){t.exports='<div class="flot-chart">\r\n    <flot dataset="bc.horizbarChart.data" options="bc.horizbarChart.baroptions" on-plot-click="bc.horizbarChart.onPlotClick(event,pos,item)"\r\n        on-hover-click="bc.horizbarChart.onPlotHover(event,pos,item)"></flot>\r\n</div>'},1895:function(t,r){t.exports="angular.module(\"app\").controller(\"HorizontalBarChartCtrl\", HorizontalBarChartCtrl);\r\n\r\nHorizontalBarChartCtrl.$inject = ['$colorService'];\r\n\r\nfunction HorizontalBarChartCtrl($colorService) {\r\n    var bc = this;\r\n\r\n    bc.horizbarChart = {\r\n        data: [{\r\n            label: 'bar',\r\n            data: [\r\n                [34, 1],\r\n                [25, 2],\r\n                [19, 3],\r\n                [34, 4],\r\n                [32, 5],\r\n                [44, 6]\r\n            ]\r\n        }],\r\n        baroptions: {\r\n            series: {\r\n                bars: {\r\n                    show: true,\r\n                    fill: true,\r\n                    fillColor: {\r\n                        colors: [{\r\n                            opacity: 0.1\r\n                        }, {\r\n                            opacity: 0.1\r\n                        }]\r\n                    },\r\n                    barWidth: 0.5,\r\n                    lineWidth: 1,\r\n                    horizontal: true,\r\n                    align: 'center'\r\n                },\r\n                highlightColor: [$colorService.getColor(\"chart1\").setAlpha(0.2).toRgba()],\r\n                valueLabels: {\r\n                    show: true,\r\n                    valign: 'top',\r\n                    plotAxis: 'y',\r\n                    xoffset: -30,\r\n                    yoffset: -5,\r\n                    font: '13px \\'Source Sans Pro\\'',\r\n                    fontcolor: '#545454',\r\n                    labelFormatter: function (v) {\r\n                        var ticks = ['.doc', '.ppt', '.pdf', '.xls', '.html', '.txt'];\r\n                        return ticks[parseInt(v) - 1];\r\n                    }\r\n                }\r\n            },\r\n            xaxis: {\r\n                tickDecimals: 0,\r\n                color: [$colorService.getColor(\"secondary\").toHex()]\r\n            },\r\n            yaxis: {\r\n                ticks: []\r\n            },\r\n            colors: [$colorService.getColor(\"chart1\").toRgb()],\r\n            grid: {\r\n                color: [$colorService.getColor('grey4').toHex()],\r\n                hoverable: true,\r\n                clickable: true,\r\n                borderWidth: {\r\n                    left: 1,\r\n                    bottom: 1,\r\n                    right: 0,\r\n                    top: 0\r\n                },\r\n                borderColor: {\r\n                    left: [$colorService.getColor(\"grey1\").setAlpha(0.2).toRgba()],\r\n                    bottom: [$colorService.getColor(\"grey1\").setAlpha(0.2).toRgba()]\r\n                }\r\n            },\r\n            legend: {\r\n                show: false\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -38\r\n                },\r\n                content: function (label, xval, yval) {\r\n                    var ticks = ['.doc', '.ppt', '.pdf', '.xls', '.html', '.txt'];\r\n                    return 'x: ' + xval + ', y: ' + ticks[parseInt(yval) - 1];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n}"},1896:function(t,r){t.exports='<span tabindex="0" class="sr-only">\r\n    <span ng-repeat="item in bc.stackChart.data[0].data">{{item[1]}},</span>\r\n</span>'},1897:function(t,r){t.exports='<div class="flot-chart-stack">\r\n    <flot dataset="bc.stackBarChart.data" options="bc.stackBarChart.stackoptions" on-plot-click="bc.stackBarChart.onPlotClick(event, pos, item)"\r\n        on-hover-click="bc.stackBarChart.onPlotHover(event, pos, item)"></flot>\r\n</div>'},1898:function(t,r){t.exports='angular.module("app").controller("StackedBarChartCtrl", StackedBarChartCtrl);\r\n\r\nStackedBarChartCtrl.$inject = ["$colorService"];\r\n\r\nfunction StackedBarChartCtrl($colorService) {\r\n\r\n    var bc = this;\r\n\r\n    var flotChartColors = {\r\n        chartColor1: $colorService.getColor("chart1").setAlpha(0.7).toRgba(),\r\n        chartColor2: $colorService.getColor("chart2").setAlpha(0.7).toRgba(),\r\n        chartColor3: $colorService.getColor("chart3").setAlpha(0.7).toRgba(),\r\n        chartHover1: $colorService.getColor("chart1").setAlpha(0.2).toRgba(),\r\n        chartHover2: $colorService.getColor("chart2").setAlpha(0.3).toRgba(),\r\n        chartHover3: $colorService.getColor("chart3").setAlpha(0.3).toRgba(),\r\n        forecastColor1: $colorService.getColor("chart1").setAlpha(0.3).toRgba(),\r\n        forecastColor2: $colorService.getColor("chart2").setAlpha(0.2).toRgba(),\r\n        forecastColor3: $colorService.getColor("chart3").setAlpha(0.2).toRgba(),\r\n        gridColor: $colorService.getColor("grey4").toHex(),\r\n        tickColor: $colorService.getColor("grey6").toHex(),\r\n        transparent: "rgba(0, 0, 0, 0)",\r\n        borderColor: $colorService.getColor("grey2").toHex()\r\n    };\r\n\r\n    var d1 = [],\r\n        d2 = [],\r\n        d3 = [],\r\n        fd1 = [],\r\n        fd2 = [],\r\n        fd3 = [];\r\n\r\n    for (var i = 1; i <= 10; i += 1) {\r\n        d1.push([i, parseInt(Math.random() * 10000)]);\r\n        d2.push([i, parseInt(Math.random() * 10000)]);\r\n        d3.push([i, parseInt(Math.random() * 10000)]);\r\n    }\r\n\r\n    for (i = 11; i <= 13; i++) {\r\n        fd1.push([i, parseInt(Math.random() * 10000)]);\r\n        fd2.push([i, parseInt(Math.random() * 10000)]);\r\n        fd3.push([i, parseInt(Math.random() * 10000)]);\r\n    }\r\n\r\n    function euroFormatter(v, axis) {\r\n        return v.toFixed(axis.tickDecimals) + "€";\r\n    }\r\n\r\n    bc.stackBarChart = {\r\n        data: [{\r\n            label: "Sales 1",\r\n            data: d1,\r\n            color: [flotChartColors.chartColor1],\r\n            highlightColor: [flotChartColors.chartHover1],\r\n            forecastData: fd1,\r\n            forecastFillColor: [flotChartColors.forecastColor1],\r\n            forecastColor: [flotChartColors.chartColor1],\r\n            forecastHighLightColor: [flotChartColors.chartHover1],\r\n            forecastDashStyle: [5]\r\n        }, {\r\n            label: "Sales 2",\r\n            data: d2,\r\n            color: [flotChartColors.chartColor2],\r\n            highlightColor: [flotChartColors.chartHover2],\r\n            forecastData: fd2,\r\n            forecastFillColor: [flotChartColors.forecastColor2],\r\n            forecastColor: [flotChartColors.chartColor2],\r\n            forecastHighLightColor: [flotChartColors.chartColor2],\r\n            forecastDashStyle: [5]\r\n        }, {\r\n            label: "Sales 3",\r\n            data: d3,\r\n            color: [flotChartColors.chartColor3],\r\n            highlightColor: [flotChartColors.chartHover3],\r\n            forecastData: fd3,\r\n            forecastFillColor: [flotChartColors.forecastColor3],\r\n            forecastColor: [flotChartColors.chartColor3],\r\n            forecastHighLightColor: [flotChartColors.chartHover3],\r\n            forecastDashStyle: [5]\r\n        }],\r\n        stackoptions: {\r\n            series: {\r\n                stack: true,\r\n                bars: {\r\n                    show: true,\r\n                    barWidth: 0.6,\r\n                    lineWidth: 0,\r\n                    align: "center"\r\n                }\r\n            },\r\n            xaxis: {\r\n                tickColor: "transparent"\r\n            },\r\n            yaxis: {\r\n                tickFormatter: euroFormatter\r\n            },\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                hoverable: true,\r\n                clickable: true,\r\n                tickcolor: [flotChartColors.tickColor],\r\n                borderWidth: {\r\n                    "left": 1,\r\n                    "bottom": 1,\r\n                    "right": 0,\r\n                    "top": 0\r\n                },\r\n                borderColor: {\r\n                    "left": [flotChartColors.borderColor],\r\n                    "bottom": [flotChartColors.borderColor]\r\n                }\r\n            },\r\n            legend: {\r\n                show: true,\r\n                container: "#legendHolderBar",\r\n                noColumns: 0\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -44\r\n                },\r\n                content: "<strong>%s</strong><br/><span class=\\"font-size-small\\"> %y in cycle %x</span>"\r\n            }\r\n        }\r\n    };\r\n}'},1899:function(t,r){t.exports="#legendHolderBar {\r\n    margin-left: 33%;\r\n}\r\n\r\n#legendHolderBar .legendLabel {\r\n    padding-right:40px;\r\n    font-size:16px;\r\n    padding-left: 6px;\r\n}\r\n\r\n#legendHolderBar .legendColorBox > div {\r\n    border: 0px !important;\r\n}\r\n\r\n#legendHolderBar .legendColorBox > div > div {\r\n    opacity:0.5;\r\n}"},1900:function(t,r){t.exports='<div class="flot-chart-stack">\r\n    ...\r\n</div>\r\n<div id="legendHolderBar" class="p-l-lg"></div>'},1901:function(t,r){t.exports='...\r\nlegend: {\r\n    show: true,\r\n    container:"#legendHolderBar",\r\n    noColumns: 0\r\n},\r\n...'},1902:function(t,r){t.exports='<span tabindex="2" class="sr-only">\r\n  <span ng-repeat="item in dc.donutChart.data">{{item.label}},{{item.data}},</span>\r\n</span>'},1903:function(t,r){t.exports='<div class="flot-chart">\r\n    <flot dataset="dc.donutChart.data" options="dc.donutChart.options" on-plot-click="dc.donutChart.onPlotClick(event,pos,item)"\r\n        on-hover-click="dc.donutChart.onPlotHover(event,pos,item)">\r\n    </flot>\r\n</div>'},1904:function(t,r){t.exports="angular.module('app').controller('DonutChartCtrl', DonutChartCtrl);\r\n\r\nDonutChartCtrl.$inject = ['$colorService'];\r\n\r\nfunction DonutChartCtrl($colorService) {\r\n\r\n    var dc = this;\r\n\r\n    var flotChartColors = {\r\n        chartColor1: $colorService.getColor('chart1').toRgb(),\r\n        chartColor2: $colorService.getColor('chart2').toRgb(),\r\n        chartColor3: $colorService.getColor('chart3').toRgb(),\r\n        chartColor4: $colorService.getColor('chart4').toRgb(),\r\n        chartColor5: $colorService.getColor('chart5').toRgb(),\r\n        chartHover1: $colorService.getColor('chart1').setAlpha(0.2).toRgba(),\r\n        chartHover2: $colorService.getColor('chart2').setAlpha(0.3).toRgba(),\r\n        chartHover3: $colorService.getColor('chart3').setAlpha(0.3).toRgba(),\r\n        chartHover4: $colorService.getColor('chart4').setAlpha(0.3).toRgba(),\r\n        chartHover5: $colorService.getColor('chart5').setAlpha(0.3).toRgba(),\r\n        gridColor: $colorService.getColor('grey4').toHex(),\r\n        labelColor: $colorService.getColor('grey2').toHex()\r\n    };\r\n\r\n    dc.donutChart = {\r\n        data: [{\r\n            label: \"Sales 1\",\r\n            data: 25,\r\n            color: [flotChartColors.chartColor1],\r\n            highlightColor: [flotChartColors.chartHover1]\r\n        }, {\r\n            label: \"Sales 2\",\r\n            data: 15,\r\n            color: [flotChartColors.chartColor2],\r\n            highlightColor: [flotChartColors.chartHover2]\r\n        }, {\r\n            label: \"Sales 3\",\r\n            data: 18,\r\n            color: [flotChartColors.chartColor3],\r\n            highlightColor: [flotChartColors.chartHover3]\r\n        }, {\r\n            label: \"Sales 4\",\r\n            data: 20,\r\n            color: [flotChartColors.chartColor4],\r\n            highlightColor: [flotChartColors.chartHover4]\r\n        }, {\r\n            label: \"Sales 5\",\r\n            data: 10,\r\n            color: [flotChartColors.chartColor5],\r\n            highlightColor: [flotChartColors.chartHover5]\r\n        }],\r\n        options: {\r\n            series: {\r\n                pie: {\r\n                    show: true,\r\n                    innerRadius: 0.7,\r\n                    centerLabel: {\r\n                        show: true,\r\n                        color: flotChartColors.gridColor,\r\n                        text: \"65%\",\r\n                        font: \"Source Sans Pro\",\r\n                        fontSize: 18,\r\n                        paddingX: 4,\r\n                        paddingY: 0,\r\n                        textBaseline: 'bottom'\r\n                    },\r\n                    subLabel: {\r\n                        show: true,\r\n                        color: flotChartColors.chartColor1,\r\n                        text: \"Sales\",\r\n                        font: \"Source Sans Pro\",\r\n                        fontSize: 22,\r\n                        paddingX: 1,\r\n                        paddingY: 10,\r\n                        textBaseline: 'middle'\r\n                    },\r\n                    donutLabel: {\r\n                        show: true,\r\n                        color: flotChartColors.labelColor,\r\n                        text: \"Proprietary\",\r\n                        font: \"Source Sans Pro\",\r\n                        fontSize: 20\r\n                    },\r\n                    stroke: {\r\n                        width: 0\r\n                    }\r\n                }\r\n            },\r\n            grid: {\r\n                hoverable: true\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -30\r\n                },\r\n                content: \"%p.0%, %s\"\r\n            },\r\n            legend: {\r\n                show: true,\r\n                backgroundColor: \"transparent\",\r\n                labelFormatter: function (label) {\r\n                    return '<span class=\"legend-styling\">' + label + '</span>';\r\n                },\r\n                labelBoxBorderColor: \"transparent\"\r\n            }\r\n        },\r\n        onPlotClick: function () {\r\n            //Code to be executed when plot is clicked.\r\n        },\r\n        onPlotHover: function () {\r\n            //Code to be executed when plot area is hovered.\r\n        },\r\n        donutLabels: {\r\n            centerLabel: 'SALES',\r\n            subLabel: '5%',\r\n            donutLabel: 'PROPRIETARY'\r\n        }\r\n    };\r\n\r\n}"},1905:function(t,r){t.exports='<div class="flot-chart">\r\n    <flot dataset="dc.donutChart.data" options="dc.donutChart.options" on-plot-click="dc.donutChart.onPlotClick(event,pos,item)"\r\n        on-hover-click="dc.donutChart.onPlotHover(event,pos,item)" donut-labels="dc.donutChart.donutLabels">\r\n    </flot>\r\n</div>'},1906:function(t,r){t.exports="donutLabels: {\r\n    centerLabel: 'SALES',\r\n    subLabel: '5%',\r\n    donutLabel: 'Proprietary'\r\n}"},1907:function(t,r){t.exports='.legend-styling {\r\n    font-family: "Source Sans Pro";\r\n    padding-left: 4px;\r\n    color: #999;\r\n}'},1908:function(t,r){t.exports="legend: {\r\n  show: true,\r\n  backgroundColor: \"transparent\",\r\n  labelFormatter: function(label, series) {\r\n    var total = 0;\r\n    for (var i = 0; i < vm.donutChart.data.length; i++) {\r\n      total += vm.donutChart.data[0].data;\r\n    }\r\n    var percent = (series.data[0][1] / total) * 100;\r\n    if (percent < 2) label += '<span> (<2%)</span>';\r\n\r\n    return  '<span class=\"legend-styling\">' + label + '</span>';\r\n  },\r\n  labelBoxBorderColor: \"transparent\"\r\n}"},1909:function(t,r){t.exports='.nested-donut-example {\r\n    width: 100%;\r\n    margin-top: 15px;\r\n}\r\n\r\n.nested-donut-example:before {\r\n    content: \' \';\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    height: 100%;\r\n}\r\n\r\n.nested-donut-example .nested-donut-text {\r\n    margin-right: 50px;\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n}\r\n\r\n.nested-donut-example .nested-donut-container {\r\n    vertical-align: middle;\r\n}\r\n\r\n.nested-donut-text p {\r\n    font: 18px "Source Sans Pro";\r\n    font-weight: 600;\r\n}\r\n\r\n.nested-donut-text p.documents {\r\n    color: #00a7a2;\r\n}\r\n\r\n.nested-donut-text p.reviewed {\r\n    color: #7b63a3;\r\n}\r\n\r\n.nested-donut-text p.produced {\r\n    color: #3baa43;\r\n}\r\n\r\n.nested-donut-text p span + span {\r\n    font: 14px "Source Sans Pro";\r\n    color: #999;\r\n}'},1910:function(t,r){t.exports='<div class="container-fluid">\r\n    <div class="row">\r\n        <div class="col-md-12 m-t-md">\r\n            <div class="nested-donut-example">\r\n                <div class="nested-donut-text">\r\n                    <div>\r\n                        <p class="documents"><span>23,456</span><span> documents</span></p>\r\n                        <p class="reviewed"><span>19,876</span><span> reviewed</span></p>\r\n                        <p class="produced"><span>11,123</span><span> produced</span></p>\r\n                    </div>\r\n                </div>\r\n                <nested-donut dataset="dc.nestedDonutData" options="dc.nestedDonutOptions"></nested-donut>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>'},1911:function(t,r){t.exports="angular.module('app').controller('NestedDonutChartCtrl', NestedDonutChartCtrl);\r\n\r\nNestedDonutChartCtrl.$import = ['$colorService'];\r\n\r\nfunction NestedDonutChartCtrl($colorService) {\r\n\r\n    var dc = this;\r\n\r\n    // nested donut chart\r\n    dc.nestedDonutData = [{\r\n      label: 'documents',\r\n      color: $colorService.getColor('chart1').toHex(),\r\n      value: 23456\r\n    }, {\r\n      label: 'reviewed',\r\n      color: $colorService.getColor('chart2').toHex(),\r\n      value: 19876\r\n    }, {\r\n      label: 'produced',\r\n      color: $colorService.getColor('chart3').toHex(),\r\n      value: 11123\r\n    }];\r\n\r\n    dc.nestedDonutOptions = {\r\n        size: 100,\r\n        donutWidth: 4,\r\n        donutSpacing: 4,\r\n        hoverAnimation: true,\r\n        onHover: function(data) {\r\n        // perform any actions here on hover\r\n      },\r\n      onClick: function(data) {\r\n        // perform any actions here on hover        \r\n      },\r\n      tooltip: {\r\n        show: true,\r\n        content: function(data) {\r\n            return '<div style=\"display: inline-block; width: 10px; height: 10px; margin-right: 2px; background-color: ' + data.color + '\"></div> <b>' + data.value + '</b> ' + data.label;\r\n        },\r\n        shifts: {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n      }\r\n    };\r\n\r\n}"},1912:function(t,r){t.exports='<span tabindex="1" class="sr-only">\r\n    <span ng-repeat="item in lc.lineChart.data[0].data">{{item[1]}},</span>\r\n</span>'},1913:function(t,r){t.exports='<div class="flot-chart">\r\n  <flot dataset="lc.lineChart.data" options="lc.lineChart.lineoptions"\r\n    on-plot-click="lc.lineChart.onPlotClick(event,pos,item)"\r\n    on-hover-click="lc.lineChart.onPlotHover(event,pos,item)">\r\n  </flot>\r\n</div>'},1914:function(t,r){t.exports='angular.module("app").controller("LineChartCtrl", LineChartCtrl);\r\n\r\nLineChartCtrl.$inject = [\'$colorService\'];\r\n\r\nfunction LineChartCtrl($colorService) {\r\n\r\n    var lc = this;\r\n\r\n    var flotChartColors = {\r\n        chartColor: $colorService.getColor(\'chart1\').toRgb(),\r\n        chartForecast: $colorService.getColor(\'chart1\').setAlpha(0.06).toRgba(),\r\n        gridColor: $colorService.getColor(\'grey4\').toHex(),\r\n        tickColor: $colorService.getColor(\'grey6\').toHex(),\r\n        borderColor: $colorService.getColor(\'grey2\').setAlpha(0.5).toRgba()\r\n    };\r\n\r\n    lc.lineChart = {\r\n        data: [{\r\n            label: "line",\r\n            data: [\r\n                [1, 34],\r\n                [2, 25],\r\n                [3, 19],\r\n                [4, 34],\r\n                [5, 32],\r\n                [6, 44]\r\n            ],\r\n            forecastData: [\r\n                [7, 45],\r\n                [8, 50],\r\n                [9, 55]\r\n            ]\r\n        }],\r\n        lineoptions: {\r\n            series: {\r\n                lines: {\r\n                    show: true,\r\n                    lineWidth: 1,\r\n                    fill: true,\r\n                    fillColor: {\r\n                        colors: [{\r\n                            opacity: 0.1\r\n                        }, {\r\n                            opacity: 0.1\r\n                        }]\r\n                    }\r\n                },\r\n                shadowSize: 0,\r\n                highlightColor: [flotChartColors.chartColor],\r\n                forecastFillColor: [flotChartColors.chartForecast],\r\n                forecastColor: [flotChartColors.chartColor],\r\n                forecastDashStyle: [5]\r\n            },\r\n            xaxis: {\r\n                tickDecimals: 0\r\n            },\r\n            colors: [flotChartColors.chartColor],\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                hoverable: true,\r\n                clickable: true,\r\n                tickColor: [flotChartColors.tickColor],\r\n                borderWidth: {\r\n                    "left": 1,\r\n                    "bottom": 1,\r\n                    "right": 0,\r\n                    "top": 0\r\n                },\r\n                borderColor: {\r\n                    "left": [flotChartColors.borderColor],\r\n                    "bottom": [flotChartColors.borderColor]\r\n                }\r\n            },\r\n            legend: {\r\n                show: false\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -35\r\n                },\r\n                content: "x: %x, y: %y"\r\n            }\r\n        },\r\n        onPlotClick: function () {\r\n            //Code to be executed when plot is clicked.\r\n        },\r\n        onPlotHover: function () {\r\n            //Code to be executed when plot area is hovered.\r\n        }\r\n\r\n    };\r\n\r\n}'},1915:function(t,r){t.exports='<div class="flot-chart">\r\n  <flot dataset="lc.multiaxesChart.data" options="lc.multiaxesChart.options"\r\n      on-plot-click="lc.multiaxesChart.onPlotClick(event,pos,item)"\r\n      on-hover-click="lc.multiaxesChart.onPlotHover(event,pos,item)">\r\n  </flot>\r\n</div>'},1916:function(t,r){t.exports='angular.module(\'app\').controller(\'MultipleAxisLineChartCtrl\', MultipleAxisLineChartCtrl);\r\n\r\nMultipleAxisLineChartCtrl.$inject = [\'flotDataService\', \'$colorService\'];\r\n\r\nfunction MultipleAxisLineChartCtrl(flotDataService, $colorService) {\r\n\r\n    var lc = this;\r\n\r\n    var flotChartColors = {\r\n        chart1Color: $colorService.getColor(\'chart1\').toRgb(),\r\n        chart2Color: $colorService.getColor(\'chart2\').toRgb(),\r\n        gridColor: $colorService.getColor(\'grey4\').toHex(),\r\n        tickColor: $colorService.getColor(\'grey6\').toHex(),\r\n        borderColor: $colorService.getColor(\'grey2\').setAlpha(0.5).toRgba()\r\n    };\r\n\r\n    var d1 = [],\r\n        d2 = [],\r\n        d3 = [],\r\n        d4 = [],\r\n        d5 = [],\r\n        d6 = [];\r\n\r\n    for (var i = 1; i <= 10; i += 1) {\r\n        d1.push([i, parseInt(Math.random() * 10000)]);\r\n        d2.push([i, parseInt(Math.random() * 10000)]);\r\n        d3.push([i, parseInt(Math.random() * 10000)]);\r\n    }\r\n\r\n    for (i = 11; i <= 13; i += 1) {\r\n        d4.push([i, parseInt(Math.random() * 10000)]);\r\n        d5.push([i, parseInt(Math.random() * 10000)]);\r\n        d6.push([i, parseInt(Math.random() * 10000)]);\r\n    }\r\n\r\n    var oilprices = flotDataService.getOilPrices();\r\n\r\n    var exchangerates = flotDataService.getExchangeRates();\r\n\r\n    function euroFormatter(v, axis) {\r\n        return v.toFixed(axis.tickDecimals) + "€";\r\n    }\r\n\r\n    lc.multiaxesChart = {\r\n        data: [{\r\n            data: oilprices,\r\n            label: "Oil price ($)",\r\n            lines: {\r\n                show: true,\r\n                fill: true,\r\n                lineWidth: 1,\r\n                fillColor: {\r\n                    colors: [{\r\n                        opacity: 0.1\r\n                    }, {\r\n                        opacity: 0.1\r\n                    }]\r\n                }\r\n            },\r\n            shadowSize: 0,\r\n            highlightColor: [flotChartColors.chart1Color]\r\n        }, {\r\n            data: exchangerates,\r\n            label: "USD/EUR exchange rate",\r\n            yaxis: 2,\r\n            lines: {\r\n                show: true,\r\n                fill: true,\r\n                lineWidth: 1,\r\n                fillColor: {\r\n                    colors: [{\r\n                        opacity: 0.2\r\n                    }, {\r\n                        opacity: 0.2\r\n                    }]\r\n                }\r\n            },\r\n            shadowSize: 0,\r\n            highlightColor: [flotChartColors.chart2Color]\r\n        }],\r\n        options: {\r\n            xaxes: [{\r\n                mode: \'time\'\r\n            }],\r\n            yaxes: [{\r\n                min: 0\r\n            }, {\r\n                // align if we are to the right\r\n                position: "right",\r\n                alignTicksWithAxis: 1,\r\n                tickFormatter: euroFormatter\r\n            }],\r\n            legend: {\r\n                position: \'sw\'\r\n            },\r\n            colors: [flotChartColors.chart1Color, flotChartColors.chart2Color],\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                clickable: true,\r\n                tickColor: [flotChartColors.tickColor],\r\n                borderWidth: {\r\n                    "bottom": 1,\r\n                    "left": 1,\r\n                    "top": 0,\r\n                    "right": 0\r\n                },\r\n                borderColor: {\r\n                    "bottom": [flotChartColors.borderColor],\r\n                    "left": [flotChartColors.borderColor]\r\n                },\r\n                hoverable: true //IMPORTANT! this is needed for tooltip to work,\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -35\r\n                },\r\n                content: "%s for %x was %y",\r\n                xDateFormat: "%y-%0m-%0d"\r\n            }\r\n        }\r\n    };\r\n\r\n}'},1917:function(t,r){t.exports='<span tabindex="1" class="sr-only">\r\n    <span ng-repeat="item in lc.lineChart.data[0].data">{{item[1]}},</span>\r\n</span>'},1918:function(t,r){t.exports='<div class="flot-chart-stack">\r\n    <flot dataset="lc.stackLineChart.data" options="lc.stackLineChart.stackoptions" on-plot-click="lc.stackLineChart.onPlotClick(event,pos,item)"\r\n        on-hover-click="lc.stackLineChart.onPlotHover(event,pos,item)"></flot>\r\n</div>'},1919:function(t,r){t.exports="angular.module(\"app\").controller(\"StackedLineChartCtrl\", StackedLineChartCtrl);\r\n\r\nStackedLineChartCtrl.$inject = ['$colorService'];\r\n\r\nfunction StackedLineChartCtrl($colorService) {\r\n\r\n    var lc = this;\r\n\r\n    var flotChartColors = {\r\n        chart1Color: $colorService.getColor('chart1').toRgb(),\r\n        chart2Color: $colorService.getColor('chart2').toRgb(),\r\n        chart3Color: $colorService.getColor('chart3').toRgb(),\r\n        chart1Fill: $colorService.getColor('chart1').setAlpha(0.2).toRgba(),\r\n        chart2Fill: $colorService.getColor('chart2').setAlpha(0.2).toRgba(),\r\n        chart3Fill: $colorService.getColor('chart3').setAlpha(0.2).toRgba(),\r\n        chart1Hover: $colorService.getColor('chart1').setAlpha(0.3).toRgba(),\r\n        chart2Hover: $colorService.getColor('chart2').setAlpha(0.3).toRgba(),\r\n        chart3Hover: $colorService.getColor('chart3').setAlpha(0.3).toRgba(),\r\n        chart1Forecast: $colorService.getColor('chart1').setAlpha(0.06).toRgba(),\r\n        chart2Forecast: $colorService.getColor('chart2').setAlpha(0.06).toRgba(),\r\n        chart3Forecast: $colorService.getColor('chart3').setAlpha(0.06).toRgba(),\r\n        gridColor: $colorService.getColor('grey4').toHex(),\r\n        tickColor: $colorService.getColor('grey6').toHex(),\r\n        borderColor: $colorService.getColor('grey2').setAlpha(0.5).toRgba(),\r\n    };\r\n\r\n    var d1 = [],\r\n        d2 = [],\r\n        d3 = [],\r\n        d4 = [],\r\n        d5 = [],\r\n        d6 = [];\r\n\r\n    for (var i = 1; i <= 10; i += 1) {\r\n        d1.push([i, parseInt(Math.random() * 10000)]);\r\n        d2.push([i, parseInt(Math.random() * 10000)]);\r\n        d3.push([i, parseInt(Math.random() * 10000)]);\r\n    }\r\n\r\n    for (i = 11; i <= 13; i += 1) {\r\n        d4.push([i, parseInt(Math.random() * 10000)]);\r\n        d5.push([i, parseInt(Math.random() * 10000)]);\r\n        d6.push([i, parseInt(Math.random() * 10000)]);\r\n    }\r\n\r\n    function euroFormatter(v, axis) {\r\n        return v.toFixed(axis.tickDecimals) + \"€\";\r\n    }\r\n\r\n    lc.stackLineChart = {\r\n        data: [{\r\n            label: \"Sales 1\",\r\n            data: d1,\r\n            color: [flotChartColors.chart1Color],\r\n            fillColor: flotChartColors.chart1Fill,\r\n            highlightColor: [flotChartColors.chart1Hover],\r\n            shadowSize: 0,\r\n            forecastData: d4,\r\n            forecastFillColor: [flotChartColors.chart1Forecast],\r\n            forecastColor: [flotChartColors.chart1Color],\r\n            forecastHighLightColor: [flotChartColors.chart1Hover]\r\n        }, {\r\n            label: \"Sales 2\",\r\n            data: d2,\r\n            color: [flotChartColors.chart2Color],\r\n            fillColor: flotChartColors.chart2Fill,\r\n            highlightColor: [flotChartColors.chart2Hover],\r\n            shadowSize: 0,\r\n            forecastData: d5,\r\n            forecastFillColor: [flotChartColors.chart2Forecast],\r\n            forecastColor: [flotChartColors.chart2Color],\r\n            forecastDashStyle: [5],\r\n            forecastHighLightColor: [flotChartColors.chart2Hover]\r\n        }, {\r\n            label: \"Sales 3\",\r\n            data: d3,\r\n            color: [flotChartColors.chart3Color],\r\n            fillColor: [flotChartColors.chart3Fill],\r\n            highlightColor: [flotChartColors.chart3Hover],\r\n            shadowSize: 0,\r\n            forecastData: d6,\r\n            forecastFillColor: [flotChartColors.chart3Forecast],\r\n            forecastColor: [flotChartColors.chart3Color],\r\n            forecastDashStyle: [5],\r\n            forecastHighLightColor: [flotChartColors.chart3Hover]\r\n        }],\r\n        stackoptions: {\r\n            series: {\r\n                stack: true,\r\n                lines: {\r\n                    show: true,\r\n                    fill: true\r\n                }\r\n            },\r\n            yaxis: {\r\n                tickFormatter: euroFormatter\r\n            },\r\n            xaxis: {\r\n                tickDecimals: 0\r\n            },\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                hoverable: true,\r\n                clickable: true,\r\n                tickcolor: [flotChartColors.tickColor],\r\n                borderWidth: {\r\n                    \"left\": 1,\r\n                    \"bottom\": 1,\r\n                    \"right\": 0,\r\n                    \"top\": 0\r\n                },\r\n                borderColor: {\r\n                    \"left\": [flotChartColors.borderColor],\r\n                    \"bottom\": [flotChartColors.borderColor]\r\n                }\r\n            },\r\n            legend: {\r\n                show: true,\r\n                container: \"#legendHolderLine\",\r\n                noColumns: 0\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -35\r\n                },\r\n                content: \"%s - %y in cycle %x\"\r\n            }\r\n        }\r\n    };\r\n\r\n}"},1920:function(t,r){t.exports="#legendHolderLine {\r\n    margin-left: 33%;\r\n}\r\n\r\n#legendHolderLine .legendLabel {\r\n    padding-right:40px;\r\n    font-size:16px;\r\n    padding-left: 6px;\r\n}\r\n\r\n#legendHolderLine .legendColorBox > div {\r\n    border: 0px !important;\r\n}\r\n\r\n#legendHolderLine .legendColorBox > div > div {\r\n    opacity: 1;\r\n}"},1921:function(t,r){t.exports='<div class="flot-chart-stack">\r\n    ...\r\n</div>\r\n<div id="legendHolderLine" class="p-l-lg"></div>'},1922:function(t,r){t.exports=' ...\r\nlegend: {\r\n    show: true,\r\n    container:"#legendHolderLine",\r\n    noColumns: 0\r\n},\r\n...'},1923:function(t,r){t.exports='<div class="flot-chart">\r\n    <flot dataset="lc.liveChart.series" options="lc.liveChart.options" on-plot-click="lc.liveChart.onPlotClick(event,pos,item)"\r\n        on-hover-click="lc.liveChart.onPlotHover(event,pos,item)">\r\n    </flot>\r\n</div>'},1924:function(t,r){t.exports="angular.module('app').controller('LiveChartCtrl', LiveChartCtrl);\r\n\r\nLiveChartCtrl.$inject = ['$interval', '$colorService'];\r\n\r\nfunction LiveChartCtrl($interval, $colorService) {\r\n\r\n    var lc = this;\r\n\r\n    var flotChartColors = {\r\n        primary: $colorService.getColor('chart1').toRgb(),\r\n        gridColor: $colorService.getColor('grey4').toHex(),\r\n        tickColor: $colorService.getColor('grey6').toHex(),\r\n        borderColor: $colorService.getColor('grey2').setAlpha(0.5).toRgba(),\r\n        white: \"#FFFFFF\"\r\n    };\r\n\r\n    var livedata = [];\r\n    var maximum = 300;\r\n\r\n    function getRandomData() {\r\n\r\n        if (livedata.length) {\r\n            livedata = livedata.slice(1);\r\n        }\r\n\r\n        while (livedata.length < maximum) {\r\n            var previous = livedata.length ? livedata[livedata.length - 1] : 50;\r\n            var y = previous + Math.random() * 10 - 5;\r\n            livedata.push(y < 0 ? 0 : y > 100 ? 100 : y);\r\n        }\r\n\r\n        // zip the generated y values with the x values\r\n\r\n        var res = [];\r\n        for (var i = 0; i < livedata.length; ++i) {\r\n            res.push([i, livedata[i]]);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    lc.liveChart = {\r\n        series: [{\r\n            data: getRandomData(),\r\n            lines: {\r\n                fill: true,\r\n                lineWidth: 1,\r\n                fillColor: {\r\n                    colors: [{\r\n                        opacity: 0.1\r\n                    }, {\r\n                        opacity: 0.1\r\n                    }]\r\n                }\r\n            },\r\n            shadowSize: 0\r\n        }],\r\n        options: {\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                tickColor: [flotChartColors.tickColor],\r\n                borderWidth: {\r\n                    \"top\": 0,\r\n                    \"bottom\": 1,\r\n                    \"left\": 1,\r\n                    \"right\": 0\r\n                },\r\n                borderColor: {\r\n                    \"bottom\": [flotChartColors.borderColor],\r\n                    \"left\": [flotChartColors.borderColor]\r\n                },\r\n                minBorderMargin: 20,\r\n                labelMargin: 10,\r\n                backgroundColor: {\r\n                    colors: [\r\n                        [flotChartColors.white],\r\n                        [flotChartColors.white]\r\n                    ]\r\n                },\r\n                margin: {\r\n                    top: 8,\r\n                    bottom: 20,\r\n                    left: 20\r\n                },\r\n                markings: function (axes) {\r\n                    var markings = [];\r\n                    var xaxis = axes.xaxis;\r\n                    for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {\r\n                        markings.push({\r\n                            xaxis: {\r\n                                from: x,\r\n                                to: x + xaxis.tickSize\r\n                            },\r\n                            color: [flotChartColors.white]\r\n                        });\r\n                    }\r\n                    return markings;\r\n                }\r\n            },\r\n            colors: [flotChartColors.primary],\r\n            xaxis: {\r\n                tickFormatter: function () {\r\n                    return \"\";\r\n                }\r\n            },\r\n            yaxis: {\r\n                min: 0,\r\n                max: 110\r\n            },\r\n            legend: {\r\n                show: true\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    $interval(function () {\r\n        lc.liveChart.series[0].data = getRandomData();\r\n    }, 40);\r\n\r\n\r\n}"},1925:function(t,r){t.exports='<div class="org-node">\r\n    <div class="org-node-corner-indicator" ng-if="active"></div>\r\n\r\n    <div class="org-node-indicators" ng-if="getChildCount() > 0" ng-class="{ \'expanded\' : getExpanded() === true }">\r\n        <div class="org-node-collapse">\r\n            <i class="hpe-icon hpe-tab-up"></i>\r\n        </div>\r\n        <div class="org-node-reports">\r\n            <i class="hpe-icon hpe-user-manager"></i>\r\n            <p class="org-node-child-count" ng-bind="::getChildCount()"></p>\r\n        </div>\r\n    </div>\r\n    <h4 class="org-node-name" ng-bind="::name"></h4>\r\n    <p class="org-node-position" ng-bind="::position"></p>\r\n    <p class="org-node-email" ng-bind="::email"></p>\r\n</div>'},1926:function(t,r){t.exports=".organization-chart-demo-container {\r\n    width: 100%;\r\n    height: 700px;\r\n    border: 1px solid #E2E2E2;\r\n    border-top: none;\r\n}\r\n\r\n.org-node {\r\n    position: relative;\r\n    padding: 10px 15px;\r\n}\r\n\r\n.org-node .org-node-corner-indicator {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    width: 0;\r\n    height: 0;\r\n    border-style: solid;\r\n    border-width: 0 16px 16px 0;\r\n    border-color: transparent #ff8d6d transparent transparent;\r\n}\r\n\r\n.org-node .org-node-indicators {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 13px;\r\n}\r\n\r\n.org-node .org-node-indicators .org-node-collapse {\r\n    display: none;\r\n    font-size: 1.063rem;\r\n}\r\n\r\n.org-node:hover .org-node-indicators.expanded .org-node-collapse {\r\n    display: block;\r\n    color: #666;\r\n}\r\n\r\n.org-node .org-node-indicators .org-node-reports .hpe-user-manager {\r\n    color: #cccccc;\r\n    transition: color 0.3s ease-in-out;\r\n    font-size: 1.063rem;\r\n}\r\n\r\n.org-node:hover .org-node-indicators .org-node-reports .hpe-user-manager {\r\n    color: #797979;\r\n}\r\n\r\n.org-node:hover .org-node-indicators.expanded .org-node-reports {\r\n    display: none;\r\n}\r\n\r\n.org-node .org-node-indicators .org-node-reports .org-node-child-count {\r\n    margin: 0;\r\n    text-align: center;\r\n    color: #666;\r\n    line-height: 10px;\r\n    transition: opacity 0.3s ease-in-out;\r\n    opacity: 0;\r\n}\r\n\r\n.org-node:hover .org-node-indicators .org-node-reports .org-node-child-count {\r\n    opacity: 1;\r\n}\r\n\r\n.org-node .org-node-name {\r\n    margin: 0;\r\n    color: #333;\r\n    font-weight: 600;\r\n    font-size: 1.125rem;\r\n    width: calc(100% - 25px);\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    word-break: break-all;\r\n}\r\n\r\n.org-node .org-node-position {\r\n    color: #999;\r\n    font-size: 1.063rem;    \r\n    margin-top: 0;\r\n    margin-bottom: 5px;\r\n    max-height: 24px;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    word-break: break-word;\r\n    white-space: nowrap;\r\n    width: calc(100% - 25px);\r\n}\r\n\r\n.org-node .org-node-email {\r\n    color: #999;\r\n    font-size: 0.9375rem;    \r\n    margin: 0;                    \r\n}"},1927:function(t,r){t.exports='<div class="organization-chart-demo-container">\r\n    <organization-chart data="vm.data" options="vm.options"></organization-chart>\r\n</div>'},1928:function(t,r){t.exports="angular.module('app').controller('OrganizationChartDemoCtrl', OrganizationChartDemoCtrl);\r\n\r\nfunction OrganizationChartDemoCtrl() {\r\n    var vm = this;\r\n\r\n    var adminIcon = 'https://uxaspects.github.io/UXAspects/assets/img/IconManagerColorized.png';\r\n    var userIcon = 'https://uxaspects.github.io/UXAspects/assets/img/IconCustodianColorized.png';\r\n\r\n    var internationManager = {\r\n        name: chance.name(),\r\n        position: 'International Manager',\r\n        phone: chance.phone(),\r\n        email: 'inat_manager@company.com',\r\n        image: adminIcon\r\n    };\r\n\r\n    var chiefTechnicalOfficer = {\r\n        name: chance.name(),\r\n        position: 'Chief Technical Officer',\r\n        phone: chance.phone(),\r\n        email: 'cto@company.com',\r\n        image: adminIcon\r\n    };\r\n\r\n    vm.options = {\r\n        hierarchyBar: {\r\n            image: function (data) {\r\n                return data.image;\r\n            }\r\n        },\r\n        nodes: {\r\n            template: 'chart-node.html'\r\n        },\r\n        reveal: function () {\r\n\r\n            if (vm.data.name === internationManager.name) {\r\n\r\n                // add a new root node\r\n                chiefTechnicalOfficer.children = [vm.data];\r\n                vm.data = chiefTechnicalOfficer;\r\n\r\n                // hide the button now\r\n                return false;\r\n\r\n            } else {\r\n\r\n                // add a new root node                    \r\n                internationManager.children = [vm.data];\r\n                vm.data = internationManager;\r\n            }\r\n        },\r\n        search: {\r\n            enabled: true,\r\n            placeholder: 'Enter name or job title',\r\n            template: 'search-item.html',\r\n            query: function (query, node) {\r\n                // return true if the name or title contains the search query\r\n                return node.name.toLowerCase().indexOf(query.toLowerCase()) !== -1 ||\r\n                    node.position.toLowerCase().indexOf(query.toLowerCase()) !== -1;\r\n            }\r\n        }\r\n    };\r\n\r\n    vm.data = {\r\n        name: chance.name(),\r\n        position: 'National Manager',\r\n        phone: chance.phone(),\r\n        email: 'nat_manager@company.com',\r\n        image: adminIcon,\r\n        children: [{\r\n            name: chance.name(),\r\n            position: 'Regional Manager',\r\n            phone: chance.phone(),\r\n            email: 'reg_manager@company.com',\r\n            image: adminIcon,\r\n            children: [{\r\n                name: chance.name(),\r\n                position: 'Assistant',\r\n                phone: chance.phone(),\r\n                email: 'assistant@company.com',\r\n                image: adminIcon,\r\n                children: [{\r\n                    name: chance.name(),\r\n                    position: 'Human Resources',\r\n                    phone: chance.phone(),\r\n                    email: 'hr@company.com',\r\n                    image: userIcon\r\n                }, {\r\n                    name: chance.name(),\r\n                    position: 'Engineer',\r\n                    phone: chance.phone(),\r\n                    email: 'tech@company.com',\r\n                    image: userIcon\r\n                }, {\r\n                    name: chance.name(),\r\n                    position: 'Quality Assurance',\r\n                    phone: chance.phone(),\r\n                    email: 'qa@company.com',\r\n                    image: userIcon\r\n                }]\r\n            }, {\r\n                name: chance.name(),\r\n                position: 'Manager',\r\n                phone: chance.phone(),\r\n                email: 'manager@company.com',\r\n                active: true,\r\n                image: userIcon,\r\n                children: [{\r\n                    name: chance.name(),\r\n                    position: 'Sales',\r\n                    phone: chance.phone(),\r\n                    email: 'sales1@company.com',\r\n                    image: userIcon\r\n                }, {\r\n                    name: chance.name(),\r\n                    position: 'Office Administrator',\r\n                    phone: chance.phone(),\r\n                    email: 'office_admin@company.com',\r\n                    image: userIcon,\r\n                    children: [{\r\n                        name: chance.name(),\r\n                        position: 'Receptionist',\r\n                        phone: chance.phone(),\r\n                        email: 'reception@company.com',\r\n                        image: userIcon\r\n                    }]\r\n                }, {\r\n                    name: chance.name(),\r\n                    position: 'Sales',\r\n                    phone: chance.phone(),\r\n                    email: 'sales2@company.com',\r\n                    image: userIcon\r\n                }]\r\n            }, {\r\n                name: chance.name(),\r\n                position: 'Head of Accounting',\r\n                phone: chance.phone(),\r\n                email: 'accounting@company.com',\r\n                image: userIcon,\r\n                children: [{\r\n                    name: chance.name(),\r\n                    position: 'Accountant',\r\n                    phone: chance.phone(),\r\n                    email: 'accountant1@company.com',\r\n                    image: userIcon\r\n                }, {\r\n                    name: chance.name(),\r\n                    position: 'Accountant',\r\n                    phone: chance.phone(),\r\n                    email: 'accountant2@company.com',\r\n                    image: userIcon\r\n                }]\r\n            }]\r\n        }]\r\n    };\r\n}"},1929:function(t,r){t.exports='<div class="organization-chart-search-item">\r\n    <h3 class="organization-chart-search-item-name" bind-html-unsafe="match.model.name | typeaheadHighlight:query"></h3>\r\n    <p class="organization-chart-search-item-subtitle" bind-html-unsafe="match.model.position | typeaheadHighlight:query"></p>\r\n</div> '},1930:function(t,r){t.exports=".partition-map-box {\r\n  width: 800px;\r\n  height: 800px;\r\n}\r\n\r\n.partition-user-popover {\r\n    width: 100%;\r\n    height: 100%;\r\n    padding: 10px;\r\n    padding-bottom: 0;\r\n}\r\n\r\n.docked .partition-user-popover {\r\n    padding: 20px;\r\n}\r\n\r\n.partition-user-popover .group {\r\n    font-family: 'Source Sans Pro';\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    margin: 0;\r\n    font-size: 17px;\r\n    line-height: 17px;\r\n}\r\n\r\n.partition-user-popover .title {\r\n    color: #ffffff;\r\n    font-family: 'Source Sans Pro';\r\n    line-height: 32px;\r\n    margin-bottom: 0;\r\n    -ms-text-overflow: ellipsis;\r\n    -webkit-text-overflow: ellipsis;\r\n    -o-text-overflow: ellipsis;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    max-height: 32px;\r\n}\r\n\r\n.partition-user-popover .count-number {\r\n    color: #818484;\r\n    font-family: 'Source Sans Pro';\r\n    font-size: 20px;\r\n}\r\n\r\n.partition-user-popover .count-text {\r\n    color: #525658;\r\n    font-family: 'Source Sans Pro';\r\n    font-size: 17px;\r\n}\r\n\r\n.partition-popover-chart {\r\n    display: block;\r\n    height: 80px;\r\n    margin-left: -22px;\r\n    margin-right: -8px;\r\n}\r\n\r\n.docked .partition-popover-chart {\r\n    margin-left: -8px;\r\n    margin-right: -8px;\r\n}\r\n\r\n.user-content.full-width .partition-popover-chart {\r\n    margin-right: -24px;\r\n}\r\n\r\n.partition-popover-buttons {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 50px;\r\n    bottom: 0;\r\n    left: 0;\r\n}\r\n\r\n\r\n.docked .partition-popover-buttons {\r\n    position: static;\r\n}\r\n\r\n.partition-popover-buttons .popover-button {\r\n    display: inline-block;\r\n    width: 50%;\r\n    height: 50px;\r\n    float: left;\r\n    color: #fff;\r\n    font-family: 'Source Sans Pro';\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    cursor: pointer;\r\n    padding: 5px 0;\r\n}\r\n\r\n.partition-popover-buttons .popover-button:hover {\r\n    background-color: #222;\r\n}\r\n\r\n.partition-popover-buttons .popover-button .hold-icon {\r\n    background-image: url('https://uxaspects.github.io/UXAspects/assets/img/lock.png');\r\n    width: 18px;\r\n    height: 18px;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    margin: 1px auto;\r\n}\r\n\r\n.partition-popover-buttons .popover-button .workbook-icon {\r\n    background-image: url('https://uxaspects.github.io/UXAspects/assets/img/book.png');\r\n    width: 18px;\r\n    height: 18px;\r\n    background-size: contain;\r\n    background-repeat: no-repeat;\r\n    margin: 1px auto;\r\n}\r\n\r\n.partition-popover-buttons .popover-button.divider {\r\n    border-right: 1px solid #3e3e3e;\r\n}"},1931:function(t,r){t.exports='<div class="partition-container">\r\n    <div class="partition-map-box">\r\n        <partition-map chart-data="vm.chartData" chart-options="vm.options" chart-loading="vm.isLoading"></partition-map>\r\n    </div>\r\n</div>'},1932:function(t,r){t.exports="angular.module(\"app\").controller(\"PartitionMapCtrl\", PartitionMapCtrl);\r\n\r\nfunction PartitionMapCtrl() {\r\n    var vm = this;\r\n\r\n    vm.options = {\r\n        edit: {\r\n            text: 'Edit',\r\n            image: 'https://uxaspects.github.io/UXAspects/assets/img/pencil.png',\r\n            click: function (root) {\r\n                //perform action when the edit option is clicked\r\n            },\r\n            editor: {\r\n                enabled: true,\r\n                finishText: 'Done',\r\n                noGroupsText: 'No groups available',\r\n                availableGroups: ['Custodian', 'Language', 'Data Source'],\r\n                maxRows: 3,\r\n                minRows: 1,\r\n                onFinish: function (order) {\r\n\r\n                }\r\n            }\r\n        },\r\n        select: function (data) {\r\n            //perform action when a segment has been clicked\r\n        },\r\n        maximize: {\r\n            disableScrolling: false,\r\n            buttonVisible: true,\r\n            isMaximized: false,\r\n            fillScreen: true,\r\n            sidePanelWidth: 235,\r\n            shouldResize: true,\r\n            onToggle: function (action) {\r\n\r\n            }\r\n        },\r\n        popoverTemplate: \"templateId.html\",\r\n        popoverEnabled: true,\r\n        valueFormatter: function (value) {\r\n            return value.toLocaleString();\r\n        },\r\n        noDataLabel: 'No data to display',\r\n        loadingLabel: 'Loading...',\r\n        popoverDelay: 650,\r\n        buttonOffset: {\r\n            maximize: {\r\n                x: 40,\r\n                y: 0\r\n            },\r\n            minimize: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        }\r\n    };\r\n\r\n    vm.isLoading = false;\r\n\r\n    vm.chartData = [{\r\n        label: 'Home',\r\n        image: 'https://uxaspects.github.io/UXAspects/assets/img/home.png',\r\n        groupName: 'Hard Drives',\r\n        children: [{\r\n            label: 'Jennifer Bailey',\r\n            groupName: 'Custodian',\r\n            children: [{\r\n                label: 'English',\r\n                groupName: 'Language',\r\n                children: [{\r\n                    label: 'Email',\r\n                    groupName: 'Data Source',\r\n                    value: 40\r\n                }, {\r\n                    label: 'Microsoft Word',\r\n                    groupName: 'Data Source',\r\n                    value: 10\r\n                }]\r\n            }, {\r\n                label: 'German',\r\n                groupName: 'Language',\r\n                children: [{\r\n                    label: 'Email',\r\n                    groupName: 'Data Source',\r\n                    value: 10\r\n                }, {\r\n                    label: 'Microsoft Word',\r\n                    groupName: 'Data Source',\r\n                    value: 5\r\n                }]\r\n            }]\r\n        }, {\r\n            label: 'Stephen Sheridan',\r\n            groupName: 'Custodian',\r\n            children: [{\r\n                    label: 'English',\r\n                    groupName: 'Language',\r\n                    children: [{\r\n                        label: 'Email',\r\n                        groupName: 'Data Source',\r\n                        value: 15\r\n                    }, {\r\n                        label: 'Microsoft Word',\r\n                        groupName: 'Data Source',\r\n                        value: 5\r\n                    }],\r\n                },\r\n                {\r\n                    label: 'German',\r\n                    groupName: 'Language',\r\n                    children: [{\r\n                        label: 'Email',\r\n                        groupName: 'Data Source',\r\n                        value: 10\r\n                    }, {\r\n                        label: 'Microsoft Word',\r\n                        groupName: 'Data Source',\r\n                        value: 5\r\n                    }]\r\n                }\r\n            ]\r\n        }]\r\n    }];\r\n\r\n}"},1933:function(t,r){t.exports='<div ng-controller="PartitionMapPopoverCtrl as popc">\r\n    <div class="partition-user-popover">\r\n        <p class="group" ng-style="{\'color\': color}" ng-bind="::data.groupName"></p>\r\n        <h2 class="title" ng-bind="::key"></h2>\r\n        <h4 class="m-t-nil">\r\n            <span class="count-number" ng-bind="::formattedValue"></span>\r\n            <span class="count-text">ITEMS</span>\r\n        </h4>\r\n    </div>\r\n    <div class="partition-popover-chart">\r\n        <flot dataset="popc.lineChart.data" options="popc.lineChart.options"></flot>\r\n    </div>\r\n    <div class="partition-popover-buttons">\r\n        <div class="popover-button divider">\r\n            <div class="hold-icon"></div>\r\n            <p>Hold All</p>\r\n        </div>\r\n        <div class="popover-button">\r\n            <div class="workbook-icon"></div>\r\n            <p>Workbook All</p>\r\n        </div>\r\n    </div>\r\n</div>'},1934:function(t,r){t.exports='angular.module("app").controller("PartitionMapPopoverCtrl", [\'$colorService\', PartitionMapPopoverCtrl]);\r\n\r\nfunction PartitionMapPopoverCtrl($colorService) {\r\n    var vm = this;\r\n\r\n    //get the segment color from the parent scope\r\n    var primaryColor = $colorService.getColor(\'chart2\').toHex();\r\n\r\n    var lineData = randomData();\r\n\r\n    vm.lineChart = {\r\n        data: [{\r\n            data: lineData,\r\n            lines: {\r\n                show: true,\r\n                fill: true,\r\n                lineWidth: 1,\r\n                fillColor: {\r\n                    colors: [{\r\n                        opacity: 0.0\r\n                    }, {\r\n                        opacity: 0.5\r\n                    }, {\r\n                        opacity: 0.8\r\n                    }]\r\n                }\r\n            },\r\n            shadowSize: 0\r\n        }],\r\n        options: {\r\n            xaxes: [{\r\n                show: false\r\n            }],\r\n            yaxes: [{\r\n                show: false\r\n            }],\r\n            colors: [primaryColor],\r\n            grid: {\r\n                borderWidth: {\r\n                    "bottom": 0,\r\n                    "left": 0,\r\n                    "top": 0,\r\n                    "right": 0\r\n                },\r\n            },\r\n            tooltip: false\r\n        }\r\n    };\r\n\r\n    //generate some random data for the chart\r\n    function randomData() {\r\n        var dataPoints = [];\r\n\r\n        for (var i = 0; i <= 40; i++) {\r\n            dataPoints.push([i, Math.floor((Math.random() * (150 - 40)) + 40)]);\r\n        }\r\n\r\n        return dataPoints;\r\n    }\r\n\r\n}'},1935:function(t,r){t.exports='<div class="container-fluid">\r\n    <div class="row">\r\n        <div class="col-md-12 m-t-md">\r\n            <div ng-controller="PeityChartCtrl as pc">\r\n                <table class="table table-bordered white-bg">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Graphs</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>\r\n                                <line-chart data="pc.LineChart.data_1" options="pc.LineChart.options"></line-chart>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <line-chart data="pc.LineChart.data_2" options="pc.LineChart.options"></line-chart>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <line-chart data="pc.LineChart.data_3" options="pc.LineChart.options"></line-chart>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <bar-chart data="pc.BarChart.data_1" options="pc.BarChart.options"></bar-chart>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <bar-chart data="pc.BarChart.data_2" options="pc.BarChart.options"></bar-chart>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <updating-linechart data="pc.UpdatingLineChart.data" method="pc.UpdatingLineChart.method" options="pc.UpdatingLineChart.options"\r\n                                    updateinterval="pc.UpdatingLineChart.updateinterval"></updating-linechart>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>'},1936:function(t,r){t.exports="angular.module('app').controller('PeityChartCtrl', PeityChartCtrl);\r\n\r\nPeityChartCtrl.$inject = ['$colorService'];\r\n\r\nfunction PeityChartCtrl($colorService) {\r\n  var pc = this;\r\n\r\n  var peityChartColors = {\r\n    chartColor1: $colorService.getColor('chart1').toRgb(),\r\n    chartColor2: $colorService.getColor('chart2').toRgb(),\r\n    chartFill1: $colorService.getColor('chart1').setAlpha(0.2).toRgba()\r\n  };\r\n\r\n  pc.LineChart = {\r\n    data_1: [5, 3, 9, 6, 5, 9, 7, 3, 5, 2],\r\n    data_2: [5, 3, 2, -1, -3, -2, 2, 3, 5, 2],\r\n    data_3: [0, -3, -6, -4, -5, -4, -7, -3, -5, -2],\r\n    options: {\r\n      fill: [peityChartColors.chartFill1],\r\n      stroke: [peityChartColors.chartColor1]\r\n    }\r\n  };\r\n\r\n  pc.UpdatingLineChart = {\r\n    data: [5, 3, 9, 6, 5, 9, 7, 3, 5, 2, 5, 3, 9, 6, 5, 9, 7, 3, 5, 2],\r\n    options: {\r\n      fill: [peityChartColors.chartFill1],\r\n      stroke: [peityChartColors.chartColor1],\r\n      width: 64\r\n    },\r\n    method: function (oldData) {\r\n      // START - write code here.. that updates the old value to update the chart.\r\n      var random = Math.round(Math.random() * 10);\r\n      var newData = oldData;\r\n      newData.shift();\r\n      newData.push(random);\r\n      // END\r\n\r\n      // return the newData to update the chart.\r\n      return newData;\r\n    },\r\n    updateinterval: 300\r\n  };\r\n\r\n  pc.BarChart = {\r\n    data_1: [5, 3, 9, 6, 5, 9, 7, 3, 5, 2],\r\n    data_2: [5, 3, 2, -1, -3, -2, 2, 3, 5, 2],\r\n    options: {\r\n      fill: [\r\n        [peityChartColors.chartColor1],\r\n        [peityChartColors.chartColor2]\r\n      ]\r\n    }\r\n  };\r\n}"},1937:function(t,r){t.exports='<sankey chart-data="vm.data" options="vm.options" click="vm.click"></sankey>'},1938:function(t,r){t.exports='angular.module("app").controller("SankeyCtrl", SankeyCtrl);\r\n\r\nfunction SankeyCtrl() {\r\n    var vm = this;\r\n\r\n    vm.click = function (elem) {\r\n        console.info(elem);\r\n    };\r\n\r\n    vm.clickTopLeft = function (data) {\r\n        console.log("top left");\r\n        console.log(data);\r\n    };\r\n\r\n    vm.data = {\r\n        "columns": [{\r\n                "id": "data_source",\r\n                "name": "Repository",\r\n                "ordinal": 0\r\n            },\r\n            {\r\n                "id": "extraction_type",\r\n                "name": "Extraction",\r\n                "ordinal": 1\r\n            },\r\n            {\r\n                "id": "classification",\r\n                "name": "Classification",\r\n                "ordinal": 2\r\n            },\r\n            {\r\n                "id": "disposition_type",\r\n                "name": "Disposition",\r\n                "ordinal": 3\r\n            }\r\n        ],\r\n        "nodes": [{\r\n                "name": "Not Classified",\r\n                "type": "classification",\r\n                "id": 0,\r\n                "value": 130,\r\n                "datasize": 362969649\r\n            },\r\n            {\r\n                "name": "Classified",\r\n                "type": "classification",\r\n                "id": 1,\r\n                "value": 243,\r\n                "datasize": 326502171\r\n            },\r\n            {\r\n                "name": "Phone Records",\r\n                "type": "data_source",\r\n                "id": 2,\r\n                "value": 14,\r\n                "datasize": 512125362\r\n            },\r\n            {\r\n                "name": "Lync Conversation",\r\n                "type": "data_source",\r\n                "id": 3,\r\n                "value": 32,\r\n                "datasize": 62160\r\n            },\r\n            {\r\n                "name": "Device Backup",\r\n                "type": "data_source",\r\n                "id": 4,\r\n                "value": 50,\r\n                "datasize": 33409254\r\n            },\r\n            {\r\n                "name": "Data Archive (Internal)",\r\n                "type": "data_source",\r\n                "id": 5,\r\n                "value": 104,\r\n                "datasize": 35125228\r\n            },\r\n            {\r\n                "name": "Exchange",\r\n                "type": "data_source",\r\n                "id": 6,\r\n                "value": 173,\r\n                "datasize": 108749816\r\n            },\r\n            {\r\n                "name": "Archived",\r\n                "type": "disposition_type",\r\n                "id": 7,\r\n                "value": 12,\r\n                "datasize": 14860510\r\n            },\r\n            {\r\n                "name": "Deleted",\r\n                "type": "disposition_type",\r\n                "id": 8,\r\n                "value": 34,\r\n                "datasize": 32517566\r\n            },\r\n            {\r\n                "name": "On Hold",\r\n                "type": "disposition_type",\r\n                "id": 9,\r\n                "value": 68,\r\n                "datasize": 535140573\r\n            },\r\n            {\r\n                "name": "Image",\r\n                "type": "extraction_type",\r\n                "id": 10,\r\n                "value": 16,\r\n                "datasize": 2286386\r\n            },\r\n            {\r\n                "name": "Audio",\r\n                "type": "extraction_type",\r\n                "id": 11,\r\n                "value": 22,\r\n                "datasize": 525843218\r\n            },\r\n            {\r\n                "name": "Text",\r\n                "type": "extraction_type",\r\n                "id": 12,\r\n                "value": 335,\r\n                "datasize": 161342216\r\n            }\r\n        ],\r\n        "links": [{\r\n                "source": 0,\r\n                "target": 7,\r\n                "value": 4,\r\n                "datasize": 348\r\n            },\r\n            {\r\n                "source": 0,\r\n                "target": 8,\r\n                "value": 4,\r\n                "datasize": 23572\r\n            },\r\n            {\r\n                "source": 1,\r\n                "target": 7,\r\n                "value": 8,\r\n                "datasize": 14860162\r\n            },\r\n            {\r\n                "source": 1,\r\n                "target": 9,\r\n                "value": 27,\r\n                "datasize": 217971281\r\n            },\r\n            {\r\n                "source": 1,\r\n                "target": 8,\r\n                "value": 30,\r\n                "datasize": 32493994\r\n            },\r\n            {\r\n                "source": 0,\r\n                "target": 9,\r\n                "value": 41,\r\n                "datasize": 317169292\r\n            },\r\n            {\r\n                "source": 5,\r\n                "target": 11,\r\n                "value": 4,\r\n                "datasize": 6741424\r\n            },\r\n            {\r\n                "source": 6,\r\n                "target": 11,\r\n                "value": 4,\r\n                "datasize": 6976432\r\n            },\r\n            {\r\n                "source": 5,\r\n                "target": 10,\r\n                "value": 6,\r\n                "datasize": 73059\r\n            },\r\n            {\r\n                "source": 6,\r\n                "target": 10,\r\n                "value": 10,\r\n                "datasize": 2213327\r\n            },\r\n            {\r\n                "source": 2,\r\n                "target": 11,\r\n                "value": 14,\r\n                "datasize": 512125362\r\n            },\r\n            {\r\n                "source": 3,\r\n                "target": 12,\r\n                "value": 32,\r\n                "datasize": 62160\r\n            },\r\n            {\r\n                "source": 4,\r\n                "target": 12,\r\n                "value": 50,\r\n                "datasize": 33409254\r\n            },\r\n            {\r\n                "source": 5,\r\n                "target": 12,\r\n                "value": 94,\r\n                "datasize": 28310745\r\n            },\r\n            {\r\n                "source": 6,\r\n                "target": 12,\r\n                "value": 159,\r\n                "datasize": 99560057\r\n            },\r\n            {\r\n                "source": 11,\r\n                "target": 1,\r\n                "value": 4,\r\n                "datasize": 187339593\r\n            },\r\n            {\r\n                "source": 10,\r\n                "target": 0,\r\n                "value": 6,\r\n                "datasize": 226298\r\n            },\r\n            {\r\n                "source": 10,\r\n                "target": 1,\r\n                "value": 10,\r\n                "datasize": 2060088\r\n            },\r\n            {\r\n                "source": 11,\r\n                "target": 0,\r\n                "value": 18,\r\n                "datasize": 338503625\r\n            },\r\n            {\r\n                "source": 12,\r\n                "target": 0,\r\n                "value": 105,\r\n                "datasize": 24239726\r\n            },\r\n            {\r\n                "source": 12,\r\n                "target": 1,\r\n                "value": 230,\r\n                "datasize": 137102490\r\n            }\r\n        ]\r\n    };\r\n\r\n    vm.options = {\r\n        linkHoverHL: true,\r\n        col: {\r\n            headerLabelSpacing: 25,\r\n            paddingTop: 0,\r\n            paddingBottom: 0,\r\n            headerLabelLength: 18\r\n        },\r\n        block: {\r\n            truncateThreshold: 18,\r\n            minWidth: 120,\r\n            calloutData: {\r\n                topLeft: {\r\n                    key: \'datasize\',\r\n                    nodeLabel: false,\r\n                    defaultShow: false,\r\n                    valueUnit: \'B\',\r\n                    label: \'data\',\r\n                    binary: true,\r\n                    click: vm.clickTopLeft\r\n                },\r\n                topRight: {\r\n                    key: \'value\',\r\n                    nodeLabel: false,\r\n                    defaultShow: true,\r\n                    valueUnit: null,\r\n                    label: \'items\'\r\n                },\r\n                bottomRight: {},\r\n                bottomLeft: {\r\n                    key: \'name\',\r\n                    nodeLabel: true,\r\n                    defaultShow: true\r\n                }\r\n            }\r\n        },\r\n        overflow: {\r\n            tooltip: {\r\n                label: \'items\',\r\n                showTooltip: true\r\n            }\r\n        }\r\n    };\r\n}'},1939:function(t,r){t.exports="vm.click = function(elem) {\r\n    console.info(elem);\r\n};"},1940:function(t,r){t.exports='vm.data = {\r\n    "columns": [\r\n        { "id": "data_source", "name": "Repository", "ordinal": 0 },\r\n        ...\r\n    ],\r\n    "nodes": [\r\n        { "name": "Not Classified", "type": "classification", "id": 0, "value": 130, "datasize": 362969649 },\r\n        ...\r\n    ],\r\n    "links": [\r\n        { "source": 0, "target": 7, "value": 4, "datasize": 348 },\r\n        ...\r\n    ]\r\n};'},1941:function(t,r){t.exports="vm.options = {\r\n    linkHoverHL: true,\r\n    linkTooltip: {\r\n      show: true,\r\n      label: 'items'\r\n    },\r\n    col: {\r\n        headerLabelSpacing: 0,\r\n        paddingTop: 0,\r\n        paddingBottom: 0,\r\n        headerLabelLength: 18\r\n    },\r\n    block: {\r\n        minWidth: 120,\r\n        minHeight: 70,\r\n        calloutData: {\r\n            topLeft: { key: 'datasize', nodeLabel: false, defaultShow: false, valueUnit: 'B', label: 'data', binary: true },\r\n            topRight: { key: 'value', nodeLabel: false, defaultShow: true, valueUnit: null, label: 'items' },\r\n            bottomRight: { },\r\n            bottomLeft: { key: 'name', nodeLabel: true, defaultShow: true }\r\n        }\r\n    },\r\n    overflow: {\r\n        tooltip: {\r\n            label: 'items',\r\n            showTooltip:true\r\n        }\r\n    },\r\n    showColNumber: true\r\n};"},1942:function(t,r){t.exports='<div class="container-fluid">\r\n  <div class="row">\r\n    <div class="col-md-12 m-t-md">\r\n      <div class="flot-chart">\r\n        <flot dataset="sc.scrollChart.data" options="sc.scrollChart.baroptions"></flot>\r\n        <span tabindex="0" class="sr-only">\r\n          <span ng-repeat="item in sc.barChart.data[0].data">,</span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>'},1943:function(t,r){t.exports='angular.module(\'app\').controller(\'ScrollableChartCtrl\', ScrollableChartCtrl);\r\n\r\nScrollableChartCtrl.$inject = [\'$colorService\'];\r\n\r\nfunction ScrollableChartCtrl($colorService) {\r\n    var sc = this;\r\n\r\n    var flotChartColors = {\r\n        chartColor: $colorService.getColor(\'chart1\').toRgb(),\r\n        chartHover: $colorService.getColor(\'chart2\').setAlpha(0.2).toRgba(),\r\n        gridColor: $colorService.getColor(\'grey4\').toHex(),\r\n        tickColor: $colorService.getColor(\'grey6\').toHex(),\r\n        borderColor: $colorService.getColor(\'grey2\').setAlpha().toRgba(),\r\n        white: "#FFFFFF"\r\n    };\r\n\r\n    sc.scrollChart = {\r\n        data: [{\r\n            label: "bar",\r\n            data: [\r\n                [1, 34],\r\n                [2, 25],\r\n                [3, 19],\r\n                [4, 34],\r\n                [5, 32],\r\n                [6, 44],\r\n                [7, 12],\r\n                [8, 27],\r\n                [9, 15],\r\n                [10, 48],\r\n                [11, 40],\r\n                [12, 36]\r\n            ]\r\n        }],\r\n        baroptions: {\r\n            series: {\r\n                bars: {\r\n                    show: true,\r\n                    fill: true,\r\n                    fillColor: {\r\n                        colors: [{\r\n                            opacity: 0.1\r\n                        }, {\r\n                            opacity: 0.1\r\n                        }]\r\n                    },\r\n                    barWidth: 0.5,\r\n                    lineWidth: 1,\r\n                    \'align\': "center"\r\n                },\r\n                highlightColor: [flotChartColors.chartHover]\r\n            },\r\n            xaxis: {\r\n                tickDecimals: 0,\r\n                color: [flotChartColors.white],\r\n                ticks: [\r\n                    [1, ".doc"],\r\n                    [2, ".ppt"],\r\n                    [3, ".pdf"],\r\n                    [4, ".xls"],\r\n                    [5, ".html"],\r\n                    [6, ".txt"],\r\n                    [7, ".png"],\r\n                    [8, ".bmp"],\r\n                    [9, ".gif"],\r\n                    [10, ".svg"],\r\n                    [11, ".ttf"],\r\n                    [12, ".wav"]\r\n                ],\r\n                scrollable: {\r\n                    enabled: true,\r\n                    range: 4,\r\n                    lowerBound: 0.5,\r\n                    upperBound: 12.5,\r\n                    color: [flotChartColors.chartColor],\r\n                    callback: function () {\r\n                        //do stuff in here when scrolled\r\n                    }\r\n                }\r\n\r\n            },\r\n            colors: [flotChartColors.chartColor],\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                hoverable: true,\r\n                clickable: true,\r\n                borderWidth: {\r\n                    "left": 1,\r\n                    "bottom": 1,\r\n                    "right": 0,\r\n                    "top": 0\r\n                },\r\n                borderColor: {\r\n                    "left": [flotChartColors.borderColor],\r\n                    "bottom": [flotChartColors.borderColor]\r\n                }\r\n            },\r\n            legend: {\r\n                show: false\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -30\r\n                },\r\n                content: function (label, xval, yval) {\r\n                    var content = "x: " + "%x" + ", y: " + yval;\r\n                    return content;\r\n                }\r\n            }\r\n        }\r\n    };\r\n}'},1944:function(t,r){t.exports="xaxis: {\r\n    scrollable: {\r\n        enabled: true,\r\n        range: 4,\r\n        lowerBound: 0.5,\r\n        upperBound: 12.5,\r\n        color: '#614767',\r\n        callback: function(position) {\r\n            //do stuff in here when scrolled\r\n        }\r\n    }\r\n}"},1945:function(t,r){t.exports='<label>Select Node (by id): </label>\r\n<div class="input-group">\r\n  <input type="text" class="form-control" ng-model="vm.nodeIdInput">\r\n  <div class="input-group-btn">\r\n    <button type="button" class="btn button-secondary" ng-click="vm.api.setSelectedNodeById(vm.nodeIdInput)">UPDATE</button>\r\n  </div>\r\n</div>'},1946:function(t,r){t.exports="vm.api = {\r\n    selectedNode: null,\r\n    selectedEdge: null,\r\n    onNodeClick: onNodeClick(),\r\n    onEdgeClick: onEdgeClick(),\r\n    onStageClick: onStageClick()\r\n};"},1947:function(t,r){t.exports="sc.buttonPositions = {\r\n    maximize: {\r\n        'top':'-2%',\r\n        'right':'2%'\r\n    },\r\n    minimize: {\r\n        'top':'2%',\r\n        'right':'2%'\r\n    }\r\n};"},1948:function(t,r){t.exports='<social-chart data="vm.data"\r\n    width="100%"\r\n    height="800px"\r\n    api="vm.api"\r\n    communities="vm.communities"\r\n    detail-style="vm.detailStyle"\r\n    node-detail="pages/en-us/charts/social_chart/templates/nodeDetails.tmpl.html"\r\n    edge-detail="pages/en-us/charts/social_chart/templates/edgedetails.tmpl.html"\r\n    node-popover="pages/en-us/charts/social_chart/templates/nodePopover.tmpl.html"\r\n    edge-popover="pages/en-us/charts/social_chart/templates/edgePopover.tmpl.html"\r\n    force-atlas-duration="vm.forceAtlasDuration"\r\n    node-size-attribute=" \'volume\' "\r\n    start-maximized="false"\r\n    social-chart-container="wrapper-content"\r\n    show-maximize-control="true"\r\n    options="vm.options"\r\n    chart-title="vm.chartTitle"\r\n    edge-weight-influence="vm.edgeWeightInfluence"\r\n    min-labels="vm.minLabels">\r\n</social-chart>'},1949:function(t,r){t.exports='angular.module(\'app\').controller(\'SocialCtrl\', SocialCtrl);\r\n\r\nfunction SocialCtrl($scope) {\r\n    var vm = this;\r\n\r\n    //... define API functions\r\n\r\n    vm.api = {\r\n        selectedNode :null,\r\n        selectedEdge : null,\r\n        onNodeClick:onNodeClick(),\r\n        onEdgeClick:onEdgeClick(),\r\n        onStageClick:onStageClick(),\r\n        onNodeHover:onNodeClick(),\r\n        onEdgeHover:onEdgeClick()\r\n    };\r\n\r\n    //... define chart title\r\n    vm.chartTitle = {\r\n        title: "Nothing selected",\r\n        timeout: 3000,\r\n        nodeSelectedTitle: "Social interactions with ",\r\n        edgeSelectedTitle: "Social interactions between  and ",\r\n        stageSelectedTitle: "Nothing selected"\r\n    };\r\n\r\n    //always show at least this number of labels when nothing is selected\r\n    vm.minLabels = 5;\r\n\r\n    vm.communities = {\r\n        //...define communities\r\n    };\r\n    vm.detailStyle = {\r\n        //...define styles\r\n    };\r\n\r\n    vm.edgeWeightInfluence = false;\r\n\r\n    vm.forceAtlasDuration = 2000;\r\n\r\n    var nodes = [{\r\n        id: 0,\r\n        label: "Myriel"\r\n    },\r\n    ...\r\n    ];\r\n\r\n    var edges = [{\r\n        source: 1,\r\n        target: 0,\r\n        value: 1\r\n    },\r\n    ...\r\n    ];\r\n\r\n    vm.data = {\r\n        \'nodes\':nodes,\r\n        \'edges\':edges\r\n    };\r\n}'},1950:function(t,r){t.exports="function onNodeClick() {\r\n\r\n    function onNodeClick(node) {\r\n        console.log(node);\r\n        node.neighborNodes = node.getNeighbors().nodes;\r\n\r\n        for(var i in node.neighborNodes) {\r\n            node.neighborNodes[i].setInExternal = {\r\n                ratio: Math.random() * 100\r\n            };\r\n        }\r\n    }\r\n\r\n    return onNodeClick;\r\n};"},1951:function(t,r){t.exports=".social-demo .hold-icon {\r\n  background-image: url('https://uxaspects.github.io/UXAspects/assets/img/lock.png');\r\n  width: 18px;\r\n  height: 18px;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  margin:-2px 5px -2px 0px;\r\n  display: inline-block;\r\n}\r\n\r\n.social-demo .workbook-icon {\r\n  background-image: url('https://uxaspects.github.io/UXAspects/assets/img/book.png');\r\n  width: 18px;\r\n  height: 18px;\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  margin:-2px 9px -4px 0px;\r\n  display: inline-block;\r\n}\r\n\r\n.social-demo .nodeDetailButton{\r\n  box-shadow: none !important;\r\n  color:#fff;\r\n  background-color: #444;\r\n  border-color: #444;\r\n  font-family: 'Source Sans Pro';\r\n  font-weight: 300;\r\n}\r\n\r\n.social-demo .nodeDetailButton:hover,\r\n.nodeDetailButton:active,\r\n.nodeDetailButton:focus{\r\n  background-color: #555;\r\n}\r\n\r\n.social-demo .nodeDetailButtonSub{\r\n  color: #aaa;\r\n}\r\n\r\n.social-demo hr{\r\n  border-color: #444;\r\n}\r\n.social-demo .jspDrag {\r\n  background: #989898;\r\n}"},1952:function(t,r){t.exports='<div class="container-fluid">\r\n    <div class="row">\r\n        <div class="col-md-12 m-t-md">\r\n            <div class="full-screen-container">\r\n                <div style="width: 100%; max-width: 800px">\r\n                    <social-chart data="vm.data" width="100%" height="800px" api="vm.api" communities="vm.communities" detail-style="vm.detailStyle"\r\n                        node-detail="nodeDetails.html" edge-detail="edgeDetails.html" node-popover="nodePopover.html"\r\n                        edge-popover="edgePopover.html" force-atlas-duration="vm.forceAtlasDuration" node-size-attribute=" \'volume\' "\r\n                        start-maximized="false" social-chart-container="full-screen-container" show-maximize-control="true" options="vm.options"\r\n                        chart-title="vm.chartTitle" edge-weight-influence="vm.edgeWeightInfluence" min-labels="vm.minLabels"\r\n                        fullscreen-button-position="vm.buttonPositions">\r\n                    </social-chart>\r\n                </div>\r\n                <div class="m-b-sm">\r\n                    <pre ng-if="!vm.api.selectedNode.id">No node selected</pre>\r\n                    <pre ng-if="vm.api.selectedNode.id">Selected: {{vm.api.selectedNode.label}}, with id {{vm.api.selectedNode.id}}</pre>\r\n                </div>\r\n                <div>\r\n                    <pre ng-if="!vm.api.selectedEdge.id">No edge selected</pre>\r\n                    <pre ng-if="vm.api.selectedEdge.id">Selected: {{vm.api.selectedEdge.source}} to {{vm.api.selectedEdge.target}}</pre>\r\n                </div>\r\n\r\n                <div class="row">\r\n                    <div class="m-b-sm col-md-6 col-sm-3">\r\n                        <label>Select Node (by id): </label>\r\n\r\n                        <div class="input-group">\r\n                            <input type="text" class="form-control" ng-model="vm.nodeIdInput" placeholder="e.g. 5">\r\n                            <div class="input-group-btn">\r\n                                <button type="button" class="btn button-secondary" ng-click="vm.api.setSelectedNodeById(vm.nodeIdInput)">UPDATE</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class="m-b-sm col-md-6 col-sm-3">\r\n                        <label>Select Edge (by id):</label>\r\n\r\n                        <div class="input-group">\r\n                            <input type="text" class="form-control" ng-model="vm.edgeIdInput" placeholder="e.g. e15">\r\n                            <div class="input-group-btn">\r\n                                <button type="button" class="btn button-secondary" ng-click="vm.api.setSelectedEdgeById(vm.edgeIdInput)">UPDATE</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>'},1953:function(t,r){t.exports='angular.module(\'app\').controller(\'SocialCtrl\', SocialCtrl);\r\n\r\nfunction SocialCtrl() {\r\n    var vm = this;\r\n\r\n    vm.buttonPositions = {\r\n        maximize: {\r\n            \'top\': \'-2%\',\r\n            \'right\': \'-2%\'\r\n        },\r\n        minimize: {\r\n            \'top\': \'-2%\',\r\n            \'right\': \'0\'\r\n        }\r\n    }\r\n\r\n    vm.chartTitle = {\r\n        title: "Entire network",\r\n        timeout: 3000,\r\n        nodeSelectedTitle: "Social interactions with {{node}}",\r\n        edgeSelectedTitle: "Social interactions between {{source}} and {{target}}",\r\n        stageSelectedTitle: "Entire network"\r\n    };\r\n\r\n    function compareNodes(a, b) {\r\n        if (a.setInExternal.ratio < b.setInExternal.ratio) {\r\n            return 1;\r\n        }\r\n        if (a.setInExternal.ratio > b.setInExternal.ratio) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function onNodeClick() {\r\n\r\n        function onNodeClick(node) {\r\n\r\n            if (node.neighborNodes) return;\r\n            var neighbours = node.getNeighbors();\r\n            node.neighborNodes = neighbours.nodes;\r\n            var edges = neighbours.edges;\r\n            node.neighbourList = [];\r\n            for (var i in node.neighborNodes) {\r\n                node.neighborNodes[i].setInExternal = {\r\n                    ratio: Math.round((node.neighborNodes[i].additional.sent[node.id] + node.neighborNodes[i].additional.received[node.id]) / node.additional.volume * 100),\r\n                    goToEdge: makeEdgeFunc(i)\r\n                };\r\n                node.neighbourList.push(node.neighborNodes[i]);\r\n            }\r\n\r\n            node.neighbourList.sort(compareNodes);\r\n\r\n            function makeEdgeFunc(i) {\r\n                function goToEdge() {\r\n                    vm.api.setSelectedEdgeById(Object.keys(edges[i])[0]);\r\n                }\r\n                return goToEdge;\r\n            }\r\n        }\r\n\r\n        return onNodeClick;\r\n    };\r\n\r\n    function onEdgeClick() {\r\n\r\n        function onEdgeClick(edge) {\r\n            if (edge.sourceNode) return;\r\n            edge.sourceNode = edge.getSourceNode();\r\n            edge.sourceNode.goTo = function () {\r\n                vm.api.setSelectedNodeById(edge.sourceNode.id);\r\n            };\r\n            edge.targetNode = edge.getTargetNode();\r\n            edge.targetNode.goTo = function () {\r\n                vm.api.setSelectedNodeById(edge.targetNode.id);\r\n            };\r\n        }\r\n\r\n        return onEdgeClick;\r\n    }\r\n\r\n    function onStageClick() {\r\n\r\n        function onStageClick() {}\r\n\r\n        return onStageClick;\r\n    }\r\n\r\n    //NB: Example only, not passed in the api object below\r\n    function onLoadComplete() {\r\n\r\n        function onLoadComplete() {\r\n\r\n            vm.api.setSelectedNodeById(61);\r\n\r\n        }\r\n\r\n        return onLoadComplete;\r\n    }\r\n\r\n    vm.api = {\r\n        selectedNode: null,\r\n        selectedEdge: null,\r\n        onNodeClick: onNodeClick(),\r\n        onEdgeClick: onEdgeClick(),\r\n        onStageClick: onStageClick(),\r\n        onNodeHover: onNodeClick(),\r\n        onEdgeHover: onEdgeClick()\r\n    };\r\n\r\n    vm.communities = {\r\n        example_group_1: {\r\n            color: \'#00cceb\',\r\n            style: \'stroke\'\r\n        }\r\n    };\r\n    vm.detailStyle = {\r\n        node: {\r\n            \'width\': \'235px\',\r\n            \'height\': \'99%\'\r\n        },\r\n        edge: {\r\n            \'width\': \'40vw\',\r\n            \'min-width\': \'524px\',\r\n            \'max-height\': \'176px\',\r\n            \'margin-right\': \'5px\'\r\n        }\r\n    };\r\n\r\n    vm.options = {\r\n        \'neighborViewOnSelect\': true,\r\n        \'minNodeSize\': 5,\r\n        \'maxNodeSize\': 12\r\n    };\r\n\r\n    vm.edgeWeightInfluence = false;\r\n\r\n    vm.forceAtlasDuration = 1700;\r\n\r\n    vm.minLabels = 5;\r\n\r\n    var nodes = [{\r\n        id: 0,\r\n        label: chance.name()\r\n    }, {\r\n        id: 1,\r\n        label: chance.name()\r\n    }, {\r\n        id: 2,\r\n        label: chance.name()\r\n    }, {\r\n        id: 3,\r\n        label: chance.name()\r\n    }, {\r\n        id: 4,\r\n        label: chance.name()\r\n    }, {\r\n        id: 5,\r\n        label: chance.name()\r\n    }, {\r\n        id: 6,\r\n        label: chance.name()\r\n    }, {\r\n        id: 7,\r\n        label: chance.name()\r\n    }, {\r\n        id: 8,\r\n        label: chance.name()\r\n    }, {\r\n        id: 9,\r\n        label: chance.name()\r\n    }, {\r\n        id: 10,\r\n        label: chance.name()\r\n    }, {\r\n        id: 11,\r\n        label: chance.name()\r\n    }, {\r\n        id: 12,\r\n        label: chance.name()\r\n    }, {\r\n        id: 13,\r\n        label: chance.name()\r\n    }, {\r\n        id: 14,\r\n        label: chance.name()\r\n    }, {\r\n        id: 15,\r\n        label: chance.name()\r\n    }, {\r\n        id: 16,\r\n        label: chance.name()\r\n    }, {\r\n        id: 17,\r\n        label: chance.name()\r\n    }, {\r\n        id: 18,\r\n        label: chance.name()\r\n    }, {\r\n        id: 19,\r\n        label: chance.name()\r\n    }, {\r\n        id: 20,\r\n        label: chance.name()\r\n    }, {\r\n        id: 21,\r\n        label: chance.name()\r\n    }, {\r\n        id: 22,\r\n        label: chance.name()\r\n    }, {\r\n        id: 23,\r\n        label: chance.name()\r\n    }, {\r\n        id: 24,\r\n        label: chance.name()\r\n    }, {\r\n        id: 25,\r\n        label: chance.name()\r\n    }, {\r\n        id: 26,\r\n        label: chance.name()\r\n    }, {\r\n        id: 27,\r\n        label: chance.name()\r\n    }, {\r\n        id: 28,\r\n        label: chance.name()\r\n    }, {\r\n        id: 29,\r\n        label: chance.name()\r\n    }, {\r\n        id: 30,\r\n        label: chance.name()\r\n    }, {\r\n        id: 31,\r\n        label: chance.name(),\r\n        community: "example_group_1"\r\n    }, {\r\n        id: 32,\r\n        label: chance.name()\r\n    }, {\r\n        id: 33,\r\n        label: chance.name()\r\n    }, {\r\n        id: 34,\r\n        label: chance.name()\r\n    }, {\r\n        id: 35,\r\n        label: chance.name()\r\n    }, {\r\n        id: 36,\r\n        label: chance.name()\r\n    }, {\r\n        id: 37,\r\n        label: chance.name()\r\n    }, {\r\n        id: 38,\r\n        label: chance.name(),\r\n        community: "example_group_1"\r\n    }, {\r\n        id: 39,\r\n        label: chance.name()\r\n    }, {\r\n        id: 40,\r\n        label: chance.name()\r\n    }, {\r\n        id: 41,\r\n        label: chance.name()\r\n    }, {\r\n        id: 42,\r\n        label: chance.name()\r\n    }, {\r\n        id: 43,\r\n        label: chance.name()\r\n    }, {\r\n        id: 44,\r\n        label: chance.name()\r\n    }, {\r\n        id: 45,\r\n        label: chance.name()\r\n    }, {\r\n        id: 46,\r\n        label: chance.name()\r\n    }, {\r\n        id: 47,\r\n        label: chance.name()\r\n    }, {\r\n        id: 48,\r\n        label: chance.name()\r\n    }, {\r\n        id: 49,\r\n        label: chance.name()\r\n    }, {\r\n        id: 50,\r\n        label: chance.name()\r\n    }, {\r\n        id: 51,\r\n        label: chance.name()\r\n    }, {\r\n        id: 52,\r\n        label: chance.name()\r\n    }, {\r\n        id: 53,\r\n        label: chance.name()\r\n    }, {\r\n        id: 54,\r\n        label: chance.name()\r\n    }, {\r\n        id: 55,\r\n        label: chance.name()\r\n    }, {\r\n        id: 56,\r\n        label: chance.name()\r\n    }, {\r\n        id: 57,\r\n        label: chance.name()\r\n    }, {\r\n        id: 58,\r\n        label: chance.name()\r\n    }, {\r\n        id: 59,\r\n        label: chance.name()\r\n    }, {\r\n        id: 60,\r\n        label: chance.name()\r\n    }, {\r\n        id: 61,\r\n        label: chance.name()\r\n    }, {\r\n        id: 62,\r\n        label: chance.name()\r\n    }, {\r\n        id: 63,\r\n        label: chance.name()\r\n    }, {\r\n        id: 64,\r\n        label: chance.name()\r\n    }, {\r\n        id: 65,\r\n        label: chance.name(),\r\n        community: "example_group_1"\r\n    }, {\r\n        id: 66,\r\n        label: chance.name()\r\n    }, {\r\n        id: 67,\r\n        label: chance.name()\r\n    }, {\r\n        id: 68,\r\n        label: chance.name()\r\n    }, {\r\n        id: 69,\r\n        label: chance.name()\r\n    }, {\r\n        id: 70,\r\n        label: chance.name(),\r\n        community: "example_group_1"\r\n    }, {\r\n        id: 71,\r\n        label: chance.name()\r\n    }, {\r\n        id: 72,\r\n        label: chance.name()\r\n    }, {\r\n        id: 73,\r\n        label: chance.name()\r\n    }, {\r\n        id: 74,\r\n        label: chance.name()\r\n    }, {\r\n        id: 75,\r\n        label: chance.name()\r\n    }, {\r\n        id: 76,\r\n        label: chance.name()\r\n    }];\r\n\r\n    var nodeMap = {};\r\n\r\n    for (var i = 0; i < nodes.length; i += 1) {\r\n        nodes[i].additional = {\r\n            fullName: nodes[i].label + "@business.com"\r\n        };\r\n        nodeMap[nodes[i].id] = nodes[i];\r\n    }\r\n\r\n    var edges = [{\r\n        source: 1,\r\n        target: 0,\r\n        value: 1\r\n    }, {\r\n        source: 2,\r\n        target: 0,\r\n        value: 8\r\n    }, {\r\n        source: 3,\r\n        target: 0,\r\n        value: 10\r\n    }, {\r\n        source: 3,\r\n        target: 2,\r\n        value: 6\r\n    }, {\r\n        source: 4,\r\n        target: 0,\r\n        value: 1\r\n    }, {\r\n        source: 5,\r\n        target: 0,\r\n        value: 1\r\n    }, {\r\n        source: 6,\r\n        target: 0,\r\n        value: 1\r\n    }, {\r\n        source: 7,\r\n        target: 0,\r\n        value: 1\r\n    }, {\r\n        source: 8,\r\n        target: 0,\r\n        value: 2\r\n    }, {\r\n        source: 9,\r\n        target: 0,\r\n        value: 1\r\n    }, {\r\n        source: 11,\r\n        target: 10,\r\n        value: 1\r\n    }, {\r\n        source: 11,\r\n        target: 3,\r\n        value: 3\r\n    }, {\r\n        source: 11,\r\n        target: 2,\r\n        value: 3\r\n    }, {\r\n        source: 11,\r\n        target: 0,\r\n        value: 5\r\n    }, {\r\n        source: 12,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 13,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 14,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 15,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 17,\r\n        target: 16,\r\n        value: 4\r\n    }, {\r\n        source: 18,\r\n        target: 16,\r\n        value: 4\r\n    }, {\r\n        source: 18,\r\n        target: 17,\r\n        value: 4\r\n    }, {\r\n        source: 19,\r\n        target: 16,\r\n        value: 4\r\n    }, {\r\n        source: 19,\r\n        target: 17,\r\n        value: 4\r\n    }, {\r\n        source: 19,\r\n        target: 18,\r\n        value: 4\r\n    }, {\r\n        source: 20,\r\n        target: 16,\r\n        value: 3\r\n    }, {\r\n        source: 20,\r\n        target: 17,\r\n        value: 3\r\n    }, {\r\n        source: 20,\r\n        target: 18,\r\n        value: 3\r\n    }, {\r\n        source: 20,\r\n        target: 19,\r\n        value: 4\r\n    }, {\r\n        source: 21,\r\n        target: 16,\r\n        value: 3\r\n    }, {\r\n        source: 21,\r\n        target: 17,\r\n        value: 3\r\n    }, {\r\n        source: 21,\r\n        target: 18,\r\n        value: 3\r\n    }, {\r\n        source: 21,\r\n        target: 19,\r\n        value: 3\r\n    }, {\r\n        source: 21,\r\n        target: 20,\r\n        value: 5\r\n    }, {\r\n        source: 22,\r\n        target: 16,\r\n        value: 3\r\n    }, {\r\n        source: 22,\r\n        target: 17,\r\n        value: 3\r\n    }, {\r\n        source: 22,\r\n        target: 18,\r\n        value: 3\r\n    }, {\r\n        source: 22,\r\n        target: 19,\r\n        value: 3\r\n    }, {\r\n        source: 22,\r\n        target: 20,\r\n        value: 4\r\n    }, {\r\n        source: 22,\r\n        target: 21,\r\n        value: 4\r\n    }, {\r\n        source: 23,\r\n        target: 16,\r\n        value: 3\r\n    }, {\r\n        source: 23,\r\n        target: 17,\r\n        value: 3\r\n    }, {\r\n        source: 23,\r\n        target: 18,\r\n        value: 3\r\n    }, {\r\n        source: 23,\r\n        target: 19,\r\n        value: 3\r\n    }, {\r\n        source: 23,\r\n        target: 20,\r\n        value: 4\r\n    }, {\r\n        source: 23,\r\n        target: 21,\r\n        value: 4\r\n    }, {\r\n        source: 23,\r\n        target: 22,\r\n        value: 4\r\n    }, {\r\n        source: 23,\r\n        target: 12,\r\n        value: 2\r\n    }, {\r\n        source: 23,\r\n        target: 11,\r\n        value: 9\r\n    }, {\r\n        source: 24,\r\n        target: 23,\r\n        value: 2\r\n    }, {\r\n        source: 24,\r\n        target: 11,\r\n        value: 7\r\n    }, {\r\n        source: 25,\r\n        target: 24,\r\n        value: 13\r\n    }, {\r\n        source: 25,\r\n        target: 23,\r\n        value: 1\r\n    }, {\r\n        source: 25,\r\n        target: 11,\r\n        value: 12\r\n    }, {\r\n        source: 26,\r\n        target: 24,\r\n        value: 4\r\n    }, {\r\n        source: 26,\r\n        target: 11,\r\n        value: 31\r\n    }, {\r\n        source: 26,\r\n        target: 16,\r\n        value: 1\r\n    }, {\r\n        source: 26,\r\n        target: 25,\r\n        value: 1\r\n    }, {\r\n        source: 27,\r\n        target: 11,\r\n        value: 17\r\n    }, {\r\n        source: 27,\r\n        target: 23,\r\n        value: 5\r\n    }, {\r\n        source: 27,\r\n        target: 25,\r\n        value: 5\r\n    }, {\r\n        source: 27,\r\n        target: 24,\r\n        value: 1\r\n    }, {\r\n        source: 27,\r\n        target: 26,\r\n        value: 1\r\n    }, {\r\n        source: 28,\r\n        target: 11,\r\n        value: 8\r\n    }, {\r\n        source: 28,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 29,\r\n        target: 23,\r\n        value: 1\r\n    }, {\r\n        source: 29,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 29,\r\n        target: 11,\r\n        value: 2\r\n    }, {\r\n        source: 30,\r\n        target: 23,\r\n        value: 1\r\n    }, {\r\n        source: 31,\r\n        target: 30,\r\n        value: 2\r\n    }, {\r\n        source: 31,\r\n        target: 11,\r\n        value: 3\r\n    }, {\r\n        source: 31,\r\n        target: 23,\r\n        value: 2\r\n    }, {\r\n        source: 31,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 32,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 33,\r\n        target: 11,\r\n        value: 2\r\n    }, {\r\n        source: 33,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 34,\r\n        target: 11,\r\n        value: 3\r\n    }, {\r\n        source: 34,\r\n        target: 29,\r\n        value: 2\r\n    }, {\r\n        source: 35,\r\n        target: 11,\r\n        value: 3\r\n    }, {\r\n        source: 35,\r\n        target: 34,\r\n        value: 3\r\n    }, {\r\n        source: 35,\r\n        target: 29,\r\n        value: 2\r\n    }, {\r\n        source: 36,\r\n        target: 34,\r\n        value: 2\r\n    }, {\r\n        source: 36,\r\n        target: 35,\r\n        value: 2\r\n    }, {\r\n        source: 36,\r\n        target: 11,\r\n        value: 2\r\n    }, {\r\n        source: 36,\r\n        target: 29,\r\n        value: 1\r\n    }, {\r\n        source: 37,\r\n        target: 34,\r\n        value: 2\r\n    }, {\r\n        source: 37,\r\n        target: 35,\r\n        value: 2\r\n    }, {\r\n        source: 37,\r\n        target: 36,\r\n        value: 2\r\n    }, {\r\n        source: 37,\r\n        target: 11,\r\n        value: 2\r\n    }, {\r\n        source: 37,\r\n        target: 29,\r\n        value: 1\r\n    }, {\r\n        source: 38,\r\n        target: 34,\r\n        value: 2\r\n    }, {\r\n        source: 38,\r\n        target: 35,\r\n        value: 2\r\n    }, {\r\n        source: 38,\r\n        target: 36,\r\n        value: 2\r\n    }, {\r\n        source: 38,\r\n        target: 37,\r\n        value: 2\r\n    }, {\r\n        source: 38,\r\n        target: 11,\r\n        value: 2\r\n    }, {\r\n        source: 38,\r\n        target: 29,\r\n        value: 1\r\n    }, {\r\n        source: 39,\r\n        target: 25,\r\n        value: 1\r\n    }, {\r\n        source: 40,\r\n        target: 25,\r\n        value: 1\r\n    }, {\r\n        source: 41,\r\n        target: 24,\r\n        value: 2\r\n    }, {\r\n        source: 41,\r\n        target: 25,\r\n        value: 3\r\n    }, {\r\n        source: 42,\r\n        target: 41,\r\n        value: 2\r\n    }, {\r\n        source: 42,\r\n        target: 25,\r\n        value: 2\r\n    }, {\r\n        source: 42,\r\n        target: 24,\r\n        value: 1\r\n    }, {\r\n        source: 43,\r\n        target: 11,\r\n        value: 3\r\n    }, {\r\n        source: 43,\r\n        target: 26,\r\n        value: 1\r\n    }, {\r\n        source: 43,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 44,\r\n        target: 28,\r\n        value: 3\r\n    }, {\r\n        source: 44,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 45,\r\n        target: 28,\r\n        value: 2\r\n    }, {\r\n        source: 47,\r\n        target: 46,\r\n        value: 1\r\n    }, {\r\n        source: 48,\r\n        target: 47,\r\n        value: 2\r\n    }, {\r\n        source: 48,\r\n        target: 25,\r\n        value: 1\r\n    }, {\r\n        source: 48,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 48,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 49,\r\n        target: 26,\r\n        value: 3\r\n    }, {\r\n        source: 49,\r\n        target: 11,\r\n        value: 2\r\n    }, {\r\n        source: 50,\r\n        target: 49,\r\n        value: 1\r\n    }, {\r\n        source: 50,\r\n        target: 24,\r\n        value: 1\r\n    }, {\r\n        source: 51,\r\n        target: 49,\r\n        value: 9\r\n    }, {\r\n        source: 51,\r\n        target: 26,\r\n        value: 2\r\n    }, {\r\n        source: 51,\r\n        target: 11,\r\n        value: 2\r\n    }, {\r\n        source: 52,\r\n        target: 51,\r\n        value: 1\r\n    }, {\r\n        source: 52,\r\n        target: 39,\r\n        value: 1\r\n    }, {\r\n        source: 53,\r\n        target: 51,\r\n        value: 1\r\n    }, {\r\n        source: 54,\r\n        target: 51,\r\n        value: 2\r\n    }, {\r\n        source: 54,\r\n        target: 49,\r\n        value: 1\r\n    }, {\r\n        source: 54,\r\n        target: 26,\r\n        value: 1\r\n    }, {\r\n        source: 55,\r\n        target: 51,\r\n        value: 6\r\n    }, {\r\n        source: 55,\r\n        target: 49,\r\n        value: 12\r\n    }, {\r\n        source: 55,\r\n        target: 39,\r\n        value: 1\r\n    }, {\r\n        source: 55,\r\n        target: 54,\r\n        value: 1\r\n    }, {\r\n        source: 55,\r\n        target: 26,\r\n        value: 21\r\n    }, {\r\n        source: 55,\r\n        target: 11,\r\n        value: 19\r\n    }, {\r\n        source: 55,\r\n        target: 16,\r\n        value: 1\r\n    }, {\r\n        source: 55,\r\n        target: 25,\r\n        value: 2\r\n    }, {\r\n        source: 55,\r\n        target: 41,\r\n        value: 5\r\n    }, {\r\n        source: 55,\r\n        target: 48,\r\n        value: 4\r\n    }, {\r\n        source: 56,\r\n        target: 49,\r\n        value: 1\r\n    }, {\r\n        source: 56,\r\n        target: 55,\r\n        value: 1\r\n    }, {\r\n        source: 57,\r\n        target: 55,\r\n        value: 1\r\n    }, {\r\n        source: 57,\r\n        target: 41,\r\n        value: 1\r\n    }, {\r\n        source: 57,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 58,\r\n        target: 55,\r\n        value: 7\r\n    }, {\r\n        source: 58,\r\n        target: 48,\r\n        value: 7\r\n    }, {\r\n        source: 58,\r\n        target: 27,\r\n        value: 6\r\n    }, {\r\n        source: 58,\r\n        target: 57,\r\n        value: 1\r\n    }, {\r\n        source: 58,\r\n        target: 11,\r\n        value: 4\r\n    }, {\r\n        source: 59,\r\n        target: 58,\r\n        value: 15\r\n    }, {\r\n        source: 59,\r\n        target: 55,\r\n        value: 5\r\n    }, {\r\n        source: 59,\r\n        target: 48,\r\n        value: 6\r\n    }, {\r\n        source: 59,\r\n        target: 57,\r\n        value: 2\r\n    }, {\r\n        source: 60,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 60,\r\n        target: 58,\r\n        value: 4\r\n    }, {\r\n        source: 60,\r\n        target: 59,\r\n        value: 2\r\n    }, {\r\n        source: 61,\r\n        target: 48,\r\n        value: 2\r\n    }, {\r\n        source: 61,\r\n        target: 58,\r\n        value: 6\r\n    }, {\r\n        source: 61,\r\n        target: 60,\r\n        value: 2\r\n    }, {\r\n        source: 61,\r\n        target: 59,\r\n        value: 5\r\n    }, {\r\n        source: 61,\r\n        target: 57,\r\n        value: 1\r\n    }, {\r\n        source: 61,\r\n        target: 55,\r\n        value: 1\r\n    }, {\r\n        source: 62,\r\n        target: 55,\r\n        value: 9\r\n    }, {\r\n        source: 62,\r\n        target: 58,\r\n        value: 17\r\n    }, {\r\n        source: 62,\r\n        target: 59,\r\n        value: 13\r\n    }, {\r\n        source: 62,\r\n        target: 48,\r\n        value: 7\r\n    }, {\r\n        source: 62,\r\n        target: 57,\r\n        value: 2\r\n    }, {\r\n        source: 62,\r\n        target: 41,\r\n        value: 1\r\n    }, {\r\n        source: 62,\r\n        target: 61,\r\n        value: 6\r\n    }, {\r\n        source: 62,\r\n        target: 60,\r\n        value: 3\r\n    }, {\r\n        source: 63,\r\n        target: 59,\r\n        value: 5\r\n    }, {\r\n        source: 63,\r\n        target: 48,\r\n        value: 5\r\n    }, {\r\n        source: 63,\r\n        target: 62,\r\n        value: 6\r\n    }, {\r\n        source: 63,\r\n        target: 57,\r\n        value: 2\r\n    }, {\r\n        source: 63,\r\n        target: 58,\r\n        value: 4\r\n    }, {\r\n        source: 63,\r\n        target: 61,\r\n        value: 3\r\n    }, {\r\n        source: 63,\r\n        target: 60,\r\n        value: 2\r\n    }, {\r\n        source: 63,\r\n        target: 55,\r\n        value: 1\r\n    }, {\r\n        source: 64,\r\n        target: 55,\r\n        value: 5\r\n    }, {\r\n        source: 64,\r\n        target: 62,\r\n        value: 12\r\n    }, {\r\n        source: 64,\r\n        target: 48,\r\n        value: 5\r\n    }, {\r\n        source: 64,\r\n        target: 63,\r\n        value: 4\r\n    }, {\r\n        source: 64,\r\n        target: 58,\r\n        value: 10\r\n    }, {\r\n        source: 64,\r\n        target: 61,\r\n        value: 6\r\n    }, {\r\n        source: 64,\r\n        target: 60,\r\n        value: 2\r\n    }, {\r\n        source: 64,\r\n        target: 59,\r\n        value: 9\r\n    }, {\r\n        source: 64,\r\n        target: 57,\r\n        value: 1\r\n    }, {\r\n        source: 64,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 65,\r\n        target: 63,\r\n        value: 5\r\n    }, {\r\n        source: 65,\r\n        target: 64,\r\n        value: 7\r\n    }, {\r\n        source: 65,\r\n        target: 48,\r\n        value: 3\r\n    }, {\r\n        source: 65,\r\n        target: 62,\r\n        value: 5\r\n    }, {\r\n        source: 65,\r\n        target: 58,\r\n        value: 5\r\n    }, {\r\n        source: 65,\r\n        target: 61,\r\n        value: 5\r\n    }, {\r\n        source: 65,\r\n        target: 60,\r\n        value: 2\r\n    }, {\r\n        source: 65,\r\n        target: 59,\r\n        value: 5\r\n    }, {\r\n        source: 65,\r\n        target: 57,\r\n        value: 1\r\n    }, {\r\n        source: 65,\r\n        target: 55,\r\n        value: 2\r\n    }, {\r\n        source: 66,\r\n        target: 64,\r\n        value: 3\r\n    }, {\r\n        source: 66,\r\n        target: 58,\r\n        value: 3\r\n    }, {\r\n        source: 66,\r\n        target: 59,\r\n        value: 1\r\n    }, {\r\n        source: 66,\r\n        target: 62,\r\n        value: 2\r\n    }, {\r\n        source: 66,\r\n        target: 65,\r\n        value: 2\r\n    }, {\r\n        source: 66,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 66,\r\n        target: 63,\r\n        value: 1\r\n    }, {\r\n        source: 66,\r\n        target: 61,\r\n        value: 1\r\n    }, {\r\n        source: 66,\r\n        target: 60,\r\n        value: 1\r\n    }, {\r\n        source: 67,\r\n        target: 57,\r\n        value: 3\r\n    }, {\r\n        source: 68,\r\n        target: 25,\r\n        value: 5\r\n    }, {\r\n        source: 68,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 68,\r\n        target: 24,\r\n        value: 1\r\n    }, {\r\n        source: 68,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 68,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 68,\r\n        target: 41,\r\n        value: 1\r\n    }, {\r\n        source: 69,\r\n        target: 25,\r\n        value: 6\r\n    }, {\r\n        source: 69,\r\n        target: 68,\r\n        value: 6\r\n    }, {\r\n        source: 69,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 69,\r\n        target: 24,\r\n        value: 1\r\n    }, {\r\n        source: 69,\r\n        target: 27,\r\n        value: 2\r\n    }, {\r\n        source: 69,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 69,\r\n        target: 41,\r\n        value: 1\r\n    }, {\r\n        source: 70,\r\n        target: 25,\r\n        value: 4\r\n    }, {\r\n        source: 70,\r\n        target: 69,\r\n        value: 4\r\n    }, {\r\n        source: 70,\r\n        target: 68,\r\n        value: 4\r\n    }, {\r\n        source: 70,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 70,\r\n        target: 24,\r\n        value: 1\r\n    }, {\r\n        source: 70,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 70,\r\n        target: 41,\r\n        value: 1\r\n    }, {\r\n        source: 70,\r\n        target: 58,\r\n        value: 1\r\n    }, {\r\n        source: 71,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 71,\r\n        target: 69,\r\n        value: 2\r\n    }, {\r\n        source: 71,\r\n        target: 68,\r\n        value: 2\r\n    }, {\r\n        source: 71,\r\n        target: 70,\r\n        value: 2\r\n    }, {\r\n        source: 71,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 71,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 71,\r\n        target: 41,\r\n        value: 1\r\n    }, {\r\n        source: 71,\r\n        target: 25,\r\n        value: 1\r\n    }, {\r\n        source: 72,\r\n        target: 26,\r\n        value: 2\r\n    }, {\r\n        source: 72,\r\n        target: 27,\r\n        value: 1\r\n    }, {\r\n        source: 72,\r\n        target: 11,\r\n        value: 1\r\n    }, {\r\n        source: 73,\r\n        target: 48,\r\n        value: 2\r\n    }, {\r\n        source: 74,\r\n        target: 48,\r\n        value: 2\r\n    }, {\r\n        source: 74,\r\n        target: 73,\r\n        value: 3\r\n    }, {\r\n        source: 75,\r\n        target: 69,\r\n        value: 3\r\n    }, {\r\n        source: 75,\r\n        target: 68,\r\n        value: 3\r\n    }, {\r\n        source: 75,\r\n        target: 25,\r\n        value: 3\r\n    }, {\r\n        source: 75,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 75,\r\n        target: 41,\r\n        value: 1\r\n    }, {\r\n        source: 75,\r\n        target: 70,\r\n        value: 1\r\n    }, {\r\n        source: 75,\r\n        target: 71,\r\n        value: 1\r\n    }, {\r\n        source: 76,\r\n        target: 64,\r\n        value: 1\r\n    }, {\r\n        source: 76,\r\n        target: 65,\r\n        value: 1\r\n    }, {\r\n        source: 76,\r\n        target: 66,\r\n        value: 1\r\n    }, {\r\n        source: 76,\r\n        target: 63,\r\n        value: 1\r\n    }, {\r\n        source: 76,\r\n        target: 62,\r\n        value: 1\r\n    }, {\r\n        source: 76,\r\n        target: 48,\r\n        value: 1\r\n    }, {\r\n        source: 76,\r\n        target: 58,\r\n        value: 1\r\n    }];\r\n\r\n    for (var e = 0; e < edges.length; e += 1) {\r\n        nodeMap[edges[e].target]["additional"]["received"] = nodeMap[edges[e].target]["additional"]["received"] || {};\r\n        nodeMap[edges[e].target]["additional"]["sent"] = nodeMap[edges[e].target]["additional"]["sent"] || {};\r\n\r\n        nodeMap[edges[e].source]["additional"]["received"] = nodeMap[edges[e].source]["additional"]["received"] || {};\r\n        nodeMap[edges[e].source]["additional"]["sent"] = nodeMap[edges[e].source]["additional"]["sent"] || {};\r\n\r\n        var sourceToTarget = Math.round(Math.random() * 10);\r\n        var targetToSource = Math.round(Math.random() * 10);\r\n\r\n        nodeMap[edges[e].target]["additional"]["received"][edges[e].source] = sourceToTarget;\r\n        nodeMap[edges[e].target]["additional"]["sent"][edges[e].source] = targetToSource;\r\n\r\n        nodeMap[edges[e].source]["additional"]["received"][edges[e].target] = targetToSource;\r\n        nodeMap[edges[e].source]["additional"]["sent"][edges[e].target] = sourceToTarget;\r\n    }\r\n\r\n    var newNodes = [];\r\n\r\n    for (var n in nodeMap) {\r\n        if (nodeMap.hasOwnProperty(n)) {\r\n            var sentTotal = 0;\r\n            var receivedTotal = 0;\r\n            for (var s in nodeMap[n].additional.sent) {\r\n                sentTotal += nodeMap[n].additional.sent[s];\r\n            }\r\n            for (var r in nodeMap[n].additional.received) {\r\n                receivedTotal += nodeMap[n].additional.received[r];\r\n            }\r\n            nodeMap[n].additional.volume = receivedTotal + sentTotal;\r\n            newNodes.push(nodeMap[n]);\r\n        }\r\n    }\r\n\r\n    vm.data = {\r\n        \'nodes\': nodes,\r\n        \'edges\': edges\r\n    };\r\n\r\n}'},1954:function(t,r){t.exports="vm.communities = {\r\n    example_group_1: {\r\n        color: '#00cceb',\r\n        style: 'stroke'\r\n    }\r\n};"},1955:function(t,r){t.exports='<div class="edge-detail-demo  social-demo">\r\n\r\n<div class="left-node social-edge-layout-demo social-edge-demo-clickable" ng-click="sc.selectedEdge.sourceNode.goTo()">\r\n\t<div class="social-edge-demo-inner">\r\n\t\t<i class="hpe-icon hpe-user text-vibrant1" style="font-size:20px;"></i>\r\n\t\t<h3 class="selectednode-label" style="margin-bottom:0px;">{{sc.selectedEdge.sourceNode.label}}</h3>\r\n\t\t<div class="selectednode-additional-label">{{sc.selectedEdge.sourceNode.additional.fullName}}</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="arrows social-edge-layout-demo selectededge-label">\r\n\r\n\t<i class="hpe-icon hpe-link-previous"  style="font-size:16px; color:#60798d;"></i>\r\n\t<span style="font-size:16px;">{{sc.selectedEdge.sourceNode.additional.received[sc.selectedEdge.targetNode.id]}}</span>\r\n\t<span class="m-r m-l" style="font-size:13px;">items</span>\r\n\t<span style="font-size:16px;">{{sc.selectedEdge.targetNode.additional.received[sc.selectedEdge.sourceNode.id]}}</span>\r\n\t<i class="hpe-icon hpe-link-next"  style="font-size:16px;"></i>\r\n\r\n</div>\r\n\r\n<div class="right-node social-edge-layout-demo social-edge-demo-clickable" ng-click="sc.selectedEdge.targetNode.goTo()">\r\n\t<div class="social-edge-demo-inner">\r\n\t\t<i class="hpe-icon hpe-user text-vibrant1" style="font-size:20px;"></i>\r\n\t\t<h3 class="selectededge-targetnode-label" style="margin-bottom:0px;">{{sc.selectedEdge.targetNode.label}}</h3>\r\n\t\t<div class="selectededge-targetnode-label-full">{{sc.selectedEdge.targetNode.additional.fullName}}</div>\r\n\t</div>\r\n</div>\r\n\r\n<hr style="clear:both; margin:0;"/>\r\n\r\n<div class="">\r\n\t<div class="m-b-sm m-t-sm">\r\n\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="hold-icon"></i>HOLD\r\n\t\t\t<span class="nodeDetailButtonSub">\r\n\t\t\t{{ sc.selectedEdge.sourceNode.additional.received[sc.selectedEdge.targetNode.id] + sc.selectedEdge.targetNode.additional.received[sc.selectedEdge.sourceNode.id] }}\r\n\t\t\t</span>\r\n\t\t</button>\r\n\t\t&nbsp;\r\n\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="workbook-icon"></i>WORKBOOK\r\n\t\t\t<span class="nodeDetailButtonSub">\r\n\t\t\t{{ sc.selectedEdge.sourceNode.additional.received[sc.selectedEdge.targetNode.id] + sc.selectedEdge.targetNode.additional.received[sc.selectedEdge.sourceNode.id] }}\r\n\t\t\t</span>\r\n\t\t</button>\r\n\t</div>\r\n\r\n</div>\r\n\r\n<style>\r\n\t.edge-detail-demo{\r\n\t\tpadding:20px 30px 30px 30px;\r\n\t\tcolor:#fff;\r\n\t}\r\n    .selectednode-label {\r\n       font-family: \'Source Sans Pro\';\r\n       font-weight: 300;\r\n       color: rgba(255,255,255,0.5);\r\n       margin-top: 0px;\r\n    }\r\n    .selectednode-additional-label {\r\n       font-family: \'Source Sans Pro\';\r\n       color: rgba(255,255,255,0.7);\r\n       font-size: 14px;\r\n       margin-top: 0px;\r\n    }\r\n    .selectededge-targetnode-label {\r\n       color: rgba(255,255,255,0.5);\r\n       font-family: \'Source Sans Pro\';\r\n       font-weight: 300;\r\n       margin-top: 0px;\r\n    }\r\n    .selectededge-targetnode-label-full {\r\n       color: rgba(255,255,255,0.7);\r\n       font-size: 14px;\r\n       margin-top: 0px;\r\n    }\r\n    .selectededge-label {\r\n       color: rgba(255,255,255,0.7);\r\n    }\r\n\r\n\t.social-edge-layout-demo{\r\n\t\tfloat:left;\r\n\t\twidth: 33%;\r\n\t\toverflow: hidden;\r\n\t}\r\n\t.arrows{\r\n\t\tpadding-top: 50px;\r\n\t}\r\n\t.social-edge-demo-clickable :hover{\r\n\t\tbackground-color: #444;\r\n\t\tcursor: pointer;\r\n\t}\r\n\t.social-edge-demo-inner{\r\n\t\tpadding: 3px;\r\n\t}\r\n\t.right-node{\r\n\t\ttext-align: right;\r\n\t\twidth: 32%;\r\n\t}\r\n\t.left-node{\r\n\t}\r\n\t.arrows:hover{\r\n\t\tbackground-color: #333;\r\n\t\tcursor: default;\r\n\t}\r\n</style>\r\n\r\n</div>\r\n'},1956:function(t,r){t.exports='<div class="edge-popover-demo social-demo">\r\n\r\n<div class="left-node-e social-edge-layout-demo">\r\n\t<i class="hpe-icon hpe-user text-vibrant1" style="font-size:20px;"></i>\r\n\t<h3 class="selectednode-label">{{sc.hoveredItem.sourceNode.label}}</h3>\r\n\t<div class="selectednode-additional-label">{{sc.hoveredItem.sourceNode.additional.fullName}}</div>\r\n</div>\r\n\r\n<div class="arrows-e social-edge-layout-demo selectededge-label">\r\n\r\n\t<i class="hpe-icon hpe-link-previous"  style="font-size:16px; color:#60798d;"></i>\r\n\t<span style="font-size:16px;">{{sc.hoveredItem.sourceNode.additional.received[sc.hoveredItem.targetNode.id]}}</span>\r\n\t<span class="m-r m-l" style="font-size:13px;">items</span>\r\n\t<span style="font-size:16px;">{{sc.hoveredItem.targetNode.additional.received[sc.hoveredItem.sourceNode.id]}}</span>\r\n\t<i class="hpe-icon hpe-link-next"  style="font-size:16px;"></i>\r\n\r\n</div>\r\n\r\n<div class="right-node-e social-edge-layout-demo">\r\n\t<i class="hpe-icon hpe-user text-vibrant1" style="font-size:20px;"></i>\r\n\t<h3 class="selectededge-targetnode-label">{{sc.hoveredItem.targetNode.label}}</h3>\r\n\t<div class="selectededge-targetnode-label-full">{{sc.hoveredItem.targetNode.additional.fullName}}</div>\r\n</div>\r\n\r\n<hr style="clear:both; margin:0;"/>\r\n\r\n<div class="">\r\n\t<div class="m-b-sm m-t-sm">\r\n\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="hold-icon"></i>HOLD\r\n\t\t\t<span class="nodeDetailButtonSub">\r\n\t\t\t{{sc.hoveredItem.sourceNode.additional.received[sc.hoveredItem.targetNode.id] + sc.hoveredItem.targetNode.additional.received[sc.hoveredItem.sourceNode.id] }}\r\n\t\t\t</span>\r\n\t\t</button>\r\n\t\t&nbsp;\r\n\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="workbook-icon"></i>WORKBOOK\r\n\t\t\t<span class="nodeDetailButtonSub">\r\n\t\t\t{{sc.hoveredItem.sourceNode.additional.received[sc.hoveredItem.targetNode.id] + sc.hoveredItem.targetNode.additional.received[sc.hoveredItem.sourceNode.id]}}\r\n\t\t\t</span>\r\n\t\t</button>\r\n\t</div>\r\n</div>\r\n\r\n</div>\r\n<style>\r\n\t.arrows-e{\r\n\t\tpadding-top:50px;\r\n\t}\r\n\t.edge-popover-demo{\r\n\t\tpadding: 10px 30px;\r\n\t\tcolor:#fff;\r\n\t\tmargin-top: 13px;\r\n\t}\r\n\t.social-edge-layout-demo{\r\n\t\tfloat:left;\r\n\t\twidth: 33%;\r\n\t\toverflow: hidden;\r\n\t}\r\n    .selectednode-label {\r\n\t\tfont-family: \'Source Sans Pro\';\r\n\t\tfont-weight: 300;\r\n\t\tcolor: rgba(255,255,255,0.5);\r\n\t\tmargin-bottom: 0px;\r\n\t\tmargin-top: 0px;\r\n    }\r\n    .selectednode-additional-label {\r\n\t\tfont-family: \'Source Sans Pro\';\r\n\t\tcolor: rgba(255,255,255,0.7);\r\n\t\tfont-size: 14px;\r\n\t\tmargin-top: 0px;\r\n    }\r\n    .selectededge-targetnode-label {\r\n\t\tmargin-bottom: 0px;\r\n\t\tfont-family: \'Source Sans Pro\';\r\n\t\tfont-weight: 300;\r\n\t\tcolor: rgba(255,255,255,0.5);\r\n\t\tmargin-top: 0px;\r\n    }\r\n    .selectededge-targetnode-label-full {\r\n       color: rgba(255,255,255,0.7);\r\n       font-size: 14px;\r\n       margin-top: 0px;\r\n    }\r\n    .selectededge-label {\r\n       color: rgba(255,255,255,0.7);\r\n    }\r\n    .left-node-e{\r\n    }\r\n    .right-node-e{\r\n    \ttext-align: right;\r\n    }\r\n</style>\r\n'},1957:function(t,r){t.exports="var edges = [{\r\n    source: 1,\r\n    target: 0,\r\n    weight: 10\r\n}, {\r\n    source: 2,\r\n    target: 0,\r\n    weight: 20\r\n},\r\n...\r\n];"},1958:function(t,r){t.exports='<div style="padding:10px;color:#fff;" class="social-demo node-details-demo">\r\n\r\n<div class="id-holder">\r\n\t<i class="hpe-icon hpe-user black-tooltip text-vibrant1" style="font-size:45px;"\r\n\ttooltip="Custodian" tooltip-placement="bottom"></i>\r\n\t<h3 class="selectednode-label">{{sc.selectedNode.label}}</h3>\r\n\t<h4 class="selectednode-additional-label">{{sc.selectedNode.additional.fullName}}</h4>\r\n\t<div class="m-b-sm m-t-md">\r\n\t\t<div class="m-b-sm">\r\n\t\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="hold-icon"></i>HOLD <span class="nodeDetailButtonSub">{{sc.selectedNode.additional.volume}}</span> </button>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="workbook-icon"></i>WORKBOOK <span class="nodeDetailButtonSub">{{sc.selectedNode.additional.volume}}</span></button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="spark-holder spark-social-scroll-demo" scroll-pane scroll-name="spark-social-scroll-detail" scroll-config="{resizeSensor: true}">\r\n\t<ul style="padding-left:0;" class="neighour-list">\r\n\r\n\t\t<li ng-repeat="neighbour in sc.selectedNode.neighbourList" style="list-style:none;" class="neighbour-item clearfix" ng-click="neighbour.setInExternal.goToEdge()"\r\n\t\ttooltip="{{::neighbour.additional.fullName}}" tooltip-placement="{{::($last && !$first) ? \'top\' : \'bottom\'}}" tooltip-append-to-body="false">\r\n\r\n\r\n\t\t\t<div class="ndp-icon">\r\n\t\t\t\t<i class="hpe-icon hpe-user text-vibrant1 neighbour-icon black-tooltip"></i>\r\n\t\t\t</div>\r\n\t\t\t<div class="ndp-text-spark">\r\n\t\t\t\t<span class="neighbor-label-details">{{neighbour.label}}</span>\r\n\t\t\t\t<span class="volume-label">&nbsp;({{sc.selectedNode.additional.sent[neighbour.id] + sc.selectedNode.additional.received[neighbour.id]}})</span>\r\n\t\t\t\t<spark class="col-lg-12 p-r-nil p-l-nil" type="\'spark-vibrant1\'" value="neighbour.setInExternal.ratio" fillheight="5" inline="false"></spark>\r\n\t\t\t</div>\r\n\r\n\t\t</li>\r\n\r\n\t</ul>\r\n</div>\r\n\r\n</div>\r\n<style>\r\n\t.ndp-icon{\r\n\t\tdisplay: inline-block;\r\n\t\tpadding-left: 5px;\r\n\t}\r\n\t.ndp-text-spark{\r\n\t\tdisplay: inline-block;\r\n\t\tpadding-left: 5px;\r\n\t\twidth: 80%;\r\n\t}\r\n\t.node-details-demo{\r\n\t    overflow: hidden;\r\n\t    height: 100%;\r\n\t    display: flex;\r\n\t    flex-direction: column;\r\n\t}\r\n\t.spark-holder{\r\n\t    margin: 10px;\r\n\t    margin-bottom: 0;\r\n\t    flex: 1;\r\n\t}\r\n\t.id-holder{\r\n\t\tpadding:20px 20px 5px 10px;\r\n\t}\r\n\t.neighbour-item{\r\n\t\tpadding-bottom: 7px;\r\n\t}\r\n\r\n\t.neighbour-item:hover{\r\n\t\tbackground-color: #444;\r\n\t\tcursor: pointer;\r\n\t}\r\n\r\n    .selectednode-label {\r\n      font-family: \'Source Sans Pro\';\r\n      font-weight: 300;\r\n      color: rgba(255,255,255,0.5);\r\n      margin-bottom: 0;\r\n      margin-top: 0px;\r\n    }\r\n    .selectednode-additional-label {\r\n       font-family: \'Source Sans Pro\';\r\n       color: rgba(255,255,255,0.7);\r\n       font-size: 14px;\r\n       margin-top: 0px;\r\n    }\r\n\t.volume-label{\r\n        font-family: \'Source Sans Pro\';\r\n\t\tcolor:rgba(128,128,128, 0.4);\r\n\t\tfont-size: 14px;\r\n\t}\r\n    .neighbor-label-details {\r\n      font-family: \'Source Sans Pro\';\r\n      color: rgba(255,255,255,0.5);\r\n      font-size: 15px;\r\n    }\r\n\t.inline{\r\n\t\tdisplay: inline-block;\r\n\t}\r\n\t.neighbour-icon{\r\n\t\tfont-size:16px;\r\n\t\tposition: relative;\r\n\t\ttop: -2px;\r\n\t}\r\n\t.jspPane .neighbour-icon{\r\n\t\ttop:9px;\r\n\t}\r\n</style>\r\n'},1959:function(t,r){t.exports='<div style="padding:5px;color:#fff;" class="social-demo node-popover-demo">\r\n\r\n<div class="node-popover-id-holder">\r\n\t<i class="hpe-icon hpe-user text-vibrant1" style="font-size:35px;"></i>\r\n\t<h3 class="selectednode-label">{{sc.hoveredItem.label}}</h3>\r\n\t<h4 class="selectednode-additional-label">{{sc.hoveredItem.additional.fullName}}</h4>\r\n\t<div class="m-b-sm">\r\n\t\t<div class="m-b-sm">\r\n\t\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="hold-icon"></i>HOLD <span class="nodeDetailButtonSub">{{sc.hoveredItem.additional.volume}}</span> </button>\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<button class="btn button-secondary nodeDetailButton selectededge-label"><i class="workbook-icon"></i>WORKBOOK <span class="nodeDetailButtonSub">{{sc.hoveredItem.additional.volume}}</span></button>\r\n\t\t</div>\r\n\t</div>\r\n</div>\r\n\r\n<div class="spark-holder-popover"  scroll-pane scroll-name="spark-social-scroll" scroll-config="{resizeSensor: false, mouseWheelSpeed:11}">\r\n\t<ul style="padding-left:0;">\r\n\t\t<li class="neighbor-label-popover" ng-repeat="neighbour in sc.hoveredItem.neighborNodes" style="list-style:none;" ng-click="neighbour.setInExternal.goToEdge()"\r\n      tooltip="{{::neighbour.additional.fullName}}" tooltip-placement="{{::($last && !$first) ? \'top\' : \'bottom\'}}" tooltip-append-to-body="false">\r\n\t\t\t<span >{{::neighbour.label}}</span>\r\n\t\t\t<spark class="col-lg-12 p-r-nil p-l-nil" type="\'spark-vibrant1\'" value="neighbour.setInExternal.ratio" fillheight="5" inline="false"></spark>\r\n\t\t</li>\r\n\t</ul>\r\n</div>\r\n\r\n</div>\r\n<style>\r\n\t.spark-holder-popover{\r\n\t\tpadding: 10px;\r\n\t\twidth: 150px;\r\n\t\theight: 175px;\r\n\t\tfloat: right;\r\n\t}\r\n\t.node-popover-demo{\r\n\t\toverflow: hidden;\r\n\t}\r\n\t.node-popover-id-holder{\r\n\t\tpadding: 10px;\r\n\t\twidth: 170px;\r\n\t\tfloat: left;\r\n\t}\r\n    .selectednode-label {\r\n       font-family: \'Source Sans Pro\';\r\n       font-weight: 300;\r\n       color: rgba(255,255,255,0.5);\r\n       margin-bottom: 0;\r\n       margin-top: 0px;\r\n    }\r\n    .selectednode-additional-label {\r\n       font-family: \'Source Sans Pro\';\r\n       color: rgba(255,255,255,0.7);\r\n       font-size: 14px;\r\n       margin-top: 0px;\r\n    }\r\n    .neighbor-label-popover {\r\n       font-family: \'Source Sans Pro\';\r\n       color: rgba(255,255,255,0.5);\r\n       font-size: 14px;\r\n       padding: 0px 2px 10px 2px;\r\n    }\r\n\t.neighbor-label-popover:hover{\r\n\t\tbackground-color: #444;\r\n\t\tcursor: pointer;\r\n\t}\r\n</style>\r\n'},1960:function(t,r){t.exports="function onLoadComplete() {\r\n\r\n    //Define the function in a closure\r\n    function onLoadComplete() {\r\n        vm.api.setSelectedNodeById(61);\r\n    }\r\n\r\n    return onLoadComplete;\r\n}\r\n\r\nvm.api = {\r\n    //Set other API calls as required\r\n    onLoadComplete: onLoadComplete()\r\n    //...\r\n};\r\n"},1961:function(t,r){t.exports="vm.detailStyle = {\r\n    node: {\r\n        'width':'235px',\r\n        'height':'99%'\r\n    },\r\n    edge: {\r\n        'width': '40vw',\r\n        'height':'20%'\r\n    }\r\n};\r\n\r\nvm.popoverStyle = {\r\n    node: {\r\n        'height':'185px'\r\n    },\r\n    edge: {\r\n        'height':'175px'\r\n    }\r\n};"},1962:function(t,r){t.exports='vm.chartTitle = {\r\n    title: "Nothing selected",\r\n    timeout: 3000,\r\n    nodeSelectedTitle: "Social interactions with ",\r\n    edgeSelectedTitle: "Social interactions between  and ",\r\n    stageSelectedTitle: "Nothing selected"\r\n};'},1963:function(t,r){t.exports=".my-class {\r\n    background-color: rgba(255,255,255. 0.25);\r\n}\r\n\r\n.my-class .fill {\r\n    background-color: rgb(255, 255, 255);\r\n}"},1964:function(t,r){t.exports='<div class="row">\r\n    <spark type="vm.charts[0].type" value="vm.charts[0].value" fillheight="vm.charts[0].fillHeight"\r\n        top-left-label="vm.charts[0].topLeftLabel" class="col-md-5 col-sm-5 col-xs-5"\r\n        spark-tooltip="{{vm.charts[0].tooltip}}"></spark>\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n    <spark type="vm.charts[1].type" value="vm.charts[1].value" fillheight="vm.charts[1].fillHeight"\r\n        inline-label="vm.charts[1].inlineLabel" class="col-md-5 col-sm-5 col-xs-5 spark-chart1-demo"></spark>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="row">\r\n    <spark type="vm.charts[2].type" value="vm.charts[2].value" fillheight="vm.charts[2].fillHeight"\r\n        top-left-label="vm.charts[2].topLeftLabel" bottom-left-label="vm.charts[2].bottomLeftLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5" spark-tooltip="{{vm.charts[2].tooltip}}"></spark>\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n    <spark type="vm.charts[3].type" value="vm.charts[3].value" fillheight="vm.charts[3].fillHeight"\r\n        inline-label="vm.charts[3].inlineLabel" class="col-md-5 col-sm-5 col-xs-5 spark-chart2-demo"\r\n        top-left-label="vm.charts[3].topLeftLabel"></spark>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="row">\r\n    <spark type="vm.charts[4].type" value="vm.charts[4].value" fillheight="vm.charts[4].fillHeight"\r\n        top-left-label="vm.charts[4].topLeftLabel" class="col-md-5 col-sm-5 col-xs-5 s" ></spark>\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n    <spark type="vm.charts[5].type" value="vm.charts[5].value" fillheight="vm.charts[5].fillHeight"\r\n        top-left-label="vm.charts[5].topLeftLabel" bottom-left-label="vm.charts[5].bottomLeftLabel"\r\n        top-right-label="vm.charts[5].topRightLabel" bottom-right-label="vm.charts[5].bottomRightLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5"></spark>\r\n</div>\r\n\r\n<hr>\r\n\r\n<div class="row">\r\n    <spark type="vm.charts[6].type" value="vm.charts[6].value" fillheight="vm.charts[6].fillHeight"\r\n        top-left-label="vm.charts[6].topLeftLabel" class="col-md-5 col-sm-5 col-xs-5 s"></spark>\r\n    <div class="col-md-1 col-sm-1 col-xs-1"></div>\r\n    <spark type="vm.charts[7].type" value="vm.charts[7].value" fillheight="vm.charts[7].fillHeight"\r\n        top-left-label="vm.charts[7].topLeftLabel" bottom-left-label="vm.charts[7].bottomLeftLabel"\r\n        top-right-label="vm.charts[7].topRightLabel" bottom-right-label="vm.charts[7].bottomRightLabel"\r\n        class="col-md-5 col-sm-5 col-xs-5"></spark>\r\n</div>'},1965:function(t,r){t.exports="angular.module(\"app\").controller(\"SparkChartCtrl\", SparkChartCtrl);\r\n\r\nfunction SparkChartCtrl() {\r\n    var vm = this;\r\n\r\n    vm.charts = [\r\n        {\r\n            type: 'spark-chart1',\r\n            value: 35,\r\n            fillHeight: 10,\r\n            topLeftLabel: \"<span class='spark-label hidden-xxxs'><span class='large'>21.7</span><span class='medium light'>&nbsp;MB&nbsp;&nbsp;Items&nbsp;&nbsp;(35%)</span></span>\",\r\n            tooltip: 'Spark Line indicator - 2.17MB of 8.2GB occupied (35%)'\r\n        },\r\n        {\r\n            type: 'spark-chart3',\r\n            value: 30,\r\n            fillHeight: 5,\r\n            inlineLabel: '30%'\r\n        },\r\n        {\r\n            type: 'spark-chart2',\r\n            value: 35,\r\n            fillHeight: 10,\r\n            topLeftLabel: \"<span class='spark-label hidden-xxxs'><span class='large'>21.7</span><span class='medium light'>&nbsp;MB&nbsp;&nbsp;Items&nbsp;&nbsp;(35%)</span></span>\",\r\n            bottomLeftLabel: \"<span class='spark-label hidden-xxxs'><span class='medium light'>INDEX COVERAGE</span></span>\",\r\n            tooltip: 'Spark Line indicator - 2.17MB of 8.2GB occupied (35%)'\r\n        },\r\n        {\r\n            type: 'spark-chart3',\r\n            value: 30,\r\n            fillHeight: 5,\r\n            inlineLabel: \"<span class='spark-label hidden-spark'><span class='x-large'>30%</span></span>\",\r\n            topLeftLabel: \"<span class='spark-label hidden-xxs'><span class='small'>STORAGE ON HOLD</span></span>\"\r\n        },\r\n        {\r\n            type: 'spark-chart4',\r\n            value: 55,\r\n            fillHeight: 10,\r\n            topLeftLabel: \"<span class='spark-label hidden-xxs'><span class='large'>8.6</span><span class='medium light'>&nbsp;GB&nbsp;Disk Space&nbsp;&nbsp;(55%)</span></span>\"\r\n        },\r\n        {\r\n            type: 'spark-chart5',\r\n            value: 30,\r\n            fillHeight: 10,\r\n            topLeftLabel: '30%',\r\n            topRightLabel: \"<span class='spark-label hidden-spark'><span class='medium light'>75.0M</span></span>\",\r\n            bottomLeftLabel: \"<span class='spark-label hidden-xxxs'><span class='medium light'>ITEMS ON HOLD</span></span>\",\r\n            bottomRightLabel: \"<span class='spark-label hidden-xxs'><span class='medium light'>TOTAL</span></span>\"\r\n        },\r\n        {\r\n            type: 'spark-vibrant1',\r\n            value: 55,\r\n            fillHeight: 10,\r\n            topLeftLabel: \"<span class='spark-label hidden-xxs'><span class='large'>8.6</span><span class='medium light'>&nbsp;GB&nbsp;Disk Space&nbsp;&nbsp;(55%)</span></span>\"\r\n        },\r\n        {\r\n            type: 'spark-vibrant2',\r\n            value: 30,\r\n            fillHeight: 10,\r\n            topLeftLabel: '30%',\r\n            bottomLeftLabel: \"<span class='spark-label hidden-xxxs'><span class='medium light'>ITEMS ON HOLD</span></span>\",\r\n            topRightLabel: \"<span class='spark-label hidden-spark'><span class='medium light'>75.0M</span></span>\",\r\n            bottomRightLabel: \"<span class='spark-label hidden-xxs'><span class='medium light'>TOTAL</span></span>\"\r\n        }\r\n    ];\r\n}"},1966:function(t,r){t.exports='<spark type="vm.type" value="vm.percentComplete" fillheight="vm.fillheight" label="vm.label" class="col-md-3 col-sm-3 col-xs-6" spark-tooltip="{{vm.tooltip}}"></spark>'},1967:function(t,r){t.exports='<div class="flot-chart-timeline">\r\n  <flot dataset="tc.timelineChart.data" options="tc.timelineChart.options"></flot>\r\n</div>\r\n\r\n<!-- You can put a different chart below to show more details about the selected range -->\r\n<div class="flot-chart">\r\n   <flot dataset="tc.detailedChart.data" options="tc.detailedChart.options"></flot>\r\n</div>'},1968:function(t,r){t.exports='angular.module("app").controller("TimelineChartCtrl", TimelineChartCtrl);\r\n\r\nTimelineChartCtrl.$inject = [\'$scope\', \'lineDataService\', \'$colorService\'];\r\n\r\nfunction TimelineChartCtrl($scope, lineDataService, $colorService) {\r\n\r\n    var tc = this;\r\n\r\n    var flotChartColors = {\r\n        chartColor: $colorService.getColor(\'chart1\').toRgb(),\r\n        chartFill: $colorService.getColor(\'chart1\').setAlpha(0.2).toRgba(),\r\n        gridColor: $colorService.getColor(\'grey4\').toHex(),\r\n        tickColor: $colorService.getColor(\'grey6\').toHex(),\r\n        borderColor: $colorService.getColor(\'grey2\').setAlpha(0.5).toRgba(),\r\n        transparent: "rgba(0, 0, 0, 0)",\r\n    };\r\n\r\n    function randomTimelineData() {\r\n        var min = 1167692400000; //represents 1 January 2007\r\n        var max = 1220911200000; //represents 8 September 2008\r\n        var step = 345600000; // represents 4 days\r\n\r\n        var dataPoints = [];\r\n\r\n        //for every 4 days between specified dates create a random number between 80 & 150\r\n        for (var i = min; i <= max; i += step) {\r\n            //Make March 2 2008 to april 2 2008 zero\r\n            if (!(i > 1204457710000 && i < 1207142075000)) {\r\n                dataPoints.push(i);\r\n                dataPoints.push(Math.floor(Math.random() * (150 - 80) + 80));\r\n            }\r\n\r\n        }\r\n\r\n        var offset = 259200000; // 3 days\r\n        dataPoints = lineDataService.addZeroPoints(dataPoints, offset);\r\n        return dataPoints;\r\n    }\r\n\r\n    //The preselected range on the timeline\r\n    var rangeStart = 1205708400000;\r\n    var rangeEnd = 1217628000000;\r\n\r\n    //store so we can share between the two timeline charts\r\n    var timelineData = randomTimelineData();\r\n\r\n    //Timeline Chart\r\n    tc.timelineChart = {\r\n        data: [{\r\n            data: timelineData,\r\n            lines: {\r\n                show: true,\r\n                fill: true,\r\n                lineWidth: 1,\r\n                fillColor: {\r\n                    colors: [{\r\n                        opacity: 0.0\r\n                    }, {\r\n                        opacity: 0.3\r\n                    }]\r\n                }\r\n            },\r\n            shadowSize: 0\r\n        }],\r\n        options: {\r\n            xaxes: [{\r\n                mode: \'time\'\r\n            }],\r\n            yaxes: [{\r\n                min: 0,\r\n                max: 200,\r\n                show: false\r\n            }],\r\n            colors: [flotChartColors.chartColor],\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                tickColor: [flotChartColors.transparent]\r\n            },\r\n            tooltip: false,\r\n            timeline: {\r\n                color: flotChartColors.chartFill,\r\n                start: rangeStart,\r\n                end: rangeEnd,\r\n                zoom: {\r\n                    enabled: true,\r\n                    minimumRange: 604800000\r\n                },\r\n                keyboardNavigation: true,\r\n                dragHandles: {\r\n                    width: 5,\r\n                    color: flotChartColors.chartColor,\r\n                    tooltips: {\r\n                        enabled: true,\r\n                        onHover: true,\r\n                        onDrag: true,\r\n                        onDragEnd: false\r\n                    },\r\n                    tooltipFormatter: function (value) {\r\n                        var date = new Date(value);\r\n                        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];\r\n                        return date.getDate() + " " + monthNames[date.getMonth()] + " " + date.getFullYear();\r\n                    }\r\n                },\r\n                enabled: true,\r\n                callback: function (position) {\r\n                    //set new values for the min and max of the detailed chart\r\n                    tc.detailedChart.options.xaxes[0].min = position.start;\r\n                    tc.detailedChart.options.xaxes[0].max = position.end;\r\n\r\n                    //ensure the chart updates\r\n                    $scope.$digest();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    tc.detailedChart = {\r\n        data: [{\r\n            data: timelineData,\r\n            lines: {\r\n                show: true,\r\n                fill: true,\r\n                lineWidth: 1,\r\n                fillColor: {\r\n                    colors: [{\r\n                        opacity: 0.1\r\n                    }, {\r\n                        opacity: 0.1\r\n                    }]\r\n                }\r\n            },\r\n            shadowSize: 0\r\n        }],\r\n        options: {\r\n            xaxes: [{\r\n                mode: \'time\',\r\n                min: rangeStart,\r\n                max: rangeEnd,\r\n                tickColor: [flotChartColors.transparent]\r\n            }],\r\n            yaxes: [{\r\n                min: 0,\r\n                max: 201\r\n            }],\r\n            legend: {\r\n                show: false\r\n            },\r\n            colors: [flotChartColors.chartColor],\r\n            grid: {\r\n                color: [flotChartColors.gridColor],\r\n                tickColor: [flotChartColors.tickColor],\r\n                borderWidth: {\r\n                    "bottom": 1,\r\n                    "left": 1,\r\n                    "top": 0,\r\n                    "right": 0\r\n                },\r\n                borderColor: {\r\n                    "bottom": [flotChartColors.borderColor],\r\n                    "left": [flotChartColors.borderColor]\r\n                },\r\n                hoverable: true\r\n            },\r\n            tooltip: {\r\n                show: true,\r\n                shifts: {\r\n                    x: 0,\r\n                    y: -48\r\n                },\r\n                content: "<strong>%x</strong><br/>%y,000 items added"\r\n            }\r\n        }\r\n    };\r\n}'},1969:function(t,r){t.exports="function updateChartYAxis() {\r\n    var start = tc.detailedChart.options.xaxes[0].min;\r\n    var end = tc.detailedChart.options.xaxes[0].max;\r\n\r\n    var max = 0;\r\n\r\n    for (var i = 0; i < timelineData.length; i++) {\r\n        var x = timelineData[i][0];\r\n        var y = timelineData[i][1];\r\n\r\n        if (x >= start && x <= end) {\r\n            if (!max || y > max) max = y;\r\n        }\r\n    }\r\n\r\n    //add some extra space above\r\n    max += 20;\r\n\r\n    //update the chart\r\n    tc.detailedChart.options.yaxes[0].max = max;\r\n}"},1970:function(t,r){t.exports="angular.module('elements').controller('TimelineChartCtrl', ['lineDataService', TimelineChartCtrl]);\r\n\r\nfunction TimelineChartCtrl(lineDataService) {\r\n    ...\r\n\r\n    function randomTimelineData() {\r\n\r\n        var min = 1167692400000; //represents 1 January 2007\r\n        var max = 1220911200000; //represents 8 September 2008\r\n        var step = 345600000; // represents 4 days\r\n\r\n        var dataPoints = [];\r\n\r\n        //for every 4 days between specified dates create a random number between 80 & 150\r\n        for (var i = min; i <= max; i += step) {\r\n\r\n            //Make March 2 2008 to april 2 2008 zero\r\n            if (!(i > 1204457710000 && i < 1207142075000)) {\r\n                dataPoints.push([i, Math.floor(Math.random() * (150 - 80) + 80)]);\r\n            }\r\n        }\r\n\r\n        var offset = 259200000; // 3 days\r\n        dataPoints = lineDataService.addZeroPoints(dataPoints, offset);\r\n        return dataPoints;\r\n    }\r\n}"}});