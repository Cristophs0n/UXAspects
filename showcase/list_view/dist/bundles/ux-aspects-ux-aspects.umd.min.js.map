{"version":3,"sources":["ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.component.ts","ng://@ux-aspects/ux-aspects/components/breadcrumbs/breadcrumbs.module.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.service.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.directive.ts","ng://@ux-aspects/ux-aspects/directives/resize/resize.module.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab-content.directive.ts","null","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.service.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tab/card-tab.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabset/card-tabset.component.ts","ng://@ux-aspects/ux-aspects/components/card-tabs/card-tabs.module.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.component.ts","ng://@ux-aspects/ux-aspects/components/checkbox/checkbox.module.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.component.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.directive.ts","ng://@ux-aspects/ux-aspects/components/column-sorting/column-sorting.module.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-subject.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-utils.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.service.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit-zone.component.ts","ng://@ux-aspects/ux-aspects/components/conduit/interfaces/conduit-properties.ts","ng://@ux-aspects/ux-aspects/components/conduit/conduit.decorator.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.service.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.component.ts","ng://@ux-aspects/ux-aspects/components/dashboard/widget/dashboard-widget.component.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.directive.ts","ng://@ux-aspects/ux-aspects/components/dashboard/drag-handle/drag-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/drag/drag.module.ts","ng://@ux-aspects/ux-aspects/components/dashboard/dashboard.module.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.component.ts","ng://@ux-aspects/ux-aspects/components/spin-button/spin-button.module.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-format.pipe.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/time-picker/time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.utils.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.config.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/day-view/day-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/header/header.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/month-view/month-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/time-view/time-view.component.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.service.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/year-view/year-view.component.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/focus-if/focus-if.module.ts","ng://@ux-aspects/ux-aspects/components/date-time-picker/date-time-picker.module.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.component.ts","ng://@ux-aspects/ux-aspects/components/ebox/ebox.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-events.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-container.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-base/facet-base.component.ts","ng://@ux-aspects/ux-aspects/components/facets/base/facet-header/facet-header.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-check-list/facet-check-list.component.ts","ng://@ux-aspects/ux-aspects/components/facets/facet-typeahead-list/facet-typeahead-list.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.component.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.service.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.directive.ts","ng://@ux-aspects/ux-aspects/components/tooltip/tooltip.module.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-handle.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable-model.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/dragula.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.service.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.directive.ts","ng://@ux-aspects/ux-aspects/directives/reorderable/reorderable.module.ts","ng://@ux-aspects/ux-aspects/components/facets/facets.module.ts","ng://@ux-aspects/ux-aspects/components/facets/models/facet.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-container.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-base/filter-base.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dropdown/filter-dropdown.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter-dynamic/filter-dynamic.component.ts","ng://@ux-aspects/ux-aspects/components/filters/filter.module.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.component.ts","ng://@ux-aspects/ux-aspects/components/flippable-card/flippable-card.module.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.service.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/components/floating-action-buttons/floating-action-buttons.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.service.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.directive.ts","ng://@ux-aspects/ux-aspects/directives/click-outside/click-outside.module.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.component.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.directive.ts","ng://@ux-aspects/ux-aspects/components/popover/popover.module.ts","ng://@ux-aspects/ux-aspects/components/hierarchy-bar/hierarchy-bar.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.service.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.component.ts","ng://@ux-aspects/ux-aspects/components/item-display-panel/item-display-panel.module.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.component.ts","ng://@ux-aspects/ux-aspects/components/wizard/wizard.module.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.service.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard-step.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/components/marquee-wizard/marquee-wizard.module.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.service.ts","ng://@ux-aspects/ux-aspects/services/audio/audio.module.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.service.ts","ng://@ux-aspects/ux-aspects/services/frame-extraction/frame-extraction.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.service.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/base-extension.directive.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/media-player/extensions/controls/controls.component.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/duration/duration.module.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/file-size/file-size.module.ts","ng://@ux-aspects/ux-aspects/components/media-player/media-player.module.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/navigation/navigation.module.ts","ng://@ux-aspects/ux-aspects/services/color/color.service.ts","ng://@ux-aspects/ux-aspects/services/color/color.module.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.service.ts","ng://@ux-aspects/ux-aspects/components/notification/notification-list.component.ts","ng://@ux-aspects/ux-aspects/components/notification/notification.module.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.component.ts","ng://@ux-aspects/ux-aspects/components/number-picker/number-picker.module.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.service.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation-toggle.directive.ts","ng://@ux-aspects/ux-aspects/directives/menu-navigation/menu-navigation.module.ts","ng://@ux-aspects/ux-aspects/components/page-header/custom-menu/custom-menu.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.service.ts","ng://@ux-aspects/ux-aspects/components/page-header/icon-menu/icon-menu.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-dropdown-item/navigation-dropdown-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-item/navigation-item.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation-secondary-item/navigation-secondary-item.directive.ts","ng://@ux-aspects/ux-aspects/components/page-header/navigation/navigation.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.component.ts","ng://@ux-aspects/ux-aspects/components/page-header/page-header.module.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.component.ts","ng://@ux-aspects/ux-aspects/components/progress-bar/progress-bar.module.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.component.ts","ng://@ux-aspects/ux-aspects/components/radiobutton/radiobutton.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.service.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-group/search-builder-group.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder-outlet/search-builder-outlet.directive.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/base-search.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/text/text.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date/date.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/date-range/date-range.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.component.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-event.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-key.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.service.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.component.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.directive.ts","ng://@ux-aspects/ux-aspects/directives/infinite-scroll/infinite-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.service.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view-if.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll-into-view.directive.ts","ng://@ux-aspects/ux-aspects/directives/scroll/scroll.module.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead-highlight.directive.ts","ng://@ux-aspects/ux-aspects/components/typeahead/typeahead.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input-event.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.component.ts","ng://@ux-aspects/ux-aspects/components/tag-input/tag-input.module.ts","ng://@ux-aspects/ux-aspects/components/select/select.module.ts","ng://@ux-aspects/ux-aspects/components/search-builder/search-builder.module.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel-close.directive.ts","ng://@ux-aspects/ux-aspects/components/side-panel/side-panel.module.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.component.ts","ng://@ux-aspects/ux-aspects/components/slider/slider.module.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.component.ts","ng://@ux-aspects/ux-aspects/components/spark/spark.module.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.service.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab.component.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-heading.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tab/tab-focus.directive.ts","ng://@ux-aspects/ux-aspects/components/tabset/tabset.module.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline-event/timeline-event.component.ts","ng://@ux-aspects/ux-aspects/components/timeline/timeline.module.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.component.ts","ng://@ux-aspects/ux-aspects/components/toggleswitch/toggleswitch.module.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-button.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search-field.directive.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.component.ts","ng://@ux-aspects/ux-aspects/components/toolbar-search/toolbar-search.module.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-loading.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-load-button.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/directives/virtual-scroll-cell.directive.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.component.ts","ng://@ux-aspects/ux-aspects/components/virtual-scroll/virtual-scroll.module.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.directive.ts","ng://@ux-aspects/ux-aspects/directives/auto-grow/auto-grow.module.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.directive.ts","ng://@ux-aspects/ux-aspects/directives/fixed-header-table/fixed-header-table.module.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.directive.ts","ng://@ux-aspects/ux-aspects/directives/float-label/float-label.module.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.service.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/help-center/help-center.module.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.service.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action-container.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.directive.ts","ng://@ux-aspects/ux-aspects/directives/hover-action/hover-action.module.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.directive.ts","ng://@ux-aspects/ux-aspects/directives/layout-switcher/layout-switcher.module.ts","ng://@ux-aspects/ux-aspects/directives/observers/overflow/overflow-observer.directive.ts","ng://@ux-aspects/ux-aspects/directives/observers/observers.module.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/row-alt-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/strategies/simple-selection.strategy.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.service.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection-item.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.directive.ts","ng://@ux-aspects/ux-aspects/directives/selection/selection.module.ts","ng://@ux-aspects/ux-aspects/hybrid/components/contacts/contacts.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/expand-input/expand-input.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/floating-action-button/floating-action-button.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/flot/flot.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/grid/grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/hierarchy-bar/hierarchy-bar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/marquee-wizard/marquee-wizard.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/nested-donut/nested-donut.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/organization-chart/organization-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/partition-map/partition-map.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-bar-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-pie-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/peity-chart/peity-updating-line-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sankey-chart/sankey.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/search-toolbar/search-toolbar.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/select-table/select-table.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/slider-chart/slider-chart.directive.ts","ng://@ux-aspects/ux-aspects/hybrid/components/social-chart/social-chart.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/sort-direction-toggle/sort-direction-toggle.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/tree-grid/tree-grid.component.ts","ng://@ux-aspects/ux-aspects/hybrid/components/thumbnail/thumbnail.component.ts","ng://@ux-aspects/ux-aspects/hybrid/services/navigation-menu/navigation-menu.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/pdf/pdf.service.ts","ng://@ux-aspects/ux-aspects/hybrid/services/time-ago/time-ago.service.ts","ng://@ux-aspects/ux-aspects/hybrid/hybrid.module.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.pipe.ts","ng://@ux-aspects/ux-aspects/pipes/string-filter/string-filter.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/cookie-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/local-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/session-storage-adapter.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.service.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/persistent-data.module.ts","ng://@ux-aspects/ux-aspects/services/persistent-data/adapters/storage-adapter.ts"],"names":["BreadcrumbsComponent","prototype","clickCrumb","event","crumb","onClick","call","Component","args","selector","template","Input","BreadcrumbsModule","NgModule","imports","CommonModule","RouterModule","exports","declarations","ResizeService","rendererFactory","_ngZone","this","Subscription","_renderer","createRenderer","ngOnDestroy","_subscription","unsubscribe","addResizeListener","nativeElement","_this","subject","BehaviorSubject","width","offsetWidth","height","offsetHeight","displayMode","window","getComputedStyle","getPropertyValue","iframe","createElement","setStyle","setAttribute","appendChild","waitUntilReady","iframeDoc","contentDocument","contentWindow","attachListener","add","fromEvent","subscribe","run","next","readyState","addEventListener","callback","setTimeout","Injectable","RendererFactory2","NgZone","ResizeDirective","_elementRef","_resizeService","EventEmitter","ngOnInit","pipe","debounceTime","throttle","uxResize","emit","Directive","providers","ElementRef","Output","ResizeModule","CardTabContentDirective","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__extends","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","__values","o","m","Symbol","iterator","value","done","__read","r","e","ar","push","error","__spread","concat","CardTabsService","tabs$","filter","tabs","tab$","find","tab","addTab","removeTab","_tab","select","setPosition","position","position$","CardTabComponent","_tabService","map","changeDetection","ChangeDetectionStrategy","OnPush","ContentChild","read","TemplateRef","CardTabsetComponent","tabService","lower","upper","getValue","direction","element","moveIntoView","resize","dimensions","_width","_innerWidth","tablist","scrollWidth","bounds","previous","offset","Math","min","max","offsetLeft","_a","marginLeft","marginRight","viewportStart","abs","viewportEnd","cardWidth","parseFloat","HostBinding","type","ViewChild","CardTabsModule","CHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","CheckboxComponent","multi","uniqueCheckboxId","_checkboxId","_value","indeterminate","indeterminateValue","ariaChecked","valueChange","onChangeCallback","onTouchedCallback","defineProperty","id","toggle","disabled","clickable","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","CheckboxModule","FormsModule","ColumnSortingComponent","ColumnSortingState","initParent","parent","_parent","events","idx","findIndex","column","key","state","NoSort","orderNumber","stateChange","changeState","Ascending","Descending","toggleColumn","exportAs","ColumnSortingDirective","Subject","ngAfterViewInit","components","forEach","component","singleSort","order","splice","ContentChildren","ColumnSortingModule","ConduitSubject","conduit","_zone","zoneId","_subject","getInitialValue","distinctUntilChanged","takeUntil","_onDestroy","onOutput","bind","getEvents","onInput","acceptsInput","subjects","getSubjects","isArray","indexOf","sort","subjectOne","subjectTwo","lastModified","getTime","currentValue","producesOutput","zone","outputValue","Date","destroy","complete","invokeSuperFunction","target","functionName","functionList","_i","func","apply","ConduitZone","_zoneId","unregisterConduit","registerConduit","getConduitSubject","setZoneId","setConduitProperties","properties","conduitSubject","_conduit","prop","createConduit","registerConduits","_conduits","propertyKey","unregisterConduits","ConduitComponent","decorators","Optional","ConduitZoneComponent","_super","tslib_1.__extends","defaultConduitProps","CONDUITS","DashboardService","defaultOptions","dimensions$","delay","visible","x","y","layout$","setLayoutData","stacked$","stacked","updateWhenStacked","widgets$","renderDashboard","options$","options","columns","addWidget","widget","removeWidget","_widget","setDimensions","getLayoutData","widgets","col","getColumn","row","getRow","colSpan","getColumnSpan","rowSpan","getRowSpan","setColumn","setRow","setColumnSpan","setRowSpan","_rowHeight","rowHeight","columnWidth","minWidth","setDashboardLayout","_actionWidget","render","undefined","setWidgetPosition","setDashboardHeight","getWidgetsByOrder","w1","w2","w1Position","w2Position","success","floor","getPositionAvailable","Error","columnSpan","ignoreWidget","spaces","getOccupiedSpaces","block","reduce","forEachBlock","onResizeStart","action","_mouseEvent","bringToFront","onResizeDrag","mousePosX","pageX","pageXOffset","mousePosY","pageY","pageYOffset","handle","getBoundingClientRect","mouseX","left","mouseY","top","ActionDirection","Right","Left","difference","Bottom","Top","minHeight","TopLeft","TopRight","BottomLeft","BottomRight","currentWidth","currentHeight","setBounds","setPlaceholderBounds","updateWidgetPositions","onResizeEnd","placeholder","placeholder$","commitWidgetChanges","shiftWidgetsUp","onDragStart","setWidgetOrigin","cacheWidgets","onDragEnd","_widgetOrigin","onDrag","restoreWidgets","shiftWidgets","getRowHeight","_cache","ignoreActionWidget","match","wgt","widgetsToMove","this_1","space","array","unmovedWidgets","slice","grid","getRequiredSpacesFromPoint","every","gridSpace","getColumnCount","canWidgetMoveRight","validatePlaceholderPosition","canWidgetMoveLeft","distance","moveWidgetDown","shiftDirection","getWidgetsAtPosition","getColumnWidth","performMove","targetSpaces","moveable","ignoreResizing","Rounding","RoundDownBelowHalf","RoundUpOverHalf","getPlaceholderColumn","getPlaceholderRow","getPlaceholderColumnSpan","getPlaceholderRowSpan","rowCount","padding","getColumnFromPx","Move","RoundDown","upperLimit","overflow","getRowFromPx","ceil","rounding","half","RoundUp","getRowCount","emptyRow","sendToBack","stable","DashboardComponent","dashboardService","layout","layoutChange","dashboardElement","onResize","DashboardWidgetComponent","regular","update","_columnSpan","_rowSpan","console","warn","random","toString","getStackableValue","_column","_row","setStackableValue","zIndex","dragstart","drag","dragend","property","DragDirective","document","_mousedown$","dragStart","preventDefault","clone","cloneNode","addClass","_mousemove$","_mouseup$","dragMove","dragEnd","_clone","updateNodePosition","removeChild","body","removeClass","_offset","clientX","clientY","inlineStyles","source","styles","style","item","children","Renderer2","DashboardDragHandleDirective","elementRef","ngZone","renderer","DragModule","DECLARATIONS","SPIN_BUTTON_VALUE_ACCESSOR","SpinButtonComponent","scroll","scrolling","deltaY","triggerDecrement","triggerIncrement","increment","decrement","encapsulation","ViewEncapsulation","None","SpinButtonModule","TimeFormatPipe","transform","Pipe","name","TIME_PICKER_VALUE_ACCESSOR","TimePickerComponent","value$","date","getHours","hour","showMeridian","getMeridianTime","getMinutes","getSeconds","meridians","checkValidity","valid$","valid","isValid","setHour","setHours","setMinute","minute","setMinutes","setSeconds","seconds","incrementHour","arrowkey","arrowkeys","hourStep","decrementHour","incrementMinute","minuteStep","decrementMinute","incrementSecond","secondStep","decrementSecond","selectMeridian","meridian","_meridian","hourChange","parseInt","currentHour","isNaN","minuteChange","currentMinute","secondChange","second","currentSecond","host","aria-label","TimePickerModule","gridify","items","range","start","end","list","compareDays","day1","day2","getDate","getMonth","getFullYear","dateComparator","dateOne","dateTwo","timezoneComparator","zoneOne","zoneTwo","months","monthsShort","month","substring","weekdaysShort","weekday","DateTimePickerService","_config","DatePickerMode","Day","getCurrentTimezone","showDate","showTime","showTimezone","showSeconds","showSpinners","weekdays","nowBtnText","timezones","ModeDirection","selected$","setViewportMonth","setViewportYear","date$","month$","year$","year","setDate","day","setMonth","setFullYear","setDateToNow","setViewportMode","mode","mode$","goToChildMode","modeDirection","Descend","Year","Month","goToParentMode","Ascend","goToNext","headerEvent$","DatePickerHeaderEvent","Next","goToPrevious","Previous","setHeader","header","header$","getTimezoneOffset","timezone","setTimezone","timezone$","DateTimePickerConfig","DateTimePickerComponent","datepicker","dateChange","timezoneChange","showDate$","showTime$","showTimezone$","showSeconds$","showMeridian$","showSpinners$","weekdays$","nowBtnText$","timezones$","setToNow","DayViewService","_datepicker","combineLatest","_b","createDayGrid","setFocus","focused$","getDay","dates","dateRange","isToday","isActive","isCurrentMonth","grid$","selectedDay","first","DayViewComponent","datePicker","dayService","trackWeekByFn","index","trackDayByFn","focusDate","dayOffset","getTabbable","focused","_item","HeaderComponent","ascend","MonthViewService","createMonthGrid","currentMonth","currentYear","activeMonth","activeYear","isActiveMonth","selectedMonth","MonthViewComponent","_datePicker","monthService","focusMonth","monthOffset","targetMonth","targetYear","trackRowByFn","trackMonthByFn","TimeViewComponent","selectTimezone","_timezone","incrementTimezone","currentZone","decrementTimezone","YearViewService","_year","createYearGrid","_event","goToNextDecade","goToPreviousDecade","decade","getDecade","isCurrentYear","isActiveYear","YearViewComponent","yearService","focusYear","yearOffset","trackYearByFn","FocusIfDirective","focus","_timeout","clearTimeout","focusIfDelay","FocusIfModule","DateTimePickerModule","EboxComponent","EboxModule","EboxContentDirective","EboxHeaderDirective","FacetSelect","facet","FacetDeselect","FacetDeselectAll","FacetContainerComponent","selectFacet","facets","facetsChange","triggerEvent","deselectFacet","selectedFacet","deselectAllFacets","FacetBaseComponent","facetContainer","selected","_","deselectAll","selectedChange","toggleFacetSelection","isFacetSelected","Host","FacetHeaderComponent","toggleExpand","canExpand","expanded","expandedChange","tabindex","(click)","(keyup.enter)","maxResults","minCharacters","FacetTypeaheadListComponent","Observable","typeaheadOptions","from","title","toUpperCase","includes","searchQuery","of","_defaultTypeaheadConfig","typeaheadConfig","selectOption","typeaheadOption","scrollToFocused","dropdown","_nativeElement","querySelector","activeElement","elementBounds","dropdownBounds","scrollTop","bottom","FacetTypeaheadHighlight","regex","RegExp","replace","uniqueTooltipId","TooltipComponent","_changeDetectorRef","reposition$","reposition","setContent","content","isTemplateRef","markForCheck","setPlacement","placement","setClass","customClass","setContext","context","setRole","role","ChangeDetectorRef","TooltipService","TooltipDirective","_viewContainerRef","_overlay","_scrollDispatcher","_tooltipService","onMouseEnter","onMouseLeave","onFocus","onBlur","shown$","_type","tooltip","_instance","hide","isOpen","show","ngOnChanges","changes","firstChange","isVisible","destroyOverlay","_overlayRef","dispose","_showTimeoutId","overlayRef","createOverlay","_portal","createPortal","createInstance","shown","isOpenChange","detectChanges","hasAttached","detach","setAriaDescribedBy","hidden","updatePosition","instance","attach","ComponentPortal","strategy","connectedTo","getOrigin","getOverlayPosition","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionStrategy","panelClass","scrollStrategy","scrollStrategies","scrollThrottle","hasBackdrop","originX","originY","overlayX","overlayY","showTriggers","hideTriggers","isFocused","removeAttribute","ViewContainerRef","Overlay","ScrollDispatcher","TooltipModule","OverlayModule","ObserversModule","entryComponents","ReorderableHandleDirective","ReorderableModelDirective","global","dragula","((dragulaNamespace)).default","dragulaNamespace","ReorderableService","getUniqueGroupName","_uniqueGroupId","register","groupName","container","_groups","ReorderableGroup","unregister","group","isEmpty","initialize","getGroup","moves","canMove","_containers","getModelForElement","tslib_1.__values","model","getModelFromElement","containers","c","mirrorContainer","on","sibling","drop","cancel","cloned","containerElement","isSameNode","ReorderableDirective","_service","reorderableGroup","_container","_subscriptions","onDrop","reorderCancel","onClone","dragging","reorderStart","reorderableModel","changed","classList","contains","reorderableModelChange","models","_model","uxReorderableModel","reorderEnd","setTableCellWidths","captureCanvases","reorderingDisabled","handles","_handle","tagName","sourceCells","targetCells","cell","sourceCanvases","querySelectorAll","canvas","getContext","drawImage","descendants","ReorderableModule","FacetCheckListComponent","TypeaheadModule","forRoot","Facet","data","count","FilterContainerComponent","addFilter","filters","FilterAddEvent","filtersChange","removeFilter","FilterRemoveEvent","removeAll","FilterRemoveAllEvent","FilterBaseComponent","filtersContainer","_filter","initial","FilterDropdownComponent","selectFilter","FilterDynamicComponent","getItems","typeaheadItems","maxIndividualItems","showTypeahead","clickOff","hideDropdown","nodeName","parentElement","(document:click)","BsDropdownDirective","BsDropdownModule","FlippableCardComponent","setFlipped","flipped","flippedChange","toggleFlipped","clickTrigger","trigger","hoverEnter","hoverExit","[class.horizontal]","[class.vertical]","HostListener","FlippableCardModule","FlippableCardBackDirective","FlippableCardFrontDirective","FloatingActionButtonsService","open","open$","close","FloatingActionButtonsComponent","fab","tooltips","preserveWhitespaces","animations","transition","query","opacity","stagger","animate","FloatingActionButtonComponent","primary","Attribute","FloatingActionButtonsModule","HierarchyBarService","setRootNode","root","_root","_nodes","getNodeList","nodes$","getSelectedChildren","selectNode","node","getChildren","loading","children$","observer","child","nodes","current","_child","HierarchyBarComponent","hierarchyBar","scrollIntoView","nodelist","overflow$","overflowAmount_1","overflowNodes$","scrollLeft","viewProviders","ViewChildren","ClickOutsideDirective","click","uxClickOutside","ClickOutsideModule","uniquePopoverId","PopoverComponent","setTitle","PopoverDirective","onKeyDown","_ariaDescribedBy","hasAttribute","clickOutside$","onClickOutside","keyCode","ESCAPE","PopoverModule","HierarchyBarModule","SidePanelService","SidePanelComponent","service","inline","attachTo","cssWidth","openChange","openPanel","closePanel","clickHandler","closeOnExternalClick","class","ItemDisplayPanelComponent","_itemDisplayPanelSubscription","visibleChange","ItemDisplayPanelFooterDirective","ItemDisplayPanelContentDirective","WizardStepComponent","_visited","visitedChange","_active","visited","WizardComponent","QueryList","_step","stepChange","step","invalidIndicator","stepChanging","StepChangingEvent","getCurrentStep","steps","onNext","onPrevious","finish","onFinishing","Promise","resolve","onFinish","onCancel","active","gotoStep","stepIndex","toArray","stp","isLastStep","reset","getStepAtIndex","[class]","to","MarqueeWizardStepComponent","_marqueeWizardService","_valid","setCompleted","completed","completedChange","MarqueeWizardService","MarqueeWizardComponent","marqueeWizardService","validChange","description","then","MarqueeWizardModule","WizardModule","AudioService","_http","getAudioFileMetadata","mediaElement","request","src","responseType","ResponseContentType","Blob","response","filename","lastIndexOf","extension","toLowerCase","blob","size","getWaveformFromUrl","url","AudioContext","_audioContext","createVolumeNode","createAnalyserNode","ArrayBuffer","getAudioBuffer","arrayBuffer","audioBuffer","createBufferSource","dataPoints","channels","_audioBuffer","numberOfChannels","channelIdx","getChannelData","Float32Array","getWaveformPoints","skip","waveform","duration","points","channel","getOfflineAudioContext","decodeAudioData","OfflineAudioContext","sampleRate","disconnectSource","_audioBufferSource","buffer","connect","_analyserNode","_gainNode","createGain","destination","createAnalyser","disconnect","Http","AudioServiceModule","HttpModule","FrameExtractionService","createVideoPlayer","videoPlayer","preload","createCanvas","goToFrame","time","currentTime","getThumbnail","subscription","image","toDataURL","getFrameThumbnail","frameSubscription","getFrameThumbnails","frames","frame","FrameExtractionModule","MediaPlayerService","_frameExtractionService","interval","setInterval","buffered","_mediaPlayer","clearInterval","_quietMode","quietModeEvent","audioTracks","autoplay","TimeRanges","crossOrigin","currentSrc","defaultMuted","defaultPlaybackRate","ended","loop","muted","networkState","paused","playbackRate","played","seekable","seeking","textTracks","TextTrackList","videoTracks","VideoTrackList","volume","_fullscreen","fullscreenEvent","setMediaPlayer","hostElement","mediaPlayer","_hostElement","initEvent","togglePlay","loaded","play","pause","load","canPlayType","addTextTrack","kind","label","language","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","mozRequestFullScreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","mozCancelFullScreen","fullscreenChange","fullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","toggleFullscreen","getFrames","MediaPlayerComponent","mediaPlayerService","_audioService","switchMap","hovering","quietMode","_playerRef","audioMetadata","playingEvent","playing","pauseEvent","mediaClickEvent","loadedMetadataEvent","(keydown.Space)","[class.standard]","[class.fullscreen]","[class.quiet]","[class.hover]","[class.video]","[class.audio]","(mouseenter)","(mouseleave)","(document:webkitfullscreenchange)","(document:mozfullscreenchange)","(document:MSFullscreenChange)","MediaPlayerBaseExtensionDirective","MediaPlayerTimelineExtensionComponent","durationChangeEvent","scrub","timeUpdateEvent","progressEvent","mousedown$","thumb","mousemove$","mouseup$","updateScrub","timelineRef","offsetX","mouseDown","(document:mouseup)","MediaPlayerControlsExtensionComponent","_volume","_previousVolume","playEvent","volumeChangeEvent","init","mouseenter$","volumeIcon","mouseenterContainer$","volumeContainer","mouseleaveContainer$","volumeActive","timer","toggleMute","setFullscreen","goToStart","goToEnd","volumeDragging","volumeSlider","DurationPipe","minutes","hours","days","pad","DurationPipeModule","FileSizePipe","log","pow","toFixed","FileSizePipeModule","NavigationComponent","NavigationItemComponent","_router","_activatedRoute","level","_navigationEnd","NavigationEnd","hasActiveLink","link","_children","parentListElement","levelClass","getLevelClass","ngAfterContentInit","setIndentWithoutArrow","_childrenChanges","tree","createUrlTree","relativeTo","queryParams","snapshot","fragment","some","indentWithoutArrow","SkipSelf","Router","ActivatedRoute","NavigationModule","ColorService","colorSets","keppel","_colorSet","colorClassSet","setColors","colorValueSet","_colors","getColorValueByHex","_html","_element","className","innerHTML","getColorValue","parentNode","color","hex","g","ThemeColor","rgba","backgroundColor","getColor","themeColor","resolveColorName","getRed","getGreen","getBlue","getAlpha","getColorSet","setColorSet","colorSet","colorName","toRgba","a","_r","_g","parse","rgbaMatch","shortHexMatch","longHexMatch","toHex","red","green","blue","toRgb","setRed","setGreen","setBlue","setAlpha","alpha","accent","secondary","alternate1","alternate2","alternate3","vibrant1","vibrant2","grey1","grey2","grey3","grey4","grey5","grey6","grey7","grey8","chart1","chart2","chart3","chart4","chart5","chart6","ok","warning","critical","partition1","partition9","partition10","partition11","partition12","partition13","partition14","social-chart-node","social-chart-edge","microFocus","cerulean","aqua","aquamarine","fuchsia","indigo","dark-blue","white","slightly-gray","bright-gray","gray","silver","dim-gray","dark-gray","black","crimson-negative","apricot","yellow","green-positive","ultramarine","skyblue","pale-aqua","pale-green","lime","orange","magenta","pale-purple","dark-ultramarine","steelblue","arctic-blue","emerald","olive","goldenrod","purple","pale-eggplant","pale-amber","pale-lemon","pale-emerald","plum","copper","amber","leaf-green","forest-green","ColorServiceModule","NotificationService","_colorService","spacing","iconColor","templateRef","notificationRef","notifications","notifications$","unshift","dismiss","getHistory","dismissAll","NotificationListComponent","_notificationService","notificationRefs","NotificationModule","NUMBER_PICKER_VALUE_ACCESSOR","NumberPickerComponent","Infinity","_propagateChange","_min","_max","_disabled","onScroll","wheelDelta","[class.has-error]","NumberPickerModule","MenuNavigationService","MenuNavigationItemDirective","active$","setActive","activated","MenuNavigationDirective","_document","_itemsOrdered","toggleButton","keyEnter","focusFirst","moveFirst","keydownHandler","handled","movePrevious","moveNext","toggleButtonPosition","moveToToggleButton","moveLast","navigatedOut","stopPropagation","activeIndex","nextIndex","menuOpen","Inject","DOCUMENT","MenuNavigationToggleDirective","_menuOpen","menuOpenChange","isKeyMatch","menuPosition","EXPORTS","PageHeaderCustomMenuDirective","PageHeaderService","getRoot","selectedRoot$","secondaryNavigationAutoselect","secondary$","isParentOf","deselect","items$","updateItem","setItems","setParent","initialSelectedItem","setSecondaryNavigation","enabled","PageHeaderIconMenuComponent","activeIconMenu$","menu","_isOpen","menuNavigationToggle","PageHeaderNavigationDropdownItemComponent","_pageHeaderService","_hover$","dropdownOpen","button","hoverStart","hoverLeave","PageHeaderNavigationItemComponent","onHidden","dropdowns","PageHeaderNavigationSecondaryItemDirective","PageHeaderNavigationComponent","resizeService","updateSelectedIndicator","menuItems","indicatorVisible","indicatorX","indicatorWidth","PageHeaderComponent","condensed","_crumbs","crumbs","_familyBackground","_familyForeground","goBack","backClick","PageHeaderModule","MenuNavigationModule","ProgressBarComponent","ProgressBarModule","RADIOBUTTON_VALUE_ACCESSOR","RadioButtonComponent","uniqueRadioId","_radioButtonId","option","RadioButtonModule","SearchBuilderService","registerComponent","_components","cmp","registerComponents","getComponent","config","setQuery","getQuery","queryHasChanged","queryChange","setValid","_validation","validationChange","keys","generateComponentId","_componentId","SearchBuilderGroupService","_searchBuilderService","_id","remove","field","SearchBuilderGroupComponent","searchBuilderGroupService","removeField","SearchBuilderOutletDirective","_componentFactoryResolver","componentDefinition","uxSearchBuilderOutlet","componentFactory","resolveComponentFactory","_componentRef","createComponent","uxSearchBuilderOutletContext","ComponentFactoryResolver","BaseSearchComponent","_searchBuilderGroupService","validate","validation","SearchTextComponent","SearchDateComponent","SearchDateRangeComponent","fromValue","toValue","fromLabel","toLabel","fromPlaceholder","toPlaceholder","SearchSelectComponent","multiple","dropDirection","allowNull","maxHeight","pageSize","SearchBuilderComponent","_querySubscription","_validSubscription","TypeaheadOptionEvent","TypeaheadKeyService","handleKey","typeahead","moveHighlight","TypeaheadService","uniqueId","TypeaheadComponent","typeaheadElement","_cdRef","getKey","getDisplay","getDisplayHtml","loadOptionsCallback","pageNum","arrayOrPromise","newOptions","initOptions","highlighted$","highlightedKey","highlightedChange","highlightedElement$","visibleOptions$","highlightedElement","visibleOptions","highlightedElementChange","loadingTemplate","_defaultLoadingTemplate","optionTemplate","_defaultOptionTemplate","noOptionsTemplate","_defaultNoOptionsTemplate","openOnFilterChange","updateOptions","mousedownHandler","clicking","mouseupHandler","optionMousedownHandler","optionClickHandler","display","displayText","displayHtml","length_1","matchIndex","highlight","substr","isInfiniteScroll","optionSelected","disabledOptions","selectedOption","newIndex","indexOfVisibleOption","highlighted","inBounds","selectFirst","normalisedInput_1","optionKey_1","el","[class.open]","[class.drop-up]","[style.maxHeight]","InfiniteScrollLoadButtonDirective","_template","_viewContainer","_load","asObservable","_visible","createEmbeddedView","clickTarget","getNextElementSibling","listen","clear","nextSibling","nodeType","InfiniteScrollLoadingDirective","_templateRef","InfiniteScrollDirective","_canLoadManually","_isLoading","_isExhausted","_loadButtonEnabled","isLoading","isExhausted","loadButtonEnabled","_collection","collectionChange","_scrollElement","loadOnScroll","_updateRequests","filterOperator","check","auditTime","doRequest","attachEventHandlers","canLoad","_loadButtonQuery","loadButton","_loadingIndicatorQuery","attachLoadButtonEvents","loadOnInit","loadNextPage","previousValue","detachEventHandlers","pageNumber","_nextPageNum","_pages","collection","reload","page","reloadPage","HTMLHtmlElement","_scrollEventSub","_domObserver","MutationObserver","observe","childList","subtree","_loadButtonSubscriptions","needsData","beginLoading","loadResult","subscription_1","setPageItems","endLoading","reason","endLoadingWithError","scrollHeight","clientHeight","InfiniteScrollLoadingEvent","loadingEvent","defaultPrevented","loadedEvent","InfiniteScrollLoadedEvent","loadErrorEvent","InfiniteScrollLoadErrorEvent","_defaultPrevented","exhausted","InfiniteScrollModule","ScrollIntoViewService","elem","scrollParent","offsetTop","offsetBottom","ScrollIntoViewIfDirective","_scrollIntoViewService","condition","ScrollIntoViewDirective","uxScrollIntoView","scrollIntoViewOptions","ScrollModule","TypeaheadHighlightDirective","SELECT_VALUE_ACCESSOR","SelectComponent","_typeaheadKeyService","propagateChange","input","_input$","inputChange","_dropdownOpen","dropdownOpenChange","filter$","onFilter","obj","inputClickHandler","selectInputText","inputBlurHandler","singleTypeahead","singleInput","inputKeyHandler","singleOptionSelected","TagInputEvent","tag","TAGINPUT_VALUE_ACCESSOR","TagInputComponent","TAGINPUT_VALIDATOR","NG_VALIDATORS","Number","MAX_VALUE","getTagDisplay","removeTagAt","canRemoveTagAt","_tags","_onChangeHandler","tagsChange","_input","tagTemplate","_defaultTagTemplate","connectTypeahead","typeaheadQuery","selectedIndex","tags","_onTouchedHandler","_typeaheadSubscription","tagRangeError","minTags","maxTags","given","validationErrors","keyHandler","inputCursorPos","tagInput","selectionStart","hasSelection","selectionEnd","tagSelected","isValidTagIndex","inputLength","canNavigateLeft","canNavigateRight","commitTypeahead","commitInput","backspace","moveSelection","tagDelimiters","getKeyChar","focusOutHandler","tagClickHandler","tagClickEvent","tagClick","selectTagAt","showTypeaheadOnClick","inputFocusHandler","selectInput","inputPasteHandler","addOnPaste","clipboardData","getData","commit","typeaheadOptionSelectedHandler","addTag","freeInput","newTags","splitTagInput","allValid","newTags_1","newTags_1_1","newTag","validateTag","newTags_2","newTags_2_1","createTag","isValidSelectIndex","isSelected","tagIndex","tagRemovingEvent","tagRemoving","tagRemoved","enforceTagLimits","isInputVisible","hasFocus","tagValue","inputPattern","inputValid","tagPattern","test","pattern","createTagHandler","displayValue","tagAddingEvent","tagAdding","tagAdded","tagValues","escapedDelimiters","delimiterRegex","split","[class.disabled]","[class.focus]","[class.invalid]","TagInputModule","SelectModule","SearchBuilderModule","SidePanelCloseDirective","SliderComponent","colorService","SliderType","SliderStyle","SliderSize","SliderSnap","SliderThumb","SliderTickType","SliderThumbEvent","SliderCalloutTrigger","middle","hover","Value","Button","callout","background","formatter","keyboard","major","minor","aria","lowerThumb","upperThumb","track","Wide","ticks","snap","labels","colors","higher","updateValues","setThumbState","Lower","Upper","ngDoCheck","detectValueChange","updateTooltipPosition","snapToNearestTick","snapTarget","forwards","getThumbState","closest","getTickDistances","tick","setThumbValue","validateValue","Major","snapToEnd","getThumbValue","getFormattedValue","thumbs","updateTooltips","thumbEvent","DragStart","DragEnd","MouseOver","MouseLeave","getAriaValueText","_tick","Persistent","Drag","Hover","Dynamic","getTooltip","updateTooltipText","getTooltipElement","lowerTooltip","upperTooltip","thumbWidth","tooltipElement","Narrow","tooltipWidth","tooltipPosition","Range","preventTooltipOverlap","trackWidth","diff","clamp","updateThumbPosition","eventPosition","MouseEvent","touches","trackBounds","fraction","snapToTick","updateOrder","Minor","lowerLimit","tickOne","tickTwo","tickDistances","deepMerge","updateTrackColors","updateTicks","lowerValue","low","upperValue","high","lowerPosition","upperPosition","tracks","setValue","majorOptions","minorOptions","majorTicks","getTicks","showTicks","minorTicks","unionTicks","join","getSteps","output","showLabels","tk","t1","t2","value1","value2","isSliderValue","obj1","obj2","SliderModule","SparkComponent","_theme","_trackColor","_barColor","values","total","val","SparkModule","TabsetService","selectAtIndex","selectNextTab","tabs_1","tabs_1_1","selectFirstTab","selectPreviousTab","reverse","selectLastTab","tabIndex","TabsetComponent","tabset","arrowLeft","arrowUp","arrowRight","arrowDown","[class.tabs-left]","[class.tabs-right]","uniqueTabId","TabComponent","_tabset","TabHeadingDirective","headingRef","TabFocusDirective","uxTabFocus","TabsetModule","TimelineComponent","TimelineEventComponent","TimelineModule","TOGGLESWITCH_VALUE_ACCESSOR","ToggleSwitchComponent","uniqueToggleSwitchId","_toggleSwitchId","ToggleSwitchModule","ToolbarSearchButtonDirective","clicked","KEYS","ToolbarSearchFieldDirective","_ngModel","blur","submit","text","NgModel","ToolbarSearchComponent","_expanded","params","initialWidth","search","createPlaceholder","animationStart","toState","enablePlaceholder","animationDone","_placeholder","visibility","insertBefore","VirtualScrollLoadingDirective","VirtualScrollLoadButtonDirective","VirtualScrollCellDirective","VirtualScrollComponent","_height","cellHeight","setupObservable","renderCells","isFirstChange","loadingComplete","cells","getVisibleCells","startCell","endCell","getTotalHeight","AutoGrowDirective","maximum","AutoGrowModule","FixedHeaderTableDirective","_tableHead","_tableBody","setLayout","tablePaging","getTable","scrollbar","clientWidth","tableHeight","FixedHeaderTableModule","FloatLabelDirective","_eventHandles","inputFocus","inputBlur","raised","hasText","getAttribute","_focused","eventHandle","FloatLabelModule","HelpCenterService","registerItem","unregisterItem","itm","HelpCenterItemDirective","_helpCenterService","uxHelpCenterItem","HelpCenterModule","HoverActionService","_actions","actn","setContainer","setFocusState","updateVisibility","setHoverState","_hovered","containerHasFocus","focusActionAtIndex","actionHasFocus","getFocusedActionIndex","getFocusedAction","HoverActionContainerDirective","_hoverActionService","onHover","onLeave","[class.hover-action-container-active]","[tabindex]","HoverActionDirective","[class.hover-action-active]","[class.hover-action-focused]","LayoutSwitcherItemDirective","getLayout","getConfig","activate","_embeddedView","deactivate","LayoutSwitcherDirective","updateActiveLayout","getActiveLayout","_layouts","maxWidth","_activeLayout","requestAnimationFrame","OverflowDirective","horizontalOverflow","verticalOverflow","checkForOverflow","tolerance","_state","uxOverflowHorizontalObserver","uxOverflowVerticalObserver","uxOverflowObserver","SelectionStrategy","selectionService","setSelectionService","mousedown","keydown","selectAll","dataset","RowSelectionStrategy","ctrlKey","shiftKey","multipleSelect","singleSelect","KeyCode","UpArrow","DownArrow","navigate","Spacebar","setSelectionStart","clearSelection","_selection","getSelectedItems","setSelectionEnd","startIdx","endIdx","activateSibling","RowAltSelectionStrategy","handleCursorKey","getSibling","SimpleSelectionStrategy","SelectionService","Set","_strategyToDestroy","selections","selection","selectionHasMutated","delete","has","selection$","setMode","trim","setDisabled","SelectionItemDirective","_selectionService","_selected","_managedTabIndex","uxSelectionItem","focusTarget$","focusTarget","clickEnabled","keyboardEnabled","SelectionDirective","uxSelectionChange","SelectionModule","ContactsNg1Component","injector","Injector","UpgradeComponent","ExpandInputNg1Component","FloatingActionButtonNg1Component","FlotNg1Component","GridNg1Component","HierarchyBarNg1Component","MarqueeWizardNg1Component","NestedDonutNg1Component","OrganizationChartNg1Component","PartitionMapNg1Component","PeityBarChartNg1Component","PeityLineChartNg1Component","PeityPieChartNg1Component","PeityUpdatingLineChartNg1Component","SankeyNg1Component","SearchToolbarNg1Component","SelectTableNg1Component","SLIDER_CHART_VALUE_ACCESSOR","SliderChartNg1Component","SocialChartNg1Component","SortDirectionToggleNg1Component","TreeGridNg1Component","ThumbnailNg1Component","NavigationMenuService","_navigationMenuService","collapseAtWidth","setCollapseAtWidth","setDefaultCollapseAtWidth","navigationMenuServiceFactory","get","navigationMenuServiceProvider","useFactory","deps","PdfService","_pdfService","createTable","rows","pdfServiceFactory","pdfServiceProvider","TimeAgoService","_timeAgoService","setStrings","strings","timeSince","past","present","timeSinceNow","moment","timeAgoServiceFactory","timeAgoServiceProvider","StringFilterPipe","it","StringFilterModule","CookieAdapter","getItem","cookie","setItem","removeItem","eqPos","toUTCString","getSupported","LocalStorageAdapter","localStorage","err","SessionStorageAdapter","sessionStorage","PersistentDataService","PersistentDataStorageType","LocalStorage","getAdapter","Cookie","SessionStorage","PersistentDataModule","StorageAdapter","tslib_1.__assign"],"mappings":"k4EAAAA,EAAA,gCA6BIA,EAAAC,UAAAC,WAAA,SAAWC,EAAmBC,GACtBA,EAAMC,SACND,EAAMC,QAAQC,KAAK,KAAMH,wBA7BpCI,EAAAA,UAASC,OACNC,SAAU,iBACVC,SAAU,6xBAuBTC,EAAAA,WA3BL,GCAAC,EAAA,oDAMCC,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAC,EAAAA,cAEJC,SAAUjB,GACVkB,cAAelB,+CAZnB,GCAAmB,EAAA,WAYI,SAAAA,EAAYC,EAA2CC,GAAAC,KAAAD,QAAAA,qBAF/B,IAAIE,EAAAA,aAGxBD,KAAKE,UAAYJ,EAAgBK,eAAe,KAAM,aAG1DN,EAAAlB,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBT,EAAAlB,UAAA4B,kBAAA,SAAkBC,GAAlB,IAAAC,EAAAT,KAGUU,EAAU,IAAIC,EAAAA,iBAAoCC,MAAOJ,EAAcK,YAAaC,OAAQN,EAAcO,eAG1GC,EAAcC,OAAOC,iBAAiBV,GAAeW,iBAAiB,WAGtEC,EAA4BpB,KAAKE,UAAUmB,cAAc,UAkD/D,OA/CArB,KAAKE,UAAUoB,SAASF,EAAQ,WAAY,YAC5CpB,KAAKE,UAAUoB,SAASF,EAAQ,QAAS,QACzCpB,KAAKE,UAAUoB,SAASF,EAAQ,SAAU,QAC1CpB,KAAKE,UAAUoB,SAASF,EAAQ,MAAO,KACvCpB,KAAKE,UAAUoB,SAASF,EAAQ,QAAS,KACzCpB,KAAKE,UAAUoB,SAASF,EAAQ,SAAU,KAC1CpB,KAAKE,UAAUoB,SAASF,EAAQ,OAAQ,KACxCpB,KAAKE,UAAUoB,SAASF,EAAQ,UAAW,MAC3CpB,KAAKE,UAAUoB,SAASF,EAAQ,UAAW,KAC3CpB,KAAKE,UAAUoB,SAASF,EAAQ,SAAU,QAC1CpB,KAAKE,UAAUoB,SAASF,EAAQ,SAAU,KAC1CpB,KAAKE,UAAUoB,SAASF,EAAQ,iBAAkB,QAClDpB,KAAKE,UAAUoB,SAASF,EAAQ,WAAY,UAG5CpB,KAAKE,UAAUqB,aAAaH,EAAQ,WAAY,MAChDpB,KAAKE,UAAUqB,aAAaH,EAAQ,cAAe,QAG/B,aAAhBJ,GAA8C,aAAhBA,GAA8C,UAAhBA,GAC5DhB,KAAKE,UAAUoB,SAASd,EAAe,WAAY,YAIvDR,KAAKE,UAAUsB,YAAYhB,EAAeY,GAE1CpB,KAAKyB,eAAeL,EAAQ,WACxB,IAAMM,EAAYN,EAAOO,iBAAmBP,EAAOQ,cAAkC,SAE/EC,EAAiB,WAGnBpB,EAAKJ,cAAcyB,IAAIC,EAAAA,UAAUX,EAAOQ,cAAe,UAAUI,UAAU,SAACnD,GACxE,OAAA4B,EAAKV,QAAQkC,IAAI,WAAM,OAAAvB,EAAQwB,MAAOtB,MAAOJ,EAAcK,YAAaC,OAAQN,EAAcO,qBAIzE,aAAzBW,EAAUS,WACVN,IAIAT,EAAOgB,iBAAiB,OAAQ,WAAM,OAAAP,QAKvCnB,GAGHb,EAAAlB,UAAA8C,wBAAeL,EAA2BiB,cAC1CjB,EAAOO,iBAAmBP,EAAOQ,cACjCS,EAASrD,KAAKgB,MAEdsC,WAAW,WAAM,OAAA7B,EAAKgB,eAAeL,EAAQiB,0BAhFxDE,EAAAA,sDANkDC,EAAAA,wBAA9BC,EAAAA,YAArB,GCAAC,EAAA,WAgBI,SAAAA,EAAoBC,EAAiCC,EAAuC7C,GAAxEC,KAAA2C,YAAAA,EAAiC3C,KAAA4C,eAAAA,EAAuC5C,KAAAD,QAAAA,gBALhE,gBACyB,IAAI8C,EAAAA,oBAMzDH,EAAA/D,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KACIA,KAAKK,cAAgBL,KAAK4C,eAAerC,kBAAkBP,KAAK2C,YAAYnC,eACvEuC,KAAKC,EAAAA,aAAahD,KAAKiD,WACvBjB,UAAU,SAACnD,GAA4B,OAAA4B,EAAKV,QAAQkC,IAAI,WAAM,OAAAxB,EAAKyC,SAASC,KAAKtE,QAG1F6D,EAAA/D,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,mCApB1B8C,EAAAA,UAASlE,OACNC,SAAU,aACVkE,WAAYxD,gDAPIyD,EAAAA,kBAGOzD,SAH0B4C,EAAAA,4CAWhDpD,EAAAA,wBACAkE,EAAAA,YAZL,GCAAC,EAAA,oDAKCjE,EAAAA,SAAQL,OACLS,SAAU+C,GACV9C,cAAe8C,GACfW,WAAYxD,+CARhB,GCAA4D,EAAA,oDAECL,EAAAA,UAASlE,OACRC,SAAU,iEAHZ,GCgBIuE,EAAgBC,OAAOC,iBACpBC,wBAA2BC,OAAS,SAAUC,EAAGC,GAAKD,EAAEF,UAAYG,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC,KAEzE,SAAAE,EAA0BJ,EAAGC,GAEzB,SAAAI,IAAgBpE,KAAKqE,YAAcN,EADnCL,EAAcK,EAAGC,GAEjBD,EAAEpF,UAAkB,OAANqF,EAAaL,OAAOW,OAAON,IAAMI,EAAGzF,UAAYqF,EAAErF,UAAW,IAAIyF,GAG5E,IAAIG,EAAWZ,OAAOa,QAAU,SAAkBC,GACrD,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIV,KADTS,EAAIG,UAAUF,GACOhB,OAAOhF,UAAUuF,eAAelF,KAAK0F,EAAGT,KAAIQ,EAAER,GAAKS,EAAET,IAE9E,OAAOQ,GAGX,SAAAM,EAkEyBC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWR,EAAI,EAChE,OAAIM,EAAUA,EAAEjG,KAAKgG,IAEjB9C,KAAM,WAEF,OADI8C,GAAKL,GAAKK,EAAEF,SAAQE,OAAI,IACnBI,MAAOJ,GAAKA,EAAEL,KAAMU,MAAOL,KAKhD,SAAAM,EAAuBN,EAAGJ,GACtB,IAAIK,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBO,EAAYC,EAA3Bb,EAAIM,EAAEjG,KAAKgG,GAAOS,KACtB,IACI,WAAc,IAANb,GAAsB,EAANA,QAAcW,EAAIZ,EAAEzC,QAAQmD,MAAMI,EAAGC,KAAKH,EAAEH,OAExE,MAAOO,GAASH,GAAMG,MAAOA,WAEzB,IACQJ,IAAMA,EAAEF,OAASJ,EAAIN,EAAU,YAAIM,EAAEjG,KAAK2F,WAExC,GAAIa,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGX,SAAAG,IACI,IAAK,IAAIH,KAASd,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3Cc,EAAKA,EAAGI,OAAOP,EAAOT,UAAUF,KACpC,OAAOc,mBCpHT,SAAAK,IAAA,IAAArF,EAAAT,eANO,IAAIW,EAAAA,gBAAkC,iBACrC,IAAIA,EAAAA,mCACA,IAAIA,EAAAA,gBAAwB,OAOtCX,KAAKK,cAAgBL,KAAK+F,MAAMhD,KAC9BiD,EAAAA,OAAO,SAAAC,GAAQ,OAACxF,EAAKyF,KAAKd,QAAUa,EAAKE,KAAK,SAAAC,GAAO,OAAAA,IAAQ3F,EAAKyF,KAAKd,WACvEpD,UAAU,SAAAiE,GAAQ,OAAAxF,EAAKyF,KAAKhE,KAAmB,EAAd+D,EAAKnB,OAAamB,EAAK,GAAK,eAGjEH,EAAAnH,UAAAyB,YAAA,WACEJ,KAAKK,cAAcC,eAMrBwF,EAAAnH,UAAA0H,OAAA,SAAOD,GACLpG,KAAK+F,MAAM7D,KAAI0D,EAAK5F,KAAK+F,MAAMX,OAAOgB,MAMxCN,EAAAnH,UAAA2H,UAAA,SAAUF,GACRpG,KAAK+F,MAAM7D,KAAKlC,KAAK+F,MAAMX,MAAMY,OAAO,SAAAO,GAAQ,OAAAA,IAASH,MAM3DN,EAAAnH,UAAA6H,OAAA,SAAOJ,GACLpG,KAAKkG,KAAKhE,KAAKkE,IAMjBN,EAAAnH,UAAA8H,YAAA,SAAYC,GACV1G,KAAK2G,UAAUzE,KAAKwE,wBA9CvBnE,EAAAA,wDCNDqE,EAAA,WAgBE,SAAAA,EAAoBC,GAApB,IAAApG,EAAAT,KAAoBA,KAAA6G,YAAAA,eAHW7G,KAAK6G,YAAYX,KAAKnD,KAAK+D,EAAAA,IAAI,SAAAV,GAAO,OAAAA,IAAQ3F,KAI3ET,KAAK6G,YAAYR,OAAOrG,aAG1B4G,EAAAjI,UAAAyB,YAAA,WACEJ,KAAK6G,YAAYP,UAAUtG,2BAf9Bf,EAAAA,UAASC,OACRC,SAAU,cACVC,SAAU,oDACV2H,gBAAiBC,EAAAA,wBAAwBC,oDANlCnB,sCAWNoB,EAAAA,aAAYhI,MAACuE,GAA2B0D,KAAMC,EAAAA,mBAdjD,GCAAC,EAAA,WA4DE,SAAAA,EAAmBC,GAAAtH,KAAAsH,WAAAA,cANF,eACUC,MAAO,EAAGC,MAAO,gCAX/BH,EAAA1I,UAAA,gBAIb,WACE,OAAOqB,KAAKsH,WAAWX,UAAUc,yBALbC,GACpB1H,KAAKsH,WAAWb,YAAYiB,oCAiB9BL,EAAA1I,UAAA6H,OAAA,SAAOJ,EAAuBuB,GAE5B3H,KAAKsH,WAAWd,OAAOJ,GAGvBpG,KAAK4H,aAAaD,IAGpBN,EAAA1I,UAAAkJ,OAAA,SAAOC,GACL9H,KAAK+H,OAASD,EAAWlH,MACzBZ,KAAKgI,YAAchI,KAAKiI,QAAQzH,cAAc0H,YAE9ClI,KAAKmI,OAAOZ,MAAQ,EACpBvH,KAAKmI,OAAOX,QAAUxH,KAAKgI,YAAchI,KAAK+H,SAGhDV,EAAA1I,UAAAyJ,SAAA,WACEpI,KAAKqI,QAAUrI,KAAK+H,OAGpB/H,KAAKqI,OAASC,KAAKC,IAAIvI,KAAKqI,OAAQrI,KAAKmI,OAAOZ,QAGlDF,EAAA1I,UAAAuD,KAAA,WACElC,KAAKqI,QAAUrI,KAAK+H,OAGpB/H,KAAKqI,OAASC,KAAKE,IAAIxI,KAAKqI,OAAQrI,KAAKmI,OAAOX,QAG1CH,EAAA1I,UAAAiJ,sBAAaD,GAGnB,GAAK3H,KAAK+H,QAAW/H,KAAKgI,YAA1B,CAKQ,IAAAS,EAAAd,EAAAc,WAAY5H,EAAA8G,EAAA9G,YACpB6H,EAAAxH,iBAAAyG,GAAQgB,EAAAD,EAAAC,WAAYC,EAAAF,EAAAE,YAGdC,EAAgBP,KAAKQ,IAAI9I,KAAKqI,QAC9BU,EAAcF,EAAgB7I,KAAK+H,OACnCiB,EAAYC,WAAWN,GAAc9H,EAAcoI,WAAWL,GAGhEH,EAAaI,IACf7I,KAAKqI,QAAWI,EAAaQ,WAAWN,GAAeE,GAI1BE,EAA1BN,EAAaO,IAChBhJ,KAAKqI,QAAWI,EAAaO,EAAaD,yBA9G/C9J,EAAAA,UAASC,OACRC,SAAU,iBACVC,SAAU,qvCAgCViE,WAAYyC,gDApCLA,uCAwCNoD,EAAAA,YAAWhK,MAAC,WAAOiK,KACnB9J,EAAAA,uBAQA+J,EAAAA,UAASlK,MAAC,gBApDb,GCAAmK,EAAA,oDAOC9J,EAAAA,SAAQL,OACPM,SACEC,EAAAA,aACA+D,GAEF5D,cAAeyH,EAAqBT,EAAkBnD,GACtD9D,SAAU0H,EAAqBT,EAAkBnD,+CAbnD,GCGa6F,GACTC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAC,IAC9BC,OAAO,GAGPC,EAAmB,6CAyCW,kBAAiBA,UAEzB7J,KAAK8J,0BAGC,kBACE,mBACC,2BACK,iBACP,iBACY,uBACU,sBAER,IAAIjH,EAAAA,0BA4BzB,sBAEG,gBAEN,yBAEa,mCACK,0CAhCjC8G,EAAAhL,UAAA,wBACA,OAAOqB,KAAK+J,YAGhB,SAAU3E,GACNpF,KAAK+J,OAAS3E,EAGdpF,KAAKgK,cAAgBhK,KAAK+J,SAAW/J,KAAKiK,mBAG1CjK,KAAKkK,YAAclK,KAAKgK,cAAgB,QAAUhK,KAAK+J,OAGvD/J,KAAKmK,YAAYhH,KAAKnD,KAAK+J,QAG3B/J,KAAKoK,iBAAiBpK,KAAK+J,QAC3B/J,KAAKqK,qDAGT1G,OAAA2G,eAAIX,EAAAhL,UAAA,eAAJ,WACI,OAAUqB,KAAKuK,IAAMvK,KAAK8J,aAAW,0CAYzCH,EAAAhL,UAAA6L,OAAA,YAEQxK,KAAKyK,UAAazK,KAAK0K,YAIvB1K,KAAKoF,QAAUpF,KAAKiK,mBAMxBjK,KAAKoF,OAASpF,KAAKoF,MALfpF,KAAKoF,OAAQ,IAUrBuE,EAAAhL,UAAAgM,WAAA,SAAWvF,GACHA,IAAUpF,KAAK+J,SACf/J,KAAK+J,OAAS3E,IAItBuE,EAAAhL,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAKoK,iBAAmBS,GAG5BlB,EAAAhL,UAAAmM,kBAAA,SAAkBD,GACd7K,KAAKqK,kBAAoBQ,GAG7BlB,EAAAhL,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,uBAzHvB/L,EAAAA,UAASC,OACNC,SAAU,cACVC,SAAU,8oCAiCViE,WAAYiG,yEAMXjK,EAAAA,oBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,kCACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,MAAKH,MAAC,sCACNG,EAAAA,MAAKH,MAAC,wCAENqE,EAAAA,sBAEAlE,EAAAA,cCjEL4L,EAAA,oDAKC1L,EAAAA,SAAQL,OACLM,SAAU0L,EAAAA,aACVvL,SAAUgK,GACV/J,cAAe+J,+CARnB,GCCAwB,EAAA,yCAkB8D,IAAItI,EAAAA,qCAGzCuI,SAErBD,EAAAxM,UAAA0M,WAAA,SAAWC,GAAX,IAAA7K,EAAAT,KACIA,KAAKuL,QAAUD,EAGftL,KAAKuL,QAAQC,OAAOxJ,UAAU,SAAAnD,GAE1B,IAAI4M,EAAM5M,EAAM6M,UAAU,SAAAC,GAAU,OAAAA,EAAOC,MAAQnL,EAAKmL,OAE5C,GAARH,IACAhL,EAAKoL,MAAQT,EAAmBU,QAIjB,EAAfjN,EAAMiG,OACNrE,EAAKsL,aAAuB,IAATN,EAAa,KAAOA,EAAM,EAE7ChL,EAAKsL,YAAc,KAGvBtL,EAAKuL,YAAY7I,KAAK1C,EAAKoL,UAKnCV,EAAAxM,UAAAsN,YAAA,WAWI,OATIjM,KAAK6L,QAAUT,EAAmBc,UAClClM,KAAK6L,MAAQT,EAAmBe,WACzBnM,KAAK6L,QAAUT,EAAmBe,WACzCnM,KAAK6L,MAAQT,EAAmBU,OAEhC9L,KAAK6L,MAAQT,EAAmBc,UAI7BlM,KAAKuL,QAAQa,aAAapM,KAAK4L,IAAK5L,KAAK6L,4BAxDvD5M,EAAAA,UAASC,OACNC,SAAU,oBACVC,SAAU,+XAOViN,SAAU,6FAIThN,EAAAA,mBACAA,EAAAA,2BACAA,EAAAA,2BACAkE,EAAAA,YAlBL,sHCDA,IAAA+I,GAAA,oCAY4C,IAAIC,EAAAA,6BAG5CD,EAAA3N,UAAA6N,gBAAA,WAAA,IAAA/L,EAAAT,KACIA,KAAKyM,WAAWC,QAAQ,SAAAC,GAAa,OAAAA,EAAUtB,WAAW5K,MAG9D6L,EAAA3N,UAAAyN,aAAA,SAAaR,EAAaC,GAEtB,GAAI7L,KAAK4M,WACDf,IAAUT,EAAmBU,OAC7B9L,KAAK6M,SAEL7M,KAAK6M,QAAUjB,IAAKA,EAAKC,MAAOA,QAEjC,CAEH,IAAIJ,EAAMzL,KAAK6M,MAAMnB,UAAU,SAAAC,GAAU,OAAAA,EAAOC,MAAQA,KAG3C,IAATH,EACAzL,KAAK6M,MAAMnH,MAAOkG,IAAKA,EAAKC,MAAOA,IAC5BA,IAAUT,EAAmBc,WAAaL,IAAUT,EAAmBe,YAC9EnM,KAAK6M,MAAMC,OAAOrB,EAAK,GACvBzL,KAAK6M,MAAMnH,MAAOkG,IAAKA,EAAKC,MAAOA,KAEnC7L,KAAK6M,MAAMC,OAAOrB,EAAK,GAM3B,OAFAzL,KAAKwL,OAAOtJ,KAAKlC,KAAK6M,OAEf7M,KAAK6M,2BAxCvBzJ,EAAAA,UAASlE,OACNC,SAAU,kGAITE,EAAAA,0BACA0N,EAAAA,gBAAe7N,MAACiM,QAVrB,GCAA6B,GAAA,oDAMCzN,EAAAA,SAAQL,OACLS,SAAUwL,EAAwBmB,IAClC1M,cAAeuL,EAAwBmB,gDAR3C,GCMAW,GAAA,WAKI,SAAAA,EAAmBC,EAAkCC,EAA2BC,GAA7DpN,KAAAkN,QAAAA,EAAkClN,KAAAmN,MAAAA,EAA2BnN,KAAAoN,OAAAA,kBAF3D,IAAIb,EAAAA,QAKrBvM,KAAKqN,SAAWH,EAAQxM,QAGxBV,KAAKsN,kBAGLtN,KAAKqN,SAAStK,KAAKwK,EAAAA,qBAAqBL,EAAQnG,iBAAkByG,EAAAA,UAAUxN,KAAKyN,aAC5EzL,UAAUhC,KAAK0N,SAASC,KAAK3N,OAGlCmN,EAAMS,YAAY7K,KAAKiD,EAAAA,OAAO,SAAAnH,GAAS,OAAAA,EAAMqO,QAAQ3C,KAAO2C,EAAQ3C,KAAKiD,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAK6N,QAAQF,KAAK3N,cAIrIiN,EAAAtO,UAAA2O,gBAAA,WAAA,IAAA7M,EAAAT,KAGI,IAAkC,IAA9BA,KAAKkN,QAAQY,aAAjB,CAKA,IAAMC,EAAW/N,KAAKmN,MAAMa,cAAchI,OAAO,SAAAtF,GAG7C,QAAIA,IAAYD,GAAQC,EAAQwM,QAAQ3C,KAAO9J,EAAKyM,QAAQ3C,KAAO7J,EAAQwM,QAAQhJ,eAAe,oBAKhE,IAA9BzD,EAAKyM,QAAQY,eAIbhK,MAAMmK,QAAQxN,EAAKyM,QAAQY,eACmC,IAAvDrN,EAAKyM,QAAQY,aAAaI,QAAQxN,EAAQ0M,aADrD,MAMoB,IAApBW,EAASjJ,SAKbiJ,EAASI,KAAK,SAACC,EAAYC,GAAe,OAAAD,EAAWlB,QAAQoB,aAAaC,UAAYF,EAAWnB,QAAQoB,aAAaC,UAAY,GAAK,IAGvIvO,KAAKqN,SAASnL,KAAK6L,EAAS,GAAGb,QAAQsB,iBAI3CvB,EAAAtO,UAAAkP,QAAA,SAAQhP,GAEJ,IAAkC,IAA9BmB,KAAKkN,QAAQY,cAA0BjP,EAAMqO,UAAYlN,KAAKkN,WAK7B,IAAjCrO,EAAMqO,QAAQuB,gBAA4B5P,EAAMuO,SAAWpN,KAAKoN,WAKhEtJ,MAAMmK,QAAQjO,KAAKkN,QAAQY,eAEtB9N,KAAKkN,QAAQY,aAAa3H,KAAK,SAAAuI,GAAQ,OAAAA,IAAS7P,EAAMuO,UAF/D,CAQA,IAAMuB,EAAc3O,KAAKkN,QAAQpG,IAAM9G,KAAKkN,QAAQpG,IAAIjI,EAAMuG,OAASvG,EAAMuG,MAG7EpF,KAAKqN,SAASnL,KAAKyM,KAIvB1B,EAAAtO,UAAA+O,SAAA,SAAStI,GAGLpF,KAAKkN,QAAQsB,aAAepJ,EAC5BpF,KAAKkN,QAAQoB,aAAe,IAAIM,KAG5B5O,KAAKkN,QAAQuB,gBACbzO,KAAKmN,MAAMhK,MAAO+J,QAASlN,KAAKkN,QAASE,OAAQpN,KAAKoN,OAAQhI,MAAKA,KAK3E6H,EAAAtO,UAAAkQ,QAAA,WACI7O,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,cAtGxB,GCLA,SAAAC,GAAoCC,EAAgBC,GAQhD,IANA,IAAMC,KAGFvQ,EAAiBqQ,EAIbrQ,EAAUuF,eAAe+K,IACzBC,EAAaxJ,KAAK/G,EAAUsQ,KAGhCtQ,EAAYA,EAAUkF,WACPA,YAGnBmL,EAAOC,GAAgB,eAAU,IAAA/P,KAAAiQ,EAAA,EAAAA,EAAAtK,UAAAC,OAAAqK,IAAAjQ,EAAAiQ,GAAAtK,UAAAsK,GAC7BD,EAAaxC,QAAQ,SAAA0C,GAAQ,OAAAA,EAAKpQ,KAAIqQ,MAATD,EAAIxJ,GAAMoJ,GAAW9P,8CCAtDoQ,EAAA3Q,UAAAyB,YAAA,WAAA,IAAAK,EAAAT,KAEIsP,EAAYvB,SAAS/H,OAAO,SAAAqH,GAAY,OAAAA,EAASD,SAAW3M,EAAK8O,UAC5D7C,QAAQ,SAAAW,GAAY,OAAA5M,EAAK+O,kBAAkBnC,EAASH,YAI7DoC,EAAA3Q,UAAA8Q,gBAAA,SAAgBvC,GACZoC,EAAYvB,SAASrI,KAAK,IAAIuH,GAAeC,EAASlN,KAAMA,KAAKuP,WAIrED,EAAA3Q,UAAA6Q,kBAAA,SAAkBtC,GACd,IAAMxM,EAAUV,KAAK0P,kBAAkBxC,EAAQxM,SAE3CA,IAEA4O,EAAYvB,SAAWuB,EAAYvB,SAAS/H,OAAO,SAAAqH,GAAY,OAAAA,IAAa3M,IAG5EA,EAAQmO,YAKhBS,EAAA3Q,UAAAgR,UAAA,SAAUvC,GACNpN,KAAKuP,QAAUnC,GAInBkC,EAAA3Q,UAAAwE,KAAA,SAAKtE,GACDyQ,EAAY9D,OAAOtJ,KAAKrD,IAI5ByQ,EAAA3Q,UAAA+Q,kBAAA,SAAkBhP,GACd,OAAO4O,EAAYvB,SAAS5H,KAAK,SAAAkH,GAAY,OAAAA,EAASH,QAAQxM,UAAYA,KAI9E4O,EAAA3Q,UAAAqP,YAAA,WACI,OAAOsB,EAAYvB,UAIvBuB,EAAA3Q,UAAAiR,qBAAA,SAAqBlP,EAAuBmP,GAGxC,IAAMC,EAAiB9P,KAAKgO,cAAc7H,KAAK,SAAA4J,GAAY,OAAAA,EAAS7C,QAAQxM,UAAYA,IAGxF,GAAIoP,EAGA,IAAK,IAAME,KAAQH,EACfC,EAAe5C,QAAQ8C,GAAQH,EAAWG,IAMtDV,EAAA3Q,UAAAsR,cAAA,SAAcvP,EAAuBmP,GAGjC7P,KAAKyP,gBAAelL,KAAMsL,GAAYnP,QAAOA,MAIjD4O,EAAA3Q,UAAAuR,iBAAA,SAAiBvD,GAAjB,IAAAlM,EAAAT,KACQ8D,MAAMmK,QAAQtB,EAAUwD,YACxBxD,EAAUwD,UAAUzD,QAAQ,SAACQ,GAA6B,OAAAzM,EAAKgP,gBAAelL,KAAM2I,GAASxM,QAASiM,EAAUO,EAAQkD,mBAKhId,EAAA3Q,UAAA0R,mBAAA,SAAmB1D,GAAnB,IAAAlM,EAAAT,KACQ8D,MAAMmK,QAAQtB,EAAUwD,YACxBxD,EAAUwD,UAAUzD,QAAQ,SAACQ,GAA6B,OAAAzM,EAAK+O,kBAAkBtC,MAKzFoC,EAAA3Q,UAAAiP,UAAA,WACI,OAAO0B,EAAY9D,+BAxFP,IAAIe,EAAAA,4BAPvBhK,EAAAA,wDCPD+N,GAAA,WAQI,SAAAA,EAAkCnD,GAAAnN,KAAAmN,MAAAA,EAE9B4B,GAAoB/O,KAAM,YAC1B+O,GAAoB/O,KAAM,sBAI9BsQ,EAAA3R,UAAAmE,SAAA,WAEI9C,KAAKmN,MAAM+C,iBAAiBlQ,OAIhCsQ,EAAA3R,UAAAyB,YAAA,WACIJ,KAAKmN,MAAMkD,mBAAmBrQ,OAIlCsQ,EAAA3R,UAAAiR,qBAAA,SAAqBlP,EAAuBmP,GACxC7P,KAAKmN,MAAMyC,qBAAqBlP,EAASmP,IAI7CS,EAAA3R,UAAAsR,cAAA,SAAcvP,EAAuBmP,GACjC7P,KAAKmN,MAAM8C,cAAcvP,EAASmP,6CA7BjCP,GAAWiB,aAAApH,KAKHqH,EAAAA,gBARjB,GCGAC,GAAA,SAAAC,sEAAmDC,EAAAA,EAAAA,GAG/CF,EAAA9R,UAAAmE,SAAA,WACI9C,KAAKmN,MAAMwC,UAAU3P,KAAKoN,WAJlC,CAAmDkD,ICKtCM,IACT9C,cAAc,EACdW,gBAAgB,GCNPoC,GAAW,8BCyCpB,SAAAC,IAAA,IAAArQ,EAAAT,qBAhC6B,gBAIlB,IAAIW,EAAAA,kCACJ,IAAIA,EAAAA,gBAAkCoQ,qBACnC,IAAIpQ,EAAAA,iCACYX,KAAKgR,YAAYjO,KAAKkO,EAAAA,MAAM,GAAInK,EAAAA,IAAI,SAACgB,GAAoC,OAAAA,EAAWhH,SAASyM,EAAAA,0CAC5G,IAAI5M,EAAAA,iBAAwCuQ,SAAS,EAAOC,EAAG,EAAGC,EAAG,EAAGxQ,MAAO,EAAGE,OAAQ,iBAC/F,IAAIyL,EAAAA,sBACH,IAAI5L,EAAAA,iBAAyB,GAuBpCX,KAAKqR,QAAQrP,UAAUhC,KAAKsR,cAAc3D,KAAK3N,OAC/CA,KAAKuR,SAASxO,KAAKiD,EAAAA,OAAO,SAAAwL,GAAW,OAAY,IAAZA,KAAmBxP,UAAUhC,KAAKyR,kBAAkB9D,KAAK3N,OAC9FA,KAAK0R,SAAS3O,KAAKkO,EAAAA,MAAM,IAAIjP,UAAU,WAAM,OAAAvB,EAAKkR,oBAClD3R,KAAKgR,YAAYjO,KAAKkO,EAAAA,MAAM,IAAIjP,UAAU,WAAM,OAAAvB,EAAKkR,2BAxBzDhO,OAAA2G,eAAIwG,EAAAnS,UAAA,eAAJ,WACI,OAAOqB,KAAK4R,SAASnK,4CAGzB9D,OAAA2G,eAAIwG,EAAAnS,UAAA,eAAJ,WACI,OAAOqB,KAAK0R,SAASjK,4CAGzB9D,OAAA2G,eAAIwG,EAAAnS,UAAA,eAAJ,WACI,OAAOqB,KAAKuR,SAAS9J,4CAGzB9D,OAAA2G,eAAIwG,EAAAnS,UAAA,kBAAJ,WACI,OAAOqB,KAAKgR,YAAYvJ,4CAG5B9D,OAAA2G,eAAIwG,EAAAnS,UAAA,mBAAJ,WACI,OAAOqB,KAAK8H,WAAWlH,MAAQZ,KAAK6R,QAAQC,yCAchDhB,EAAAnS,UAAAoT,UAAA,SAAUC,GACNhS,KAAK0R,SAASxP,KAAI0D,EAAK5F,KAAK0R,SAASjK,YAAYuK,MAOrDlB,EAAAnS,UAAAsT,aAAA,SAAaD,GACThS,KAAK0R,SAASxP,KAAKlC,KAAK0R,SAASjK,WAAWzB,OAAO,SAAAkM,GAAW,OAAAA,IAAYF,MAQ9ElB,EAAAnS,UAAAwT,cAAA,SAAcvR,EAAuCE,QAAvC,IAAAF,IAAAA,EAAgBZ,KAAK8H,WAAWlH,YAAO,IAAAE,IAAAA,EAAiBd,KAAK8H,WAAWhH,QAC9Ed,KAAK8H,WAAWlH,QAAUA,GAASZ,KAAK8H,WAAWhH,SAAWA,GAC9Dd,KAAKgR,YAAY9O,MAAOtB,MAAOA,EAAOE,OAAQA,KAQtDgQ,EAAAnS,UAAAyT,cAAA,WACI,OAAOpS,KAAKqS,QAAQvL,IAAI,SAAAkL,GACpB,OAASzH,GAAIyH,EAAOzH,GAAI+H,IAAKN,EAAOO,YAAaC,IAAKR,EAAOS,SAAUC,QAASV,EAAOW,gBAAiBC,QAASZ,EAAOa,iBAOhI/B,EAAAnS,UAAA2S,cAAA,SAAce,GAAd,IAAA5R,EAAAT,KAGIqS,EAAQ3F,QAAQ,SAAAsF,GAGZ,IAAMhD,EAASvO,EAAK4R,QAAQlM,KAAK,SAAA+L,GAAW,OAAAA,EAAQ3H,KAAOyH,EAAOzH,KAE9DyE,IACAA,EAAO8D,UAAUd,EAAOM,KACxBtD,EAAO+D,OAAOf,EAAOQ,KACrBxD,EAAOgE,cAAchB,EAAOU,SAC5B1D,EAAOiE,WAAWjB,EAAOY,aAQrC9B,EAAAnS,UAAAgT,gBAAA,WAAA,IAAAlR,EAAAT,KAGIA,KAAKkT,WAAalT,KAAK6R,QAAQsB,WAAanT,KAAKoT,YAGjDpT,KAAKuR,SAASrP,KAAKlC,KAAKoT,YAAcpT,KAAK6R,QAAQwB,UAG/CrT,KAAKkT,WAAalT,KAAK6R,QAAQwB,WAC/BrT,KAAKkT,WAAalT,KAAK6R,QAAQwB,UAGnCrT,KAAKsT,qBAGLtT,KAAKqS,QAAQrM,OAAO,SAAAgM,GAAU,OAACvR,EAAK8S,eAAiBvB,IAAWvR,EAAK8S,cAAcvB,SAC9EtF,QAAQ,SAAAsF,GAAU,OAAAA,EAAOwB,YAMlC1C,EAAAnS,UAAA2U,mBAAA,WAAA,IAAA7S,EAAAT,KAGIA,KAAKqS,QAAQrM,OAAO,SAAAgM,GAAU,OAAAA,EAAOO,cAAgBkB,WAAazB,EAAOS,WAAagB,YACjF/G,QAAQ,SAAAsF,GAAU,OAAAvR,EAAKiT,kBAAkB1B,KAE9ChS,KAAK2T,sBAGT7C,EAAAnS,UAAA8S,kBAAA,WAGIzR,KAAK4T,oBAAoBlH,QAAQ,SAACsF,EAAQvG,GACtCuG,EAAOc,UAAU,GACjBd,EAAOe,OAAOtH,MAKtBqF,EAAAnS,UAAAiV,kBAAA,WACI,OAAO5T,KAAKqS,QAAQlE,KAAK,SAAC0F,EAAIC,GAE1B,IAAMC,EAAaF,EAAGtB,YAAcsB,EAAGpB,SACjCuB,EAAaF,EAAGvB,YAAcuB,EAAGrB,SAEvC,OAAIsB,EAAaC,GACL,EAGKA,EAAbD,EACO,EAGJ,KAQfjD,EAAAnS,UAAA+U,kBAAA,SAAkB1B,GAOd,IAJA,IAAItL,EAAW,EACXuN,GAAU,GAGNA,GAAS,CAGb,IAAMtI,EAASjF,EAAW1G,KAAK6R,QAAQC,QACjCU,EAAMlK,KAAK4L,MAAMxN,EAAW1G,KAAK6R,QAAQC,SAG/C,GAAI9R,KAAKmU,qBAAqBxI,EAAQ6G,EAAKR,EAAOW,gBAAiBX,EAAOa,cAItE,OAHAoB,GAAU,EACVjC,EAAOc,UAAUnH,QACjBqG,EAAOe,OAAOP,GAIlB,GAAe,IAAX7G,GAAgBqG,EAAOU,QAAU1S,KAAK6R,QAAQC,QAC9C,MAAM,IAAIsC,MAAM,sFAGpB1N,MAORoK,EAAAnS,UAAAwV,qBAAA,SAAqBxI,EAAgB6G,EAAa6B,EAAoBzB,EAAiB0B,GAGnF,IAAMC,EAASvU,KAAKwU,oBAGpB,GAAI7I,EAAS0I,EAAarU,KAAK6R,QAAQC,QACnC,OAAO,EAIX,mBAASX,GACL,mBAASC,GACL,GAAImD,EAAOpO,KAAK,SAAAsO,GAAS,OAAAA,EAAM9I,SAAWwF,GAAKsD,EAAMjC,MAAQpB,GAAKqD,EAAMzC,SAAWsC,kBACxE,IAFNlD,EAAIoB,EAAKpB,EAAIoB,EAAMI,EAASxB,IAAG,SAA/BA,oCADJD,EAAIxF,EAAQwF,EAAIxF,EAAS0I,EAAYlD,IAAG,SAAxCA,wCAQT,OAAO,GAGXL,EAAAnS,UAAA6V,kBAAA,WAAA,IAAA/T,EAAAT,KAGI,OAAOA,KAAKqS,QAAQrM,OAAO,SAAAgM,GAAU,OAAAA,EAAOO,cAAgBkB,WAAazB,EAAOS,WAAagB,YACxFiB,OAAO,SAACtP,EAAO4M,GAIZ,OAFAvR,EAAKkU,aAAa3C,EAAQ,SAACrG,EAAQ6G,GAAQ,OAAApN,EAAMM,MAAOsM,OAAQA,EAAQrG,OAAQA,EAAQ6G,IAAKA,MAEtFpN,QAQnB0L,EAAAnS,UAAAiW,cAAA,SAAcC,GAGV7U,KAAK8U,YAAcD,EAAOhW,MAC1BmB,KAAKuT,cAAgBsB,EAGrB7U,KAAK+U,aAAaF,EAAO7C,SAG7BlB,EAAAnS,UAAAqW,aAAA,SAAaH,GAET,IAAMI,EAAYjV,KAAK8U,YAAYI,MAAQC,YACrCC,EAAYpV,KAAK8U,YAAYO,MAAQC,YAG3C,GAAIT,EAAOhW,MAAMsS,IAAM8D,GAAaJ,EAAOhW,MAAMuS,IAAMgE,EAAvD,CAKApV,KAAK8U,YAAcD,EAAOhW,MAGlB,IAGFsJ,EAHE0M,EAAAU,OAGcC,wBAOhBC,EAASR,GAJC9M,EAAOuN,KAAQvN,EAAOvH,MAAQ,GAKxC+U,EAASP,GAJCjN,EAAOyN,IAAOzN,EAAOrH,OAAS,GAOxCgH,GACFqJ,EAAG0D,EAAO7C,OAAOb,EACjBC,EAAGyD,EAAO7C,OAAOZ,EACjBxQ,MAAOiU,EAAO7C,OAAOpR,MACrBE,OAAQ+T,EAAO7C,OAAOlR,QAI1B,OAAQ+T,EAAOnN,WAEX,KAAKmO,GAAgBC,MACjBhO,EAAWlH,OAAS6U,EACpB,MAEJ,KAAKI,GAAgBE,KAIjB,GAHAjO,EAAWqJ,GAAKsE,EAChB3N,EAAWlH,OAAS6U,EAEhB3N,EAAWlH,MAAQZ,KAAK6R,QAAQwB,SAAU,CAC1C,IAAM2C,EAAahW,KAAK6R,QAAQwB,SAAWvL,EAAWlH,MACtDkH,EAAWqJ,GAAK6E,EAChBlO,EAAWlH,OAASoV,EAGxB,MAEJ,KAAKH,GAAgBI,OACjBnO,EAAWhH,QAAU6U,EACrB,MAEJ,KAAKE,GAAgBK,IAIjB,GAHApO,EAAWsJ,GAAKuE,EAChB7N,EAAWhH,QAAU6U,EAEjB7N,EAAWhH,OAASd,KAAK6R,QAAQsE,UAAW,CACtCH,EAAahW,KAAK6R,QAAQsE,UAAYrO,EAAWhH,OACvDgH,EAAWsJ,GAAK4E,EAChBlO,EAAWhH,QAAUkV,EAEzB,MAGJ,KAAKH,GAAgBO,QAKjB,GAHAtO,EAAWqJ,GAAKsE,EAChB3N,EAAWlH,OAAS6U,EAEhB3N,EAAWlH,MAAQZ,KAAK6R,QAAQwB,SAAU,CACpC2C,EAAahW,KAAK6R,QAAQwB,SAAWvL,EAAWlH,MACtDkH,EAAWqJ,GAAK6E,EAChBlO,EAAWlH,OAASoV,EAMxB,GAHAlO,EAAWsJ,GAAKuE,EAChB7N,EAAWhH,QAAU6U,EAEjB7N,EAAWhH,OAASd,KAAK6R,QAAQsE,UAAW,CACtCH,EAAahW,KAAK6R,QAAQsE,UAAYrO,EAAWhH,OACvDgH,EAAWsJ,GAAK4E,EAChBlO,EAAWhH,QAAUkV,EAEzB,MAEJ,KAAKH,GAAgBQ,SAKjB,GAJAvO,EAAWlH,OAAS6U,EACpB3N,EAAWsJ,GAAKuE,EAChB7N,EAAWhH,QAAU6U,EAEjB7N,EAAWhH,OAASd,KAAK6R,QAAQsE,UAAW,CACtCH,EAAahW,KAAK6R,QAAQsE,UAAYrO,EAAWhH,OACvDgH,EAAWsJ,GAAK4E,EAChBlO,EAAWhH,QAAUkV,EAEzB,MAEJ,KAAKH,GAAgBS,WAKjB,GAJAxO,EAAWhH,QAAU6U,EACrB7N,EAAWqJ,GAAKsE,EAChB3N,EAAWlH,OAAS6U,EAEhB3N,EAAWlH,MAAQZ,KAAK6R,QAAQwB,SAAU,CACpC2C,EAAahW,KAAK6R,QAAQwB,SAAWvL,EAAWlH,MACtDkH,EAAWqJ,GAAK6E,EAChBlO,EAAWlH,OAASoV,EAExB,MAEJ,KAAKH,GAAgBU,YACjBzO,EAAWhH,QAAU6U,EACrB7N,EAAWlH,OAAS6U,EAI5B,IAAMe,EAAe3B,EAAO7C,OAAOb,EAAI0D,EAAO7C,OAAOpR,MAC/C6V,EAAgB5B,EAAO7C,OAAOZ,EAAIyD,EAAO7C,OAAOlR,OAGlDgH,EAAWqJ,EAAI,IACfrJ,EAAWqJ,EAAI,EACfrJ,EAAWlH,MAAQ4V,GAGnB1O,EAAWsJ,EAAI,IACftJ,EAAWsJ,EAAI,EACftJ,EAAWhH,OAAS2V,GAGnB3O,EAAWqJ,EAAIrJ,EAAWlH,MAASZ,KAAK8H,WAAWlH,QACpDkH,EAAWlH,MAAQZ,KAAK8H,WAAWlH,MAAQkH,EAAWqJ,GAItDrJ,EAAWlH,MAAQZ,KAAK6R,QAAQwB,WAChCvL,EAAWqJ,EAAI0D,EAAO7C,OAAOb,EAC7BrJ,EAAWlH,MAAQZ,KAAK6R,QAAQwB,UAIhCvL,EAAWhH,OAASd,KAAK6R,QAAQsE,YACjCrO,EAAWsJ,EAAIyD,EAAO7C,OAAOZ,EAC7BtJ,EAAWhH,OAASd,KAAK6R,QAAQsE,WAIrCtB,EAAO7C,OAAO0E,UAAU5O,EAAWqJ,EAAGrJ,EAAWsJ,EAAGtJ,EAAWlH,MAAOkH,EAAWhH,QAGjFd,KAAK2W,sBAAqB,EAAM7O,EAAWqJ,EAAGrJ,EAAWsJ,EAAGtJ,EAAWlH,MAAOkH,EAAWhH,QAGzFd,KAAK4W,sBAAsB/B,EAAO7C,UAGtClB,EAAAnS,UAAAkY,YAAA,WAEI,IAAMC,EAAc9W,KAAK+W,aAAatP,WAGtCzH,KAAKgX,sBAGLF,EAAY5F,SAAU,EAGtBlR,KAAK+W,aAAa7U,KAAK4U,GAEvB9W,KAAKuT,cAAgB,KACrBvT,KAAK8U,YAAc,KAGnB9U,KAAKiX,iBAGLjX,KAAK2T,qBAGL3T,KAAKqR,QAAQnP,KAAKlC,KAAKoS,kBAG3BtB,EAAAnS,UAAAuY,YAAA,SAAYrC,GACR7U,KAAK4U,cAAcC,GAGnB7U,KAAKmX,kBAELnX,KAAKoX,gBAGTtG,EAAAnS,UAAA0Y,UAAA,WACIrX,KAAK6W,cAEL7W,KAAKsX,kBAGTxG,EAAAnS,UAAA4Y,OAAA,SAAO1C,GAGH,GAAIA,EAAOhW,MAAMqW,QAAUlV,KAAK8U,YAAYI,OAASL,EAAOhW,MAAMwW,QAAUrV,KAAK8U,YAAYO,MAA7F,CAKA,IAAMI,EAASZ,EAAOhW,MAAMqW,MAAQlV,KAAK8U,YAAYI,MAC/CS,EAASd,EAAOhW,MAAMwW,MAAQrV,KAAK8U,YAAYO,MAGrDrV,KAAK8U,YAAcD,EAAOhW,MAE1B,IAAMiJ,GACFqJ,EAAG0D,EAAO7C,OAAOb,EAAIsE,EACrBrE,EAAGyD,EAAO7C,OAAOZ,EAAIuE,EACrB/U,MAAOiU,EAAO7C,OAAOpR,MACrBE,OAAQ+T,EAAO7C,OAAOlR,QAG1Bd,KAAKwX,gBAAe,GAGpB3C,EAAO7C,OAAO0E,UAAU5O,EAAWqJ,EAAGrJ,EAAWsJ,EAAGtJ,EAAWlH,MAAOkH,EAAWhH,QAGjFd,KAAK2W,sBAAqB,EAAM7O,EAAWqJ,EAAGrJ,EAAWsJ,EAAGtJ,EAAWlH,MAAOkH,EAAWhH,QAGzFd,KAAKyX,eAELzX,KAAK2T,uBAGT7C,EAAAnS,UAAA+Y,aAAA,WACI,OAAO1X,KAAKkT,YAGhBpC,EAAAnS,UAAAyY,aAAA,WACIpX,KAAK2X,OAAS3X,KAAKqS,QAAQvL,IAAI,SAAAkL,GAAU,OAAGzH,GAAIyH,EAAOzH,GAAIoB,OAAQqG,EAAOO,YAAaC,IAAKR,EAAOS,aAGvG3B,EAAAnS,UAAA6Y,eAAA,SAAeI,GAAf,IAAAnX,EAAAT,UAAe,IAAA4X,IAAAA,GAAA,GACX5X,KAAK2X,OAAO3R,OAAO,SAAAgM,GAAU,OAAC4F,GAAsB5F,EAAOzH,KAAO9J,EAAK8S,cAAcvB,OAAOzH,KAAImC,QAAQ,SAAAsF,GAEpG,IAAM6F,EAAQpX,EAAK4R,QAAQlM,KAAK,SAAA2R,GAAO,OAAAA,EAAIvN,KAAOyH,EAAOzH,KAErDsN,IACAA,EAAM/E,UAAUd,EAAOrG,QACvBkM,EAAM9E,OAAOf,EAAOQ,SAQhC1B,EAAAnS,UAAA8Y,aAAA,WAOI,IAPJ,IAAAhX,EAAAT,KAEQ+X,KAEEjB,EAAc9W,KAAK+W,aAAatP,sBAG7B+K,GACL,mBAAS7G,GAGLqM,EAAKxD,oBACAxO,OAAO,SAAAiS,GAAS,OAAAA,EAAMtM,SAAWA,GAAUsM,EAAMzF,MAAQA,GAAOyF,EAAMjG,SAAWvR,EAAK8S,cAAcvB,SACpGtF,QAAQ,SAAAuL,GAAS,OAAAF,EAAcrS,KAAKuS,EAAMjG,WAL1CrG,EAASmL,EAAYnL,OAAQA,EAASmL,EAAYnL,OAASmL,EAAYzC,WAAY1I,MAAnFA,WADJ6G,EAAMsE,EAAYtE,IAAKA,EAAMsE,EAAYtE,IAAMsE,EAAYlE,QAASJ,MAApEA,GAcT,GAA6B,KAH7BuF,EAAgBA,EAAc/R,OAAO,SAACgM,EAAQvG,EAAKyM,GAAU,OAAAA,EAAMhK,QAAQ8D,KAAYvG,KAGrE3G,OAAlB,CAKA,IAAMqT,EAAiBJ,EAAcK,QAGrCL,EAAcrL,QAAQ,SAAAsF,GAMlB,IAHA,IAAMqG,EAAO5X,EAAK+T,oBAAoBxO,OAAO,SAAAiS,GAAS,OAACE,EAAehS,KAAK,SAAA2R,GAAO,OAAAA,IAAQG,EAAMjG,WAGvFQ,EAAM/R,EAAK6W,cAAc9E,IAAKA,EAAM/R,EAAK6W,cAAc9E,IAAM/R,EAAK6W,cAAc1E,QAASJ,IAC9F,IAAK,IAAI7G,EAASlL,EAAK6W,cAAc3L,OAAQA,EAASlL,EAAK6W,cAAc3L,OAASlL,EAAK6W,cAAcjD,WAAY1I,IAAU,CAUvH,GAPqBlL,EAAK6X,2BAA2BtG,EAAQrG,EAAQ6G,GAGtC+F,MAAM,SAAAN,GACjC,OAAQI,EAAKlS,KAAK,SAAAqS,GAAa,OAAAA,EAAU7M,SAAWsM,EAAMtM,QAAU6M,EAAUhG,MAAQyF,EAAMzF,OAAQyF,EAAMtM,OAASlL,EAAKgY,mBAOxH,OAHAzG,EAAOc,UAAUnH,GACjBqG,EAAOe,OAAOP,QACd2F,EAAerL,OAAOqL,EAAezM,UAAU,SAAAoM,GAAO,OAAAA,IAAQ9F,IAAS,GAOnF,GAAIvR,EAAKiY,mBAAmB1G,GAAQ,GAGhCvR,EAAKkY,4BAA4B9C,GAAgBC,YAKrD,GAAIrV,EAAKmY,kBAAkB5G,GAAQ,GAG/BvR,EAAKkY,4BAA4B9C,GAAgBE,UAHrD,CAQA,IAAI8C,EAAYpY,EAAK8S,cAAcvB,OAAOS,SAAWT,EAAOS,SAAYhS,EAAK8S,cAAcvB,OAAOa,aAGlGpS,EAAKqY,eAAe9G,EAAQ6G,QAQpC/H,EAAAnS,UAAAga,4BAAA,SAA4BI,GAExB,IAAMjC,EAAc9W,KAAK+W,aAAatP,WAGtC,GAAkF,EAA9EzH,KAAKgZ,qBAAqBlC,EAAYnL,OAAQmL,EAAYtE,KAAK,GAAM1N,OAAY,CAGjF,OAAQiU,GAEJ,KAAKlD,GAAgBE,KACjB/V,KAAK2W,qBAAqBG,EAAY5F,QAAS4F,EAAY3F,EAAInR,KAAKiZ,iBAAkBnC,EAAY1F,EAAG0F,EAAYlW,MAAOkW,EAAYhW,QACpI,MAEJ,KAAK+U,GAAgBC,MACjB9V,KAAK2W,qBAAqBG,EAAY5F,QAAS4F,EAAY3F,EAAInR,KAAKiZ,iBAAkBnC,EAAY1F,EAAG0F,EAAYlW,MAAOkW,EAAYhW,QAK5Id,KAAK2Y,4BAA4BI,KAOzCjI,EAAAnS,UAAAia,kBAAA,SAAkB5G,EAAkCkH,GAApD,IAAAzY,EAAAT,KAGI,QAHgD,IAAAkZ,IAAAA,GAAA,GAG5ClH,IAAWhS,KAAKuT,cAAcvB,QAAiC,IAAvBA,EAAOO,YAC/C,OAAO,EAIX,IAAM4G,EAAenZ,KAAKwU,oBAAoBxO,OAAO,SAAAiS,GAAS,OAAAA,EAAMjG,SAAWA,IAAQlL,IAAI,SAAAmR,GACvF,OAAStM,OAAQsM,EAAMtM,OAASqG,EAAOW,gBAAiBH,IAAKyF,EAAMzF,IAAKR,OAAQiG,EAAMjG,UAIpFoH,EAAWD,EAAaZ,MAAM,SAAAN,GAAS,OAAAxX,EAAKuY,qBAAqBf,EAAMtM,OAAQsM,EAAMzF,KAAKxM,OAAO,SAAA8R,GAAO,OAAAA,IAAQG,EAAMjG,SAAQuG,MAAM,SAAAT,GAAO,OAAArX,EAAKmY,kBAAkBd,OAWxK,OATIoB,GAAeE,IAGfD,EAAazM,QAAQ,SAAAuL,GAAS,OAAAxX,EAAKuY,qBAAqBf,EAAMtM,OAAQsM,EAAMzF,KAAKxM,OAAO,SAAA8R,GAAO,OAAAA,IAAQG,EAAMjG,SAAQtF,QAAQ,SAAAoL,GAAO,OAAArX,EAAKmY,kBAAkBd,GAAK,OAGhK9F,EAAOc,UAAUd,EAAOO,YAAc,IAGnC6G,GAMXtI,EAAAnS,UAAA+Z,mBAAA,SAAmB1G,EAAkCkH,GAArD,IAAAzY,EAAAT,KAGI,QAHiD,IAAAkZ,IAAAA,GAAA,GAG7ClH,IAAWhS,KAAKuT,cAAcvB,QAAUA,EAAOO,YAAcP,EAAOW,kBAAoB3S,KAAK6R,QAAQC,QACrG,OAAO,EAIX,IAAMqH,EAAenZ,KAAKwU,oBAAoBxO,OAAO,SAAAiS,GAAS,OAAAA,EAAMjG,SAAWA,IAAQlL,IAAI,SAAAmR,GACvF,OAAStM,OAAQsM,EAAMtM,OAASqG,EAAOW,gBAAiBH,IAAKyF,EAAMzF,IAAKR,OAAQiG,EAAMjG,UAIpFoH,EAAWD,EAAaZ,MAAM,SAAAN,GAAS,OAAAxX,EAAKuY,qBAAqBf,EAAMtM,OAAQsM,EAAMzF,KAAKxM,OAAO,SAAA8R,GAAO,OAAAA,IAAQG,EAAMjG,SAAQuG,MAAM,SAAAT,GAAO,OAAArX,EAAKiY,mBAAmBZ,OAWzK,OATIoB,GAAeE,IAGfD,EAAazM,QAAQ,SAAAuL,GAAS,OAAAxX,EAAKuY,qBAAqBf,EAAMtM,OAAQsM,EAAMzF,KAAKxM,OAAO,SAAA8R,GAAO,OAAAA,IAAQG,EAAMjG,SAAQtF,QAAQ,SAAAoL,GAAO,OAAArX,EAAKiY,mBAAmBZ,GAAK,OAGjK9F,EAAOc,UAAUd,EAAOO,YAAc,IAGnC6G,GAMXtI,EAAAnS,UAAAwY,gBAAA,WACInX,KAAKsX,eACD3L,OAAQ3L,KAAKuT,cAAcvB,OAAOO,YAClCC,IAAKxS,KAAKuT,cAAcvB,OAAOS,SAC/B4B,WAAYrU,KAAKuT,cAAcvB,OAAOW,gBACtCC,QAAS5S,KAAKuT,cAAcvB,OAAOa,eAO3C/B,EAAAnS,UAAA2Z,2BAAA,SAA2BtG,EAAkCrG,EAAgB6G,GAGzE,IAFA,IAAM+B,KAEGnD,EAAIoB,EAAKpB,EAAIoB,EAAMR,EAAOa,aAAczB,IAC7C,IAAK,IAAID,EAAIxF,EAAQwF,EAAIxF,EAASqG,EAAOW,gBAAiBxB,IACtDoD,EAAO7O,MAAOiG,OAAQwF,EAAGqB,IAAKpB,EAAGY,OAAQA,IAIjD,OAAOuC,GAMXzD,EAAAnS,UAAAiY,sBAAA,SAAsB5E,GAKlB,IALJ,IAAAvR,EAAAT,KAEU8W,EAAc9W,KAAK+W,aAAatP,WAG7BkE,EAASmL,EAAYnL,OAAQA,EAASmL,EAAYnL,OAASmL,EAAYzC,WAAY1I,IACxF,IAAK,IAAI6G,EAAMsE,EAAYtE,IAAKA,EAAMsE,EAAYtE,IAAMsE,EAAYlE,QAASJ,IAEzExS,KAAKgZ,qBAAqBrN,EAAQ6G,GAAK,GAClCxM,OAAO,SAAA8R,GAAO,OAAAA,IAAQ9F,IACtBtF,QAAQ,SAAAoL,GAAO,OAAArX,EAAKqY,eAAehB,KAKhD9X,KAAK2T,qBAGD3T,KAAKuT,cAAc7L,YAAcmO,GAAgBK,KACjDlW,KAAKuT,cAAc7L,YAAcmO,GAAgBO,SACjDpW,KAAKuT,cAAc7L,YAAcmO,GAAgBQ,UACjDrW,KAAKiX,kBAUbnG,EAAAnS,UAAAqa,qBAAA,SAAqBrN,EAAgB6G,EAAa6G,GAAlD,IAAA5Y,EAAAT,KACI,YAD8C,IAAAqZ,IAAAA,GAAA,GACvCrZ,KAAKwU,oBACPxO,OAAO,SAAAiS,GAAS,OAAAA,EAAMtM,SAAWA,GAAUsM,EAAMzF,MAAQA,IACzDxM,OAAO,SAAAiS,GAAS,OAAAA,EAAMjG,SAAWvR,EAAK8S,cAAcvB,SAAWqH,IAC/DvS,IAAI,SAAAmR,GAAS,OAAAA,EAAMjG,UAM5BlB,EAAAnS,UAAAgY,qBAAA,SAAqBzF,EAAkBC,EAAWC,EAAWxQ,EAAeE,GAA5E,IAAAL,EAAAT,KAEU8W,EAAc9W,KAAK+W,aAAatP,WAErBzH,KAAKuT,cAAc7L,YAAcmO,GAAgBE,MAC9D/V,KAAKuT,cAAc7L,YAAcmO,GAAgBK,IAAMoD,GAASC,mBAAqBD,GAASE,gBAElG1C,EAAY5F,QAAUA,EAEtB4F,EAAYnL,OAAS3L,KAAKyZ,qBAAqBtI,EAAGvQ,GAClDkW,EAAYtE,IAAMxS,KAAK0Z,kBAAkBtI,EAAGtQ,GAC5CgW,EAAYzC,WAAarU,KAAK2Z,yBAAyB/Y,GACvDkW,EAAYlE,QAAU5S,KAAK4Z,sBAAsB9Y,GAGjD,IAAM+Y,EAAW7Z,KAAKqS,QAAQrM,OAAO,SAAAgM,GAAU,OAAAA,IAAWvR,EAAK8S,cAAcvB,SACxE0C,OAAO,SAACtM,EAAU4J,GAAW,OAAA1J,KAAKE,IAAIwJ,EAAOS,SAAWT,EAAOa,aAAczK,IAAW,GAG7F0O,EAAYtE,IAAMlK,KAAKC,IAAIuO,EAAYtE,IAAKqH,GAE5C/C,EAAY3F,EAAK2F,EAAYnL,OAAS3L,KAAKiZ,iBAAoBjZ,KAAK6R,QAAQiI,QAC5EhD,EAAY1F,EAAK0F,EAAYtE,IAAMxS,KAAKkT,WAAclT,KAAK6R,QAAQiI,QACnEhD,EAAYlW,MAASkW,EAAYzC,WAAarU,KAAKiZ,iBAA4C,EAAvBjZ,KAAK6R,QAAQiI,QACrFhD,EAAYhW,OAAUgW,EAAYlE,QAAU5S,KAAKkT,WAAsC,EAAvBlT,KAAK6R,QAAQiI,QAG7E9Z,KAAKuT,cAAcvB,OAAOc,UAAUgE,EAAYnL,QAAQ,GACxD3L,KAAKuT,cAAcvB,OAAOe,OAAO+D,EAAYtE,KAAK,GAClDxS,KAAKuT,cAAcvB,OAAOgB,cAAc8D,EAAYzC,YAAY,GAChErU,KAAKuT,cAAcvB,OAAOiB,WAAW6D,EAAYlE,SAAS,GAG1D5S,KAAK+W,aAAa7U,KAAK4U,IAM3BhG,EAAAnS,UAAA8a,qBAAA,SAAqBtI,EAAWvQ,GAE5B,IAAM+K,EAAS3L,KAAK+Z,gBAAgB5I,EAAGnR,KAAKuT,cAAc7L,YAAcmO,GAAgBmE,KAAOV,GAASE,gBAAkBF,GAASW,WAC7H5F,EAAa/L,KAAK4L,MAAMtT,EAAQZ,KAAKiZ,kBACrCiB,EAAala,KAAKyY,iBAAmBpE,EAG3C,GAAIrU,KAAKuT,cAAc7L,YAAcmO,GAAgBE,MACjD/V,KAAKuT,cAAc7L,YAAcmO,GAAgBO,SACjDpW,KAAKuT,cAAc7L,YAAcmO,GAAgBS,WACjD,OAAOhO,KAAKE,IAAIF,KAAKC,IAAIoD,EAAQuO,GAAa,GAIlD,IAAMC,EAAWvZ,EAAQZ,KAAKiZ,iBAE9B,OAAQ9H,GAAK,GAAkB,IAAbgJ,GAAiC,IAAf9F,GAAoB8F,EAAYna,KAAKiZ,iBAAmB,EACxF3Q,KAAKE,IAAIF,KAAKC,IAAIoD,EAAQuO,GAAa,GACvC5R,KAAKE,IAAIF,KAAKC,IAAIoD,EAAS,EAAGuO,GAAa,IAMnDpJ,EAAAnS,UAAAgb,yBAAA,SAAyB/Y,GAErB,IAAMyT,EAAarU,KAAK+Z,gBAAgBnZ,GAGxC,GAAIZ,KAAKuT,cAAc7L,YAAcmO,GAAgBC,OACjD9V,KAAKuT,cAAc7L,YAAcmO,GAAgBQ,UACjDrW,KAAKuT,cAAc7L,YAAcmO,GAAgBU,aACjDvW,KAAKuT,cAAc7L,YAAcmO,GAAgBE,MACjD/V,KAAKuT,cAAc7L,YAAcmO,GAAgBO,SACjDpW,KAAKuT,cAAc7L,YAAcmO,GAAgBS,WACjD,OAAOhO,KAAKE,IAAI6L,EAAY,GAIhC,IAAM8F,EAAWvZ,EAAQZ,KAAKiZ,iBAE9B,OAAqB,EAAb5E,GAAkB8F,EAAYna,KAAKiZ,iBAAmB,EAAM3Q,KAAKE,IAAI6L,EAAa,EAAG,GAAK/L,KAAKE,IAAI6L,EAAY,IAM3HvD,EAAAnS,UAAA+a,kBAAA,SAAkBtI,EAAWtQ,GAEzB,IAAM0R,EAAMxS,KAAKoa,aAAahJ,EAAGpR,KAAKuT,cAAc7L,YAAcmO,GAAgBmE,KAAOV,GAASE,gBAAkBF,GAASW,WACvHrH,EAAUtK,KAAK+R,KAAKvZ,EAASd,KAAKkT,YAGxC,GAAIlT,KAAKuT,cAAc7L,YAAcmO,GAAgBK,KACjDlW,KAAKuT,cAAc7L,YAAcmO,GAAgBO,SACjDpW,KAAKuT,cAAc7L,YAAcmO,GAAgBQ,SACjD,OAAO/N,KAAKE,IAAIgK,EAAK,GAIzB,IAAI2H,EAAWrZ,EAASd,KAAKkT,WAAa,EAAIpS,EAASd,KAAKkT,WAE5D,OAAQ9B,GAAK,GAAiB,IAAZwB,GAA8B,IAAbuH,GAAkBA,EAAYna,KAAKkT,WAAa,EAAM5K,KAAKE,IAAIgK,EAAK,GAAKlK,KAAKE,IAAIgK,EAAM,EAAG,IAMlI1B,EAAAnS,UAAAib,sBAAA,SAAsB9Y,GAElB,IAAM8R,EAAU5S,KAAKoa,aAAatZ,GAGlC,OAAId,KAAKuT,cAAc7L,YAAcmO,GAAgBK,KACjDlW,KAAKuT,cAAc7L,YAAcmO,GAAgBO,SACjDpW,KAAKuT,cAAc7L,YAAcmO,GAAgBQ,UACjDrW,KAAKuT,cAAc7L,YAAcmO,GAAgBI,QACjDjW,KAAKuT,cAAc7L,YAAcmO,GAAgBS,YACjDtW,KAAKuT,cAAc7L,YAAcmO,GAAgBU,YAC1CjO,KAAKE,IAAIoK,EAAS,GAIZ9R,EAASd,KAAKkT,WAEXlT,KAAKkT,WAAa,EAAM5K,KAAKE,IAAIoK,EAAU,EAAG,GAAKtK,KAAKE,IAAIoK,EAAS,IAG7F9B,EAAAnS,UAAAob,gBAAA,SAAgB5I,EAAWmJ,QAAA,IAAAA,IAAAA,EAAqBhB,GAASW,WAErD,IAAMtO,EAASrD,KAAK4L,MAAM/C,EAAI7I,KAAK4L,MAAMlU,KAAKiZ,mBACxCkB,EAAYhJ,EAAI7I,KAAK4L,MAAMlU,KAAKiZ,kBAChCsB,EAAOva,KAAKiZ,iBAAmB,EAErC,OAAQqB,GAEJ,KAAKhB,GAASW,UACV,OAAOtO,EAEX,KAAK2N,GAASC,mBACV,OAAOY,EAAWI,EAAO5O,EAASA,EAAS,EAE/C,KAAK2N,GAASE,gBACV,OAAkBe,EAAXJ,EAAkBxO,EAAS,EAAIA,EAE1C,KAAK2N,GAASkB,QACV,OAAkB,EAAXL,EAAexO,EAAS,EAAIA,IAK/CmF,EAAAnS,UAAAyb,aAAA,SAAahJ,EAAWkJ,QAAA,IAAAA,IAAAA,EAAqBhB,GAASW,WAElD,IAAMzH,EAAMlK,KAAK4L,MAAM9C,EAAI9I,KAAK4L,MAAMlU,KAAKkT,aACrCiH,EAAY/I,EAAI9I,KAAK4L,MAAMlU,KAAKkT,YAChCqH,EAAOva,KAAKkT,WAAa,EAE/B,OAAQoH,GAEJ,KAAKhB,GAASW,UACV,OAAOzH,EAEX,KAAK8G,GAASC,mBACV,OAAOY,EAAWI,EAAO/H,EAAMA,EAAM,EAEzC,KAAK8G,GAASE,gBACV,OAAkBe,EAAXJ,EAAkB3H,EAAM,EAAIA,EAEvC,KAAK8G,GAASkB,QACV,OAAkB,EAAXL,EAAe3H,EAAM,EAAIA,IAI5C1B,EAAAnS,UAAAqY,oBAAA,WAEI,IAAMF,EAAc9W,KAAK+W,aAAatP,WAGlCqP,EAAYnL,SAAW8H,WAAaqD,EAAYtE,MAAQiB,WACxDqD,EAAYzC,aAAeZ,WAAaqD,EAAYlE,UAAYa,YAIhEzT,KAAKuT,gBACLvT,KAAKuT,cAAcvB,OAAOc,UAAUgE,EAAYnL,QAChD3L,KAAKuT,cAAcvB,OAAOe,OAAO+D,EAAYtE,KAC7CxS,KAAKuT,cAAcvB,OAAOgB,cAAc8D,EAAYzC,YACpDrU,KAAKuT,cAAcvB,OAAOiB,WAAW6D,EAAYlE,UAIrDkE,EAAYnL,OAAS8H,UACrBqD,EAAYtE,IAAMiB,UAClBqD,EAAYzC,WAAaZ,UACzBqD,EAAYlE,QAAUa,UAGtBzT,KAAK+W,aAAa7U,KAAK4U,KAM3BhG,EAAAnS,UAAAsa,eAAA,WACI,OAAO3Q,KAAK4L,MAAMlU,KAAKoT,cAM3BtC,EAAAnS,UAAA8b,YAAA,WACI,OAAOza,KAAKqS,QAAQqC,OAAO,SAACtM,EAAU4J,GAAW,OAAA1J,KAAKE,IAAIwJ,EAAOS,SAAWT,EAAOa,aAAczK,IAAW,IAMhH0I,EAAAnS,UAAAgV,mBAAA,WAGI,IAAIkG,EAAW7Z,KAAKya,cAGhBza,KAAK6R,QAAQ6I,UACbb,IAGJ7Z,KAAKmS,cAAcsB,UAAWoG,EAAW7Z,KAAKkT,aAOlDpC,EAAAnS,UAAAoW,aAAA,SAAa/C,GACThS,KAAKqS,QAAQ3F,QAAQ,SAAAwF,GAAW,OAAAA,IAAYF,EAASE,EAAQ6C,eAAiB7C,EAAQyI,gBAO1F7J,EAAAnS,UAAAma,eAAA,SAAe9G,EAAkC6G,GAAjD,IAAApY,EAAAT,UAAiD,IAAA6Y,IAAAA,EAAA,GAG7C7G,EAAOe,OAAOf,EAAOS,SAAWoG,GAGhC7Y,KAAK2U,aAAa3C,EAAQ,SAACrG,EAAQ6G,GAC/B,OAAA/R,EAAKuY,qBAAqBrN,EAAQ6G,GAAK,GAClCxM,OAAO,SAAA8R,GAAO,OAAAA,IAAQ9F,IACtBtF,QAAQ,SAAAoL,GAAO,OAAArX,EAAKqY,eAAehB,EAAKe,QAMrD/H,EAAAnS,UAAAsY,eAAA,WAAA,IAAAxW,EAAAT,KAGQ4a,GAAS,EAGb5a,KAAKqS,QAAQ3F,QAAQ,SAAAsF,GAGO,IAApBA,EAAOS,WAKPhS,EAAK8S,eAAiB9S,EAAK8S,cAAcvB,SAAWA,GAIpDvR,EAAK0T,qBAAqBnC,EAAOO,YAAaP,EAAOS,SAAW,EAAGT,EAAOW,gBAAiB,KAC3FX,EAAOe,OAAOf,EAAOS,SAAW,GAChCmI,GAAS,MAKZA,GACD5a,KAAKiX,kBASbnG,EAAAnS,UAAAgW,aAAA,SAAa3C,EAAkC3P,GAC3C,IAAK,IAAImQ,EAAMR,EAAOS,SAAUD,EAAMR,EAAOS,SAAWT,EAAOa,aAAcL,IACzE,IAAK,IAAI7G,EAASqG,EAAOO,YAAa5G,EAASqG,EAAOO,YAAcP,EAAOW,gBAAiBhH,IACxFtJ,EAASrD,KAAKgT,EAAQrG,EAAQ6G,IAQ1C1B,EAAAnS,UAAA8Z,eAAA,WACI,OAAOzY,KAAKwR,QAAU,EAAIxR,KAAK6R,QAAQC,6BAzhC9CvP,EAAAA,wDA6hCYwO,IAAqCe,QAAS,EAAGgI,QAAS,EAAGzG,SAAU,IAAK8C,UAAW,IAAKuE,UAAU,0hBCjgC/G,SAAAG,EAAmBC,GAAnB,IAAAra,EAAAT,KAAmBA,KAAA8a,iBAAAA,oBAJM,IAAIjY,EAAAA,aAKzBiY,EAAiBzJ,QAAQrP,UAAU,SAAA+Y,GAAU,OAAAta,EAAKua,aAAa7X,KAAK4X,kCAf3DF,EAAAlc,UAAA,uBAAOoc,GACZA,GACA/a,KAAK8a,iBAAiBzJ,QAAQnP,KAAK6Y,0DAI9BF,EAAAlc,UAAA,wBAAQkT,GACjB7R,KAAK8a,iBAAiBlJ,SAAS1P,KAAIqC,KAAMwM,GAAmBc,qCAchEgJ,EAAAlc,UAAA6N,gBAAA,WACIxM,KAAK8a,iBAAiB3I,cAAcnS,KAAKib,iBAAiBza,cAAcK,YAAab,KAAKib,iBAAiBza,cAAcO,eAG7H8Z,EAAAlc,UAAAuc,SAAA,SAASrc,GACLmB,KAAK8a,iBAAiB3I,cAActT,EAAM+B,MAAO/B,EAAMiC,6BA5C9D7B,EAAAA,UAASC,OACNC,SAAU,eACVC,SAAU,knBAWViE,WAAYyN,IACZ/J,gBAAiBC,EAAAA,wBAAwBC,oDAhBf6J,sCAoBzBzR,EAAAA,uBAMAA,EAAAA,4BAIAkE,EAAAA,iCAEA6F,EAAAA,UAASlK,MAAC,qBClCfic,GAAA,WAoGI,SAAAA,EAAmBL,GAAnB,IAAAra,EAAAT,KAAmBA,KAAA8a,iBAAAA,eAjBQ,eACA,kBACG,SAEY,SACD,aACM,gBACE,iBACE,cACJ,gBAEXM,QAAS3H,UAAWjC,QAASiC,sBAChC2H,QAAS3H,UAAWjC,QAASiC,6BACtB2H,QAAS,EAAG5J,QAAS,kBACxB4J,QAAS,EAAG5J,QAAS,GAItDxR,KAAKK,cAAgBya,EAAiBlJ,SAAS5P,UAAU,WAAM,OAAAvB,EAAK4a,kBAGxEF,EAAAxc,UAAAmE,SAAA,WAEI9C,KAAKsb,YAAYF,QAAUpb,KAAK0S,QAChC1S,KAAKub,SAASH,QAAUpb,KAAK4S,QAExB5S,KAAKuK,KACNiR,QAAQC,KAAK,sCAGbzb,KAAKuK,GAAKjC,KAAK4L,MAAsB,IAAhB5L,KAAKoT,UAAmBC,aAIrDR,EAAAxc,UAAA6N,gBAAA,WAEIxM,KAAK8a,iBAAiB/I,UAAU/R,MAGhCA,KAAKqb,UAMTF,EAAAxc,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,cACnBN,KAAK8a,iBAAiB7I,aAAajS,OAMvCmb,EAAAxc,UAAA0c,OAAA,WAGI,IAAA3S,EAAA1I,KAAA8a,iBAAAjJ,QAAQiI,EAAApR,EAAAoR,QAAShI,EAAApJ,EAAAoJ,QAEjB9R,KAAK8Z,QAAUA,EACf9Z,KAAKsb,YAAY9J,QAAUM,GAM/BqJ,EAAAxc,UAAA6U,OAAA,WACIxT,KAAKmR,EAAInR,KAAKuS,YAAcvS,KAAK8a,iBAAiB7B,iBAClDjZ,KAAKoR,EAAIpR,KAAKyS,SAAWzS,KAAK8a,iBAAiBpD,eAC/C1X,KAAKY,MAAQZ,KAAK2S,gBAAkB3S,KAAK8a,iBAAiB7B,iBAC1DjZ,KAAKc,OAASd,KAAK6S,aAAe7S,KAAK8a,iBAAiBpD,gBAG5DyD,EAAAxc,UAAA4T,UAAA,WACI,OAAOvS,KAAK4b,kBAAkB5b,KAAK6b,UAGvCV,EAAAxc,UAAA8T,OAAA,WACI,OAAOzS,KAAK4b,kBAAkB5b,KAAK8b,OAGvCX,EAAAxc,UAAAmU,UAAA,SAAUnH,EAAgB6H,QAAA,IAAAA,IAAAA,GAAA,GACtBxT,KAAK+b,kBAAkB/b,KAAK6b,QAASlQ,GAEjC6H,GACAxT,KAAKwT,UAIb2H,EAAAxc,UAAAoU,OAAA,SAAOP,EAAagB,QAAA,IAAAA,IAAAA,GAAA,GAChBxT,KAAK+b,kBAAkB/b,KAAK8b,KAAMtJ,GAE9BgB,GACAxT,KAAKwT,UAIb2H,EAAAxc,UAAAgU,cAAA,WACI,OAAO3S,KAAK4b,kBAAkB5b,KAAKsb,cAGvCH,EAAAxc,UAAAkU,WAAA,WACI,OAAO7S,KAAK4b,kBAAkB5b,KAAKub,WAGvCJ,EAAAxc,UAAAqU,cAAA,SAAcqB,EAAoBb,QAAA,IAAAA,IAAAA,GAAA,GAC9BxT,KAAK+b,kBAAkB/b,KAAKsb,YAAajH,GAErCb,GACAxT,KAAKwT,UAIb2H,EAAAxc,UAAAsU,WAAA,SAAWL,EAAiBY,QAAA,IAAAA,IAAAA,GAAA,GACxBxT,KAAK+b,kBAAkB/b,KAAKub,SAAU3I,GAElCY,GACAxT,KAAKwT,UAIb2H,EAAAxc,UAAAoW,aAAA,WACI/U,KAAKgc,OAAS,GAGlBb,EAAAxc,UAAAgc,WAAA,WACI3a,KAAKgc,OAAS,GAGlBb,EAAAxc,UAAA+X,UAAA,SAAUvF,EAAWC,EAAWxQ,EAAeE,GAC3Cd,KAAKmR,EAAIA,EACTnR,KAAKoR,EAAIA,EACTpR,KAAKY,MAAQA,EACbZ,KAAKc,OAASA,GAGlBqa,EAAAxc,UAAAsd,UAAA,SAAU1G,EAAqB1W,EAAmB6I,GAC9C1H,KAAK8a,iBAAiBlG,eAAgB5C,OAAQhS,KAAM0H,UAAWA,EAAW7I,MAAOA,EAAO0W,OAAQA,KAGpG4F,EAAAxc,UAAAud,KAAA,SAAK3G,EAAqB1W,EAAmB6I,GACzC1H,KAAK8a,iBAAiB9F,cAAehD,OAAQhS,KAAM0H,UAAWA,EAAW7I,MAAOA,EAAO0W,OAAQA,KAGnG4F,EAAAxc,UAAAwd,QAAA,WACInc,KAAK8a,iBAAiBjE,eAQlBsE,EAAAxc,UAAAod,2BAAkBK,EAA0BhX,GAE5CpF,KAAK8a,iBAAiBtJ,QACtB4K,EAAS5K,QAAUpM,EAEnBgX,EAAShB,QAAUhW,GAQnB+V,EAAAxc,UAAAid,2BAAkBQ,GACtB,OAAOpc,KAAK8a,iBAAiBtJ,QAAU4K,EAAS5K,QAAU4K,EAAShB,6BArP1Enc,EAAAA,UAASC,OACNC,SAAU,sBACVC,SAAU,4mFALL0R,kCA+EJzR,EAAAA,mBACAA,EAAAA,mBACAA,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,yBACAA,EAAAA,iBAEA6J,EAAAA,YAAWhK,MAAC,4BACZgK,EAAAA,YAAWhK,MAAC,+BACZgK,EAAAA,YAAWhK,MAAC,kCACZgK,EAAAA,YAAWhK,MAAC,oCACZgK,EAAAA,YAAWhK,MAAC,oCACZgK,EAAAA,YAAWhK,MAAC,sBA5FjB,GCAAmd,GAAA,WAwCI,SAAAA,EAAoB1Z,EAAiC5C,EAAyBG,GAA1DF,KAAA2C,YAAAA,EAAiC3C,KAAAD,QAAAA,EAAyBC,KAAAE,UAAAA,cA7BpD,iBAGJ,IAAI2C,EAAAA,uBAGT,IAAIA,EAAAA,0BAGD,IAAIA,EAAAA,8BASFd,EAAAA,UAAsB/B,KAAK2C,YAAYnC,cAAe,8BAGtDuB,EAAAA,UAAsBua,SAAU,4BAGlCva,EAAAA,UAAsBua,SAAU,2BAG7B,IAAI/P,EAAAA,QAGvBvM,KAAKuc,YAAYxZ,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAKwc,UAAU7O,KAAK3N,cAIpFqc,EAAA1d,UAAA6d,UAAA,SAAU3d,GAAV,IAAA4B,EAAAT,KACInB,EAAM4d,iBAEFzc,KAAK0c,OAEL1c,KAAK2c,UAAU9d,GAInBmB,KAAKE,UAAU0c,SAAS5c,KAAK2C,YAAYnC,cAAe,oBAGxDR,KAAKD,QAAQkC,IAAI,WAAM,OAAAxB,EAAKwb,UAAU9Y,KAAKtE,KAE3CmB,KAAK6c,YAAY9Z,KAAKyK,EAAAA,UAAUxN,KAAK8c,WAAYtP,EAAAA,UAAUxN,KAAKyN,aAC3DzL,UAAUhC,KAAK+c,SAASpP,KAAK3N,MAAO,KAAMA,KAAKgd,QAAQrP,KAAK3N,QAIrEqc,EAAA1d,UAAAoe,SAAA,SAASle,GAAT,IAAA4B,EAAAT,KACInB,EAAM4d,iBAEFzc,KAAKid,QACLjd,KAAKkd,mBAAmBre,GAI5BmB,KAAKD,QAAQkC,IAAI,WAAM,OAAAxB,EAAKyb,KAAK/Y,KAAKtE,MAI1Cwd,EAAA1d,UAAAqe,QAAA,WAAA,IAAAvc,EAAAT,KAEQA,KAAKid,SACLjd,KAAKE,UAAUid,YAAYb,SAASc,KAAMpd,KAAKid,QAC/Cjd,KAAKid,OAAS,MAIlBjd,KAAKE,UAAUmd,YAAYrd,KAAK2C,YAAYnC,cAAe,oBAE3DR,KAAKD,QAAQkC,IAAI,WAAM,OAAAxB,EAAK0b,QAAQhZ,UAIxCkZ,EAAA1d,UAAAge,UAAA,SAAU9d,GAGNmB,KAAKid,OAASjd,KAAK2C,YAAYnC,cAAcmc,WAAU,GAGvD,IAAAjU,EAAA1I,KAAA2C,YAAAnC,cAAAgV,wBAAQI,EAAAlN,EAAAkN,IAAKF,EAAAhN,EAAAgN,KACb1V,KAAKsd,SAAYnM,EAAGtS,EAAM0e,QAAU7H,EAAMtE,EAAGvS,EAAM2e,QAAU5H,GAG7D5V,KAAKyd,aAAazd,KAAK2C,YAAYnC,cAAeR,KAAKid,QAGvDjd,KAAKE,UAAUqB,aAAavB,KAAKid,OAAQ,cAAe,QACxDjd,KAAKE,UAAUoB,SAAStB,KAAKid,OAAQ,WAAY,YACjDjd,KAAKE,UAAUoB,SAAStB,KAAKid,OAAQ,UAAW,SAGhDjd,KAAKE,UAAU0c,SAAS5c,KAAKid,OAAQ,0BAGrCjd,KAAKE,UAAUsB,YAAY8a,SAASc,KAAMpd,KAAKid,QAG/Cjd,KAAKkd,mBAAmBre,IAI5Bwd,EAAA1d,UAAAue,mBAAA,SAAmBre,GACfmB,KAAKE,UAAUoB,SAAStB,KAAKid,OAAQ,OAASpe,EAAMqW,MAAQlV,KAAKsd,QAAQnM,EAAK,MAC9EnR,KAAKE,UAAUoB,SAAStB,KAAKid,OAAQ,MAAQpe,EAAMwW,MAAQrV,KAAKsd,QAAQlM,EAAK,OAIjFiL,EAAA1d,UAAA8e,aAAA,SAAaC,EAAiB1O,GAK1B,IAHA,IAAM2O,EAASzc,iBAAiBwc,GAGvBjS,EAAM,EAAGA,EAAMkS,EAAO7Y,OAAQ2G,IAAO,CAC1C,IAAMmS,EAAQD,EAAOE,KAAKpS,GAEtBmS,IAAUnK,WACVzT,KAAKE,UAAUoB,SAAS0N,EAAQ2O,EAAOlS,GAAMkS,EAAOC,IAK5D5d,KAAKE,UAAUoB,SAAS0N,EAAQ,iBAAkB,QAGlD,IAASvD,EAAM,EAAGA,EAAMiS,EAAOI,SAAShZ,OAAQ2G,IAC5CzL,KAAKyd,aAAaC,EAAOI,SAASrS,GAAMuD,EAAO8O,SAASrS,KAKhE4Q,EAAA1d,UAAAyB,YAAA,WACIJ,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,gCAhJvB1L,EAAAA,UAASlE,OACNC,SAAU,wDANMmE,EAAAA,kBAAiCb,EAAAA,cAA2Bsb,EAAAA,4CAW3E1e,EAAAA,yBAGAkE,EAAAA,qBAGAA,EAAAA,wBAGAA,EAAAA,YApBL,kBCWI,SAAAya,EAAYhM,EAAkC8I,EAAoCmD,EAAwBC,EAAgBC,GAA1H,IAAA1d,EACIiQ,EAAA1R,KAAAgB,KAAMie,EAAYC,EAAQC,IAASne,YAEnCS,EAAKwb,UAAUlZ,KAAKyK,EAAAA,UAAU/M,EAAKgN,aAC9BzL,UAAU,SAACnD,GAAsB,OAAAic,EAAiB5D,aAAclF,OAAQA,EAAQtK,UAAWmO,GAAgBmE,KAAMnb,MAAOA,MAE7H4B,EAAKyb,KAAKnZ,KAAKyK,EAAAA,UAAU/M,EAAKgN,aACzBzL,UAAU,SAACnD,GAAsB,OAAAic,EAAiBvD,QAASvF,OAAQA,EAAQtK,UAAWmO,GAAgBmE,KAAMnb,MAAOA,MAExH4B,EAAK0b,QAAQpZ,KAAKyK,EAAAA,UAAU/M,EAAKgN,aAC5BzL,UAAU,WAAM,OAAA8Y,EAAiBzD,uBAZI1G,EAAAA,EAAAA,uBAHjDvN,EAAAA,UAASlE,OACNC,SAAU,gHAHLgc,UADiBrK,UAHNxN,EAAAA,kBAAYb,EAAAA,cAAQsb,EAAAA,gBASU1B,ICTlD+B,GAAA,oDAIC7e,EAAAA,SAAQL,OACLS,SAAU0c,IACVzc,cAAeyc,gDANnB,GCSMgC,IACFxD,GACAM,GACA6C,2DAGHze,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACA+D,EACA4a,IAEJze,QAAS0e,GACTze,aAAcye,GACdhb,WAAYyN,mDCpBHwN,IACT/U,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA6U,KAC9B3U,OAAO,wCA+DiB,wBAGO,kBACF,iBACA,iBACA,kBACC,kBACA,mBAMN,IAAI/G,EAAAA,4BAEN,IAAIA,EAAAA,4BACJ,IAAIA,EAAAA,oCAEM,mCACK,0CA9BxB0b,EAAA5f,UAAA,aAMb,WACI,OAAOqB,KAAK+J,qBAPG3E,GACfpF,KAAK+J,OAAS3E,EACdpF,KAAKoK,iBAAiBhF,GACtBpF,KAAKqK,qDA+BTkU,EAAA5f,UAAA6f,OAAA,SAAO3f,GAEEmB,KAAKye,YAIS,EAAf5f,EAAM6f,OACN1e,KAAK2e,mBAEL3e,KAAK4e,mBAGT/f,EAAM4d,mBAGV8B,EAAA5f,UAAAigB,iBAAA,WACS5e,KAAKyK,UACNzK,KAAK6e,UAAU1b,QAIvBob,EAAA5f,UAAAggB,iBAAA,WACS3e,KAAKyK,UACNzK,KAAK8e,UAAU3b,QAIvBob,EAAA5f,UAAAgM,WAAA,SAAWvF,GACPpF,KAAKoF,MAAQA,GAGjBmZ,EAAA5f,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAKoK,iBAAmBS,GAG5B0T,EAAA5f,UAAAmM,kBAAA,SAAkBD,GACd7K,KAAKqK,kBAAoBQ,GAG7B0T,EAAA5f,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,uBA5HvB/L,EAAAA,UAASC,OACNC,SAAU,iBACVC,SAAU,s0CA0CV2f,cAAeC,EAAAA,kBAAkBC,KACjClY,gBAAiBC,EAAAA,wBAAwBC,OACzC5D,WAAYib,6EAIXjf,EAAAA,oBAUAA,EAAAA,mBACAA,EAAAA,mBACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,kCAEAA,EAAAA,8BACAA,EAAAA,kCACAA,EAAAA,2BAEAkE,EAAAA,0BAEAA,EAAAA,0BACAA,EAAAA,eCtFL2b,GAAA,oDAKC3f,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyL,EAAAA,aAEJvL,SAAU4e,IACV3e,cAAe2e,gDAXnB,GCAAY,GAAA,gCAOEA,EAAAxgB,UAAAygB,UAAA,SAAUha,GACR,OAAOA,EAAQ,GAAK,IAAMA,EAAQA,uBANrCia,EAAAA,KAAIngB,OACHogB,KAAM,yDAHR,GCOaC,IACThW,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA8V,KAC9B5V,OAAO,iBA4JP,SAAA4V,IAAA,IAAA/e,EAAAT,qBAjD8B,mBACC,iBACF,iBACA,qBAEI,kBACH,oBACE,oBACA,qBACC,gBAEL,kBACE,kBACA,kBAIE,KAAM,uBAcd,IAAI6C,EAAAA,0BACR,IAAIA,EAAAA,oCAEQ,mCACM,yBAE7B,IAAIlC,EAAAA,gBAAsB,IAAIiO,iBAGX5O,KAAKyf,OAAO1c,KAAK+D,EAAAA,IAAI,SAAA4Y,GAAQ,OAAAA,EAAKC,aAAa7Y,EAAAA,IAAI,SAAA8Y,GAAQ,OAAAnf,EAAKof,aAAepf,EAAKqf,gBAAgBF,GAAQA,kBAC1G5f,KAAKyf,OAAO1c,KAAK+D,EAAAA,IAAI,SAAA4Y,GAAQ,OAAAA,EAAKK,6BAClC/f,KAAKyf,OAAO1c,KAAK+D,EAAAA,IAAI,SAAA4Y,GAAQ,OAAAA,EAAKM,+BAChChgB,KAAKyf,OAAO1c,KAAK+D,EAAAA,IAAI,SAAA4Y,GAAQ,OAAAA,EAAKC,WAAa,GAAKlf,EAAKwf,UAAU,GAAKxf,EAAKwf,UAAU,kBACzFjgB,KAAKyf,OAAO1c,KAAK+D,EAAAA,IAAI,SAAA4Y,GAAQ,OAAAjf,EAAKyf,cAAcR,qBAElD1f,KAAKigB,UAAU,GAIvCjgB,KAAKK,cAAgBL,KAAKmgB,OAAOpd,KAAKwK,EAAAA,wBAAwBvL,UAAU,SAAAoe,GAAS,OAAA3f,EAAK4f,QAAQld,KAAKid,kCA/B1FZ,EAAA7gB,UAAA,aAQb,WACI,OAAO,IAAIiQ,KAAK5O,KAAKyf,OAAOra,qBATbA,GACfpF,KAAKyf,OAAOvd,KAAK,IAAI0M,KAAKxJ,IAC1BpF,KAAKmK,YAAYhH,KAAKnD,KAAKyf,OAAOra,OAElCpF,KAAKoK,iBAAiBpK,KAAKyf,OAAOra,OAClCpF,KAAKqK,qDA6BTmV,EAAA7gB,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBkf,EAAA7gB,UAAAgM,WAAA,SAAWvF,GACPpF,KAAKoF,MAAQA,GAGjBoa,EAAA7gB,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAKoK,iBAAmBS,GAG5B2U,EAAA7gB,UAAAmM,kBAAA,SAAkBD,GACd7K,KAAKqK,kBAAoBQ,GAG7B2U,EAAA7gB,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,GAGpBwU,EAAA7gB,UAAAmhB,gBAAA,SAAgBF,GACZ,OAAc,GAAPA,EAAYA,EAAO,GAAKA,GAGnCJ,EAAA7gB,UAAA2hB,QAAA,SAAQV,GACJ,IAAMF,EAAO1f,KAAKoF,MAClBsa,EAAKa,SAASX,GAAc,GAE5B5f,KAAKoF,MAAQsa,GAGjBF,EAAA7gB,UAAA6hB,UAAA,SAAUC,GACN,IAAMf,EAAO1f,KAAKoF,MAClBsa,EAAKgB,WAAWD,GAAkB,GAElCzgB,KAAKoF,MAAQsa,GAGjBF,EAAA7gB,UAAAgiB,WAAA,SAAWC,GACP,IAAMlB,EAAO1f,KAAKoF,MAClBsa,EAAKiB,WAAWC,GAAoB,GAEpC5gB,KAAKoF,MAAQsa,GAGjBF,EAAA7gB,UAAAkiB,cAAA,SAAcC,QAAA,IAAAA,IAAAA,GAAA,GACN9gB,KAAKyK,UAAYqW,IAAa9gB,KAAK+gB,WAIvC/gB,KAAKsgB,QAAQtgB,KAAKoF,MAAMua,WAAa3f,KAAKghB,WAG9CxB,EAAA7gB,UAAAsiB,cAAA,SAAcH,QAAA,IAAAA,IAAAA,GAAA,GACN9gB,KAAKyK,UAAYqW,IAAa9gB,KAAK+gB,WAIvC/gB,KAAKsgB,QAAQtgB,KAAKoF,MAAMua,WAAa3f,KAAKghB,WAG9CxB,EAAA7gB,UAAAuiB,gBAAA,SAAgBJ,QAAA,IAAAA,IAAAA,GAAA,GACR9gB,KAAKyK,UAAYqW,IAAa9gB,KAAK+gB,WAIvC/gB,KAAKwgB,UAAUxgB,KAAKoF,MAAM2a,aAAe/f,KAAKmhB,aAGlD3B,EAAA7gB,UAAAyiB,gBAAA,SAAgBN,QAAA,IAAAA,IAAAA,GAAA,GACR9gB,KAAKyK,UAAYqW,IAAa9gB,KAAK+gB,WAIvC/gB,KAAKwgB,UAAUxgB,KAAKoF,MAAM2a,aAAe/f,KAAKmhB,aAGlD3B,EAAA7gB,UAAA0iB,gBAAA,SAAgBP,QAAA,IAAAA,IAAAA,GAAA,GACR9gB,KAAKyK,UAAYqW,IAAa9gB,KAAK+gB,WAIvC/gB,KAAK2gB,WAAW3gB,KAAKoF,MAAM4a,aAAehgB,KAAKshB,aAGnD9B,EAAA7gB,UAAA4iB,gBAAA,SAAgBT,QAAA,IAAAA,IAAAA,GAAA,GACR9gB,KAAKyK,UAAYqW,IAAa9gB,KAAK+gB,WAIvC/gB,KAAK2gB,WAAW3gB,KAAKoF,MAAM4a,aAAehgB,KAAKshB,aAGnD9B,EAAA7gB,UAAA6iB,eAAA,SAAeC,GACXzhB,KAAK0hB,UAAYD,EAGjB,IAAM7B,EAAO5f,KAAKoF,MAAMua,WAGpB8B,IAAazhB,KAAKigB,UAAU,IAChB,IAARL,GACA5f,KAAKsgB,QAAQV,EAAO,IAKxB6B,IAAazhB,KAAKigB,UAAU,IACxBL,EAAO,IACP5f,KAAKsgB,QAAQV,EAAO,KAKhCJ,EAAA7gB,UAAAuhB,cAAA,SAAcR,GACV,IAAIU,GAAQ,EAUZ,OARIpgB,KAAKuI,KAAOmX,EAAKnR,WAAavO,KAAKuI,IAAIgG,YACvC6R,GAAQ,GAGRpgB,KAAKwI,KAAOkX,EAAKnR,WAAavO,KAAKwI,IAAI+F,YACvC6R,GAAQ,GAGLA,GAGXZ,EAAA7gB,UAAAgjB,WAAA,SAAWvc,GAGP,IAAIwa,EAAOgC,SAASxc,GAChByc,EAAc7hB,KAAKoF,MAAMua,WAGzBC,IAASiC,IAKRC,MAAMlC,KACHA,EAAO,IACPA,EAAO,GAGPA,GAAQ5f,KAAK6f,aAAe,GAAK,MACjCD,EAAO5f,KAAK6f,aAAe,GAAK,KAIxCD,EAAOkC,MAAMlC,GAAQiC,EAAcjC,EAG/B5f,KAAK0hB,YAAc1hB,KAAKigB,UAAU,IACtB,IAARL,IACAA,GAAQ,IAKZ5f,KAAK0hB,YAAc1hB,KAAKigB,UAAU,IAC9BL,EAAO,KACPA,GAAQ,IAIhB5f,KAAKsgB,QAAQV,KAGjBJ,EAAA7gB,UAAAojB,aAAA,SAAa3c,GAGT,IAAIqb,EAASmB,SAASxc,GAClB4c,EAAgBhiB,KAAKoF,MAAM2a,aAG3BU,IAAWuB,IAKVF,MAAMrB,KACHA,EAAS,IACTA,EAAS,IAGA,GAATA,IACAA,EAAS,IAKjBzgB,KAAKwgB,UAAUsB,MAAMrB,GAAUuB,EAAgBvB,KAGnDjB,EAAA7gB,UAAAsjB,aAAA,SAAa7c,GAET,IAAI8c,EAASN,SAASxc,GAClB+c,EAAgBniB,KAAKoF,MAAM4a,aAG3BkC,IAAWC,IAKVL,MAAMI,KACHA,EAAS,IACTA,EAAS,GAGA,GAATA,IACAA,EAAS,KAKjBliB,KAAK2gB,WAAWmB,MAAMI,GAAUC,EAAgBD,yBAtXvDjjB,EAAAA,UAASC,OACNC,SAAU,iBACVC,SAAU,2lGA6FV2f,cAAeC,EAAAA,kBAAkBC,KACjClY,gBAAiBC,EAAAA,wBAAwBC,OACzC5D,WAAYkc,IACZ6C,MACIC,aAAc,4FAKjBhjB,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,4BAEAA,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,wBAEAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,mBAEAA,EAAAA,mBACAA,EAAAA,yBACAA,EAAAA,qBAEAA,EAAAA,2BAYAkE,EAAAA,wBACAA,EAAAA,eCrJL+e,GAAA,oDAOC/iB,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyL,EAAAA,YACAgU,IAEJvf,SAAU6f,IACV5f,cAAe4f,GAAqBL,gDAdxC,GCQA,SAAAoD,GAA2BC,EAAY1Q,GAGnC0Q,EAAQA,EAAMpK,MAAM,GAIpB,IAFA,IAAMC,KAECmK,EAAM1d,QACTuT,EAAK3S,KAAK8c,EAAM1V,OAAO,EAAGgF,IAG9B,OAAOuG,EAQX,SAAAoK,GAAsBC,EAAeC,GAGjC,IAFA,IAAMC,KAEGnX,EAAMiX,EAAOjX,GAAOkX,EAAKlX,IAC9BmX,EAAKld,KAAK+F,GAGd,OAAOmX,EA8BX,SAAAC,GAA4BC,EAAYC,GACpC,OAAOD,EAAKE,YAAcD,EAAKC,WAC3BF,EAAKG,aAAeF,EAAKE,YACzBH,EAAKI,gBAAkBH,EAAKG,cAMpC,SAAAC,GAA+BC,EAAeC,GAC1C,OAAOD,EAAQ7U,YAAc8U,EAAQ9U,UAMzC,SAAA+U,GAAmCC,EAAiCC,GAChE,OAAOD,EAAQjE,OAASkE,EAAQlE,MAAQiE,EAAQlb,SAAWmb,EAAQnb,OAMhE,IAAMob,IAAU,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACxHC,GAAcD,GAAO3c,IAAI,SAAA6c,GAAS,OAAAA,EAAMC,UAAU,EAAG,KAMrDC,IADY,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UACvD/c,IAAI,SAAAgd,GAAW,OAAAA,EAAQF,UAAU,EAAG,+CCjFlD,iBACA,qBACI,oBACD,qBACC,qBACA,gBACHC,mBACA,yBAGfvE,KAAM,SAAUjX,OAAQ,MACxBiX,KAAM,SAAUjX,OAAQ,MACxBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,MACvBiX,KAAM,QAASjX,OAAQ,KACvBiX,KAAM,MAAOjX,OAAQ,IACrBiX,KAAM,QAASjX,QAAS,KACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,QAASjX,QAAS,MACxBiX,KAAM,SAAUjX,QAAS,MACzBiX,KAAM,SAAUjX,QAAS,MACzBiX,KAAM,SAAUjX,QAAS,iCApClC9F,EAAAA,wDCVDwhB,GAAA,WAoCI,SAAAA,EAAoBC,GAApB,IAAAvjB,EAAAT,KAAoBA,KAAAgkB,QAAAA,aAzBqB,IAAIrjB,EAAAA,gBAAgCsjB,GAAeC,gBAC7D,IAAIvjB,EAAAA,gBAAsB,IAAIiO,qBACjD,IAAIjO,EAAAA,gBAAwCX,KAAKmkB,qCAC1B,IAAIxjB,EAAAA,gBAAsB,IAAIiO,kBAG/B,IAAIjO,EAAAA,iBAAwB,IAAIiO,MAAOqU,uBACxC,IAAItiB,EAAAA,iBAAwB,IAAIiO,MAAOsU,8BAE5D,IAAIviB,EAAAA,gBAAyBX,KAAKgkB,QAAQI,yBAC1C,IAAIzjB,EAAAA,gBAAyBX,KAAKgkB,QAAQK,6BACtC,IAAI1jB,EAAAA,gBAAyBX,KAAKgkB,QAAQM,gCAC3C,IAAI3jB,EAAAA,gBAAyBX,KAAKgkB,QAAQO,gCACzC,IAAI5jB,EAAAA,gBAAyBX,KAAKgkB,QAAQnE,iCAC1C,IAAIlf,EAAAA,gBAAyBX,KAAKgkB,QAAQQ,6BAC9C,IAAI7jB,EAAAA,gBAA0BX,KAAKgkB,QAAQS,2BACzC,IAAI9jB,EAAAA,gBAAwBX,KAAKgkB,QAAQU,4BAC1C,IAAI/jB,EAAAA,gBAA0CX,KAAKgkB,QAAQW,wBAE9D,IAAIhkB,EAAAA,gBAAwB,wBACvB,IAAI4L,EAAAA,2BACYqY,GAAc3F,KAOzCjf,KAAKK,cAAgBL,KAAK6kB,UAAU9hB,KAAKwK,EAAAA,qBAAqB4V,KAAiBnhB,UAAU,SAAA0d,GAGrFjf,EAAKqkB,iBAAiBpF,EAAKuD,YAC3BxiB,EAAKskB,gBAAgBrF,EAAKwD,eAG1BziB,EAAKukB,MAAM9iB,KAAKwd,YAIxBqE,EAAAplB,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvByjB,EAAAplB,UAAAmmB,iBAAA,SAAiBnB,GACTA,EAAQ,GACR3jB,KAAKilB,OAAO/iB,KAAK,IACjBlC,KAAKklB,MAAMhjB,KAAKlC,KAAKklB,MAAM9f,MAAQ,IACpB,GAARue,GACP3jB,KAAKilB,OAAO/iB,KAAK,GACjBlC,KAAKklB,MAAMhjB,KAAKlC,KAAKklB,MAAM9f,MAAQ,IAEnCpF,KAAKilB,OAAO/iB,KAAKyhB,IAIzBI,EAAAplB,UAAAomB,gBAAA,SAAgBI,GACZnlB,KAAKklB,MAAMhjB,KAAKijB,IAGpBpB,EAAAplB,UAAAymB,QAAA,SAAQC,EAAa1B,EAAewB,GAChC,IAAMzF,EAAO,IAAI9Q,KAAK5O,KAAK6kB,UAAUzf,OAErCsa,EAAK0F,QAAQC,GACb3F,EAAK4F,SAAS3B,GACdjE,EAAK6F,YAAYJ,GAEjBnlB,KAAK6kB,UAAU3iB,KAAKwd,IAGxBqE,EAAAplB,UAAA6mB,aAAA,WACIxlB,KAAK6kB,UAAU3iB,KAAK,IAAI0M,OAG5BmV,EAAAplB,UAAA8mB,gBAAA,SAAgBC,GACZ1lB,KAAK2lB,MAAMzjB,KAAKwjB,IAGpB3B,EAAAplB,UAAAinB,cAAA,WAGI,OAFA5lB,KAAK6lB,cAAgBjB,GAAckB,QAE3B9lB,KAAK2lB,MAAMvgB,OAEf,KAAK6e,GAAe8B,KAChB,OAAO/lB,KAAKylB,gBAAgBxB,GAAe+B,OAE/C,KAAK/B,GAAe+B,MAChB,OAAOhmB,KAAKylB,gBAAgBxB,GAAeC,OAIvDH,EAAAplB,UAAAsnB,eAAA,WAGI,OAFAjmB,KAAK6lB,cAAgBjB,GAAcsB,OAE3BlmB,KAAK2lB,MAAMvgB,OAEf,KAAK6e,GAAeC,IAChB,OAAOlkB,KAAKylB,gBAAgBxB,GAAe+B,OAE/C,KAAK/B,GAAe+B,MAChB,OAAOhmB,KAAKylB,gBAAgBxB,GAAe8B,QAIvDhC,EAAAplB,UAAAwnB,SAAA,WACInmB,KAAKomB,aAAalkB,KAAKmkB,GAAsBC,OAGjDvC,EAAAplB,UAAA4nB,aAAA,WACIvmB,KAAKomB,aAAalkB,KAAKmkB,GAAsBG,WAGjDzC,EAAAplB,UAAA8nB,UAAA,SAAUC,GACN1mB,KAAK2mB,QAAQzkB,KAAKwkB,IAGtB3C,EAAAplB,UAAAwlB,mBAAA,WACI,IAAM9b,GAAS,IAAIuG,MAAOgY,oBAC1B,OAAO5mB,KAAKgkB,QAAQW,UAAUxe,KAAK,SAAA0gB,GAAY,OAAAA,EAASxe,SAAWA,KAGvE0b,EAAAplB,UAAAmoB,YAAA,SAAYD,GACR7mB,KAAK+mB,UAAU7kB,KAAK2kB,wBA5H3BtkB,EAAAA,sDAHQykB,QALT,qQCAA,IAAAC,GAAA,WA+FE,SAAAA,EAAmBC,GAAnB,IAAAzmB,EAAAT,KAAmBA,KAAAknB,WAAAA,kBApBwB,IAAIrkB,EAAAA,iCACkB,IAAIA,EAAAA,iCAepDohB,sBAEO,IAAIhkB,EAAAA,aAGNinB,EAAWrC,UAAU9hB,KAAKwK,EAAAA,qBAAqB4V,KAChEnhB,UAAU,SAAA0d,GAAQ,OAAAjf,EAAK0mB,WAAWhkB,KAAKuc,KAEnBwH,EAAWH,UAAUhkB,KAAKwK,EAAAA,qBAAqB+V,KACnEthB,UAAU,SAAC6kB,GAAqC,OAAApmB,EAAK2mB,eAAejkB,KAAK0jB,kCA9DjEI,EAAAtoB,UAAA,yBAASyG,GACpBpF,KAAKknB,WAAWG,UAAUnlB,KAAKkD,0DAGpB6hB,EAAAtoB,UAAA,yBAASyG,GACpBpF,KAAKknB,WAAWI,UAAUplB,KAAKkD,0DAGpB6hB,EAAAtoB,UAAA,6BAAayG,GACxBpF,KAAKknB,WAAWK,cAAcrlB,KAAKkD,0DAGxB6hB,EAAAtoB,UAAA,4BAAYyG,GACvBpF,KAAKknB,WAAWM,aAAatlB,KAAKkD,0DAGvB6hB,EAAAtoB,UAAA,6BAAayG,GACxBpF,KAAKknB,WAAWO,cAAcvlB,KAAKkD,0DAGxB6hB,EAAAtoB,UAAA,6BAAayG,GACxBpF,KAAKknB,WAAWQ,cAAcxlB,KAAKkD,0DAGxB6hB,EAAAtoB,UAAA,yBAASyG,GACpBpF,KAAKknB,WAAWS,UAAUzlB,KAAKkD,0DAGpB6hB,EAAAtoB,UAAA,2BAAWyG,GACtBpF,KAAKknB,WAAWU,YAAY1lB,KAAKkD,0DAGtB6hB,EAAAtoB,UAAA,0BAAUyG,GACrBpF,KAAKknB,WAAWW,WAAW3lB,KAAKkD,0DAQ9B6hB,EAAAtoB,UAAA,qBAAKyG,GACF+d,GAAe/d,EAAOpF,KAAKknB,WAAWrC,UAAUzf,QACnDpF,KAAKknB,WAAWrC,UAAU3iB,KAAK,IAAI0M,KAAKxJ,2DAKxC6hB,EAAAtoB,UAAA,yBAASyG,GACXpF,KAAKknB,WAAWH,UAAU7kB,KAAKkD,oCAgBjC6hB,EAAAtoB,UAAAyB,YAAA,WACEJ,KAAKK,cAAcC,eAMrB2mB,EAAAtoB,UAAAmpB,SAAA,WAGE9nB,KAAKknB,WAAW1B,oCA3GnBvmB,EAAAA,UAASC,OACRC,SAAU,sBACVC,SAAU,m9BAuBViE,WAAY0gB,IACZhd,gBAAiBC,EAAAA,wBAAwBC,oDA7BlB8c,wCAmCtB1kB,EAAAA,wBAIAA,EAAAA,4BAIAA,EAAAA,2BAIAA,EAAAA,4BAIAA,EAAAA,4BAIAA,EAAAA,wBAIAA,EAAAA,0BAIAA,EAAAA,yBAIAA,EAAAA,0BAKAkE,EAAAA,+BACAA,EAAAA,qBAEAlE,EAAAA,wBAOAA,EAAAA,WArFH,iBCeI,SAAA0oB,EAAoBC,GAApB,IAAAvnB,EAAAT,KAAoBA,KAAAgoB,YAAAA,aALZ,IAAIrnB,EAAAA,oCACD,IAAIA,EAAAA,gBAAgC,MAK3CX,KAAKK,cAAgB4nB,EAAAA,cAAcD,EAAY/C,OAAQ+C,EAAY9C,OAC9DljB,UAAU,SAAC0G,OAAAwf,EAAA5iB,EAAAoD,EAAA,GAACib,EAAAuE,EAAA,GAAO/C,EAAA+C,EAAA,GAAU,OAAAznB,EAAK0nB,cAAcxE,EAAOwB,YAGhE4C,EAAAppB,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBynB,EAAAppB,UAAAypB,SAAA,SAAS/C,EAAa1B,EAAewB,GACjCnlB,KAAKqoB,SAASnmB,MAAOmjB,IAAKA,EAAK1B,MAAOA,EAAOwB,KAAMA,IAGnDnlB,KAAKgoB,YAAYlD,iBAAiBnB,GAClC3jB,KAAKgoB,YAAYjD,gBAAgBI,IAG7B4C,EAAAppB,UAAAwpB,uBAAcxE,EAAewB,cAGjCnlB,KAAKgoB,YAAYvB,UAAUhD,GAAOE,GAAS,IAAMwB,GAGjD,IAAMzC,EAAQ,IAAI9T,KAAKuW,EAAMxB,EAAO,GAC9BhB,EAAM,IAAI/T,KAAKuW,EAAMxB,EAAQ,EAAG,GAGtCjB,EAAM0C,QAAQ1C,EAAMM,UAAYN,EAAM4F,UAGtC3F,EAAIyC,QAAQzC,EAAIK,WAAa,EAAIL,EAAI2F,WAGrC,IAAMC,EJNd,SAA0B7F,EAAaC,GAKnC,IAHA,IAAI4F,KAGG7F,GAASC,GAGZ4F,EAAM7iB,KAAK,IAAIkJ,KAAK8T,IAGpBA,EAAM0C,QAAQ1C,EAAMM,UAAY,GAGpC,OAAOuF,EIR0BC,CAAU9F,EAAOC,GAAK7b,IAAI,SAAA4Y,GAAQ,OAC3D2F,IAAK3F,EAAKsD,UACVW,MAAOjE,EAAKuD,WACZkC,KAAMzF,EAAKwD,cACXxD,KAAMA,EACN+I,QAAShoB,EAAKgoB,QAAQ/I,GACtBgJ,SAAUjoB,EAAKioB,SAAShJ,GACxBiJ,eAAgBjJ,EAAKuD,aAAeU,KAIlCnB,EAAyBD,GAAQgG,EAAO,GAK9C,GAHAvoB,KAAK4oB,MAAM1mB,KAAKsgB,IAGXxiB,KAAKgoB,YAAYnC,gBAAkBjB,GAAc3F,MAAQjf,KAAKgoB,YAAYnC,gBAAkBjB,GAAckB,UAAoC,OAAxB9lB,KAAKqoB,SAASjjB,MAAgB,CAGrJ,IAAMyjB,EAAcN,EAAMpiB,KAAK,SAAAkf,GAAO,OAAAA,EAAIsD,gBAAkBtD,EAAIqD,WAEhE,GAAIG,EACA7oB,KAAKooB,SAASS,EAAYxD,IAAKwD,EAAYlF,MAAOkF,EAAY1D,UAC3D,CAGH,IAAM2D,EAAQP,EAAMpiB,KAAK,SAAAuZ,GAAQ,OAAa,IAAbA,EAAK2F,MAGtCrlB,KAAKooB,SAASU,EAAMzD,IAAKyD,EAAMnF,MAAOmF,EAAM3D,SAUhD4C,EAAAppB,UAAA8pB,iBAAQ/I,GACZ,OAAOmD,GAAY,IAAIjU,KAAQ8Q,IAO3BqI,EAAAppB,UAAA+pB,kBAAShJ,GACb,OAAOmD,GAAY7iB,KAAKgoB,YAAYnD,UAAUzf,MAAOsa,wBAzF5Dnd,EAAAA,sDAHQwhB,WCJTgF,GAAA,WAgDE,SAAAA,EAAmBC,EAA0CC,GAA7D,IAAAxoB,EAAAT,KAAmBA,KAAAgpB,WAAAA,EAA0ChpB,KAAAipB,WAAAA,EAC3DjpB,KAAKK,cAAgB2oB,EAAW5C,aAC7BpkB,UAAU,SAAAnD,GAAS,OAAAA,IAAUwnB,GAAsBC,KAAO7lB,EAAKyB,OAASzB,EAAK2H,oBAGlF2gB,EAAApqB,UAAAyB,YAAA,WACEJ,KAAKK,cAAcC,eAMrByoB,EAAApqB,UAAAyJ,SAAA,WACEpI,KAAKgpB,WAAWlE,iBAAiB9kB,KAAKgpB,WAAW/D,OAAO7f,MAAQ,IAMlE2jB,EAAApqB,UAAAuD,KAAA,WACElC,KAAKgpB,WAAWlE,iBAAiB9kB,KAAKgpB,WAAW/D,OAAO7f,MAAQ,IAOlE2jB,EAAApqB,UAAA6H,OAAA,SAAOkZ,GAEL1f,KAAKgpB,WAAW5D,QAAQ1F,EAAKsD,UAAWtD,EAAKuD,WAAYvD,EAAKwD,eAG9DljB,KAAKipB,WAAWb,SAAS1I,EAAKsD,UAAWtD,EAAKuD,WAAYvD,EAAKwD,gBAGjE6F,EAAApqB,UAAAuqB,cAAA,SAAcC,GACZ,OAAOA,GAGTJ,EAAApqB,UAAAyqB,aAAA,SAAaD,EAAetL,GAC1B,OAAWA,EAAKwH,IAAG,IAAMxH,EAAK8F,MAAK,IAAM9F,EAAKsH,MAGhD4D,EAAApqB,UAAA0qB,UAAA,SAAUxL,EAAmByL,GAG3B,IAAMta,EAAS,IAAIJ,KAAKiP,EAAK6B,KAAK0F,QAAQvH,EAAK6B,KAAKsD,UAAYsG,IAGhEtpB,KAAKipB,WAAWb,SAASpZ,EAAOgU,UAAWhU,EAAOiU,WAAYjU,EAAOkU,gBAGvE6F,EAAApqB,UAAA4qB,YAAA,SAAY1L,GACV,IAAM2L,EAAUxpB,KAAKipB,WAAWZ,SAASjjB,MACnCiT,EAAOrY,KAAKipB,WAAWL,MAAMxjB,MAGnC,GAAIokB,KAG4BnR,EAAKlS,KAAK,SAAAqM,GAAO,QAAEA,EAAIrM,KAAK,SAAAsjB,GAAS,OAAAA,EAAMpE,MAAQmE,EAAQnE,KAAOoE,EAAM9F,QAAU6F,EAAQ7F,OAAS8F,EAAMtE,OAASqE,EAAQrE,SAGtJ,OAAOqE,EAAQnE,MAAQxH,EAAKwH,KAAOmE,EAAQ7F,QAAU9F,EAAK8F,OAAS6F,EAAQrE,OAAStH,EAAKsH,KAO7F,QAF+B9M,EAAKlS,KAAK,SAAAqM,GAAO,QAAEA,EAAIrM,KAAK,SAAAkf,GAAO,OAAAA,EAAIqD,aAG3D7K,EAAK6K,SAII,IAAb7K,EAAKwH,yBAtHfpmB,EAAAA,UAASC,OACRC,SAAU,+BACVC,SAAU,gpDAkCViE,WAAY0kB,IACZhhB,gBAAiBC,EAAAA,wBAAwBC,oDAxCX8c,UACVgE,QAHtB,GCAA2B,GAAA,WAmFI,SAAAA,EAAmBxC,GAAAlnB,KAAAknB,WAAAA,kBA9CelnB,KAAKknB,WAAWvB,MAAM5iB,KAAK+D,EAAAA,IAAI,SAAA4e,GAAQ,OAAAA,IAASzB,GAAe8B,mBAErE/lB,KAAKknB,WAAWvB,MAAM5iB,KAAK+D,EAAAA,IAAI,SAAA4e,GACvD,OAAQA,GACJ,KAAKzB,GAAeC,IAChB,MAAO,MACX,KAAKD,GAAe+B,MAChB,MAAO,QACX,KAAK/B,GAAe8B,KAChB,MAAO,4BAIe/lB,KAAKknB,WAAWvB,MAAM5iB,KAAK+D,EAAAA,IAAI,SAAA4e,GAC7D,OAAQA,GACJ,KAAKzB,GAAeC,IAChB,MAAO,oCACX,KAAKD,GAAe+B,MAChB,MAAO,qCACX,KAAK/B,GAAe8B,KAChB,MAAO,0BAIiB/lB,KAAKknB,WAAWvB,MAAM5iB,KAAK+D,EAAAA,IAAI,SAAA4e,GAC/D,OAAQA,GACJ,KAAKzB,GAAeC,IAChB,MAAO,iBACX,KAAKD,GAAe+B,MAChB,MAAO,gBACX,KAAK/B,GAAe8B,KAChB,MAAO,qCAIa/lB,KAAKknB,WAAWvB,MAAM5iB,KAAK+D,EAAAA,IAAI,SAAA4e,GAC3D,OAAQA,GACJ,KAAKzB,GAAeC,IAChB,MAAO,aACX,KAAKD,GAAe+B,MAChB,MAAO,YACX,KAAK/B,GAAe8B,KAChB,MAAO,yBAMnB2D,EAAA/qB,UAAAyJ,SAAA,WACIpI,KAAKknB,WAAWX,gBAGpBmD,EAAA/qB,UAAAgrB,OAAA,WACI3pB,KAAKknB,WAAWjB,kBAGpByD,EAAA/qB,UAAAuD,KAAA,WACIlC,KAAKknB,WAAWf,gCAzFvBlnB,EAAAA,UAASC,OACNC,SAAU,6BACVC,SAAU,oxBA0BV2H,gBAAiBC,EAAAA,wBAAwBC,oDA9BpB8c,QAHzB,GCAA6F,GAAA,WAcI,SAAAA,EAAoB5B,GAApB,IAAAvnB,EAAAT,KAAoBA,KAAAgoB,YAAAA,aALZ,IAAIrnB,EAAAA,oCACD,IAAIA,EAAAA,gBAAkC,MAK7CX,KAAKK,cAAgB2nB,EAAY9C,MAAMljB,UAAU,SAAAmjB,GAAQ,OAAA1kB,EAAKopB,gBAAgB1E,YAGlFyE,EAAAjrB,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBspB,EAAAjrB,UAAAypB,SAAA,SAASzE,EAAewB,GACpBnlB,KAAKqoB,SAASnmB,MAAOyhB,MAAOA,EAAOwB,KAAMA,IAGzCnlB,KAAKgoB,YAAYjD,gBAAgBI,IAG7ByE,EAAAjrB,UAAAkrB,yBAAgB1E,GAGpBnlB,KAAKgoB,YAAYvB,UAAUtB,EAAKxJ,YAGhC,IAAMmO,GAAe,IAAIlb,MAAOqU,WAC1B8G,GAAc,IAAInb,MAAOsU,cAGzB8G,EAAchqB,KAAKgoB,YAAYnD,UAAUzf,MAAM6d,WAC/CgH,EAAajqB,KAAKgoB,YAAYnD,UAAUzf,MAAM8d,cAG9CO,EAA0BhB,GAAM,EAAG,IAAI3b,IAAI,SAAA6c,GAC7C,OACIrE,KAAMoE,GAAYC,GAClBA,MAAOA,EACPwB,KAAMA,EACNwD,eAAgBxD,IAAS4E,GAAepG,IAAUmG,EAClDI,cAAe/E,IAAS8E,GAActG,IAAUqG,KAKlDxH,EAA2BD,GAAQkB,EAAQ,GAMjD,GAHAzjB,KAAK4oB,MAAM1mB,KAAKsgB,GAGZxiB,KAAKgoB,YAAYnC,gBAAkBjB,GAAckB,SAAmC,OAAxB9lB,KAAKqoB,SAASjjB,MAAgB,CAG1F,IAAM+kB,EAAgB1G,EAAOtd,KAAK,SAAAwd,GAAS,OAAAA,EAAMuG,gBAEjDlqB,KAAKooB,SAAS+B,EAAgBA,EAAcxG,MAAQ,EAAGwB,yBA3DlE5iB,EAAAA,sDAHQwhB,QAHT,GCAAqG,GAAA,WAoCI,SAAAA,EAAoBC,EAA2CC,GAA/D,IAAA7pB,EAAAT,KAAoBA,KAAAqqB,YAAAA,EAA2CrqB,KAAAsqB,aAAAA,EAC3DtqB,KAAKK,cAAgBgqB,EAAYjE,aAC5BpkB,UAAU,SAAAnD,GAAS,OAAAA,IAAUwnB,GAAsBC,KAAO7lB,EAAKyB,OAASzB,EAAK2H,oBAGtFgiB,EAAAzrB,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAMvB8pB,EAAAzrB,UAAAyJ,SAAA,WACIpI,KAAKqqB,YAAYtF,gBAAgB/kB,KAAKqqB,YAAYnF,MAAM9f,MAAQ,IAMpEglB,EAAAzrB,UAAAuD,KAAA,WACIlC,KAAKqqB,YAAYtF,gBAAgB/kB,KAAKqqB,YAAYnF,MAAM9f,MAAQ,IAOpEglB,EAAAzrB,UAAA6H,OAAA,SAAOmd,GACH3jB,KAAKqqB,YAAYvF,iBAAiBnB,GAGlC3jB,KAAKqqB,YAAYzE,iBAGrBwE,EAAAzrB,UAAA4rB,WAAA,SAAW1M,EAAqB2M,GAC5B,IAAIC,EAAc5M,EAAK8F,MAAQ6G,EAC3BE,EAAa7M,EAAKsH,KAElBsF,EAAc,IACdA,GAAe,GACfC,GAAc,GAGC,IAAfD,IACAA,GAAe,GACfC,GAAc,GAGlB1qB,KAAKsqB,aAAalC,SAASqC,EAAaC,IAG5CN,EAAAzrB,UAAAgsB,aAAA,SAAaxB,GACT,OAAOA,GAGXiB,EAAAzrB,UAAAisB,eAAA,SAAezB,EAAetL,GAC1B,OAAUA,EAAK8F,MAAK,IAAI9F,EAAKsH,MAGjCiF,EAAAzrB,UAAA4qB,YAAA,SAAY1L,GACR,IAAM2L,EAAUxpB,KAAKsqB,aAAajC,SAASjjB,MACrCiT,EAAOrY,KAAKsqB,aAAa1B,MAAMxjB,MAGrC,GAAIokB,KAGgCnR,EAAKlS,KAAK,SAAAqM,GAAO,QAAEA,EAAIrM,KAAK,SAAAsjB,GAAS,OAAAA,EAAM9F,QAAU6F,EAAQ7F,OAAS8F,EAAMtE,OAASqE,EAAQrE,SAGzH,OAAOqE,EAAQ7F,QAAU9F,EAAK8F,OAAS6F,EAAQrE,OAAStH,EAAKsH,KAOrE,QAFiC9M,EAAKlS,KAAK,SAAAqM,GAAO,QAAEA,EAAIrM,KAAK,SAAAwd,GAAS,OAAAA,EAAMuG,kBAGjErM,EAAKqM,cAIM,IAAfrM,EAAK8F,2BAjHnB1kB,EAAAA,UAASC,OACNC,SAAU,iCACVC,SAAU,skCAsBViE,WAAYumB,IACZ7iB,gBAAiBC,EAAAA,wBAAwBC,oDA5Bb8c,UACR6F,QAHxB,GCAAiB,GAAA,WAqDI,SAAAA,EAAmB3D,GAAAlnB,KAAAknB,WAAAA,SAEnB2D,EAAAlsB,UAAAmsB,eAAA,SAAexL,GACX,IAGMuH,EAHY7mB,KAAKknB,WAAWW,WAAWziB,MAGlBe,KAAK,SAAA4kB,GAAa,OAAAA,EAAUzL,OAASA,IAE5DuH,GACA7mB,KAAKknB,WAAWJ,YAAYD,IAIpCgE,EAAAlsB,UAAAqsB,kBAAA,WACI,IAAMnE,EAAW7mB,KAAKknB,WAAWH,UAAU3hB,MACrCuf,EAAY3kB,KAAKknB,WAAWW,WAAWziB,MAEvC6lB,EAActG,EAAUjZ,UAAU,SAAAgD,GAAQ,OAAAA,EAAK4Q,OAASuH,EAASvH,MAAQ5Q,EAAKrG,SAAWwe,EAASxe,SAGxGrI,KAAKknB,WAAWJ,YAAYnC,EAAUsG,EAAc,GAAKtG,EAAUsG,EAAc,GAAKtG,EAAUsG,KAGpGJ,EAAAlsB,UAAAusB,kBAAA,WACI,IAAMrE,EAAW7mB,KAAKknB,WAAWH,UAAU3hB,MACrCuf,EAAY3kB,KAAKknB,WAAWW,WAAWziB,MAEvC6lB,EAActG,EAAUjZ,UAAU,SAAAgD,GAAQ,OAAAA,EAAK4Q,OAASuH,EAASvH,MAAQ5Q,EAAKrG,SAAWwe,EAASxe,SAGxGrI,KAAKknB,WAAWJ,YAAYnC,EAAUsG,EAAc,GAAKtG,EAAUsG,EAAc,GAAKtG,EAAUsG,yBAhFvGhsB,EAAAA,UAASC,OACNC,SAAU,gCACVC,SAAU,snDA4CV2H,gBAAiBC,EAAAA,wBAAwBC,oDAhDpC8c,QADT,GCAAoH,GAAA,WAgBI,SAAAA,EAAoBnD,GAApB,IAAAvnB,EAAAT,KAAoBA,KAAAgoB,YAAAA,aAPZ,IAAIrnB,EAAAA,oCACD,IAAIA,EAAAA,gBAAwB,kBAEf,IAAIiO,MAAOsU,iCAEX,IAAIjjB,EAAAA,aAGxB,IAAMklB,EAAO6C,EAAY9C,MAAMljB,UAAU,SAAAopB,GAAS,OAAA3qB,EAAK4qB,eAAeD,KAEhEvsB,EAAQmpB,EAAY5B,aACrBpkB,UAAU,SAAAspB,GAAU,OAAAA,IAAWjF,GAAsBC,KAAO7lB,EAAK8qB,iBAAmB9qB,EAAK+qB,uBAE9FxrB,KAAKK,cAAcyB,IAAIqjB,GACvBnlB,KAAKK,cAAcyB,IAAIjD,UAG3BssB,EAAAxsB,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvB6qB,EAAAxsB,UAAAypB,SAAA,SAASjD,GACLnlB,KAAKqoB,SAASnmB,KAAKijB,GACnBnlB,KAAKqrB,eAAelG,IAGxBgG,EAAAxsB,UAAA6sB,mBAAA,WACIxrB,KAAKqrB,eAAerrB,KAAKorB,MAAQ,KAGrCD,EAAAxsB,UAAA4sB,eAAA,WACIvrB,KAAKqrB,eAAerrB,KAAKorB,MAAQ,KAG7BD,EAAAxsB,UAAA0sB,wBAAelG,mBAAA,IAAAA,IAAAA,EAAenlB,KAAKorB,OAEvCprB,KAAKorB,MAAQjG,EAGb,IAAMsG,EAASzrB,KAAK0rB,UAAUvG,GAExB4E,GAAc,IAAInb,MAAOsU,cAGzBV,EAAwBiJ,EAAOhJ,MAAM3b,IAAI,SAAAskB,GAC3C,OACIjG,KAAMiG,EACNO,cAAeP,IAAUrB,EACzB6B,aAAcR,IAAU3qB,EAAKunB,YAAY9C,MAAM9f,SAKvDpF,KAAKgoB,YAAYvB,UAAUgF,EAAO/I,MAAQ,MAAQ+I,EAAO9I,KAGzD3iB,KAAK4oB,MAAM1mB,KAAKqgB,GAAQC,EAAO,KAM3B2I,EAAAxsB,UAAA+sB,mBAAUvG,GAGd,IAAMzC,EAASyC,EAAQA,EAAO,GACxBxC,EAAMD,EAAQ,EAGpB,OAASA,MAAOA,EAAOC,IAAKA,EAAKF,MAAOA,GAAMC,EAAOC,yBAxE5DpgB,EAAAA,sDAH+BwhB,QAHhC,GCAA8H,GAAA,WAiCE,SAAAA,EAAoBxB,EAA2CyB,GAA3C9rB,KAAAqqB,YAAAA,EAA2CrqB,KAAA8rB,YAAAA,SAE/DD,EAAAltB,UAAA6H,OAAA,SAAO2e,GACLnlB,KAAKqqB,YAAYtF,gBAAgBI,GAGjCnlB,KAAKqqB,YAAYzE,iBAGnBiG,EAAAltB,UAAAotB,UAAA,SAAUlO,EAAoBmO,GAC5BhsB,KAAK8rB,YAAY1D,SAASvK,EAAKsH,KAAO6G,IAGxCH,EAAAltB,UAAAgsB,aAAA,SAAaxB,GACX,OAAOA,GAGT0C,EAAAltB,UAAAstB,cAAA,SAAc9C,EAAetL,GAC3B,OAAOA,EAAKsH,MAGd0G,EAAAltB,UAAA4qB,YAAA,SAAY1L,GACV,IAAM2L,EAAUxpB,KAAK8rB,YAAYzD,SAASjjB,MACpCiT,EAAOrY,KAAK8rB,YAAYlD,MAAMxjB,MAGpC,GAAIokB,KAG+BnR,EAAKlS,KAAK,SAAAqM,GAAO,QAAEA,EAAIrM,KAAK,SAAAsjB,GAAS,OAAAA,EAAMtE,OAASqE,MAG/E,OAAOA,IAAY3L,EAAKsH,KAOhC,QAFgC9M,EAAKlS,KAAK,SAAAqM,GAAO,QAAEA,EAAIrM,KAAK,SAAAgf,GAAQ,OAAAA,EAAKyG,iBAG9D/N,EAAK+N,aAITvT,EAAK,GAAG,GAAG8M,OAAStH,EAAKsH,0BAzEnClmB,EAAAA,UAASC,OACRC,SAAU,gCACVC,SAAU,w+BAsBViE,WAAY8nB,IACZpkB,gBAAiBC,EAAAA,wBAAwBC,oDA5BlC8c,UACcoH,QAFvB,GCAAe,GAAA,WA4BI,SAAAA,EAAoBvpB,GAAA3C,KAAA2C,YAAAA,oBArBY,gBAmBL,kCAhBvBupB,EAAAvtB,UAAA,wBAAQwtB,cAGHA,GAA2B,OAAlBnsB,KAAKosB,WACfC,aAAarsB,KAAKosB,UAClBpsB,KAAKosB,SAAW,MAGhBD,GAA2B,OAAlBnsB,KAAKosB,WACdpsB,KAAKosB,SAAWnrB,OAAOqB,WAAW,WAC9B7B,EAAKkC,YAAYnC,cAAc2rB,QAC/B1rB,EAAK2rB,SAAW,MACjBpsB,KAAKssB,oEApBnBlpB,EAAAA,UAASlE,OACNC,SAAU,yDAHMmE,EAAAA,oDAOfjE,EAAAA,uBAEAA,EAAAA,WATL,GCAAktB,GAAA,oDAIChtB,EAAAA,SAAQL,OACLS,SAAUusB,IACVtsB,cAAessB,gDANnB,GCAAM,GAAA,oDAcCjtB,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyL,EAAAA,YACAoX,GACApD,GACAqN,IAEJ5sB,SAAUsnB,IACVrnB,cAAeqnB,GAAyByC,GAAiBX,GAAkBqB,GAAoByB,GAAmBhB,IAClHxnB,WACI2jB,gDAzBR,GCAAyF,GAAA,oDAECxtB,EAAAA,UAASC,OACNC,SAAU,UACVC,SAAU,+LAOV2H,gBAAiBC,EAAAA,wBAAwBC,mDAX7C,0DAeC7D,EAAAA,UAASlE,OACNC,SAAU,uHAIbiE,EAAAA,UAASlE,OACNC,SAAU,iECrBdutB,GAAA,oDAICntB,EAAAA,SAAQL,OACLS,SAAU8sB,GAAeE,GAAsBC,IAC/ChtB,cAAe6sB,GAAeE,GAAsBC,gDANxD,GCEAC,GACI,SAAmBC,GAAA9sB,KAAA8sB,MAAAA,GAGvBC,GACI,SAAmBD,GAAA9sB,KAAA8sB,MAAAA,GAGvBE,GACI,aCXJC,GAAA,oCA0D8B,8BACM,2BACH,kDAES,oBAEU,IAAIpqB,EAAAA,yBACP,IAAIA,EAAAA,oBAEjDoqB,EAAAtuB,UAAAuuB,YAAA,SAAYJ,GAER9sB,KAAKmtB,OAAOznB,KAAKonB,GAGjB9sB,KAAKotB,aAAajqB,KAAKnD,KAAKmtB,QAG5BntB,KAAKqtB,aAAa,IAAIR,GAAYC,KAGtCG,EAAAtuB,UAAA2uB,cAAA,SAAcR,GAGV,IAAIrhB,EAAMzL,KAAKmtB,OAAOzhB,UAAU,SAAA6hB,GAAiB,OAAAT,IAAUS,KAG9C,IAAT9hB,IAKJzL,KAAKmtB,OAAOrgB,OAAOrB,EAAK,GAGxBzL,KAAKotB,aAAajqB,KAAKnD,KAAKmtB,QAG5BntB,KAAKqtB,aAAa,IAAIN,GAAcD,MAGxCG,EAAAtuB,UAAA6uB,kBAAA,WAGIxtB,KAAKmtB,UAGLntB,KAAKotB,aAAajqB,KAAKnD,KAAKmtB,QAG5BntB,KAAKqtB,aAAa,IAAIL,KAGlBC,EAAAtuB,UAAA0uB,sBAAaxuB,GACjBmB,KAAKwL,OAAOtJ,KAAKrD,wBA3GxBI,EAAAA,UAASC,OACNC,SAAU,qBACVC,SAAU,uxEAoDTC,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,iCACAA,EAAAA,4BAEAkE,EAAAA,uBACAA,EAAAA,YAjEL,GCAAkqB,GAAA,WAmBI,SAAAA,EAA6BC,EAAgD/qB,GAA7E,IAAAlC,EAAAT,KAA6BA,KAAA0tB,eAAAA,EAAgD1tB,KAAA2C,YAAAA,uCAL3B,IAAIE,EAAAA,yBACd,IAAI0J,EAAAA,wBAErB,IAAIA,EAAAA,QAInBmhB,IAGAA,EAAeliB,OAAOzI,KAClBiD,EAAAA,OAAO,SAAAnH,GAAS,OAAAA,aAAiBkuB,KACjC/mB,EAAAA,OAAO,SAACnH,GAAyB,QAAE4B,EAAKktB,SAASxnB,KAAK,SAAA2mB,GAAS,OAAAA,IAAUjuB,EAAMiuB,UAC/Etf,EAAAA,UAAUxN,KAAKyN,aACjBzL,UAAU,SAACnD,GAAyB,OAAA4B,EAAK6sB,cAAczuB,EAAMiuB,SAG/DY,EAAeliB,OAAOzI,KAClBiD,EAAAA,OAAO,SAAAnH,GAAS,OAAAA,aAAiBmuB,KACjCxf,EAAAA,UAAUxN,KAAKyN,aACjBzL,UAAU,SAAA4rB,GAAK,OAAAntB,EAAKotB,wBAK9BJ,EAAA9uB,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAEQA,KAAK0tB,gBACL1tB,KAAK2tB,SAASjhB,QAAQ,SAAAogB,GAAS,OAAArsB,EAAKitB,eAAeR,YAAYJ,MAIvEW,EAAA9uB,UAAAyB,YAAA,WACIJ,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,YAGpB2e,EAAA9uB,UAAAuuB,YAAA,SAAYJ,GAGJA,EAAMriB,WAKVzK,KAAK2tB,SAASjoB,KAAKonB,GAGnB9sB,KAAK8tB,eAAe3qB,KAAKnD,KAAK2tB,UAG9B3tB,KAAKqtB,aAAa,IAAIR,GAAYC,IAG9B9sB,KAAK0tB,gBACL1tB,KAAK0tB,eAAeR,YAAYJ,KAIxCW,EAAA9uB,UAAA2uB,cAAA,SAAcR,GAGV,IAAI3D,EAAQnpB,KAAK2tB,SAASjiB,UAAU,SAAA6hB,GAAiB,OAAAA,IAAkBT,KAGxD,IAAX3D,IAGAnpB,KAAK2tB,SAAS7gB,OAAOqc,EAAO,GAG5BnpB,KAAK8tB,eAAe3qB,KAAKnD,KAAK2tB,UAG9B3tB,KAAKqtB,aAAa,IAAIN,GAAcD,IAGhC9sB,KAAK0tB,gBACL1tB,KAAK0tB,eAAeJ,cAAcR,KAK9CW,EAAA9uB,UAAAkvB,YAAA,WAGI7tB,KAAK2tB,YAGL3tB,KAAKqtB,aAAa,IAAIL,IAGtBhtB,KAAK8tB,eAAe3qB,KAAKnD,KAAK2tB,WAGlCF,EAAA9uB,UAAAovB,qBAAA,SAAqBjB,GAGb9sB,KAAKguB,gBAAgBlB,GACrB9sB,KAAKstB,cAAcR,GAEnB9sB,KAAKktB,YAAYJ,IAKzBW,EAAA9uB,UAAAqvB,gBAAA,SAAgBlB,GAEZ,QAAS9sB,KAAK2tB,SAASxnB,KAAK,SAAAonB,GAAiB,OAAAA,IAAkBT,KAG3DW,EAAA9uB,UAAA0uB,sBAAaxuB,GACjBmB,KAAKwL,OAAOtJ,KAAKrD,wBAvHxBI,EAAAA,UAASC,OACNC,SAAU,gBACVC,SAAU,gDANL6tB,GAAuB1c,aAAApH,KAgBd8kB,EAAAA,cAnBE3qB,EAAAA,gDAafjE,EAAAA,8BACAkE,EAAAA,uBACAA,EAAAA,YAfL,GCAA2qB,GAAA,wCAekC,iBACD,sBACqB,IAAIrrB,EAAAA,oBAEtDqrB,EAAAvvB,UAAAwvB,aAAA,WAGQnuB,KAAKouB,YACLpuB,KAAKquB,UAAYruB,KAAKquB,SACtBruB,KAAKsuB,eAAenrB,KAAKnD,KAAKquB,gCAtBzCpvB,EAAAA,UAASC,OACNC,SAAU,kBACVC,SAAU,sKAEVgjB,MACImM,SAAY,IACZC,UAAW,iBACXC,gBAAiB,4FAKpBpvB,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,8BACAkE,EAAAA,YAjBL,6GCgCkC,cACD,WALYoN,EAAAA,EAAAA,uBAxB5C1R,EAAAA,UAASC,OACNC,SAAU,sBACVC,SAAU,2nCAwBTC,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,YALwCouB,iGCqBZ,sDAGE,mBAKOhtB,EAAKkC,YAAwC,yCAE/EmU,YAAa,GACb4X,WAAY,GACZC,cAAe,YAhB0Bhe,EAAAA,EAAAA,GAmB7Cie,EAAAjwB,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KA2BI,IAAK,IAAIgQ,KAxBLhQ,KAAKmtB,kBAAkB0B,EAAAA,WAGvB7uB,KAAK8uB,iBAAmBC,EAAAA,KAAK/uB,KAAKmtB,QAAQpqB,KAAK+D,EAAAA,IAAI,SAACqmB,GAGhD,OAAOA,EAAOnnB,OAAO,SAAA8mB,GAAS,OAACA,EAAMriB,WAChCzE,OAAO,SAAA8mB,GAAS,OAACrsB,EAAKktB,SAASxnB,KAAK,SAAAonB,GAAiB,OAAAA,IAAkBT,MACvE9mB,OAAO,SAAA8mB,GAAS,OAAAA,EAAMkC,MAAMC,cAAcC,SAASzuB,EAAK0uB,YAAYF,oBAM7EjvB,KAAK8uB,iBAAmBM,EAAAA,GAAGpvB,KAAKmtB,QAAQpqB,KAAK+D,EAAAA,IAAI,SAACqmB,GAG9C,OAAOA,EAAOnnB,OAAO,SAAA8mB,GAAS,OAACA,EAAMriB,WAChCzE,OAAO,SAAA8mB,GAAS,OAACrsB,EAAKktB,SAASxnB,KAAK,SAAAonB,GAAiB,OAAAA,IAAkBT,MACvE9mB,OAAO,SAAA8mB,GAAS,OAAAA,EAAMkC,MAAMC,cAAcC,SAASzuB,EAAK0uB,YAAYF,oBAKhEjvB,KAAKqvB,yBAGgC,IAA9CrvB,KAAKsvB,gBAAgBprB,eAAe8L,KACpChQ,KAAKsvB,gBAAgBtf,GAAQhQ,KAAKqvB,wBAAwBrf,KAKtE4e,EAAAjwB,UAAA4wB,aAAA,SAAaC,GAGLxvB,KAAK2tB,SAASxnB,KAAK,SAAA2mB,GAAS,OAAAA,IAAU0C,EAAgB3R,SAK1D7d,KAAKktB,YAAYsC,EAAgB3R,MAGjC7d,KAAKmvB,YAAc,KAGvBP,EAAAjwB,UAAA8wB,gBAAA,WAEI,IAAIC,EAAW1vB,KAAK2vB,eAAeC,cAAc,kBAGjDttB,WAAW,WAGP,IAAIutB,EAAgBH,EAASE,cAAc,8BAE3C,GAAIC,EAAe,CAGf,IAAIC,EAAgBD,EAAcra,wBAC9Bua,EAAiBL,EAASla,wBAE1Bsa,EAAcla,IAAMma,EAAena,MACnC8Z,EAASM,WAAaF,EAAcla,IAAMma,EAAena,KAGzDka,EAAcG,OAASF,EAAeE,SACtCP,EAASM,WAAaF,EAAcG,OAASF,EAAeE,gCA9H/EhxB,EAAAA,UAASC,OACNC,SAAU,0BACVC,SAAU,iyDAoCTC,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,YAP4CouB,uCA6G7CyC,EAAAvxB,UAAAygB,UAAA,SAAUha,EAAe+pB,GACrB,IAAIgB,EAAQ,IAAIC,OAAOjB,EAAa,KACpC,OAAO/pB,EAAMirB,QAAQF,EAAO,0CAA2C/qB,EAAMyS,MAAMsY,GAAM,6BANhG9Q,EAAAA,KAAIngB,OACDogB,KAAM,yECnJNgR,GAAkB,gBAuCpB,SAAAC,EAAsBC,GAAAxwB,KAAAwwB,mBAAAA,UAvBT,iBAAgBF,aAGd,2BAYO,uBAGG,mBAGX,IAAI/jB,EAAAA,eAKlBgkB,EAAA5xB,UAAAyB,YAAA,WACEJ,KAAKywB,YAAY3hB,YAInByhB,EAAA5xB,UAAA+xB,WAAA,WACE1wB,KAAKywB,YAAYvuB,QAInBquB,EAAA5xB,UAAAgyB,WAAA,SAAWC,GACT5wB,KAAK4wB,QAAUA,EACf5wB,KAAK6wB,cAAgBD,aAAmBxpB,EAAAA,YACxCpH,KAAKwwB,mBAAmBM,gBAI1BP,EAAA5xB,UAAAoyB,aAAA,SAAaC,GAENA,IAILhxB,KAAKgxB,UAAYA,EACjBhxB,KAAKwwB,mBAAmBM,iBAI1BP,EAAA5xB,UAAAsyB,SAAA,SAASC,GAEFA,IAILlxB,KAAKkxB,YAAcA,EACnBlxB,KAAKwwB,mBAAmBM,iBAI1BP,EAAA5xB,UAAAwyB,WAAA,SAAWC,GAEJA,IAILpxB,KAAKoxB,QAAUA,EACfpxB,KAAKwwB,mBAAmBM,iBAI1BP,EAAA5xB,UAAA0yB,QAAA,SAAQC,GAEDA,IAILtxB,KAAKsxB,KAAOA,EACZtxB,KAAKwwB,mBAAmBM,qCAjG3B7xB,EAAAA,UAASC,OACRC,SAAU,aACVC,SAAU,qaAOV2H,gBAAiBC,EAAAA,wBAAwBC,oDAfTsqB,EAAAA,0BCAlCC,GAAA,oCAMa,IAAIjlB,EAAAA,mCAFhBhK,EAAAA,qDAJD,GCAAkvB,GAAA,WA2EI,SAAAA,EACc9uB,EACA+uB,EACAC,EACAC,EACFpB,EACAtwB,EACA2xB,GANE7xB,KAAA2C,YAAAA,EACA3C,KAAA0xB,kBAAAA,EACA1xB,KAAA2xB,SAAAA,EACA3xB,KAAA4xB,kBAAAA,EACF5xB,KAAAwwB,mBAAAA,EACAxwB,KAAAE,UAAAA,EACAF,KAAA6xB,gBAAAA,mBA5DiC,aAGR,qCAME,eAGZ,iBAGW,yBAGH,aAAc,4BAGd,aAAc,mBAG/B,IAAIhvB,EAAAA,yBAGH,IAAIA,EAAAA,+BAGE,IAAIA,EAAAA,6BAGR,kBAYE,IAAI0J,EAAAA,mBAMD,iBAa1BklB,EAAA9yB,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAGI+B,EAAAA,UAAU/B,KAAK2C,YAAYnC,cAAe,SAASuC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAKjB,QAAQ4O,KAAK3N,OAChH+B,EAAAA,UAAU/B,KAAK2C,YAAYnC,cAAe,cAAcuC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAK8xB,aAAankB,KAAK3N,OAC1H+B,EAAAA,UAAU/B,KAAK2C,YAAYnC,cAAe,cAAcuC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAK+xB,aAAapkB,KAAK3N,OAC1H+B,EAAAA,UAAU/B,KAAK2C,YAAYnC,cAAe,SAASuC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAKgyB,QAAQrkB,KAAK3N,OAChH+B,EAAAA,UAAU/B,KAAK2C,YAAYnC,cAAe,QAAQuC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAKiyB,OAAOtkB,KAAK3N,OAG9GA,KAAK6xB,gBAAgBK,OAAOnvB,KACxBiD,EAAAA,OAAO,WAAM,MAAe,YAAfvF,EAAK0xB,QAClBnsB,EAAAA,OAAO,SAAAosB,GAAW,OAAAA,IAAY3xB,EAAK4xB,YACnC7kB,EAAAA,UAAUxN,KAAKyN,aACjBzL,UAAUhC,KAAKsyB,KAAK3kB,KAAK3N,OAGvBA,KAAKuyB,QACLvyB,KAAKwyB,QAQbf,EAAA9yB,UAAA8zB,YAAA,SAAYC,GAGJA,EAAO,SAAYA,EAAO,OAAQC,aAAeD,EAAO,OAAQlkB,eAAiBxO,KAAK4yB,YACtFF,EAAO,OAAQlkB,aAAexO,KAAKwyB,OAASxyB,KAAKsyB,QAIjDI,EAAO,WACP1yB,KAAK6yB,iBAGL7yB,KAAKqyB,WAAaK,EAAO,WACzB1yB,KAAKqyB,UAAUtB,aAAa2B,EAAO,UAAWlkB,cAG9CxO,KAAKqyB,WAAaK,EAAO,SACzB1yB,KAAKqyB,UAAU1B,WAAW+B,EAAO,QAASlkB,cAG1CxO,KAAKqyB,WAAaK,EAAO,aACzB1yB,KAAKqyB,UAAUpB,SAASyB,EAAO,YAAalkB,cAG5CxO,KAAKqyB,WAAaK,EAAO,SACzB1yB,KAAKqyB,UAAUlB,WAAWuB,EAAO,QAASlkB,cAG1CxO,KAAKqyB,WAAaK,EAAO,MACzB1yB,KAAKqyB,UAAUlB,WAAWuB,EAAO,KAAMlkB,eAK/CijB,EAAA9yB,UAAAyB,YAAA,WAGQJ,KAAK8yB,cACL9yB,KAAK8yB,YAAYC,UACjB/yB,KAAKqyB,UAAY,MAIrBryB,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,YAIpB2iB,EAAA9yB,UAAA6zB,KAAA,WAAA,IAAA/xB,EAAAT,KAGQA,KAAKyK,UAAYzK,KAAK4yB,WAAa5yB,KAAKgzB,iBAAmBhzB,KAAK4wB,UAKpE5wB,KAAKgzB,eAAiB/xB,OAAOqB,WAAW,WAGpC,IAAM2wB,EAAaxyB,EAAKyyB,gBAGxBzyB,EAAK0yB,QAAU1yB,EAAK2yB,eACpB3yB,EAAK4xB,UAAY5xB,EAAK4yB,eAAeJ,GAGrCxyB,EAAK4xB,UAAU5B,YAAY1tB,KAAKyK,EAAAA,UAAU/M,EAAKgN,aAAazL,UAAUvB,EAAKiwB,WAAW/iB,KAAKlN,IAG3FA,EAAKmyB,WAAY,EAGjBnyB,EAAKiwB,aAGLjwB,EAAK6yB,MAAMnwB,OACX1C,EAAK8yB,aAAarxB,MAAK,GAGvBzB,EAAKuyB,eAAiB,KAGtBvyB,EAAKoxB,gBAAgBK,OAAOhwB,KAAKzB,EAAK4xB,WAGtC5xB,EAAK+vB,mBAAmBgD,iBACzBxzB,KAAKiR,SAKZwgB,EAAA9yB,UAAA2zB,KAAA,WAGI,GAAItyB,KAAKgzB,eAGL,OAFA3G,aAAarsB,KAAKgzB,qBAClBhzB,KAAKgzB,eAAiB,MAItBhzB,KAAK8yB,aAAe9yB,KAAK8yB,YAAYW,eACrCzzB,KAAK8yB,YAAYY,SAGrB1zB,KAAK2zB,mBAAmB,MACxB3zB,KAAKqyB,UAAY,KAGjBryB,KAAK4yB,WAAY,EAGjB5yB,KAAK4zB,OAAOzwB,OACZnD,KAAKuzB,aAAarxB,MAAK,GAGvBlC,KAAKwwB,mBAAmBgD,iBAI5B/B,EAAA9yB,UAAA6L,OAAA,WACIxK,KAAK4yB,UAAY5yB,KAAKsyB,OAAStyB,KAAKwyB,QAIxCf,EAAA9yB,UAAA+xB,WAAA,WACQ1wB,KAAK4yB,WAAa5yB,KAAK8yB,aACvB9yB,KAAK8yB,YAAYe,kBAKfpC,EAAA9yB,UAAA00B,eAAV,SAAyBJ,GACrB,IAAMa,EAAWb,EAAWc,OAAO/zB,KAAKmzB,SAAqC,SAY7E,OATAW,EAASnD,WAAW3wB,KAAK4wB,SACzBkD,EAAS/C,aAAa/wB,KAAKgxB,WAC3B8C,EAAS7C,SAASjxB,KAAKkxB,aACvB4C,EAAS3C,WAAWnxB,KAAKoxB,SACzB0C,EAASzC,QAAQrxB,KAAKsxB,MAGtBtxB,KAAK2zB,mBAAmBG,EAASvpB,IAE1BupB,GAIDrC,EAAA9yB,UAAAy0B,aAAV,WACI,OAAOpzB,KAAKmzB,SAAW,IAAIa,EAAAA,gBAAgBzD,GAAkBvwB,KAAK0xB,oBAI9DD,EAAA9yB,UAAAu0B,yBAGJ,GAAIlzB,KAAK8yB,YACL,OAAO9yB,KAAK8yB,YAIhB,IAAMmB,EAAWj0B,KAAK2xB,SAASjrB,WAC1BwtB,YAAYl0B,KAAK2C,YAAa3C,KAAKm0B,YAAan0B,KAAKo0B,sBAGpDC,EAAsBr0B,KAAK4xB,kBAC5B0C,4BAA4Bt0B,KAAK2C,aAWtC,OATAsxB,EAASM,yBAAyBF,GAElCr0B,KAAK8yB,YAAc9yB,KAAK2xB,SAASrtB,QAC7BkwB,iBAAkBP,EAClBQ,WAAY,kBACZC,eAAgB10B,KAAK2xB,SAASgD,iBAAiBjE,YAAakE,eAAgB,IAC5EC,aAAa,IAGV70B,KAAK8yB,aAIRrB,EAAA9yB,UAAAk0B,0BAGA7yB,KAAK8yB,aAAe9yB,KAAK8yB,YAAYW,eACrCzzB,KAAK8yB,YAAYY,SAGjB1zB,KAAK8yB,cACL9yB,KAAK8yB,YAAYC,UACjB/yB,KAAK8yB,YAAc,MAGvB9yB,KAAK4yB,WAAY,GAIbnB,EAAA9yB,UAAAw1B,qBAKJ,OAFAn0B,KAAKgxB,UAAYhxB,KAAKgxB,WAAa,MAEb,OAAlBhxB,KAAKgxB,WAAwC,UAAlBhxB,KAAKgxB,WACvB8D,QAAS,SAAUC,QAAS/0B,KAAKgxB,WACjB,QAAlBhxB,KAAKgxB,WACH8D,QAAS,QAASC,QAAS,UACX,SAAlB/0B,KAAKgxB,WACH8D,QAAS,MAAOC,QAAS,eAD/B,GAMHtD,EAAA9yB,UAAAy1B,8BAKJ,OAFAp0B,KAAKgxB,UAAYhxB,KAAKgxB,WAAa,MAEb,OAAlBhxB,KAAKgxB,WACIgE,SAAU,SAAUC,SAAU,UACd,UAAlBj1B,KAAKgxB,WACHgE,SAAU,SAAUC,SAAU,OACd,QAAlBj1B,KAAKgxB,WACHgE,SAAU,MAAOC,SAAU,UACX,SAAlBj1B,KAAKgxB,WACHgE,SAAU,QAASC,SAAU,eADnC,GAUDxD,EAAA9yB,UAAAuwB,SAAV,SAAsBhX,EAAiB9S,GACnC,OAAOtB,MAAMmK,QAAQiK,MAAYA,EAAM/R,KAAK,SAAA0X,GAAQ,OAAAA,IAASzY,KAIvDqsB,EAAA9yB,UAAAI,QAAV,SAAkBF,GAGd,OAAKmB,KAAK4yB,WAAa5yB,KAAKkvB,SAASlvB,KAAKk1B,aAAc,SAC7Cl1B,KAAKwyB,OAIZxyB,KAAK4yB,WAAa5yB,KAAKkvB,SAASlvB,KAAKm1B,aAAc,SAC5Cn1B,KAAKsyB,YADhB,GAOMb,EAAA9yB,UAAAmzB,aAAV,SAAuBjzB,IAGfmB,KAAK4yB,WAAc5yB,KAAKkvB,SAASlvB,KAAKk1B,aAAc,eAKxDl1B,KAAKwyB,QAICf,EAAA9yB,UAAAozB,aAAV,SAAuBlzB,GAGdmB,KAAK4yB,WAAc5yB,KAAKkvB,SAASlvB,KAAKm1B,aAAc,eAKzDn1B,KAAKsyB,QAICb,EAAA9yB,UAAAqzB,QAAV,SAAkBnzB,IAGVmB,KAAK4yB,WAAc5yB,KAAKkvB,SAASlvB,KAAKk1B,aAAc,UAKxDl1B,KAAKwyB,QAICf,EAAA9yB,UAAAszB,OAAV,SAAiBpzB,GAGRmB,KAAK4yB,WAAc5yB,KAAKkvB,SAASlvB,KAAKm1B,aAAc,SAKzDn1B,KAAKsyB,QAIDb,EAAA9yB,UAAAy2B,qBACJ,OAAO9Y,SAASuT,gBAAkB7vB,KAAK2C,YAAYnC,eAI7CixB,EAAA9yB,UAAAg1B,mBAAV,SAA6BppB,GACd,OAAPA,EACAvK,KAAKE,UAAUm1B,gBAAgBr1B,KAAK2C,YAAYnC,cAAe,oBAE/DR,KAAKE,UAAUqB,aAAavB,KAAK2C,YAAYnC,cAAe,mBAAoB+J,wBA7Z3FnH,EAAAA,UAASlE,OACNC,SAAU,cACVkN,SAAU,0DATyB/I,EAAAA,kBAA8GgyB,EAAAA,wBAFlHC,EAAAA,eAAgDC,EAAAA,wBAE1EjE,EAAAA,yBAAqGxT,EAAAA,iBAKrGyT,uCASJnyB,EAAAA,MAAKH,MAAC,+BAGNG,EAAAA,MAAKH,MAAC,wCAGNG,EAAAA,MAAKH,MAAC,8BAGNG,EAAAA,MAAKH,MAAC,gCAGNG,EAAAA,MAAKH,MAAC,iCAGNG,EAAAA,MAAKH,MAAC,gCAGNG,EAAAA,yBAGAA,EAAAA,4BAGAA,EAAAA,4BAGAA,EAAAA,qBAGAkE,EAAAA,uBAGAA,EAAAA,6BAGAA,EAAAA,YApDL,GCAAkyB,GAAA,oDAQCl2B,EAAAA,SAAQL,OACPM,SACEC,EAAAA,aACAi2B,EAAAA,cACAC,EAAAA,iBAEFh2B,SAAU8xB,IACV7xB,cAAe2wB,GAAkBkB,IACjCpuB,WAAYmuB,IACZoE,iBAAkBrF,gDAjBpB,GCAAsF,GAAA,oDAECzyB,EAAAA,UAASlE,OACNC,SAAU,oEAHd,GCAA22B,GAAA,WAWI,SAAAA,EAAmB7X,GAAAje,KAAAie,WAAAA,6BATtB7a,EAAAA,UAASlE,OACNC,SAAU,oEAHamE,EAAAA,0DAQtBjE,EAAAA,WARL,GCCA,OAAc02B,OAAS,OAAcA,WAM9B,IAAMC,GAAsDC,GAAqCC,iECC3E,SAKzBC,EAAAx3B,UAAAy3B,mBAAA,WACI,MAAO,kBAAoBp2B,KAAKq2B,kBAMpCF,EAAAx3B,UAAA23B,SAAA,SAASC,EAAmBC,GAQxB,OANKx2B,KAAKy2B,QAAQF,KACdv2B,KAAKy2B,QAAQF,GAAa,IAAIG,IAGlC12B,KAAKy2B,QAAQF,GAAWD,SAASE,GAE1Bx2B,KAAKy2B,QAAQF,IAMxBJ,EAAAx3B,UAAAg4B,WAAA,SAAWJ,EAAmBC,GAE1B,IAAMI,EAAQ52B,KAAKy2B,QAAQF,GAEvBK,IACAA,EAAMD,WAAWH,GAEbI,EAAMC,YACND,EAAM/nB,iBAEC7O,KAAKy2B,QAAQF,MAQhCJ,EAAAx3B,UAAAm4B,WAAA,SAAWP,GAEP,IAAMK,EAAQ52B,KAAKy2B,QAAQF,GAM3B,OAJIK,GACAA,EAAME,aAGHF,GAMXT,EAAAx3B,UAAAo4B,SAAA,SAASH,GACL,OAAO52B,KAAKy2B,QAAQG,wBA/D3Br0B,EAAAA,wDA0GDm0B,GAAA,kCAEW,IAAI7zB,EAAAA,0BACD,IAAIA,EAAAA,uBACP,IAAIA,EAAAA,yBACF,IAAIA,EAAAA,yBACJ,IAAIA,EAAAA,+CAMTm0B,MAAOh3B,KAAKi3B,QAAQtpB,KAAK3N,cAM7B02B,EAAA/3B,UAAAk4B,QAAA,WACI,OAAmC,IAA5B72B,KAAKk3B,YAAYpyB,QAM5B4xB,EAAA/3B,UAAAw4B,mBAAA,SAAmBxvB,OACf,IAAwB,IAAAe,EAAA0uB,EAAAp3B,KAAKk3B,aAAWhP,EAAAxf,EAAAxG,QAAAgmB,EAAA7iB,KAAA6iB,EAAAxf,EAAAxG,OAAA,CAAnC,IACKm1B,EADUnP,EAAA9iB,MACQkyB,oBAAoB3vB,GAC5C,GAAI0vB,EACA,OAAOA,uGAIf,OAAO,cAMXX,EAAA/3B,UAAA23B,SAAA,SAASE,GACLx2B,KAAKk3B,YAAYxxB,KAAK8wB,GAElBx2B,KAAKqyB,YACLryB,KAAKqyB,UAAUkF,WAAav3B,KAAKk3B,YAAYpwB,IAAI,SAAC0wB,GAAM,OAAAA,EAAE7vB,WAGzD3H,KAAKgkB,QAAQyT,kBACdz3B,KAAKgkB,QAAQyT,gBAAkBjB,EAAU7uB,UAOjD+uB,EAAA/3B,UAAAg4B,WAAA,SAAWH,GACP,IAAMrN,EAAQnpB,KAAKk3B,YAAYhpB,QAAQsoB,GAC1B,GAATrN,IACAnpB,KAAKk3B,YAAYpqB,OAAOqc,EAAO,GAC3BnpB,KAAKqyB,YACLryB,KAAKqyB,UAAUkF,WAAav3B,KAAKk3B,YAAYpwB,IAAI,SAAC0wB,GAAM,OAAAA,EAAE7vB,aAQtE+uB,EAAA/3B,UAAAm4B,WAAA,WAAA,IAAAr2B,EAAAT,KAEQA,KAAKqyB,YAITryB,KAAKqyB,UAAY2D,GAAQh2B,KAAKk3B,YAAYpwB,IAAI,SAAC0wB,GAAM,OAAAA,EAAE7vB,UAAU3H,KAAKgkB,SAEtEhkB,KAAKqyB,UAAUqF,GAAG,OAAQ,SAAC/vB,EAAkB+V,GACzCjd,EAAKyb,KAAK/Y,MACNk0B,MAAO52B,EAAK02B,mBAAmBxvB,GAC/BA,QAASA,EACT+V,OAAQA,MAGhB1d,KAAKqyB,UAAUqF,GAAG,UAAW,SAAC/vB,GAC1BlH,EAAKuc,QAAQ7Z,MACTk0B,MAAO52B,EAAK02B,mBAAmBxvB,GAC/BA,QAASA,MAGjB3H,KAAKqyB,UAAUqF,GAAG,OAAQ,SAAC/vB,EAAkBqH,EAAiB0O,EAAiBia,GAC3El3B,EAAKm3B,KAAKz0B,MACNk0B,MAAO52B,EAAK02B,mBAAmBxvB,GAC/BA,QAASA,EACTqH,OAAQA,EACR0O,OAAQA,EACRia,QAASA,MAGjB33B,KAAKqyB,UAAUqF,GAAG,SAAU,SAAC/vB,GACzBlH,EAAKo3B,OAAO10B,MACRk0B,MAAO52B,EAAK02B,mBAAmBxvB,GAC/BA,QAASA,MAGjB3H,KAAKqyB,UAAUqF,GAAG,SAAU,SAAChb,EAAgB/U,EAAkBwB,GAC3D1I,EAAKq3B,OAAO30B,MACRuZ,MAAOA,EACP/U,QAASA,EACTwB,KAAMA,QAQlButB,EAAA/3B,UAAAkQ,QAAA,WACQ7O,KAAKqyB,YACLryB,KAAKqyB,UAAUxjB,UACf7O,KAAKqyB,UAAY,OAOjBqE,EAAA/3B,UAAAs4B,iBAAQtvB,EAAkBowB,EAA2BxiB,OACzD,IAAsB,IAAA7M,EAAA0uB,EAAAp3B,KAAKk3B,aAAWhP,EAAAxf,EAAAxG,QAAAgmB,EAAA7iB,KAAA6iB,EAAAxf,EAAAxG,OAAA,CAAjC,IAAIs0B,EAAStO,EAAA9iB,MACd,GAAIoxB,EAAU7uB,QAAQqwB,WAAWD,GAC7B,OAAOvB,EAAUS,QAAQtvB,EAASowB,EAAkBxiB,mHAhIpE,GC9GA0iB,GAAA,WA4BI,SAAAA,EACYt1B,EACAzC,EACAg4B,GAFAl4B,KAAA2C,YAAAA,EACA3C,KAAAE,UAAAA,EACAF,KAAAk4B,SAAAA,2BAlB2B,8BACJ,IAAIr1B,EAAAA,+BACd,IAAIA,EAAAA,gCACH,IAAIA,EAAAA,6BACP,IAAIA,EAAAA,4BAOsC,sBAExC,IAAI5C,EAAAA,oBAW7Bg4B,EAAAt5B,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAGSA,KAAKm4B,mBACNn4B,KAAKm4B,iBAAmBn4B,KAAKk4B,SAAS9B,sBAG1Cp2B,KAAKo4B,YACDzwB,QAAS3H,KAAK2C,YAAYnC,cAC1B82B,oBAAqBt3B,KAAKs3B,oBAAoB3pB,KAAK3N,MACnDi3B,QAASj3B,KAAKi3B,QAAQtpB,KAAK3N,OAI/B,IAAM42B,EAAQ52B,KAAKk4B,SAAS5B,SAASt2B,KAAKm4B,iBAAkBn4B,KAAKo4B,YACjEp4B,KAAKq4B,eAAev2B,IAAI80B,EAAM1a,KAAKla,UAAUhC,KAAKuX,OAAO5J,KAAK3N,QAC9DA,KAAKq4B,eAAev2B,IAAI80B,EAAM5Z,QAAQhb,UAAUhC,KAAKqX,UAAU1J,KAAK3N,QACpEA,KAAKq4B,eAAev2B,IAAI80B,EAAMgB,KAAK51B,UAAUhC,KAAKs4B,OAAO3qB,KAAK3N,QAC9DA,KAAKq4B,eAAev2B,IAAI80B,EAAMiB,OAAO71B,UAAU,SAACnD,GAAkC,OAAA4B,EAAK83B,cAAcp1B,MAAOwE,QAAS9I,EAAM8I,QAAS0vB,MAAOx4B,EAAMw4B,WACjJr3B,KAAKq4B,eAAev2B,IAAI80B,EAAMkB,OAAO91B,UAAUhC,KAAKw4B,QAAQ7qB,KAAK3N,SAGrEi4B,EAAAt5B,UAAA6N,gBAAA,WACIxM,KAAKk4B,SAASpB,WAAW92B,KAAKm4B,mBAMlCF,EAAAt5B,UAAAyB,YAAA,WACIJ,KAAKk4B,SAASvB,WAAW32B,KAAKm4B,iBAAkBn4B,KAAKo4B,YACrDp4B,KAAKq4B,eAAe/3B,eAGxB23B,EAAAt5B,UAAA4Y,OAAA,SAAO1Y,GAEHmB,KAAKy4B,UAAW,EAEhBz4B,KAAK04B,aAAav1B,MAAOwE,QAAS9I,EAAM8I,QAAS0vB,MAAOx4B,EAAMw4B,SAMlEY,EAAAt5B,UAAA25B,OAAA,SAAOz5B,GAGH,GAAKmB,KAAK24B,iBAAV,CAIA,IAAIC,GAAU,EAEd,GAAI/5B,EAAM6e,OAAOsa,WAAWh4B,KAAK2C,YAAYnC,eAI5B,IADP2oB,EAAQnpB,KAAK24B,iBAAiBzqB,QAAQrP,EAAMw4B,UAE9Cr3B,KAAK24B,iBAAiB7rB,OAAOqc,EAAO,GACpCyP,GAAU,GAIlB,GAAI/5B,EAAMmQ,OAAOgpB,WAAWh4B,KAAK2C,YAAYnC,eAAgB,CAGzD,IAAM2oB,EAAQtqB,EAAM84B,UAAY94B,EAAM84B,QAAQkB,UAAUC,SAAS,aAC7D94B,KAAK24B,iBAAiBzqB,QAAQlO,KAAKs3B,oBAAoBz4B,EAAM84B,UAC7D33B,KAAK24B,iBAAiB7zB,OAG1B9E,KAAK24B,iBAAiB7rB,OAAOqc,EAAO,EAAGtqB,EAAMw4B,OAC7CuB,GAAU,EAIVA,GACA54B,KAAK+4B,uBAAuB51B,KAAKnD,KAAK24B,oBAQ9CV,EAAAt5B,UAAA24B,oBAAA,SAAoB3vB,GAEhB,IAAM0vB,EAAQr3B,KAAKg5B,OAAO7yB,KAAK,SAAA8yB,GAAU,OAAAA,EAAOhb,WAAWzd,gBAAkBmH,IAE7E,OAAK0vB,EAIEA,EAAM6B,mBAHF,MASfjB,EAAAt5B,UAAA0Y,UAAA,SAAUxY,GAENmB,KAAKy4B,UAAW,EAEZz4B,KAAK2C,YAAYnC,cAAcs4B,SAASj6B,EAAM8I,WAE9C3H,KAAKE,UAAUmd,YAAYxe,EAAM8I,QAAS,yBAE1C3H,KAAKm5B,WAAWh2B,MACZwE,QAAS9I,EAAM8I,QACf0vB,MAAOx4B,EAAMw4B,UASzBY,EAAAt5B,UAAA65B,QAAA,SAAQ35B,GAEAmB,KAAK2C,YAAYnC,cAAcs4B,SAASj6B,EAAM8I,WAE9C3H,KAAKo5B,mBAAmBv6B,EAAM8I,QAAS9I,EAAM6d,OAC7C1c,KAAKq5B,gBAAgBx6B,EAAM8I,QAAS9I,EAAM6d,OAE1C1c,KAAKE,UAAU0c,SAAS/d,EAAM8I,QAAS,2BAQ/CswB,EAAAt5B,UAAAs4B,QAAA,SAAQtvB,EAAkB6uB,EAAoBjhB,GAC1C,OAAIvV,KAAKs5B,qBAGsB,IAAxBt5B,KAAKu5B,QAAQz0B,UAAwB9E,KAAKu5B,QAAQpzB,KAAK,SAAAqzB,GAAW,OAAAA,EAAQh5B,gBAAkB+U,MAG/F0iB,EAAAt5B,UAAAy6B,4BAAmB1b,EAAiB1O,GAGxC,GAAuB,OAAnB0O,EAAO+b,QAAX,CAKA,IAAMC,EAAc51B,MAAMirB,KAAKrR,EAAOI,UAChC6b,EAAc71B,MAAMirB,KAAK/f,EAAO8O,UAGtC4b,EAAYhtB,QAAQ,SAACktB,EAAMnuB,GAAQ,OAAAkuB,EAAYluB,GAAKmS,MAAMvK,SAAWnS,iBAAiB04B,GAAMz4B,iBAAiB,aAGzG82B,EAAAt5B,UAAA06B,yBAAgB3b,EAAiB1O,GAGrC,IAAM6qB,EAAiB/1B,MAAMirB,KAAKrR,EAAOoc,iBAAiB,WACnCh2B,MAAMirB,KAAK/f,EAAO8qB,iBAAiB,WAG3ChzB,IAAI,SAAAizB,GAAU,OAAAA,EAAOC,WAAW,QAC1CttB,QAAQ,SAAC0kB,EAAS3lB,GAAQ,OAAA2lB,EAAQ6I,UAAUJ,EAAepuB,GAAM,EAAG,0BAlMhFrI,EAAAA,UAASlE,OACNC,SAAU,+DAPsCmE,EAAAA,kBAAoFya,EAAAA,iBAIYoY,gDAO/I92B,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,sCACAkE,EAAAA,6BACAA,EAAAA,8BACAA,EAAAA,2BACAA,EAAAA,wBAEAwJ,EAAAA,gBAAe7N,MAAC22B,IAA8B1uB,KAAM7D,EAAAA,WAAY42B,aAAa,oBAC7EntB,EAAAA,gBAAe7N,MAAC42B,sBAIhB5sB,EAAAA,YAAWhK,MAAC,8CAxBjB,GCAAi7B,GAAA,oDAOC56B,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJG,cACIq4B,GACApC,GACAC,IAEJn2B,SACIs4B,GACApC,GACAC,IAEJzyB,WACI8yB,gDAtBR,GCaM9X,IACF4O,GACAiB,GACAT,GACA2M,GACAxL,GACAsB,2DAGH3wB,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyL,EAAAA,YACAD,EACAwqB,GACA0E,GACAE,EAAAA,gBAAgBC,WAEpB36B,QAAS0e,GACTze,aAAcye,kDChClBkc,GAEI,SACWvL,EACAwL,EACAC,EACAhwB,EACAF,yCAJAvK,KAAAgvB,MAAAA,EACAhvB,KAAAw6B,KAAAA,EACAx6B,KAAAy6B,MAAAA,EACAz6B,KAAAyK,SAAAA,EACAzK,KAAAuK,GAAAA,GCPfmwB,GAAA,2DAuBsD,IAAI73B,EAAAA,yBACR,IAAIA,EAAAA,oBAGlD63B,EAAA/7B,UAAAg8B,UAAA,SAAU30B,GACNhG,KAAK46B,QAAQl1B,KAAKM,GAClBhG,KAAKwL,OAAOtJ,KAAK,IAAI24B,GAAe70B,IACpChG,KAAK86B,cAAc33B,KAAKnD,KAAK46B,UAGjCF,EAAA/7B,UAAAo8B,aAAA,SAAa/0B,GACT,IAAIyF,EAAMzL,KAAK46B,QAAQlvB,UAAU,SAAAkvB,GAAW,OAAAA,IAAY50B,KAE3C,IAATyF,IACAzL,KAAK46B,QAAQ9tB,OAAOrB,EAAK,GACzBzL,KAAKwL,OAAOtJ,KAAK,IAAI84B,GAAkBh1B,IACvChG,KAAK86B,cAAc33B,KAAKnD,KAAK46B,WAIrCF,EAAA/7B,UAAAs8B,UAAA,WACIj7B,KAAKwL,OAAOtJ,KAAK,IAAIg5B,yBA1C5Bj8B,EAAAA,UAASC,OACNC,SAAU,sBACVC,SAAU,2yBAiBTC,EAAAA,4BACAA,EAAAA,6BACAkE,EAAAA,uBACAA,EAAAA,YAxBL,GAwDAs3B,GACI,SAAmB70B,GAAAhG,KAAAgG,OAAAA,GAGvBg1B,GACI,SAAmBh1B,GAAAhG,KAAAgG,OAAAA,GAGvBk1B,gBC/DAC,GAAA,WAcI,SAAAA,EAA4BC,GAAAp7B,KAAAo7B,iBAAAA,EACxBp7B,KAAKK,cAAgB+6B,EAAiB5vB,OAAOzI,KAAKiD,EAAAA,OAAO,SAAAnH,GAAS,OAAAA,aAAiBq8B,MAAuBl5B,UAAUhC,KAAK+6B,aAAaptB,KAAK3N,cAG/Im7B,EAAAx8B,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvB66B,EAAAx8B,UAAAg8B,UAAA,SAAUU,GACDA,EAAQC,SACTt7B,KAAKo7B,iBAAiBT,UAAUU,IAIxCF,EAAAx8B,UAAAo8B,aAAA,SAAaM,GACJA,GAILr7B,KAAKo7B,iBAAiBL,aAAaM,wBA5B1Cj4B,EAAAA,UAASlE,OACNC,SAAU,8DAHGu7B,GAAwBnqB,aAAApH,KAWxB8kB,EAAAA,2CAJZ5uB,EAAAA,WAVL,qFCmB6CsR,EAAAA,EAAAA,GAMzC4qB,EAAA58B,UAAAo8B,aAAA,WACIrqB,EAAA/R,UAAMo8B,aAAY/7B,KAAAgB,KAACA,KAAK2tB,UACxB3tB,KAAK2tB,SAAW3tB,KAAKs7B,SAGzBC,EAAA58B,UAAAmE,SAAA,WACI9C,KAAK2tB,SAAW3tB,KAAKs7B,SAGzBC,EAAA58B,UAAA68B,aAAA,SAAax1B,GACThG,KAAK+6B,eACL/6B,KAAK2tB,SAAW3nB,EAChBhG,KAAK26B,UAAU36B,KAAK2tB,+BAlC3B1uB,EAAAA,UAASC,OACNC,SAAU,qBACVC,SAAU,ivBAgBTC,EAAAA,YAFwC87B,uGC0CrCrkB,YAAa,GACb6X,cAAe,oBAIM,+BAdehe,EAAAA,EAAAA,GAiBxC8qB,EAAA98B,UAAA+8B,SAAA,WAAA,IAAAj7B,EAAAT,KACI,OAAOA,KAAK46B,QAAQ50B,OAAO,SAAA6X,GAAQ,OAAAA,IAASpd,EAAK66B,UAASx0B,IAAI,SAAA+W,GAAQ,OAAAA,EAAKyB,QAG/Emc,EAAA98B,UAAAmE,SAAA,WACI9C,KAAK2tB,SAAW3tB,KAAKs7B,QACrBt7B,KAAK27B,eAAiB37B,KAAK07B,WAEvB17B,KAAK6R,SAAW7R,KAAK6R,QAAQ+pB,oBAAsB57B,KAAK6R,QAAQ+pB,mBAAqB,GAAK57B,KAAK46B,QAAQ91B,SACvG9E,KAAK67B,eAAgB,IAI7BJ,EAAA98B,UAAA4wB,aAAA,SAAaC,GACTxvB,KAAK+6B,eACL,IAAItvB,EAAMzL,KAAK46B,QAAQlvB,UAAU,SAAA1F,GAAU,OAAAA,EAAOsZ,OAASkQ,EAAgBpqB,QAC3EpF,KAAK2tB,SAAW3tB,KAAK46B,QAAQnvB,GAC7BzL,KAAK26B,UAAU36B,KAAK2tB,UACpB3tB,KAAKmvB,YAAc,GACnBnvB,KAAK0vB,SAAS4C,QAGlBmJ,EAAA98B,UAAAm9B,SAAA,SAASj9B,GAKL,IAHA,IAAImQ,EAASnQ,EAA2B,OACpCk9B,GAAe,EAEZ/sB,GAA8B,SAApBA,EAAOgtB,UAAqB,CACzC,GAAIhtB,EAAO6pB,UAAUC,SAAS,qBAAsB,CAChDiD,GAAe,EACf,MAEA/sB,EAASA,EAAOitB,cAIpBF,IACA/7B,KAAKmvB,YAAc,GACnBnvB,KAAK0vB,SAAS4C,SAKtBmJ,EAAA98B,UAAAo8B,aAAA,WACQ/6B,KAAK2tB,WAAa3tB,KAAKs7B,UACvB5qB,EAAA/R,UAAMo8B,aAAY/7B,KAAAgB,KAACA,KAAK2tB,UACxB3tB,KAAK2tB,SAAW3tB,KAAKs7B,SAEzBt7B,KAAKmvB,YAAc,IAGvBsM,EAAA98B,UAAA68B,aAAA,SAAax1B,GACThG,KAAK+6B,eACL/6B,KAAK2tB,SAAW3nB,EAChBhG,KAAK26B,UAAU36B,KAAK2tB,+BAtH3B1uB,EAAAA,UAASC,OACNC,SAAU,oBACVC,SAAU,m8DAyCVgjB,MACI8Z,mBAAoB,+FAKvB78B,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,wBAEA+J,EAAAA,UAASlK,MAACi9B,EAAAA,2BAN6BhB,IC1CtC9c,IACF8c,GACAT,GACAa,GACAE,2DAGHl8B,EAAAA,SAAQL,OACLM,SACI48B,EAAAA,iBAAiB9B,UACjBD,EAAAA,gBAAgBC,UAChB7E,GACAvqB,EAAAA,YACAzL,EAAAA,cAEJE,QAAS0e,GACTze,aAAcye,kDC3BlBge,GAAA,uCAsBoD,0BACC,mBACxB,gBACC,kBACE,qBACqB,IAAIx5B,EAAAA,oBAErDw5B,EAAA19B,UAAA29B,WAAA,SAAWzwB,GACP7L,KAAKu8B,QAAU1wB,EACf7L,KAAKw8B,cAAcr5B,KAAKnD,KAAKu8B,UAGjCF,EAAA19B,UAAA89B,cAAA,WACIz8B,KAAKs8B,YAAYt8B,KAAKu8B,UAGHF,EAAA19B,UAAA+9B,wBAGE,UAAjB18B,KAAK28B,SACL38B,KAAKy8B,iBAIeJ,EAAA19B,UAAAi+B,sBAEH,UAAjB58B,KAAK28B,SACL38B,KAAKs8B,YAAW,IAIID,EAAA19B,UAAAk+B,qBACH,UAAjB78B,KAAK28B,SACL38B,KAAKs8B,YAAW,wBArD3Br9B,EAAAA,UAASC,OACNC,SAAU,oBACVC,SAAU,sdAUVgjB,MACI0a,qBAAsB,6BACtBC,mBAAoB,4BAExB1wB,SAAU,iGAIThN,EAAAA,uBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,6BACAkE,EAAAA,6BAWAy5B,EAAAA,aAAY99B,MAAC,6BAQb89B,EAAAA,aAAY99B,MAAC,iCAOb89B,EAAAA,aAAY99B,MAAC,mBArDlB,0DA6DCkE,EAAAA,UAASlE,OACNC,SAAU,gIAIbiE,EAAAA,UAASlE,OACNC,SAAU,wECnEd89B,GAAA,oDAIC19B,EAAAA,SAAQL,OACLS,SAAU08B,GAAwBa,GAA4BC,IAC9Dv9B,cAAey8B,GAAwBa,GAA4BC,gDANvE,GCAAC,GAAA,mCAMY,IAAIz8B,EAAAA,iBAAyB,UAErCy8B,EAAAz+B,UAAA0+B,KAAA,WACIr9B,KAAKs9B,MAAMp7B,MAAK,IAGpBk7B,EAAAz+B,UAAA6L,OAAA,WACIxK,KAAKs9B,MAAMp7B,MAAMlC,KAAKs9B,MAAM71B,aAGhC21B,EAAAz+B,UAAA4+B,MAAA,WACIv9B,KAAKs9B,MAAMp7B,MAAK,wBAdvBK,EAAAA,qDAHD,GCAAi7B,GAAA,WAoCI,SAAAA,EAAmBC,EAA2C96B,GAA3C3C,KAAAy9B,IAAAA,EAA2Cz9B,KAAA2C,YAAAA,iBALV,aAOpD66B,EAAA7+B,UAAA6N,gBAAA,WAAA,IAAA/L,EAAAT,KACIA,KAAKK,cAAgBL,KAAKy9B,IAAIH,MAAMv6B,KAAKiD,EAAAA,OAAO,SAAAq3B,GAAQ,OAAS,IAATA,KACnDr7B,UAAU,WAAM,OAAAvB,EAAKi9B,SAAShxB,QAAQ,SAAA0lB,GAAW,OAAAA,EAAQE,YAGlEkL,EAAA7+B,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAM4Bk9B,EAAA7+B,UAAA4+B,eAAMvuB,GAChDhP,KAAK2C,YAAYnC,cAAcs4B,SAAS9pB,IACzChP,KAAKy9B,IAAIF,6BA7CpBt+B,EAAAA,UAASC,OACNC,SAAU,6BACVC,SAAU,2NAKViE,WAAY+5B,IACZr2B,gBAAiBC,EAAAA,wBAAwBC,OACzC02B,qBAAqB,EACrBC,YACIjB,EAAAA,QAAQ,gBACJkB,EAAAA,WAAW,gBACPC,EAAAA,MAAM,4BAA6BlgB,EAAAA,OAAQmgB,QAAS,KACpDD,EAAAA,MAAM,4BAA6BE,EAAAA,QAAQ,GAAIC,EAAAA,QAAQ,IAAKrgB,EAAAA,OAAQmgB,QAAS,SAEjFF,EAAAA,WAAW,gBACPC,EAAAA,MAAM,4BAA6BE,EAAAA,SAAS,GAAIC,EAAAA,QAAQ,IAAKrgB,EAAAA,OAAQmgB,QAAS,yDAnBrFX,UAJoE95B,EAAAA,iDA8BxEjE,EAAAA,wBACA0N,EAAAA,gBAAe7N,MAACuyB,EAAAA,iCAkBhBuL,EAAAA,aAAY99B,MAAC,kBAAmB,uBAlDrC,GCAAg/B,GAAA,WAwBI,SAAAA,EAAsCC,EAAwBV,GAAAz9B,KAAAy9B,IAAAA,gBAJpC,gBAEP,EAGfz9B,KAAKm+B,QAAsB,OAAZA,6BAtBtBl/B,EAAAA,UAASC,OACNC,SAAU,4BACVC,SAAU,0VASV2H,gBAAiBC,EAAAA,wBAAwBC,OACzC02B,qBAAqB,2EASRS,EAAAA,UAASl/B,MAAC,wBAvBlBk+B,oCAkBJ/9B,EAAAA,wBACA6J,EAAAA,iBApBL,GCAAm1B,GAAA,oDAMC9+B,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJE,SACI69B,GACAU,IAEJt+B,cACI49B,GACAU,gDAhBR,0CCUa,IAAIv9B,EAAAA,0CAQb29B,EAAA3/B,UAAA4/B,YAAA,SAAYC,GAGRx+B,KAAKy+B,MAAQD,EAGbx+B,KAAK0+B,OAAS1+B,KAAK2+B,YAAYH,GAG/Bx+B,KAAK4+B,OAAO18B,KAAKlC,KAAK6+B,oBAAoBL,KAQ9CF,EAAA3/B,UAAAmgC,WAAA,SAAWC,GAGP/+B,KAAK6tB,cAGL7tB,KAAKwG,OAAOu4B,GAGZ/+B,KAAK4+B,OAAO18B,KAAKlC,KAAK6+B,oBAAoB7+B,KAAKy+B,SAMnDH,EAAA3/B,UAAAqgC,YAAA,SAAYD,GAAZ,IAAAt+B,EAAAT,KAEI,GAAI8D,MAAMmK,QAAQ8wB,EAAKjhB,UACnB,OAAOsR,EAAAA,IAAK6P,SAAS,EAAOnhB,SAAUihB,EAAKjhB,WAG/C,IAAMohB,EAA4CH,EAAKjhB,SAGvD,OAAO+Q,EAAAA,WAAWvqB,OAAO,SAAC66B,GAEtBA,EAASj9B,MAAO+8B,SAAS,EAAMnhB,cAG/BohB,EAAUn8B,KAAK+lB,EAAAA,SAAS9mB,UAAU,SAAA8b,GAG9BihB,EAAKjhB,SAAWA,EAGhBrd,EAAK89B,YAAY99B,EAAKg+B,OAGtBU,EAASj9B,MAAO+8B,SAAS,EAAOnhB,SAAUA,IAG1CqhB,EAASrwB,gBAQbwvB,EAAA3/B,UAAA6H,gBAAOu4B,GACXA,EAAKpR,UAAW,EAEZoR,EAAKzzB,QACLtL,KAAKwG,OAAOu4B,EAAKzzB,SAOjBgzB,EAAA3/B,UAAAkvB,uBACJ7tB,KAAK0+B,OAAOhyB,QAAQ,SAAAqyB,GAAQ,OAAAA,EAAKpR,UAAW,KAQxC2Q,EAAA3/B,UAAAggC,qBAAYI,cAGhB,IAAKA,EAAKjhB,UAAYihB,EAAKjhB,oBAAoB+Q,EAAAA,YAAuC,IAAzBkQ,EAAKjhB,SAAShZ,OACvE,OAAQi6B,GAIZA,EAAKjhB,SAASpR,QAAQ,SAAA0yB,GAAS,OAAAA,EAAM9zB,OAASyzB,IAG9C,IAAM7E,EAAc6E,EAAKjhB,SAASpJ,OAA2B,SAAC2qB,EAAOC,GAAY,OAAA15B,EAAIy5B,EAAU5+B,EAAKk+B,YAAYW,SAEhH,OAAA15B,GAAQm5B,GAAS7E,IAMboE,EAAA3/B,UAAAkgC,6BAAoBE,GAExB,GAAIA,EAAKjhB,oBAAoB+Q,EAAAA,WACzB,OAAQkQ,GAIZ,IAGMK,GAHWL,EAAKjhB,cAGC3X,KAAK,SAAAo5B,GAAU,OAAAA,EAAO5R,WAG7C,OAAOyR,EAAKx5B,GAAIm5B,GAAS/+B,KAAK6+B,oBAAoBO,KAAWL,wBAjIpEx8B,EAAAA,wDCPDi9B,GAAA,WAuJI,SAAAA,EAAmBC,GAAnB,IAAAh/B,EAAAT,KAAmBA,KAAAy/B,aAAAA,sBATQ,IAAI58B,EAAAA,4BAInB,IAAIlC,EAAAA,iBAAyB,uBACxB,IAAIA,EAAAA,uCAEG,IAAIV,EAAAA,aAKxB,IAAM0tB,EAAW8R,EAAab,OAAO58B,UAAU,SAAAq9B,GAAS,OAAA5+B,EAAKqtB,eAAe3qB,KAAsB,IAAjBk8B,EAAMv6B,OAAe,KAAOu6B,EAAMA,EAAMv6B,OAAS,MAC5H8zB,EAAU6G,EAAab,OAAO77B,KAAKC,EAAAA,aAAa,IAAIhB,UAAU,WAAM,OAAAvB,EAAKi/B,mBAG/E1/B,KAAKK,cAAcyB,IAAI6rB,GACvB3tB,KAAKK,cAAcyB,IAAI82B,gCA3Bd4G,EAAA7gC,UAAA,qBAAKogC,GACd/+B,KAAKy/B,aAAalB,YAAYQ,0DAGrBS,EAAA7gC,UAAA,yBAASogC,GAClB/+B,KAAKy/B,aAAaX,WAAWC,oCAyBjCS,EAAA7gC,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eASvBk/B,EAAA7gC,UAAA+gC,eAAA,WAAA,IAAAj/B,EAAAT,KAEI,GAAKA,KAAK2/B,SAAV,CAKQ,IAAAn/B,EAAAR,KAAA2/B,SAAAn/B,cAMR,GAHAR,KAAK4/B,UAAU19B,KAAK1B,EAAc0H,YAAc1H,EAAcK,aAG1DL,EAAc0H,YAAc1H,EAAcK,YAAa,CAGvD,IAAMg/B,EAAiBr/B,EAAc0H,YAAc1H,EAAcK,YAGjEb,KAAK8/B,eAAe59B,KAChBlC,KAAKq/B,MAAMr5B,OAAO,SAAA+4B,GAAQ,OAAAA,EAAKv+B,cAAciI,WAAao3B,IACrD/4B,IAAI,SAACi4B,EAAM5V,GAAU,OAAA1oB,EAAKg/B,aAAab,OAAOx5B,MAAM+jB,MAI7DnpB,KAAK2/B,SAASn/B,cAAcu/B,WAAaF,yBA/LpD5gC,EAAAA,UAASC,OACNC,SAAU,mBACVC,SAAU,m3IAuHV2H,gBAAiBC,EAAAA,wBAAwBC,OACzC+4B,eAAgB1B,iDA5HOA,oCAgItBj/B,EAAAA,wBAIAA,EAAAA,gCAIAA,EAAAA,8BAEAkE,EAAAA,yBACA6F,EAAAA,UAASlK,MAAC,2BACV+gC,EAAAA,aAAY/gC,MAAC,oBAhJlB,GCAAghC,GAAA,WASI,SAAAA,EAAoBv9B,GAAA3C,KAAA2C,YAAAA,sBAFO,IAAIE,EAAAA,oBAK/Bq9B,EAAAvhC,UAAAwhC,eAAMthC,GACEmB,KAAK2C,YAAYnC,gBAAkB3B,EAAMmQ,QAAWhP,KAAK2C,YAAYnC,cAAcs4B,SAASj6B,EAAMmQ,SAClGhP,KAAKogC,eAAej9B,KAAKtE,wBAZpCuE,EAAAA,UAASlE,OACNC,SAAU,gEAH4BmE,EAAAA,sDAOrCC,EAAAA,sBAIAy5B,EAAAA,aAAY99B,MAAC,kBAAmB,gBAXrC,GCAAmhC,GAAA,oDAIC9gC,EAAAA,SAAQL,OACLS,SAAUugC,IACVtgC,cAAesgC,gDANnB,GCIII,GAAkB,wFAiBP,iBAAgBA,mBAMb,IAAI/zB,EAAAA,iBATgBoE,EAAAA,EAAAA,GAYpC4vB,EAAA5hC,UAAA6hC,SAAA,SAASxR,GACPhvB,KAAKgvB,MAAQA,EACbhvB,KAAKwwB,mBAAmBM,oCA1B3B7xB,EAAAA,UAASC,OACRC,SAAU,aACVC,SAAU,6gBAQV2H,gBAAiBC,EAAAA,wBAAwBC,oDAELspB,mGCOW,UAGR,+BAME,kBAGJ,yBAGA,QAAS,eAAgB,uBAGJ,UAY9B,mBA1CQ5f,EAAAA,EAAAA,GA6ClC8vB,EAAA9hC,UAAAmE,SAAA,WAGIf,EAAAA,UAAUua,SAAU,WAAWvZ,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAK0gC,UAAU/yB,KAAK3N,OAG9FA,KAAK2gC,iBAAmB3gC,KAAK2C,YAAYnC,cAAcogC,aAAa,oBAGpElwB,EAAA/R,UAAMmE,SAAQ9D,KAAAgB,OAOlBygC,EAAA9hC,UAAA8zB,YAAA,SAAYC,GACRhiB,EAAA/R,UAAM8zB,YAAWzzB,KAAAgB,KAAC0yB,GAEd1yB,KAAKqyB,WAAaK,EAAO,OACzB1yB,KAAKqyB,UAAUmO,SAAS9N,EAAO,MAAOlkB,eAIpCiyB,EAAA9hC,UAAA00B,eAAV,SAAyBJ,GACrB,IAAMa,EAAWb,EAAWc,OAAO/zB,KAAKmzB,SAAqC,SAgB7E,OAbAW,EAAS0M,SAASxgC,KAAKgvB,OACvB8E,EAASnD,WAAW3wB,KAAK4wB,SACzBkD,EAAS/C,aAAa/wB,KAAKgxB,WAC3B8C,EAAS7C,SAASjxB,KAAKkxB,aACvB4C,EAAS3C,WAAWnxB,KAAKoxB,SACzB0C,EAASzC,QAAQrxB,KAAKsxB,MAGtBtxB,KAAK2zB,mBAAmBG,EAASvpB,IAGjCupB,EAAS+M,cAAc99B,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAK8gC,eAAenzB,KAAK3N,OAEpF8zB,GAGD2M,EAAA9hC,UAAAy0B,aAAV,WACI,OAAOpzB,KAAKmzB,SAAW,IAAIa,EAAAA,gBAAgBuM,GAAkBvgC,KAAK0xB,oBAG9D+O,EAAA9hC,UAAA+hC,mBAAU7hC,GAGVmB,KAAK4yB,WAAa/zB,EAAMkiC,UAAYC,EAAAA,QAAUhhC,KAAKkvB,SAASlvB,KAAKm1B,aAAc,WAC/En1B,KAAKsyB,QAILmO,EAAA9hC,UAAAmiC,0BAEA9gC,KAAK4yB,WAAa5yB,KAAKkvB,SAASlvB,KAAKm1B,aAAc,iBACnDn1B,KAAKsyB,QAKHmO,EAAA9hC,UAAAg1B,mBAAV,SAA6BppB,IAGK,IAA1BvK,KAAK2gC,kBAAsD,iBAAjB3gC,KAAK4wB,SAC/ClgB,EAAA/R,UAAMg1B,mBAAkB30B,KAAAgB,KAACuK,wBArHpCnH,EAAAA,UAASlE,OACNC,SAAU,cACVkN,SAAU,wFAKThN,EAAAA,MAAKH,MAAC,4BAGNG,EAAAA,MAAKH,MAAC,kCAGNG,EAAAA,MAAKH,MAAC,wCAGNG,EAAAA,MAAKH,MAAC,8BAGNG,EAAAA,MAAKH,MAAC,gCAGNG,EAAAA,MAAKH,MAAC,iCAGNG,EAAAA,MAAKH,MAAC,sCAGNG,EAAAA,4BAGAA,EAAAA,yBAGA6J,EAAAA,YAAWhK,MAAC,4BA9BqBuyB,ICbtCwP,GAAA,oDASC1hC,EAAAA,SAAQL,OACPM,SACEC,EAAAA,aACAi2B,EAAAA,cACAC,EAAAA,gBACA0K,GACA5K,IAEF91B,SAAU8gC,IACV7gC,cAAe2gC,GAAkBE,IACjC7K,iBAAkB2K,gDAnBpB,GCAAW,GAAA,oDAOC3hC,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACA+D,EACA+oB,GACA0U,IAEJthC,SAAU6/B,IACV5/B,cAAe4/B,gDAfnB,GCAA2B,GAAA,mCAMY,IAAIxgC,EAAAA,iBAAyB,UAErCwgC,EAAAxiC,UAAA0+B,KAAA,WACIr9B,KAAKs9B,MAAMp7B,MAAK,IAGpBi/B,EAAAxiC,UAAA4+B,MAAA,WACIv9B,KAAKs9B,MAAMp7B,MAAK,wBAVvBK,EAAAA,qDAHD,GCAA6+B,GAAA,WAqGI,SAAAA,EACcC,EACF1+B,GADE3C,KAAAqhC,QAAAA,EACFrhC,KAAA2C,YAAAA,eAjEH,gBAG0B,oBAGV,eAGF,gBAIf,gBAIE,6BAGa,kBAGV,IAAIE,EAAAA,0CAjCbu+B,EAAAziC,UAAA,uBACA,OAAOqB,KAAKqhC,QAAQ/D,MAAMl4B,WAG9B,SAASA,GACLpF,KAAKqhC,QAAQ/D,MAAMp7B,KAAKkD,oCA8B5BzB,OAAA2G,eAAI82B,EAAAziC,UAAA,gBAAJ,WACI,OAAIqB,KAAKshC,OACE,SAEW,cAAlBthC,KAAKuhC,SACE,WAEJ,yCAGX59B,OAAA2G,eAAI82B,EAAAziC,UAAA,gBAAJ,WACI,MAA0B,iBAAfqB,KAAKY,MACU,IAAfZ,KAAKY,MAAc,IAAMZ,KAAKY,MAAQ,KAE1CZ,KAAKY,uCAGhB+C,OAAA2G,eAAI82B,EAAAziC,UAAA,cAAJ,WACI,MAAwB,iBAAbqB,KAAK4V,IACQ,IAAb5V,KAAK4V,IAAY,IAAM5V,KAAK4V,IAAM,KAEtC5V,KAAK4V,2DAIZwrB,EAAAziC,UAAA,iCACA,OAAIqB,KAAKshC,OACEthC,KAAKq9B,KAAOr9B,KAAKwhC,SAAW,IAEhC,sCAGX79B,OAAA2G,eAAI82B,EAAAziC,UAAA,iBAAJ,WACI,OAAOqB,KAAKshC,OAAS,OAASthC,KAAKwhC,0CAUvCJ,EAAAziC,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KACIA,KAAKK,cAAgBL,KAAKqhC,QAAQ/D,MAAMt7B,UAAU,SAACE,GAC/CzB,EAAKghC,WAAWt+B,KAAKjB,MAI7Bk/B,EAAAziC,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvB8gC,EAAAziC,UAAA+iC,UAAA,WACI1hC,KAAKqhC,QAAQhE,QAIjB+D,EAAAziC,UAAAgjC,sBACI3hC,KAAKqhC,QAAQ9D,SAIjB6D,EAAAziC,UAAAijC,sBAAa/iC,GACT,GAAKmB,KAAKq9B,MAASr9B,KAAK6hC,qBAAxB,CAIA,IAAM7yB,EAASnQ,EAA2B,SAErCmB,KAAK2C,YAAYnC,cAAcs4B,SAAS9pB,IACxCA,GAAUA,EAAO6pB,UAAUC,SAAS,oBACrC94B,KAAK2hC,mCAnIhB1iC,EAAAA,UAASC,OACNC,SAAU,gBACVkN,SAAU,gBACVjN,SAAU,8TAYViE,WAAY89B,IACZ/e,MACI0f,QAAS,8DAnBRX,UAFsF79B,EAAAA,4CA0B1FjE,EAAAA,QAAK8J,KACLD,EAAAA,YAAWhK,MAAC,8BASZG,EAAAA,QAAK8J,KACLD,EAAAA,YAAWhK,MAAC,kCAGZG,EAAAA,qBAGAA,EAAAA,mBAGAA,EAAAA,qBAGAA,EAAAA,QAAK8J,KACLD,EAAAA,YAAWhK,MAAC,oCAGZG,EAAAA,QAAK8J,KACLD,EAAAA,YAAWhK,MAAC,+CAGZG,EAAAA,0BAGAkE,EAAAA,+BA2BA2F,EAAAA,YAAWhK,MAAC,mCAiCZ89B,EAAAA,aAAY99B,MAAC,+CAKb89B,EAAAA,aAAY99B,MAAC,kBAAmB,gBA7HrC,0DCKCkE,EAAAA,UAASlE,OACNC,SAAU,oIAIbiE,EAAAA,UAASlE,OACNC,SAAU,2FAmFV,SAAA4iC,EAAYV,EAA2BpjB,GAAvC,IAAAxd,EACIiQ,EAAA1R,KAAAgB,KAAMqhC,EAASpjB,IAAWje,yBA9CA,kBAEG,YAWN,kBAIsB,IAAI6C,EAAAA,aA+BjDpC,EAAKw9B,SAAU,EACfx9B,EAAKohC,sBAAuB,WArDWlxB,EAAAA,EAAAA,GAQ3ChN,OAAA2G,eAAIy3B,EAAApjC,UAAA,oBAAJ,WACI,OAAQqB,KAAK6hC,mCAIAz8B,GACbpF,KAAK6hC,sBAAwBz8B,yDAgB7B28B,EAAApjC,UAAA,aAIJ,WACI,OAAOqB,KAAK0mB,qBALNthB,GACNpF,KAAK0mB,OAASthB,yDAQd28B,EAAApjC,UAAA,eAIJ,WACI,OAAOqB,KAAKq9B,mBALJnsB,GACRlR,KAAKq9B,KAAOnsB,mCAgBhB6wB,EAAApjC,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KACIA,KAAKgiC,8BAAgChiC,KAAKqhC,QAAQ/D,MAAMt7B,UAAU,SAACE,GAC/DzB,EAAKwhC,cAAc9+B,KAAKjB,MAIhC6/B,EAAApjC,UAAAyB,YAAA,WACIJ,KAAKgiC,8BAA8B1hC,mCA7F1CrB,EAAAA,UAASC,OACNC,SAAU,wBACVC,SAAU,sxBAuBViE,WAAY89B,IACZ/e,MACI0f,QAAS,oFAvCRX,UAHiE79B,EAAAA,8CA+CrEjE,EAAAA,yBAEAA,EAAAA,4BAEAA,EAAAA,4BAMAA,EAAAA,sBAKAA,EAAAA,sBAEA6H,EAAAA,aAAYhI,MAACgjC,2BAEb3+B,EAAAA,sBAQAlE,EAAAA,uBASAA,EAAAA,YAtC0C+hC,ICzCzC/iB,IACF0jB,GACAI,GACAD,2DAGH3iC,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJE,QAAS0e,GACTze,aAAcye,kDCflB+jB,GAAA,oCAW8B,qBACD,IAAIv/B,EAAAA,2BAEF,iBACC,+BAGxBu/B,EAAAzjC,UAAA,0BACA,OAAOqB,KAAKqiC,cAGhB,SAAYj9B,GACRpF,KAAKqiC,SAAWj9B,EAChBpF,KAAKsiC,cAAcpgC,KAAKkD,oCAG5BzB,OAAA2G,eAAI83B,EAAAzjC,UAAA,cAWJ,WACI,OAAOqB,KAAKuiC,aAZhB,SAAWn9B,IAMO,KAHdpF,KAAKuiC,QAAUn9B,KAIXpF,KAAKwiC,SAAU,wDAhC1BvjC,EAAAA,UAASC,OACNC,SAAU,iBACVC,SAAU,0JAMTC,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,uBAKAA,EAAAA,WAjBL,GCAAojC,GAAA,mCAwC4B,aAEsB,IAAIC,EAAAA,2BAEA,2BAEtB,yBACI,2BACF,yBACA,0BAEC,2CACI,6CACF,uCACA,uCAEA,yBACI,uBACF,uBACA,oBAEH,wBACI,sBACF,sBACA,4BACM,4BACA,cAErB,IAAI7/B,EAAAA,6BACA,IAAIA,EAAAA,2BACN,IAAIA,EAAAA,8BACD,IAAIA,EAAAA,2BACP,IAAIA,EAAAA,+BACA,IAAIA,EAAAA,6BACN,IAAIA,EAAAA,oCAEC,+BAGxB4/B,EAAA9jC,UAAA,uBACA,OAAOqB,KAAK2iC,WAEhB,SAASv9B,GAGgB,iBAAVA,IAGPpF,KAAK2iC,MAAQv9B,EAGbpF,KAAKqb,SAGLrb,KAAK4iC,WAAW1gC,KAAKlC,KAAK6iC,MAG1B7iC,KAAK8iC,kBAAmB,oCAIhCL,EAAA9jC,UAAA6N,gBAAA,WAGIlK,WAAWtC,KAAKqb,OAAO1N,KAAK3N,QAMhCyiC,EAAA9jC,UAAAuD,KAAA,WAEIlC,KAAK+iC,aAAa7gC,KAAK,IAAI8gC,GAAkBhjC,KAAK6iC,KAAM7iC,KAAK6iC,KAAO,IAG/D7iC,KAAKijC,iBAAiB7iB,MAMtBpgB,KAAK6iC,KAAO,EAAK7iC,KAAKkjC,MAAMp+B,SAC7B9E,KAAK6iC,OAGL7iC,KAAKmjC,OAAOjhC,KAAKlC,KAAK6iC,OATtB7iC,KAAK8iC,kBAAmB,GAgBhCL,EAAA9jC,UAAAyJ,SAAA,WAEIpI,KAAK+iC,aAAa7gC,KAAK,IAAI8gC,GAAkBhjC,KAAK6iC,KAAM7iC,KAAK6iC,KAAO,IAGpD,EAAZ7iC,KAAK6iC,OACL7iC,KAAK6iC,OAGL7iC,KAAKojC,WAAWlhC,KAAKlC,KAAK6iC,QAOlCJ,EAAA9jC,UAAA0kC,OAAA,WAAA,IAAA5iC,EAAAT,KAWI,OARAA,KAAKsjC,YAAYphC,OAQV,IAAIqhC,QAAc,SAAAC,GACrBlhC,WAAW,WAGH7B,EAAKwiC,iBAAiB7iB,OACtB3f,EAAKgjC,SAASvhC,OAGlBshC,SAQZf,EAAA9jC,UAAAk5B,OAAA,WACI73B,KAAK0jC,SAASxhC,QAMlBugC,EAAA9jC,UAAA0c,OAAA,WAAA,IAAA5a,EAAAT,KAEIA,KAAKkjC,MAAMx2B,QAAQ,SAACm2B,EAAMp3B,GAAQ,OAAAo3B,EAAKc,OAASl4B,IAAQhL,EAAKoiC,QAMjEJ,EAAA9jC,UAAAilC,SAAA,SAASf,GACL,GAAIA,EAAKL,QAAS,CAEd,IAAMqB,EAAY7jC,KAAKkjC,MAAMY,UAAUp4B,UAAU,SAAAq4B,GAAO,OAAAA,IAAQlB,IAEhE7iC,KAAK+iC,aAAa7gC,KAAK,IAAI8gC,GAAkBhjC,KAAK6iC,KAAMgB,IAExD7jC,KAAK6iC,KAAOgB,IAOpBpB,EAAA9jC,UAAAqlC,WAAA,WACI,OAAOhkC,KAAK6iC,OAAU7iC,KAAKkjC,MAAMp+B,OAAS,GAM9C29B,EAAA9jC,UAAAslC,MAAA,WAGIjkC,KAAKkjC,MAAMx2B,QAAQ,SAAAm2B,GAAQ,OAAAA,EAAKL,SAAU,IAG1CxiC,KAAK6iC,KAAO,GAMhBJ,EAAA9jC,UAAAskC,eAAA,WACI,OAAOjjC,KAAKkkC,eAAelkC,KAAK6iC,OAMpCJ,EAAA9jC,UAAAulC,eAAA,SAAe/a,GACX,OAAOnpB,KAAKkjC,MAAMY,UAAU3a,wBApOnClqB,EAAAA,UAASC,OACNC,SAAU,YACVC,SAAU,82CA6BVgjB,MACI+hB,UAAW,wFAOdp3B,EAAAA,gBAAe7N,MAACkjC,yBAEhB/iC,EAAAA,wBAEAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,2BAEAA,EAAAA,+BACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,4BAEAA,EAAAA,gCACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,2BAEAA,EAAAA,+BACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,sBAEAkE,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,qBAIAlE,EAAAA,WA9EL,GA2OA2jC,GACI,SAAmBjU,EAAqBqV,GAArBpkC,KAAA+uB,KAAAA,EAAqB/uB,KAAAokC,GAAAA,GCtOtC/lB,IACFokB,GACAL,2DAGH7iC,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAg2B,IAEJ91B,QAAS0e,GACTze,aAAcye,yFCLL,IAAI9R,EAAAA,mCAFhBhK,EAAAA,uECoBG,SAAA8hC,EAAoBC,GAApB,IAAA7jC,EACIiQ,EAAA1R,KAAAgB,OAAOA,YADSS,EAAA6jC,sBAAAA,eAjBU,oBACF,IAAIzhC,EAAAA,uBAcN,WAlBkB8N,EAAAA,EAAAA,GAM5ChN,OAAA2G,eAAI+5B,EAAA1lC,UAAA,aAAJ,WACI,OAAOqB,KAAKukC,YAGhB,SAAUnkB,GACNpgB,KAAKukC,OAASnkB,EAEVpgB,KAAKskC,uBACLtkC,KAAKskC,sBAAsBnkB,OAAOje,MAAO2gC,KAAM7iC,KAAMogB,MAAOA,qCAcpEikB,EAAA1lC,UAAA6lC,aAAA,SAAaC,GACTzkC,KAAKykC,UAAYA,EACjBzkC,KAAK0kC,gBAAgBvhC,KAAKshC,wBApCjCxlC,EAAAA,UAASC,OACNC,SAAU,yBACVC,SAAU,6HAJLulC,oCAUJtlC,EAAAA,yBACAA,EAAAA,+BACAkE,EAAAA,aAJ2C6+B,mBCoD5C,SAAAwC,EAAYC,GAAZ,IAAApkC,EACIiQ,EAAA1R,KAAAgB,OAAOA,oBAP0C,IAAI0iC,EAAAA,UASrDmC,EAAqB1kB,OAAOpd,KACxBiD,EAAAA,OAAO,SAACnH,GAAmC,OAACA,EAAMuhB,SACpDpe,UAAUvB,EAAKqkC,YAAYn3B,KAAKlN,aAdEkQ,EAAAA,EAAAA,GAKxChN,OAAA2G,eAAIs6B,EAAAjmC,UAAA,kBAAJ,WACI,OAAOqB,KAAK+kC,aAAe/kC,KAAK+kC,uBAAuB39B,EAAAA,6CAe3Dw9B,EAAAjmC,UAAAuD,KAAA,WAGI,IAAM2gC,EAAO7iC,KAAKijC,iBAEdJ,EAAKziB,QACL1P,EAAA/R,UAAMuD,KAAIlD,KAAAgB,MAGV6iC,EAAK2B,cAAa,KAQ1BI,EAAAjmC,UAAA0kC,OAAA,WAGI,IAAMR,EAAO7iC,KAAKijC,iBAGlB,OAAOvyB,EAAA/R,UAAM0kC,OAAMrkC,KAAAgB,MAAGglC,KAAK,WAEnBnC,EAAKziB,OACLyiB,EAAK2B,cAAa,MAS9BI,EAAAjmC,UAAAmmC,YAAA,SAAYj5B,GAER,IAAMq3B,EAAQljC,KAAKkjC,MAAMY,UACnBxE,EAAU4D,EAAMx3B,UAAU,SAAAm3B,GAAQ,OAAAA,IAASh3B,EAAMg3B,OACtCK,EAAM9qB,MAAMknB,GAEpB5yB,QAAQ,SAAAm2B,GAGbA,EAAK4B,WAAY,EAGb5B,IAASh3B,EAAMg3B,OACfA,EAAKL,SAAU,0BApH9BvjC,EAAAA,UAASC,OACNC,SAAU,oBACVC,SAAU,spEA2CViE,WAAashC,iDA/CRA,2CAmDJtlC,EAAAA,qBACA0N,EAAAA,gBAAe7N,MAACmlC,UAHuB5B,ICrD5CwC,GAAA,oDAQC1lC,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAylC,GACAzP,IAEJ91B,SACIilC,GACAP,IAEJzkC,cACIglC,GACAP,gDApBR,GCAAc,GAAA,WAeI,SAAAA,EAAoBC,GAAAplC,KAAAolC,MAAAA,SAEpBD,EAAAxmC,UAAA0mC,qBAAA,SAAqBC,GAArB,IAAA7kC,EAAAT,KACI,OAAO6uB,EAAAA,WAAWvqB,OAAO,SAAC66B,GACtB1+B,EAAK2kC,MAAMG,QAAQD,EAAaE,KAAOC,aAAcC,EAAAA,oBAAoBC,OAAQ3jC,UAAU,SAAA4jC,GAEvF,IAGIb,EAHEc,EAAWP,EAAaE,IAAI5hB,UAAU0hB,EAAaE,IAAIM,YAAY,KAAO,GAC1EC,EAAYT,EAAaE,IAAI5hB,UAAU0hB,EAAaE,IAAIM,YAAY,KAAO,GAAGE,cAC9EC,EAAOL,EAASK,OAGtB,OAAQF,GACJ,IAAK,MACDhB,EAAc,0BACd,MAEJ,IAAK,MACDA,EAAc,2BACd,MAEJ,IAAK,MACDA,EAAc,kBACd,MAEJ,IAAK,MACDA,EAAc,kBACd,MAEJ,IAAK,MACDA,EAAc,6BACd,MAEJ,IAAK,OACDA,EAAc,4CACd,MAEJ,QACIA,EAAc,aAItB5F,EAASj9B,MACL2jC,SAAUA,EACVE,UAAWA,EACXhB,YAAaA,EACbmB,KAAMD,EAAKC,YAM3Bf,EAAAxmC,UAAAwnC,mBAAA,SAAmBC,GAAnB,IAAA3lC,EAAAT,KAGI,OAAK,OAAcqmC,cAInBrmC,KAAKsmC,cAAgB,IAAID,aACzBrmC,KAAKumC,mBACLvmC,KAAKwmC,qBAEE3X,EAAAA,WAAWvqB,OAAO,SAAC66B,GAGtB1+B,EAAK2kC,MAAMG,QAAQa,GAAOX,aAAcC,EAAAA,oBAAoBe,cAAezkC,UAAU,SAAA4jC,GACjFnlC,EAAKimC,eAAed,EAASe,eAAe3kC,UAAU,SAAA4kC,GAGlDnmC,EAAKomC,mBAAmBD,GAMxB,IAJA,IAAIE,KACEC,EAAWtmC,EAAKumC,aAAaC,iBAG1BC,EAAa,EAAGA,EAAaH,EAAUG,IAC5CJ,EAAWI,GAAczmC,EAAKumC,aAAaG,eAAeD,GAG9D/H,EAASj9B,KAAK4kC,GACd3H,EAASrwB,WAGTg4B,EAAa,MACd,SAACnhC,GAAU,OAAAw5B,EAASx5B,MAAMA,MAC9B,SAACA,GAAU,OAAAw5B,EAASx5B,MAAMA,QA9BtBypB,EAAAA,IAAoB,IAAIgY,aAAa,MAkCpDjC,EAAAxmC,UAAA0oC,kBAAA,SAAkBN,EAA+BO,QAA/B,IAAAP,IAAAA,WAA+B,IAAAO,IAAAA,EAAA,KAM7C,IAJA,IAAMC,KACAC,EAA6B,EAAlBT,EAASjiC,OAAaiiC,EAAS,GAAGjiC,OAAS,aAGnD2G,GAGL,IAAMg8B,EAASV,EAASjgC,IAAI,SAAA4gC,GAAW,OAAAA,EAAQj8B,KAG/C87B,EAAS7hC,MACL6C,IAAKk/B,EAAO/yB,OAAO,SAACtM,EAAUk3B,GAAY,OAAAA,EAAUl3B,EAAWk3B,EAAUl3B,IACzEI,IAAKi/B,EAAO/yB,OAAO,SAACtM,EAAUk3B,GAAY,OAAUl3B,EAAVk3B,EAAqBA,EAAUl3B,OARxEqD,EAAM,EAAGA,EAAM+7B,EAAU/7B,GAAO67B,IAAhC77B,GAYT,OAAO87B,GAGHpC,EAAAxmC,UAAA+nC,wBAAeC,cACnB,OAAO9X,EAAAA,WAAWvqB,OAAO,SAAC66B,GACtB1+B,EAAKknC,yBAAyBC,gBAAgBjB,EAAa,SAACC,GACxDzH,EAASj9B,KAAK0kC,GACdzH,EAASrwB,YACV,SAACnJ,GAAU,OAAAw5B,EAASx5B,MAAMA,QAI7Bw/B,EAAAxmC,UAAAgpC,kCACJ,OAAO,IAAIE,oBAAoB,EAAG,EAAG7nC,KAAKsmC,cAAcwB,YAAc,QAGlE3C,EAAAxmC,UAAAkoC,4BAAmBD,GACvB5mC,KAAK+nC,mBAEL/nC,KAAKgnC,aAAeJ,EACpB5mC,KAAKgoC,mBAAqBhoC,KAAKsmC,cAAcO,qBAC7C7mC,KAAKgoC,mBAAmBC,OAASjoC,KAAKgnC,aACtChnC,KAAKgoC,mBAAmBE,QAAQloC,KAAKmoC,gBAGjChD,EAAAxmC,UAAA4nC,4BACJvmC,KAAKooC,UAAYpoC,KAAKsmC,cAAc+B,aACpCroC,KAAKooC,UAAUF,QAAQloC,KAAKsmC,cAAcgC,cAGtCnD,EAAAxmC,UAAA6nC,8BACJxmC,KAAKmoC,cAAgBnoC,KAAKsmC,cAAciC,iBACxCvoC,KAAKmoC,cAAcD,QAAQloC,KAAKooC,YAG5BjD,EAAAxmC,UAAAopC,4BACA/nC,KAAKgoC,oBACLhoC,KAAKgoC,mBAAmBQ,kCAzJnCjmC,EAAAA,sDALQkmC,EAAAA,UADT,GCAAC,GAAA,oDAICnpC,EAAAA,SAAQL,OACLM,SAAWmpC,EAAAA,YACXtlC,WAAY8hC,gDANhB,sCCSYyD,EAAAjqC,UAAAkqC,2BAAkBnrB,GACtB,IAAIorB,EAAcxsB,SAASjb,cAAc,SAGzC,OAFAynC,EAAYC,QAAU,OACtBD,EAAYtD,IAAM9nB,EACXorB,GAGHF,EAAAjqC,UAAAqqC,sBAAapoC,EAAeE,GAChC,IAAIi5B,EAASzd,SAASjb,cAAc,UAGpC,OAFA04B,EAAOn5B,MAAQA,EACfm5B,EAAOj5B,OAASA,EACTi5B,GAGH6O,EAAAjqC,UAAAsqC,mBAAUH,EAA+BI,GAE7C,OADAJ,EAAYK,YAAcD,EACnBnnC,EAAAA,UAAU+mC,EAAsB,IAATI,EAAa,aAAe,WAGtDN,EAAAjqC,UAAAyqC,sBAAaN,EAA+B/O,EAA2BmP,EAActoC,EAAqBE,cAE9G,YAFyF,IAAAF,IAAAA,EAAA,UAAqB,IAAAE,IAAAA,EAAA,IAEvG+tB,EAAAA,WAAWvqB,OAAO,SAAC66B,GAGtB,IAAIkK,EAAe5oC,EAAKwoC,UAAUH,EAAaI,GAAMlnC,UAAU,SAACnD,GAE5Dk7B,EAAOC,WAAW,MAAMC,UAAU6O,EAAa,EAAG,EAAGloC,EAAOE,GAC5Dq+B,EAASj9B,MAAOonC,MAAOvP,EAAOwP,YAAa3oC,MAAOA,EAAOE,OAAQA,EAAQooC,KAAMA,IAC/E/J,EAASrwB,WACTu6B,EAAa/oC,mBAKzBsoC,EAAAjqC,UAAA6qC,kBAAA,SAAkB9rB,EAAgB9c,EAAeE,EAAgBooC,GAG7D,IAAIJ,EAAc9oC,KAAK6oC,kBAAkBnrB,GACrCqc,EAAS/5B,KAAKgpC,aAAapoC,EAAOE,GAElC2oC,EAAoBzpC,KAAKopC,aAAaN,EAAa/O,EAAQmP,EAAMtoC,EAAOE,GAQ5E,OALA2oC,EAAkBznC,UAAU,KAAM,KAAM,WAEpC+3B,EADA+O,EAAc,OAIXW,GAGXb,EAAAjqC,UAAA+qC,mBAAA,SAAmBhsB,EAAgB9c,EAAeE,EAAgB4hB,EAAeC,EAAa2kB,GAA9F,IAAA7mC,EAAAT,UAA8F,IAAAsnC,IAAAA,EAAA,GAG1F,IAAIwB,EAAc9oC,KAAK6oC,kBAAkBnrB,GACrCqc,EAAS/5B,KAAKgpC,aAAapoC,EAAOE,GAEtC,OAAO+tB,EAAAA,WAAWvqB,OAAO,SAAC66B,GAEtBp9B,EAAAA,UAAU+mC,EAAa,kBAAkB9mC,UAAU,WAK/C,IAFA,IAAI2nC,KAEKl+B,EAAMiX,EAAOjX,EAAMkX,EAAKlX,GAAO67B,EACpCqC,EAAOjkC,KAAKjF,EAAK2oC,aAAaN,EAAa/O,EAAQtuB,EAAK7K,EAAOE,IAGnE+E,EAAAA,OAAMwJ,WAAA,EAAAzJ,EAAI+jC,IAAQ3nC,UAAU,SAAC4nC,GAA0B,OAAAzK,EAASj9B,KAAK0nC,IAAQ,KAAM,WAE/E7P,EADA+O,EAAc,KAEd3J,EAASrwB,sCA1E5BvM,EAAAA,wDCNDsnC,GAAA,oDAICtqC,EAAAA,SAAQL,OACLmE,WAAYulC,gDALhB,GCAAkB,GAAA,WAgEI,SAAAA,EAAoBC,GAApB,IAAAtpC,EAAAT,KAAoBA,KAAA+pC,wBAAAA,YAnDI,qBACN,eAKkB,IAAIppC,EAAAA,iBAAyB,kBAC3B,IAAIA,EAAAA,iBAAyB,mBACvC,IAAI4L,EAAAA,0BACS,IAAI5L,EAAAA,iBAAyB,4BACtB,IAAIA,EAAAA,iBAAyB,4BACtC,IAAI4L,EAAAA,wBACf,IAAIA,EAAAA,wBACL,IAAIA,EAAAA,6BACC,IAAIA,EAAAA,iCACA,IAAIA,EAAAA,4BACR,IAAIA,EAAAA,wBACR,IAAIA,EAAAA,uBACL,IAAIA,EAAAA,0BACE,IAAIA,EAAAA,6BACF,IAAIA,EAAAA,yBACR,IAAIA,EAAAA,0BACH,IAAIA,EAAAA,0BACN,IAAIA,EAAAA,0BACJ,IAAIA,EAAAA,6BACC,IAAIA,EAAAA,+BACF,IAAIA,EAAAA,0BACX,IAAIA,EAAAA,6BACK,IAAIA,EAAAA,6BACC,IAAI5L,EAAAA,iBAAyB,uBAC9B,IAAIA,EAAAA,iBAAyB,sBAChCkuB,EAAAA,WAAWvqB,OAAO,SAAC66B,GAGvD,IAAI6K,EAAWC,YAAY,WAEvB,IAAIC,EAAWzpC,EAAK0pC,aAAmC,SACvDhL,EAASj9B,KAAKgoC,GAEU,IAApBA,EAASplC,QAAsC,IAAtBolC,EAASxnB,MAAM,IAAYwnB,EAASvnB,IAAI,KAAOliB,EAAK+mC,WAC7ErI,EAASrwB,WACTs7B,cAAcJ,KAEnB,yBAKwB,SAQ/BrmC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,mBAAJ,WACI,OAAOqB,KAAKmqC,8CAGhBxmC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,iBAAJ,WACI,OAAOqB,KAAKqqC,gBAGhB,SAAcjlC,GAGQ,UAAdpF,KAAKmJ,OACL/D,GAAQ,GAGZpF,KAAKqqC,WAAajlC,EAClBpF,KAAKsqC,eAAepoC,KAAKkD,oCAG7BzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,wBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAatpC,YAAc,mCAG/D8C,OAAA2G,eAAIw/B,EAAAnrC,UAAA,yBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAappC,aAAe,mCAGhE4C,OAAA2G,eAAIw/B,EAAAnrC,UAAA,mBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAaI,YAAc,sCAG/D5mC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,gBAAJ,WACI,QAAOqB,KAAKmqC,cAAenqC,KAAKmqC,aAAaK,cAEjD,SAAaplC,GACTpF,KAAKmqC,aAAaK,SAAWplC,mCAGjCzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,gBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAaD,SAAW,IAAIO,4CAGhE9mC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,mBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAaO,YAAc,UAE/D,SAAgBtlC,GACZpF,KAAKmqC,aAAaO,YAActlC,mCAGpCzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,kBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAaQ,WAAa,sCAG9DhnC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,mBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAahB,YAAc,OAE/D,SAAgB/jC,GACZpF,KAAKmqC,aAAahB,YAAc/jC,mCAGpCzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,oBAAJ,WACI,QAAOqB,KAAKmqC,cAAenqC,KAAKmqC,aAAaS,kBAEjD,SAAiBxlC,GACbpF,KAAKmqC,aAAaS,aAAexlC,mCAGrCzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,2BAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAaU,oBAAsB,OAEvE,SAAwBzlC,GACpBpF,KAAKmqC,aAAaU,oBAAsBzlC,mCAG5CzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,gBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAa3C,SAAW,mCAG5D7jC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,aAAJ,WACI,QAAOqB,KAAKmqC,cAAenqC,KAAKmqC,aAAaW,uCAGjDnnC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,YAAJ,WACI,QAAOqB,KAAKmqC,cAAenqC,KAAKmqC,aAAaY,UAEjD,SAAS3lC,GACLpF,KAAKmqC,aAAaY,KAAO3lC,mCAG7BzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,aAAJ,WACI,QAAOqB,KAAKmqC,cAAenqC,KAAKmqC,aAAaa,WAEjD,SAAU5lC,GACNpF,KAAKmqC,aAAaa,MAAQ5lC,mCAG9BzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,oBAAJ,WACI,OAAOqB,KAAKmqC,aAAac,8CAG7BtnC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,cAAJ,WACI,OAAOqB,KAAKmqC,cAAenqC,KAAKmqC,aAAae,wCAGjDvnC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,oBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAagB,aAAe,OAEhE,SAAiB/lC,GACbpF,KAAKmqC,aAAagB,aAAe/lC,mCAGrCzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,cAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAaiB,OAAS,IAAIX,4CAG9D9mC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,eAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAapB,QAAU,YAE3D,SAAY3jC,GACRpF,KAAKmqC,aAAapB,QAAU3jC,mCAGhCzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,kBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAahoC,WAAa,mCAG9DwB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,gBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAakB,SAAW,IAAIZ,4CAGhE9mC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,eAAJ,WACI,QAAOqB,KAAKmqC,cAAenqC,KAAKmqC,aAAamB,yCAGjD3nC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,WAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAa3E,IAAM,QAEvD,SAAQpgC,GACJpF,KAAKmqC,aAAa3E,IAAMpgC,mCAG5BzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,kBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAaoB,WAAa,IAAIC,+CAGlE7nC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,mBAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAasB,YAAc,IAAIC,gDAGnE/nC,OAAA2G,eAAIw/B,EAAAnrC,UAAA,cAAJ,WACI,OAAOqB,KAAKmqC,aAAenqC,KAAKmqC,aAAawB,OAAS,OAE1D,SAAWvmC,GACPpF,KAAKmqC,aAAawB,OAASvmC,mCAG/BzB,OAAA2G,eAAIw/B,EAAAnrC,UAAA,kBAAJ,WACI,QAAOqB,KAAKmqC,cAAenqC,KAAK4rC,iBAEpC,SAAexmC,GACXpF,KAAK4rC,YAAcxmC,EACnBpF,KAAK6rC,gBAAgB3pC,KAAKkD,oCAG9B0kC,EAAAnrC,UAAAmtC,eAAA,SAAeC,EAA0BC,GACrChsC,KAAKisC,aAAeF,EACpB/rC,KAAKmqC,aAAe6B,EAEpBhsC,KAAKksC,UAAUhqC,MAAK,IAMxB4nC,EAAAnrC,UAAAwtC,WAAA,YAGwB,IAAhBnsC,KAAKosC,SAILpsC,KAAKkrC,OACLlrC,KAAKqsC,OAELrsC,KAAKssC,UAObxC,EAAAnrC,UAAA0tC,KAAA,WACIrsC,KAAKmqC,aAAakC,QAMtBvC,EAAAnrC,UAAA2tC,MAAA,WACItsC,KAAKmqC,aAAamC,SAMtBxC,EAAAnrC,UAAA4tC,KAAA,WACIvsC,KAAKmqC,aAAaoC,QAMtBzC,EAAAnrC,UAAA6tC,YAAA,SAAYrjC,GACR,OAAOnJ,KAAKmqC,aAAaqC,YAAYrjC,IAMzC2gC,EAAAnrC,UAAA8tC,aAAA,SAAaC,EAAcC,EAAeC,GACtC,OAAO5sC,KAAKmqC,aAAasC,aAAaC,EAAMC,EAAOC,IAMvD9C,EAAAnrC,UAAAkuC,kBAAA,WAEQ7sC,KAAKisC,aAAaY,kBAClB7sC,KAAKisC,aAAaY,oBACX7sC,KAAKisC,aAAaa,wBACzB9sC,KAAKisC,aAAaa,0BACL9sC,KAAiB,aAAE+sC,oBAC1B/sC,KAAiB,aAAE+sC,sBACZ/sC,KAAiB,aAAEgtC,sBAC1BhtC,KAAiB,aAAEgtC,wBAOjClD,EAAAnrC,UAAAsuC,eAAA,WAEcjtC,KAAiB,aAAEitC,eACzB3wB,SAAS2wB,iBACF3wB,SAAS4wB,qBAChB5wB,SAAS4wB,uBACF,SAAgBC,iBACvB,SAAgBA,mBACT,SAAgBC,qBACvB,SAAgBA,uBAIxBtD,EAAAnrC,UAAA0uC,iBAAA,SAAiBxuC,GACbmB,KAAKstC,WAAa,SAAgBA,YAAchxB,SAASixB,oBAAsB,SAAgBC,eAAyD,OAAxC,SAAgBC,qBAAgC,SAAgBA,sBAAwBh6B,UACxMzT,KAAK6rC,gBAAgB3pC,KAAKlC,KAAKstC,aAMnCxD,EAAAnrC,UAAA+uC,iBAAA,WACQ1tC,KAAKstC,WACLttC,KAAKitC,iBAELjtC,KAAK6sC,qBAOb/C,EAAAnrC,UAAAgvC,UAAA,SAAU/sC,EAAeE,EAAgBwmC,GAErC,MAAkB,UAAdtnC,KAAKmJ,KACEnJ,KAAK+pC,wBAAwBL,mBAAmB1pC,KAAK0d,OAAQ9c,EAAOE,EAAQ,EAAGd,KAAKwnC,SAAU,IAGlGzY,EAAAA,8BApVdxsB,EAAAA,sDAHwBqmC,QANzB,GCAAgF,GAAA,WA0JI,SAAAA,EAAmBC,EAAgDC,EAAqCnrC,GAAxG,IAAAlC,EAAAT,KAAmBA,KAAA6tC,mBAAAA,EAAgD7tC,KAAA8tC,cAAAA,EAAqC9tC,KAAA2C,YAAAA,iBAhCpF,kBA8BC,IAAI4J,EAAAA,QAKrBxK,EAAAA,UAAU/B,KAAK2C,YAAYnC,cAAe,aAAauC,KACnDgrC,EAAAA,UAAU,SAAClvC,GAEP,OADA4B,EAAKutC,UAAW,EACT5e,EAAAA,GAAGvwB,KAEdmE,EAAAA,aAAa,KACbwK,EAAAA,UAAUxN,KAAKyN,aACjBzL,UAAU,WAAM,OAAAvB,EAAKutC,UAAW,WAvCtCrqC,OAAA2G,eAAIsjC,EAAAjvC,UAAA,cAAJ,WACI,OAAOqB,KAAK6tC,mBAAmBnwB,qBAIxBtY,GACPpF,KAAK6tC,mBAAmBnwB,OAAStY,mCAGrCzB,OAAA2G,eAAIsjC,EAAAjvC,UAAA,YAAJ,WACI,OAAOqB,KAAK6tC,mBAAmB1kC,mBAI1B/D,GACLpF,KAAK6tC,mBAAmB1kC,KAAO/D,mCAGnCzB,OAAA2G,eAAIsjC,EAAAjvC,UAAA,iBAAJ,WACI,OAAOqB,KAAK6tC,mBAAmBI,wBAIrB7oC,GACVpF,KAAK6tC,mBAAmBI,UAAY7oC,mCAkBxCwoC,EAAAjvC,UAAA6N,gBAAA,WAAA,IAAA/L,EAAAT,KACIA,KAAK6tC,mBAAmB/B,eAAe9rC,KAAK2C,YAAYnC,cAAeR,KAAKkuC,WAAW1tC,eAEvFR,KAAKmuC,cAAgBnuC,KAAK8tC,cAAczI,qBAAqBrlC,KAAKkuC,WAAW1tC,eAC7ER,KAAK6tC,mBAAmBO,aAAarrC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WAAM,OAAAvB,EAAKotC,mBAAmBQ,QAAQnsC,MAAK,KAC3HlC,KAAK6tC,mBAAmBS,WAAWvrC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WAAM,OAAAvB,EAAKotC,mBAAmBQ,QAAQnsC,MAAK,KACzHlC,KAAK6tC,mBAAmBU,gBAAgBxrC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WAAM,OAAAvB,EAAKotC,mBAAmB1B,eACjHnsC,KAAK6tC,mBAAmBW,oBAAoBzrC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WAAM,OAAAvB,EAAKotC,mBAAmBzB,QAAS,KAGlIwB,EAAAjvC,UAAAyB,YAAA,WACIJ,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,gCA1KvB7P,EAAAA,UAASC,OACNC,SAAU,kBACVC,SAAU,uhKA0FViE,WAAYymC,IACZ1nB,MACImM,SAAY,IACZkgB,kBAAmB,kCACnBC,mBAAoB,iCACpBC,qBAAsB,gCACtBC,gBAAiB,iEACjBC,gBAAiB,WACjBC,gBAAiB,mBACjBC,gBAAiB,mBACjBC,eAAgB,kBAChBC,eAAgB,mBAChBC,oCAAqC,8CACrCC,iCAAkC,8CAClCC,gCAAiC,4FA5GhCtF,UADe3E,UANW7hC,EAAAA,kDAwH9B8F,EAAAA,UAASlK,MAAC,0BASVG,EAAAA,oBASAA,EAAAA,yBASAA,EAAAA,WAnJL,GCAAgwC,GAAA,WAOI,SAAAA,EAAmBxB,GAAA7tC,KAAA6tC,mBAAAA,6BAJtBzqC,EAAAA,UAASlE,OACNC,SAAU,0EAHL2qC,QADT,8FCgDsB,aACC,aACA,6BAEE,eACA,gBACC,WACZ54B,SAAS,EAAOxK,SAAU,EAAGwiC,KAAM,gBAExB,IAAI38B,EAAAA,iBAd8BoE,EAAAA,EAAAA,GAgBvD2+B,EAAA3wC,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAGIA,KAAK6tC,mBAAmB0B,oBAAoBxsC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAwlC,GAAY,OAAA/mC,EAAK+mC,SAAWA,IACnHxnC,KAAK6tC,mBAAmBvD,eAAevnC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAisC,GAAa,OAAAxtC,EAAKwtC,UAAYA,IAChHjuC,KAAK6tC,mBAAmBhC,gBAAgB9oC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAsrC,GAC/E7sC,EAAK6sC,WAAaA,EAClB7sC,EAAK+uC,MAAM9oC,SAAW,IAG1B1G,KAAK6tC,mBAAmB4B,gBAAgB1sC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAs9B,GAC/E7+B,EAAK6+B,QAAUA,EACf7+B,EAAKiG,SAAYjG,EAAK6+B,QAAU7+B,EAAK+mC,SAAY,MAGrDxnC,KAAK6tC,mBAAmB6B,cAAc3sC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAACkoC,GAC9EzpC,EAAKypC,YAEL,IAAK,IAAIz+B,EAAM,EAAGA,EAAMy+B,EAASplC,OAAQ2G,IACrChL,EAAKypC,SAASxkC,MAAOgd,MAAQwnB,EAASxnB,MAAMjX,GAAOhL,EAAK+mC,SAAY,IAAK7kB,IAAMunB,EAASvnB,IAAIlX,GAAOhL,EAAK+mC,SAAY,SAKhI8H,EAAA3wC,UAAA6N,gBAAA,WAAA,IAAA/L,EAAAT,KACU2vC,EAAa5tC,EAAAA,UAAU/B,KAAK4vC,MAAMpvC,cAAe,aACjDqvC,EAAa9tC,EAAAA,UAAUua,SAAU,aACjCwzB,EAAW/tC,EAAAA,UAAUua,SAAU,WAErCqzB,EAAW5sC,KACPgrC,EAAAA,UAAU,WAAM,OAAA8B,EAAW9sC,KAAKyK,EAAAA,UAAUsiC,MAC1CtiC,EAAAA,UAAUxN,KAAKyN,aACjBzL,UAAU,WAAM,OAAAvB,EAAK+uC,MAAMt+B,SAAU,KAG3Co+B,EAAA3wC,UAAAyB,YAAA,WACIJ,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,YAGpBwgC,EAAA3wC,UAAAoxC,YAAA,SAAYlxC,GAIR,IAFeA,EAA2B,OAE/Bg6B,UAAUC,SAAS,4BAA9B,CAIA,IACM3wB,EADWnI,KAAKgwC,YAA2C,cACzCx6B,wBAExBxV,KAAKwvC,MAAM9oC,SAAW7H,EAAMoxC,QAC5BjwC,KAAKwvC,MAAMtG,KAAQrqC,EAAMoxC,QAAU9nC,EAAOvH,MAASZ,KAAK6tC,mBAAmBrG,SAEvExnC,KAAKkwC,YACLlwC,KAAK6tC,mBAAmBvB,QACxBtsC,KAAK6tC,mBAAmB1E,YAAcnpC,KAAKwvC,MAAMtG,4BA5G5DjqC,EAAAA,UAASC,OACNC,SAAU,2BACVC,SAAU,ixCA6BVgjB,MACI+tB,qBAAsB,oBACtBvB,gBAAiB,oGAKpBxlC,EAAAA,UAASlK,MAAC,sCACVkK,EAAAA,UAASlK,MAAC,kBAH4CmwC,mGCiBjC,kBACE,oBACE,YAMA,qBACA,gBACL,IAAI9iC,EAAAA,iBAd8BoE,EAAAA,EAAAA,GAgBvDhN,OAAA2G,eAAI8lC,EAAAzxC,UAAA,cAAJ,WACI,OAAOqB,KAAKqwC,aAGhB,SAAWjrC,GAEO,IAAVA,GAAgC,IAAjBpF,KAAKqwC,UACpBrwC,KAAKswC,gBAAkBtwC,KAAKqwC,SAGhCrwC,KAAKqwC,QAAU/nC,KAAKC,IAAID,KAAKE,IAAIpD,EAAO,GAAI,KAC5CpF,KAAK6tC,mBAAmBlC,OAAS3rC,KAAKqwC,QAAU,qCAGpDD,EAAAzxC,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KACIA,KAAK6tC,mBAAmB0C,UAAUxtC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAA4rB,GAAK,OAAAntB,EAAK4tC,SAAU,IACjGruC,KAAK6tC,mBAAmBS,WAAWvrC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAA4rB,GAAK,OAAAntB,EAAK4tC,SAAU,IAClGruC,KAAK6tC,mBAAmBvD,eAAevnC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAisC,GAAa,OAAAxtC,EAAKwtC,UAAYA,IAChHjuC,KAAK6tC,mBAAmB2C,kBAAkBztC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAA2pC,GAAU,OAAAlrC,EAAKkrC,OAAkB,IAATA,IAC7G3rC,KAAK6tC,mBAAmB3B,UAAUnpC,KAAKC,EAAAA,aAAa,GAAIgD,EAAAA,OAAO,SAAAyqC,GAAQ,OAAS,IAATA,IAAgBjjC,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WAAM,OAAAvB,EAAKkrC,OAA0C,IAAjClrC,EAAKotC,mBAAmBlC,SACzK3rC,KAAK6tC,mBAAmBhC,gBAAgB9oC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAsrC,GAAc,OAAA7sC,EAAK6sC,WAAaA,IAEnH,IAAMoD,EAAc3uC,EAAAA,UAAU/B,KAAK2wC,WAAWnwC,cAAe,cACvDowC,EAAuB7uC,EAAAA,UAAU/B,KAAK6wC,gBAAgBrwC,cAAe,cACrEswC,EAAuB/uC,EAAAA,UAAU/B,KAAK6wC,gBAAgBrwC,cAAe,cAE3EkwC,EAAY3tC,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WAAM,OAAAvB,EAAKswC,cAAe,IACjFD,EAAqB/tC,KACjBgrC,EAAAA,UAAU,WAAM,OAAAiD,EAAAA,MAAM,MAAMjuC,KAAKyK,EAAAA,UAAUojC,MAC3CpjC,EAAAA,UAAUxN,KAAKyN,aACjBzL,UAAU,WAAM,OAAAvB,EAAKswC,cAAe,KAG1CX,EAAAzxC,UAAAyB,YAAA,WACIJ,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,YAGpBshC,EAAAzxC,UAAAsyC,WAAA,WACwB,IAAhBjxC,KAAK2rC,OACL3rC,KAAK2rC,OAAS3rC,KAAKswC,gBAEnBtwC,KAAK2rC,OAAS,GAItByE,EAAAzxC,UAAAwtC,WAAA,WACQnsC,KAAKquC,QACLruC,KAAK6tC,mBAAmBvB,QAExBtsC,KAAK6tC,mBAAmBxB,QAIhC+D,EAAAzxC,UAAAuyC,cAAA,WACIlxC,KAAK6tC,mBAAmBH,oBAG5B0C,EAAAzxC,UAAAwyC,UAAA,WACInxC,KAAK6tC,mBAAmB1E,YAAc,GAG1CiH,EAAAzxC,UAAAyyC,QAAA,WACIpxC,KAAK6tC,mBAAmB1E,YAAcnpC,KAAK6tC,mBAAmBrG,UAGlE4I,EAAAzxC,UAAA6d,UAAA,SAAU3d,GACNA,EAAM4d,iBACNzc,KAAKqxC,gBAAiB,EAERxyC,EAA8B,OACtCstB,SAIVikB,EAAAzxC,UAAAoe,kBAASle,GACL,GAAKmB,KAAKqxC,eAAV,CAIAxyC,EAAM4d,iBAEN,IACMtU,EADSnI,KAAKsxC,aAA4C,cAC1C97B,wBAEhBrE,EAAI7I,KAAKC,IAAIJ,EAAOvH,MAAO0H,KAAKE,IAAI,EAAG3J,EAAMqW,MAAQ/M,EAAOuN,OAGlE1V,KAAK2rC,OAAUx6B,EAAIhJ,EAAOvH,MAAS,MAIvCwvC,EAAAzxC,UAAAqe,mBACIhd,KAAKqxC,gBAAiB,uBA9J7BpyC,EAAAA,UAASC,OACNC,SAAU,2BACVC,SAAU,w/DA2CVgjB,MACIwsB,gBAAiB,yGAWpBxlC,EAAAA,UAASlK,MAAC,oCACVkK,EAAAA,UAASlK,MAAC,yCACVkK,EAAAA,UAASlK,MAAC,qCAgFV89B,EAAAA,aAAY99B,MAAC,sBAAuB,4BAiBpC89B,EAAAA,aAAY99B,MAAC,0BA3GyCmwC,ICxD3DkC,GAAA,gCAOIA,EAAA5yC,UAAAygB,UAAA,SAAUwB,GAEN,IAAI4wB,EAAUlpC,KAAK4L,MAAM0M,EAAU,IAC/B6wB,EAAQnpC,KAAK4L,MAAMs9B,EAAU,IAC7BE,EAAOppC,KAAK4L,MAAMu9B,EAAQ,IAM9B,OAHAD,EAAUA,EAAkB,GAAPE,EAAY,GAAe,IADhDD,GAAwB,GAAPC,GAEjB9wB,EAAUtY,KAAK4L,MAAM0M,EAAkB,GAAP8wB,EAAY,GAAK,GAAe,GAARD,EAAa,GAAiB,GAAVD,GAEhE,EAARC,EACUzxC,KAAK2xC,IAAIF,GAAM,IAAIzxC,KAAK2xC,IAAIH,GAAQ,IAAIxxC,KAAK2xC,IAAI/wB,GAEjD5gB,KAAK2xC,IAAIH,GAAQ,IAAIxxC,KAAK2xC,IAAI/wB,IAIhD2wB,EAAA5yC,UAAAgzC,IAAA,SAAIvsC,GACA,OAAIA,EAAQ,GACD,IAAIA,EAGRA,EAAMuW,gCA3BpB0D,EAAAA,KAAIngB,OACDogB,KAAM,uDAHV,GCAAsyB,GAAA,oDAICryC,EAAAA,SAAQL,OACLS,SAAU4xC,IACV3xC,cAAe2xC,gDANnB,GCAAM,GAAA,gCAOIA,EAAAlzC,UAAAygB,UAAA,SAAUha,GAGN,IAAKA,EACD,OAAOA,EAGX,IAGIqG,EAAMnD,KAAK4L,MAAM5L,KAAKwpC,IAAI1sC,GAASkD,KAAKwpC,IAAI,OAGhD,OAFqB1sC,EAAQkD,KAAKypC,IAAI,KAAMtmC,IAEnBumC,QAAQ,GAAE,KANtB,IAAK,KAAM,KAAM,KAAM,MAMSvmC,wBAlBpD4T,EAAAA,KAAIngB,OACDogB,KAAM,uDAHV,GCAA2yB,GAAA,oDAIC1yC,EAAAA,SAAQL,OACLS,SAAUkyC,IACVjyC,cAAeiyC,gDANnB,GCcMxzB,IACFuvB,GACA0B,GACAD,GACAe,2DAGH7wC,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAoqC,GACApU,GACAiT,GACAkJ,GACAK,IAEJtyC,QAAS0e,GACTze,aAAcye,GACdhb,WAAYymC,mDChChBoI,GAAA,oDAECjzC,EAAAA,UAASC,OACNC,SAAU,gBACVC,SAAU,iKAJd,GCAA+yC,GAAA,WA2CI,SAAAA,EACYxvC,EACAzC,EACwBqL,EACxB6mC,EACAC,GALZ,IAAA5xC,EAAAT,KACYA,KAAA2C,YAAAA,EACA3C,KAAAE,UAAAA,EACwBF,KAAAuL,QAAAA,EACxBvL,KAAAoyC,QAAAA,EACApyC,KAAAqyC,gBAAAA,iBA3BgD,aAS5C,2BACc,EAmB1BryC,KAAKsyC,MAAQ/mC,EAAUA,EAAQ+mC,MAAQ,EAAI,EAE3CtyC,KAAKuyC,eAAiBH,EAAQ5mC,OAAOzI,KAAKiD,EAAAA,OAAO,SAAAnH,GAAS,OAAAA,aAAiB2zC,EAAAA,iBACtExwC,UAAU,WAAM,OAAAvB,EAAK4tB,SAAW5tB,EAAKgyC,cAAchyC,EAAKiyC,qCA7B7DP,EAAAxzC,UAAA,yBACA,GAAIqB,KAAK0yC,KACL,OAAO1yC,KAAKoyC,QAAQ1pB,SAAS1oB,KAAK0yC,MAAM,oCAahD/uC,OAAA2G,eAAI6nC,EAAAxzC,UAAA,gBAAJ,WAAA,IAAA8B,EAAAT,KACI,OAAOA,KAAK2yC,UAAU3sC,OAAO,SAAA6X,GAAQ,OAAAA,IAASpd,qCAgBlD0xC,EAAAxzC,UAAA6N,gBAAA,WAEI,IAAMomC,EAAoB5yC,KAAK2C,YAAYnC,cAAcy7B,cACzD,GAAI2W,EAAmB,CACnB,IAAMC,EAAqB7yC,KAAK8yC,gBACR,EAApBD,EAAW/tC,SACX9E,KAAKE,UAAU0c,SAASg2B,EAAmB,OAC3C5yC,KAAKE,UAAU0c,SAASg2B,EAAmBC,MAKvDV,EAAAxzC,UAAAo0C,mBAAA,WAAA,IAAAtyC,EAAAT,KAEIA,KAAKgzC,wBAGLhzC,KAAKizC,iBAAmBjzC,KAAK2yC,UAAUjgB,QAAQ1wB,UAAU,WAAM,OAAAvB,EAAKuyC,2BAGxEb,EAAAxzC,UAAAyB,YAAA,WACIJ,KAAKuyC,eAAejyC,cACpBN,KAAKizC,iBAAiB3yC,eAGlB6xC,EAAAxzC,UAAA8zC,uBAAcC,GAElB,IAAMQ,EAAOlzC,KAAKoyC,QAAQe,eAAeT,IACrCU,WAAYpzC,KAAKqyC,gBACjBgB,YAAarzC,KAAKqyC,gBAAgBiB,SAASD,YAC3CE,SAAUvzC,KAAKqyC,gBAAgBiB,SAASC,WAG5C,SAAIb,IAAQ1yC,KAAKoyC,QAAQ1pB,SAASwqB,GAAM,KAKjClzC,KAAK8d,SAAS01B,KAAK,SAAC31B,GAAS,OAAAA,EAAK40B,cAAc50B,EAAK60B,SAGxDP,EAAAxzC,UAAAm0C,yBACJ,OAAQ9yC,KAAKsyC,OACT,KAAK,EACD,MAAO,mBACX,KAAK,EACD,MAAO,kBACX,KAAK,EACD,MAAO,mBACX,KAAK,EACD,MAAO,kBAGf,MAAO,IAGHH,EAAAxzC,UAAAq0C,iCACuB,EAAvBhzC,KAAK8d,SAAShZ,OAEd9E,KAAKyzC,oBAAqB,EACnBzzC,KAAKuL,QAEZvL,KAAKyzC,oBAAsBzzC,KAAKuL,QAAQuS,SAASvF,MAAM,SAACsF,GAAS,OAAyB,IAAzBA,EAAKC,SAAShZ,SAG/E9E,KAAKyzC,oBAAqB,uBApHrCx0C,EAAAA,UAASC,OACNC,SAAU,uBACVC,SAAU,qYAPwDkE,EAAAA,kBAAgEya,EAAAA,iBAgBzHo0B,EAAuB5hC,aAAApH,KA8B3BqH,EAAAA,WAAQrH,KAAIuqC,EAAAA,kBA7CmBC,EAAAA,cAA/BC,EAAAA,kDAiBJv0C,EAAAA,oBACAA,EAAAA,oBACAA,EAAAA,wBACAA,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,kCAErBgK,EAAAA,YAAWhK,MAAC,mCAaZ6N,EAAAA,gBAAe7N,MAACizC,GAA2BjY,aAAa,SApC7D,GCAA2Z,GAAA,oDAMCt0C,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAC,EAAAA,cAEJC,SACIuyC,GACAC,IAEJvyC,cACIsyC,GACAC,gDAjBR,GCAA2B,GAAA,WAWI,SAAAA,IACI,kBAHqBC,GAAUC,OAG3Bh0C,KAAKi0C,UAAUC,cACfl0C,KAAKm0C,iBAEL,IAAK,IAAIvoC,KAAO5L,KAAKi0C,UAAUG,cAC3Bp0C,KAAKq0C,QAAQzoC,GAAO5L,KAAKs0C,mBAAmBt0C,KAAKi0C,UAAUG,cAAcxoC,WAK7EkoC,EAAAn1C,UAAAw1C,qBAIJ,IAAK,IAAIvoC,KAFT5L,KAAKu0C,MAAQ,GAEGv0C,KAAKi0C,UAAUC,cAC3Bl0C,KAAKu0C,OAAS,eAAiBv0C,KAAKi0C,UAAUC,cAActoC,GAAO,iBAWvE,IAAK,IAAIA,KART5L,KAAKw0C,SAAWl4B,SAASjb,cAAc,OACvCrB,KAAKw0C,SAASC,UAAY,cAC1Bz0C,KAAKw0C,SAASE,UAAY10C,KAAKu0C,MAE/Bj4B,SAASc,KAAK5b,YAAYxB,KAAKw0C,UAE/Bx0C,KAAKq0C,WAEWr0C,KAAKi0C,UAAUC,cAC3Bl0C,KAAKq0C,QAAQzoC,GAAO5L,KAAK20C,cAAc30C,KAAKi0C,UAAUC,cAActoC,IAGxE5L,KAAKw0C,SAASI,WAAWz3B,YAAYnd,KAAKw0C,WAGtCV,EAAAn1C,UAAA21C,4BAAmBO,GACvB,IAAMC,EAAMD,EAAMxkB,QAAQ,IAAK,IAEzB9qB,EAAIqc,SAASkzB,EAAIlxB,UAAU,EAAG,GAAI,IAAIjI,WACtCo5B,EAAInzB,SAASkzB,EAAIlxB,UAAU,EAAG,GAAI,IAAIjI,WACtC3X,EAAI4d,SAASkzB,EAAIlxB,UAAU,EAAG,GAAI,IAAIjI,WAE5C,OAAO,IAAIq5B,GAAWzvC,EAAGwvC,EAAG/wC,EAAG,MAG3B8vC,EAAAn1C,UAAAg2C,uBAAcE,GAElB,IAAM7lC,EAAShP,KAAKw0C,SAAS5kB,cAAc,IAAM5vB,KAAKi0C,UAAUC,cAAcW,GAAS,UAEvF,IAAK7lC,EACD,MAAM,IAAIoF,MAAM,iBAGpB,IAEM6gC,EAFah0C,OAAOC,iBAAiB8N,GAAQkmC,gBAE3Br9B,MAAM,8DAE9B,OAAO,IAAIm9B,GAAWC,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,KAG1DnB,EAAAn1C,UAAAw2C,SAAA,SAASN,GACL,IAAMO,EAAap1C,KAAKq0C,QAAQr0C,KAAKq1C,iBAAiBR,IACtD,IAAKO,EACD,MAAM,IAAIhhC,MAAM,oBAAsBygC,GAG1C,OAAO,IAAIG,GAAWI,EAAWE,SAAUF,EAAWG,WAAYH,EAAWI,UAAWJ,EAAWK,aAGvG3B,EAAAn1C,UAAA+2C,YAAA,WACI,OAAO11C,KAAKi0C,WAGhBH,EAAAn1C,UAAAg3C,YAAA,SAAYC,GAIR,GAHA51C,KAAKi0C,UAAY2B,EACjB51C,KAAKq0C,WAEDr0C,KAAKi0C,UAAUC,cACfl0C,KAAKm0C,iBAEL,IAAK,IAAIvoC,KAAO5L,KAAKi0C,UAAUG,cAC3Bp0C,KAAKq0C,QAAQzoC,GAAO5L,KAAKs0C,mBAAmBt0C,KAAKi0C,UAAUG,cAAcxoC,KAKrFkoC,EAAAn1C,UAAA6kC,QAAA,SAAQp+B,GACJ,GAAKA,EAAL,CAIA,IAAMywC,EAAY71C,KAAKq1C,iBAAiBjwC,GAExC,IAAK,IAAIyvC,KAAS70C,KAAKq0C,QACnB,GAAIwB,IAAchB,EAAM7O,cACpB,OAAOhmC,KAAKm1C,SAASU,GAAWC,SAIxC,OAAO1wC,IAGX0uC,EAAAn1C,UAAA02C,iBAAA,SAAiBjwC,GACb,YADa,IAAAA,IAAAA,EAAA,IACNA,EAAMirB,QAAQ,OAAQ,KAAK2V,mCA7GzCzjC,EAAAA,qDAHD,GAoHAyyC,GAAA,WAOI,SAAAA,EAAYzvC,EAAWwvC,EAAW/wC,EAAW+xC,GACzC/1C,KAAKg2C,GAAKzwC,EACVvF,KAAKi2C,GAAKlB,EACV/0C,KAAKkoB,GAAKlkB,EACVhE,KAAK0I,GAAKqtC,IAAMtiC,UAAY,IAAMsiC,SAG/Bf,EAAAkB,MAAP,SAAa9wC,GACT,IAAIG,EAAGwvC,EAAG/wC,EAAG+xC,EAAI,IAMXI,EAAY/wC,EAAMyS,MAJJ,8DAKdu+B,EAAgBhxC,EAAMyS,MAJJ,oCAKlBw+B,EAAejxC,EAAMyS,MAJJ,4CAMvB,GAAIs+B,EACA5wC,EAAI4wC,EAAU,GACdpB,EAAIoB,EAAU,GACdnyC,EAAImyC,EAAU,GACdJ,EAAII,EAAU,GAAKA,EAAU,GAAK,SAC/B,GAAIE,EACP9wC,EAAIqc,SAASy0B,EAAa,GAAI,IAAI16B,WAClCo5B,EAAInzB,SAASy0B,EAAa,GAAI,IAAI16B,WAClC3X,EAAI4d,SAASy0B,EAAa,GAAI,IAAI16B,eAC/B,CAAA,IAAIy6B,EAKP,MAAM,IAAIhiC,MAAM,wBAAwBhP,EAAK,0BAJ7CG,EAAIqc,SAASw0B,EAAc,GAAKA,EAAc,GAAI,IAAIz6B,WACtDo5B,EAAInzB,SAASw0B,EAAc,GAAKA,EAAc,GAAI,IAAIz6B,WACtD3X,EAAI4d,SAASw0B,EAAc,GAAKA,EAAc,GAAI,IAAIz6B,WAI1D,OAAO,IAAIq5B,EAAWzvC,EAAGwvC,EAAG/wC,EAAG+xC,IAGnCf,EAAAr2C,UAAA23C,MAAA,WACI,IAAIC,EAAM30B,SAAS5hB,KAAKg2C,IAAIr6B,SAAS,IACjC66B,EAAQ50B,SAAS5hB,KAAKi2C,IAAIt6B,SAAS,IACnC86B,EAAO70B,SAAS5hB,KAAKkoB,IAAIvM,SAAS,IAYtC,OAVI46B,EAAIzxC,OAAS,IACbyxC,EAAM,IAAMA,GAEZC,EAAM1xC,OAAS,IACf0xC,EAAQ,IAAMA,GAEdC,EAAK3xC,OAAS,IACd2xC,EAAO,IAAMA,GAGV,IAAMF,EAAMC,EAAQC,GAG/BzB,EAAAr2C,UAAA+3C,MAAA,WACI,MAAO,OAAS12C,KAAKg2C,GAAK,KAAOh2C,KAAKi2C,GAAK,KAAOj2C,KAAKkoB,GAAK,KAGhE8sB,EAAAr2C,UAAAm3C,OAAA,WACI,MAAO,QAAU91C,KAAKg2C,GAAK,KAAOh2C,KAAKi2C,GAAK,KAAOj2C,KAAKkoB,GAAK,KAAOloB,KAAK0I,GAAK,KAGlFssC,EAAAr2C,UAAA22C,OAAA,WACI,OAAOt1C,KAAKg2C,IAGhBhB,EAAAr2C,UAAA42C,SAAA,WACI,OAAOv1C,KAAKi2C,IAGhBjB,EAAAr2C,UAAA62C,QAAA,WACI,OAAOx1C,KAAKkoB,IAGhB8sB,EAAAr2C,UAAA82C,SAAA,WACI,OAAOz1C,KAAK0I,IAGhBssC,EAAAr2C,UAAAg4C,OAAA,SAAOJ,GAEH,OADAv2C,KAAKg2C,GAAKO,EACHv2C,MAGXg1C,EAAAr2C,UAAAi4C,SAAA,SAASJ,GAEL,OADAx2C,KAAKi2C,GAAKO,EACHx2C,MAGXg1C,EAAAr2C,UAAAk4C,QAAA,SAAQJ,GAEJ,OADAz2C,KAAKkoB,GAAKuuB,EACHz2C,MAGXg1C,EAAAr2C,UAAAm4C,SAAA,SAASC,GAEL,OADA/2C,KAAK0I,GAAKquC,EAAMp7B,WACT3b,QAvGf,GA2Ga+zC,IACTC,QACIE,eACI/V,QAAW,UACX6Y,OAAU,SACVC,UAAa,YACbC,WAAc,aACdC,WAAc,aACdC,WAAc,aACdC,SAAY,WACZC,SAAY,WACZC,MAAS,QACTC,MAAS,QACTC,MAAS,QACTC,MAAS,QACTC,MAAS,QACTC,MAAS,QACTC,MAAS,QACTC,MAAS,QACTC,OAAU,SACVC,OAAU,SACVC,OAAU,SACVC,OAAU,SACVC,OAAU,SACVC,OAAU,SACVC,GAAM,KACNC,QAAW,UACXC,SAAY,WACZC,WAAc,aACdC,WAAc,aACdC,YAAe,cACfC,YAAe,cACfC,YAAe,cACfC,YAAe,cACfC,YAAe,cACfC,oBAAqB,oBACrBC,oBAAqB,sBAG7BC,YACI7E,eACI8E,SAAY,UACZC,KAAQ,UACRC,WAAc,UACdC,QAAW,UACXC,OAAU,UACVC,YAAa,UACbC,MAAS,UACTC,gBAAiB,UACjBC,cAAe,UACfC,KAAQ,UACRC,OAAU,UACVC,WAAY,UACZC,YAAa,UACbC,MAAS,UACTC,mBAAoB,UACpBC,QAAW,UACXC,OAAU,UACVC,iBAAkB,UAClBC,YAAe,UACfC,QAAW,UACXC,YAAa,UACbC,aAAc,UACdC,KAAQ,UACRC,OAAU,UACVC,QAAW,UACXC,cAAe,UACfC,mBAAoB,UACpBC,UAAa,UACbC,cAAe,UACfC,QAAW,UACXC,MAAS,UACTC,UAAa,UACbC,OAAU,UACVC,gBAAiB,UACjB5E,IAAO,UACP6E,aAAc,UACdC,aAAc,UACdC,eAAgB,UAChBC,KAAQ,UACRC,OAAU,UACVC,MAAS,UACTC,aAAc,UACdC,eAAgB,UAChBxd,QAAW,UACX6Y,OAAU,UACVC,UAAa,UACbC,WAAc,UACdC,WAAc,UACdC,WAAc,UACdC,SAAY,UACZC,SAAY,UACZC,MAAS,UACTC,MAAS,UACTC,MAAS,UACTC,MAAS,UACTC,MAAS,UACTC,MAAS,UACTC,MAAS,UACTC,MAAS,UACTC,OAAU,UACVC,OAAU,UACVC,OAAU,UACVC,OAAU,UACVC,OAAU,UACVC,OAAU,UACVC,GAAM,UACNC,QAAW,UACXC,SAAY,SACZC,WAAc,UACdC,WAAc,UACdC,YAAe,UACfC,YAAe,UACfC,YAAe,UACfC,YAAe,UACfC,YAAe,UACfC,oBAAqB,UACrBC,oBAAqB,aCpVjC4C,GAAA,oDAGCr8C,EAAAA,SAAQL,OACLmE,WAAYywC,gDAJhB,iBCoEI,SAAA+H,EAAoBC,GAAA97C,KAAA87C,cAAAA,gBA3DhBtU,SAAU,EACV1mC,OAAQ,IACRi7C,QAAS,GACT7G,gBAAiBl1C,KAAK87C,cAAc3G,SAAS,UAAUmB,QACvD0F,UAAWh8C,KAAK87C,cAAc3G,SAAS,UAAUmB,wBAGd,4BAEc,IAAI31C,EAAAA,2BAEzDk7C,EAAAl9C,UAAA6zB,KAAA,SAAKypB,EAA+BpqC,EAA6C2oB,GAAjF,IAAA/5B,EAAAT,UAAoC,IAAA6R,IAAAA,EAA+B7R,KAAK6R,cAAS,IAAA2oB,IAAAA,MAI7E,IAAM0hB,GACFD,YAAaA,EACbzU,UAJJ31B,EAAOtN,KAAQvE,KAAK6R,QAAYA,IAIV21B,SAClB9nB,KAAM,IAAI9Q,KACVsC,SAAS,EACTpQ,OAAQ+Q,EAAQ/Q,OAChBi7C,QAASlqC,EAAQkqC,QACjB7G,gBAAiBrjC,EAAQqjC,gBACzB8G,UAAWnqC,EAAQmqC,UACnBxhB,KAAMA,GAGJ2hB,EAAgBn8C,KAAKo8C,eAAe30C,WAe1C,MAbuB,UAAnBzH,KAAK0H,UACLy0C,EAAcE,QAAQH,GAEtBC,EAAcz2C,KAAKw2C,GAGvBl8C,KAAKo8C,eAAel6C,KAAKi6C,GAGA,IAArBtqC,EAAQ21B,UACRllC,WAAW,WAAM,OAAA7B,EAAK67C,QAAQJ,IAAqC,IAAnBrqC,EAAQ21B,UAGrD0U,GAGXL,EAAAl9C,UAAA49C,WAAA,WACI,OAAOv8C,KAAKo8C,eAAe30C,YAG/Bo0C,EAAAl9C,UAAA29C,QAAA,SAAQJ,GACJA,EAAgBhrC,SAAU,EAC1BlR,KAAKo8C,eAAel6C,KAAKlC,KAAKo8C,eAAe30C,aAGjDo0C,EAAAl9C,UAAA69C,WAAA,WACIx8C,KAAKo8C,eAAe30C,WAAWiF,QAAQ,SAAAwvC,GAAmB,OAAAA,EAAgBhrC,SAAU,IACpFlR,KAAKo8C,eAAel6C,KAAKlC,KAAKo8C,eAAe30C,iCA7DpDlF,EAAAA,sDAFQuxC,WCFT2I,GAAA,WA2CI,SAAAA,EAAoBC,GAAA18C,KAAA08C,qBAAAA,gBAN+C,gCAEnB18C,KAAK08C,qBAAqBN,eAAer5C,KACrF+D,EAAAA,IAAI,SAAC61C,GAAwC,OAAAA,EAAiB32C,OAAO,SAAAk2C,GAAmB,OAAAA,EAAgBhrC,0CAPxGurC,EAAA99C,UAAA,0BAAU+I,GACV1H,KAAK08C,qBAAqBh1C,UAAYA,uDA5B7CzI,EAAAA,UAASC,OACNC,SAAU,uBACVC,SAAU,geAQV2H,gBAAiBC,EAAAA,wBAAwBC,OACzC22B,YACIjB,EAAAA,QAAQ,qBACJ9wB,EAAAA,MAAM,KAAM+R,EAAAA,OAAQwB,UAAW,gBAAiB2e,QAAS,MACzDF,EAAAA,WAAW,UACPjgB,EAAAA,OAAQwB,UAAW,oBAAqB2e,QAAS,IACjDE,EAAAA,QAAQ,OAEZJ,EAAAA,WAAW,UACPI,EAAAA,QAAQ,IAAKrgB,EAAAA,OAAQwB,UAAW,mBAAoB2e,QAAS,uDAxBpE8d,yCA+BJx8C,EAAAA,wBAKAA,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,cArC1B,GCAA09C,GAAA,oDAMCr9C,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAm8C,IAEJj8C,SACI88C,IAEJ78C,cACI68C,IAEJp5C,WACIw4C,gDAlBR,GCGagB,IACTtzC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAozC,KAC9BlzC,OAAO,yCA4CiBmzC,mBACDA,oBACC,kBACK,cACJ,wBACE,SAACnvB,iBAEF,mBACF,IAAI/qB,EAAAA,0CAGxBi6C,EAAAn+C,UAAA,wBACA,OAAOqB,KAAK+J,YAEhB,SAAU3E,GACNpF,KAAK+J,OAAS3E,EACdpF,KAAKmK,YAAYhH,KAAKiC,GACtBpF,KAAKg9C,iBAAiB53C,0DAItB03C,EAAAn+C,UAAA,sBACA,OAAOqB,KAAKi9C,UAEhB,SAAQ73C,GACJpF,KAAKi9C,KAAwB,iBAAV73C,EAAqB6D,WAAW7D,GAASA,yDAI5D03C,EAAAn+C,UAAA,sBACA,OAAOqB,KAAKk9C,UAEhB,SAAQ93C,GACJpF,KAAKk9C,KAAwB,iBAAV93C,EAAqB6D,WAAW7D,GAASA,yDAI5D03C,EAAAn+C,UAAA,uBACA,OAAOqB,KAAK2iC,WAEhB,SAASv9B,GACLpF,KAAK2iC,MAAyB,iBAAVv9B,EAAqB6D,WAAW7D,GAASA,yDAI7D03C,EAAAn+C,UAAA,2BACA,OAAOqB,KAAKm9C,eAEhB,SAAa/3C,GACTpF,KAAKm9C,UAA6B,iBAAV/3C,IAAiC,KAAVA,GAA0B,SAAVA,GAA8B,aAAVA,KAAmC,IAAVA,mCAGhH03C,EAAAn+C,UAAAkgB,UAAA,SAAUhgB,GACNA,EAAM4d,iBAEDzc,KAAKyK,WACNzK,KAAKoF,MAAQkD,KAAKE,IAAIF,KAAKC,IAAIvI,KAAKoF,MAAQpF,KAAK6iC,KAAM7iC,KAAKwI,KAAMxI,KAAKuI,OAI/Eu0C,EAAAn+C,UAAAmgB,UAAA,SAAUjgB,GACNA,EAAM4d,iBAEDzc,KAAKyK,WACNzK,KAAKoF,MAAQkD,KAAKC,IAAID,KAAKE,IAAIxI,KAAKoF,MAAQpF,KAAK6iC,KAAM7iC,KAAKuI,KAAMvI,KAAKwI,OAI/Es0C,EAAAn+C,UAAA0hB,QAAA,WACI,QAAIrgB,KAAKoF,MAAQpF,KAAKuI,KAAOvI,KAAKoF,MAAQpF,KAAKwI,MAIxCxI,KAAKogB,OAGhB08B,EAAAn+C,UAAAy+C,SAAA,SAASv+C,IAEaA,EAAM6f,QAAU7f,EAAMw+C,YAEtB,EACdr9C,KAAK6e,UAAUhgB,GAEfmB,KAAK8e,UAAUjgB,IAIvBi+C,EAAAn+C,UAAAgM,WAAA,SAAWvF,GACHA,IAAUqO,YACVzT,KAAK+J,OAAS3E,IAItB03C,EAAAn+C,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAKg9C,iBAAmBnyC,GAG5BiyC,EAAAn+C,UAAAmM,kBAAA,SAAkBD,KAElBiyC,EAAAn+C,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,uBA7IvB/L,EAAAA,UAASC,OACNC,SAAU,mBACVC,SAAU,w4BAgCViE,WAAYw5C,IACZz6B,MACIk7B,oBAAqB,uFAYxBj+C,EAAAA,2BACAkE,EAAAA,sBAEAlE,EAAAA,MAAKH,MAAC,sBAUNG,EAAAA,mBAQAA,EAAAA,oBAQAA,EAAAA,wBAQAA,EAAAA,cC9FLk+C,GAAA,oDAMCh+C,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyL,EAAAA,aAEJvL,SAAUm9C,IACVl9C,cAAek9C,gDAZnB,GCAAU,GAAA,qCAOc,IAAI78C,EAAAA,gBAA6C,iCAH9D4B,EAAAA,qDAJD,GCAAk7C,GAAA,WAaI,SAAAA,EAAYpc,EAAwC1+B,GAApD,IAAAlC,EAAAT,KAAoDA,KAAA2C,YAAAA,iBAJ9B,IAAIE,EAAAA,aAKtB7C,KAAKK,cAAgBghC,EAAQqc,QAAQ17C,UAAU,SAACE,GACxCA,IAASzB,GACTA,EAAKk9C,qBAKjBF,EAAA9+C,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBm9C,EAAA9+C,UAAAg/C,UAAA,WACI39C,KAAK2C,YAAYnC,cAAc2rB,QAC/BnsB,KAAK49C,UAAUz6C,4BAvBtBC,EAAAA,UAASlE,OACNC,SAAU,sEAHLq+C,UAFWl6C,EAAAA,iDASfC,EAAAA,YATL,GCAAs6C,GAAA,WAoCI,SAAAA,EACY3lB,EACAv1B,EACU2Z,GAFVtc,KAAAk4B,SAAAA,EACAl4B,KAAA2C,YAAAA,4BApBgD,wBAG7C,IAAIE,EAAAA,gCAaK,IAAI5C,EAAAA,aAOxBD,KAAK89C,UAAYxhC,SAfrB3Y,OAAA2G,eAAIuzC,EAAAl/C,UAAA,mBAAJ,WACI,OAAOqB,KAAK+9C,cAAc7vC,QAAQlO,KAAKk4B,SAASwlB,QAAQt4C,wCAiB5Dy4C,EAAAl/C,UAAAmE,SAAA,WACQ9C,KAAKg+C,cACLh+C,KAAKK,cAAcyB,IACf9B,KAAKg+C,aAAaC,SAASj8C,UAAUhC,KAAKk+C,WAAWvwC,KAAK3N,SAKtE69C,EAAAl/C,UAAAo0C,mBAAA,WAAA,IAAAtyC,EAAAT,KAEIA,KAAKK,cAAcyB,IACf9B,KAAKwiB,MAAMkQ,QAAQ1wB,UAAU,WACzBvB,EAAKs9C,cAAgBt9C,EAAK+hB,MAAMshB,aAIxC9jC,KAAK+9C,cAAgB/9C,KAAKwiB,MAAMshB,WAGpC+Z,EAAAl/C,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBu9C,EAAAl/C,UAAAu/C,WAAA,WACIl+C,KAAKm+C,aAITN,EAAAl/C,UAAAy/C,wBAAev/C,GAGX,GAAKmB,KAAK2C,YAAYnC,cAAcs4B,SAAS94B,KAAK89C,UAAUjuB,eAA5D,CAIA,IAAIwuB,GAAU,EAEd,OAAQx/C,EAAM+M,KAEV,IAAK,UACL,IAAK,KACD5L,KAAKs+C,aAAaz/C,GAClBw/C,GAAU,EACV,MAEJ,IAAK,YACL,IAAK,OACDr+C,KAAKu+C,SAAS1/C,GACdw/C,GAAU,EACV,MAEJ,IAAK,YACL,IAAK,OACiC,SAA9Br+C,KAAKw+C,uBACLx+C,KAAKy+C,mBAAmB5/C,GACxBw/C,GAAU,GAEd,MAEJ,IAAK,aACL,IAAK,QACiC,UAA9Br+C,KAAKw+C,uBACLx+C,KAAKy+C,mBAAmB5/C,GACxBw/C,GAAU,GAEd,MAEJ,IAAK,OACDr+C,KAAKm+C,YACLE,GAAU,EACV,MAEJ,IAAK,MACDr+C,KAAK0+C,WACLL,GAAU,EACV,MAEJ,IAAK,SACDr+C,KAAK2+C,aAAax7C,KAAKtE,GACvBw/C,GAAU,EAIdA,IACAx/C,EAAM4d,iBACN5d,EAAM+/C,qBAINf,EAAAl/C,UAAA4/C,kBAAS1/C,GAGb,KAAImB,KAAK6+C,YAAc,GAAvB,CAIA,IAAMC,EAAY9+C,KAAK6+C,YAAc,EACjCC,EAAY9+C,KAAK+9C,cAAcj5C,OAI/B9E,KAAKk4B,SAASwlB,QAAQx7C,KAAKlC,KAAK+9C,cAAce,IAKZ,WAA9B9+C,KAAKw+C,sBACLx+C,KAAKy+C,mBAAmB5/C,KAK5Bg/C,EAAAl/C,UAAA2/C,sBAAaz/C,GAGjB,KAAImB,KAAK6+C,YAAc,GAAvB,CAIA,IAAMC,EAAY9+C,KAAK6+C,YAAc,EACpB,GAAbC,EAIA9+C,KAAKk4B,SAASwlB,QAAQx7C,KAAKlC,KAAK+9C,cAAce,IAKZ,QAA9B9+C,KAAKw+C,sBACLx+C,KAAKy+C,mBAAmB5/C,KAK5Bg/C,EAAAl/C,UAAAw/C,qBAC4B,EAA5Bn+C,KAAK+9C,cAAcj5C,QACnB9E,KAAKk4B,SAASwlB,QAAQx7C,KAAKlC,KAAK+9C,cAAc,KAI9CF,EAAAl/C,UAAA+/C,oBAC4B,EAA5B1+C,KAAK+9C,cAAcj5C,QACnB9E,KAAKk4B,SAASwlB,QAAQx7C,KAAKlC,KAAK+9C,cAAc/9C,KAAK+9C,cAAcj5C,OAAS,KAI1E+4C,EAAAl/C,UAAA8/C,4BAAmB5/C,GACnBmB,KAAKg+C,eACLh+C,KAAKg+C,aAAa7xB,QAClBnsB,KAAKg+C,aAAae,UAAW,GAGjC/+C,KAAK2+C,aAAax7C,KAAKtE,wBA9L9BuE,EAAAA,UAASlE,OACNC,SAAU,qBACVkN,SAAU,mBACVhJ,WAAYm6C,iDALPA,UAL8Cl6C,EAAAA,8CAuC9C07C,EAAAA,OAAM9/C,MAAC+/C,EAAAA,qDAzBX5/C,EAAAA,oCAGAA,EAAAA,4BAGAkE,EAAAA,sBAGAwJ,EAAAA,gBAAe7N,MAACu+C,IAA+BvjB,aAAa,4BAgD5D8C,EAAAA,aAAY99B,MAAC,oBAAqB,gBAvEvC,GCAAggD,GAAA,WA4BI,SAAAA,EAAoBv8C,GAAA3C,KAAA2C,YAAAA,oBATgC,6BAGnC,IAAIE,EAAAA,2BAEV,IAAIA,EAAAA,0CAfXq8C,EAAAvgD,UAAA,2BACA,OAAOqB,KAAKm/C,eAGhB,SAAa/5C,GACTpF,KAAKm/C,UAAY/5C,EACjBpF,KAAKo/C,eAAej8C,KAAKiC,oCAe7B85C,EAAAvgD,UAAAwtB,MAAA,WACInsB,KAAK2C,YAAYnC,cAAc2rB,SAInC+yB,EAAAvgD,UAAAy/C,wBAAev/C,cAEPmB,KAAKq/C,WAAWxgD,EAAM+M,OAGtB5L,KAAK++C,UAAW,EAGhBz8C,WAAW,WACP7B,EAAKw9C,SAAS96C,SAGlBtE,EAAM4d,iBACN5d,EAAM+/C,oBAINM,EAAAvgD,UAAA0gD,oBAAWzzC,GACf,OAAQA,GACJ,IAAK,QACL,IAAK,IACD,OAAO,EAEX,IAAK,UACL,IAAK,KACD,MAA6B,QAAtB5L,KAAKs/C,aAEhB,IAAK,YACL,IAAK,OACD,MAA6B,WAAtBt/C,KAAKs/C,aAEhB,IAAK,YACL,IAAK,OACD,MAA6B,SAAtBt/C,KAAKs/C,aAEhB,IAAK,aACL,IAAK,QACD,MAA6B,UAAtBt/C,KAAKs/C,aAGpB,OAAO,uBAzEdl8C,EAAAA,UAASlE,OACNC,SAAU,2BACVkN,SAAU,sEAJM/I,EAAAA,gDAQfjE,EAAAA,4BAUAA,EAAAA,8BAGAkE,EAAAA,+BAaAy5B,EAAAA,aAAY99B,MAAC,WAAY,gBAlC9B,GCMMqgD,IACF1B,GACAJ,GACAyB,2DAGH3/C,EAAAA,SAAQL,OACLM,WACAG,QAAS4/C,GACT3/C,aAAc2/C,kDCflBC,GAAA,oDAECp8C,EAAAA,UAASlE,OACNC,SAAU,uEAHd,GCAAsgD,GAAA,WAmBI,SAAAA,IAAA,IAAAh/C,EAAAT,iBATS,IAAIW,EAAAA,mCACD,IAAIA,EAAAA,gBAA0C,yBAC1C,IAAIA,EAAAA,gBAA0C,sBACjD,IAAIA,EAAAA,iBAAyB,wBACxB,IAAIA,EAAAA,gBAAoC,0CAC1B,EAK5BX,KAAKK,cAAgBL,KAAK6kB,UAAU9hB,KAAK+D,EAAAA,IAAI,SAAA6mB,GAAY,OAAAltB,EAAKi/C,QAAQ/xB,MAAY3rB,UAAU,SAAAw8B,GAAQ,OAAA/9B,EAAKk/C,cAAcz9C,KAAKs8B,YAGhIihB,EAAA9gD,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBm/C,EAAA9gD,UAAA6H,OAAA,SAAOqX,GAEH,GAAI7d,KAAK4/C,+BAAiC/hC,GAAQA,EAAKC,UAAmC,EAAvBD,EAAKC,SAAShZ,OAG7E9E,KAAK6kB,UAAU3iB,KAAK2b,EAAKC,SAAS,QAE/B,CAGH,IAAmC,IAA/B9d,KAAK6/C,WAAWp4C,YAAuBzH,KAAK8/C,WAAW9/C,KAAK6kB,UAAUpd,WAAYoW,GAClF,OAIJ7d,KAAK6kB,UAAU3iB,KAAK2b,KAI5B4hC,EAAA9gD,UAAAohD,SAAA,SAASliC,GAAT,IAAApd,EAAAT,KAGI6d,EAAK8P,UAAW,EAGZ9P,EAAKC,UACLD,EAAKC,SAASpR,QAAQ,SAAA+c,GAAS,OAAAhpB,EAAKs/C,SAASt2B,MAIrDg2B,EAAA9gD,UAAAkvB,YAAA,WAAA,IAAAptB,EAAAT,KACIA,KAAKggD,OAAOv4C,WAAWiF,QAAQ,SAAAmR,GAAQ,OAAApd,EAAKs/C,SAASliC,MAGzD4hC,EAAA9gD,UAAAshD,WAAA,SAAWpiC,EAAgC8P,GAGvC9P,EAAK8P,SAAY9P,IAAS8P,GAAa3tB,KAAK8/C,WAAWnyB,EAAU9P,GAE7DA,IAAS8P,GAEL9P,EAAKrX,QACLqX,EAAKrX,OAAOxH,KAAK6e,EAAMA,IAKnC4hC,EAAA9gD,UAAAuhD,SAAA,SAAS19B,GAAT,IAAA/hB,EAAAT,UAAS,IAAAwiB,IAAAA,MAELA,EAAM9V,QAAQ,SAAAmR,GAAQ,OAAApd,EAAK0/C,UAAUtiC,KAErC7d,KAAKggD,OAAO99C,KAAKsgB,GAGjB,IAAM49B,EAAsB59B,EAAMrc,KAAK,SAAA0X,GAAQ,OAAkB,IAAlBA,EAAK8P,WACpD3tB,KAAKwG,OAAO45C,IAGhBX,EAAA9gD,UAAA0hD,uBAAA,SAAuBC,GACnBtgD,KAAK6/C,WAAW39C,KAAKo+C,IAGjBb,EAAA9gD,UAAA+gD,iBAAQ7hC,GACZ,OAAOA,GAAQA,EAAKvS,OAAStL,KAAK0/C,QAAQ7hC,EAAKvS,QAAUuS,GAGrD4hC,EAAA9gD,UAAAwhD,mBAAUtiC,EAA4BvS,cAE1CuS,EAAKvS,OAASA,EAGVuS,EAAKC,UACLD,EAAKC,SAASpR,QAAQ,SAAA0yB,GAAS,OAAA3+B,EAAK0/C,UAAU/gB,EAAOvhB,MAIrD4hC,EAAA9gD,UAAAmhD,oBAAW/gB,EAA4BzzB,GAG3C,SAAKyzB,IAASA,EAAKzzB,UAKfyzB,EAAKzzB,SAAWA,GAKbtL,KAAK8/C,WAAW/gB,EAAKzzB,OAAQA,yBA7G3C/I,EAAAA,qDAPD,GCAAg+C,GAAA,WAmFI,SAAAA,EAAoBroB,GAApB,IAAAz3B,EAAAT,KAAoBA,KAAAk4B,SAAAA,EAChBl4B,KAAKK,cAAgB63B,EAASsoB,gBAAgBx+C,UAAU,SAACE,GAEjDA,IAASzB,EAAKggD,OACdhgD,EAAKigD,SAAU,YApB3B/8C,OAAA2G,eAAIi2C,EAAA5hD,UAAA,cAAJ,WACI,OAAOqB,KAAK0gD,aAGhB,SAAWt7C,IACPpF,KAAK0gD,QAAUt7C,IAEXpF,KAAKk4B,SAASsoB,gBAAgBt+C,KAAKlC,KAAKygD,uCAkBhDF,EAAA5hD,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBigD,EAAA5hD,UAAA6H,OAAA,SAAOqX,GACCA,EAAKrX,QACLqX,EAAKrX,OAAOxH,KAAK6e,EAAMA,IAI/B0iC,EAAA5hD,UAAAy/C,eAAA,SAAevgC,EAA2Dhf,GAEtE,OAAQA,EAAM+M,KACV,IAAK,QACL,IAAK,IACD5L,KAAKwG,OAAOqX,GACZ7d,KAAKuyB,QAAS,EACdvyB,KAAK2gD,qBAAqBx0B,QAC1BttB,EAAM4d,iBACN5d,EAAM+/C,wCAzGrB3/C,EAAAA,UAASC,OACNC,SAAU,2BACVC,SAAU,iuDAJLqgD,oCA6DJpgD,EAAAA,oCAaA+J,EAAAA,UAASlK,MAAC,6BA9Ef,GCAA0hD,GAAA,WAmGI,SAAAA,EAAoBC,GAApB,IAAApgD,EAAAT,KAAoBA,KAAA6gD,mBAAAA,qBALI,eAGY,IAAIt0C,EAAAA,QAKpCvM,KAAKK,cAAgBL,KAAK8gD,QAAQ/9C,KAAKC,EAAAA,aAAa,IAAIhB,UAAU,SAAAkP,GAAW,OAAAzQ,EAAKsgD,aAAe7vC,IAGjGlR,KAAKK,cAAcyB,IACf++C,EAAmBh8B,UAAU7iB,UAAU,WACnCvB,EAAKsgD,cAAe,YAKhCH,EAAAjiD,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBsgD,EAAAjiD,UAAA6H,OAAA,SAAOqX,GAGCA,EAAKC,UAKT9d,KAAK6gD,mBAAmBr6C,OAAOqX,IAGnC+iC,EAAAjiD,UAAAwtB,MAAA,WACInsB,KAAKghD,OAAOxgD,cAAc2rB,SAG9By0B,EAAAjiD,UAAAsiD,WAAA,WACIjhD,KAAK8gD,QAAQ5+C,MAAK,IAGtB0+C,EAAAjiD,UAAAuiD,WAAA,WACIlhD,KAAK8gD,QAAQ5+C,MAAK,IAGtB0+C,EAAAjiD,UAAA4+B,MAAA,WACIv9B,KAAK+gD,cAAe,GAGxBH,EAAAjiD,UAAAy/C,eAAA,SAAev/C,EAAsBgf,GAEjC,OAAQhf,EAAM+M,KACV,IAAK,QACL,IAAK,IACD5L,KAAKwG,OAAOqX,GACZhf,EAAM4d,iBACN5d,EAAM+/C,wCA/IrB3/C,EAAAA,UAASC,OACNC,SAAU,qDACVkN,SAAU,qDACVjN,SAAU,2tEANLqgD,oCAqFJpgD,EAAAA,sBAEA+J,EAAAA,UAASlK,MAAC,eA3Ff,GCAAiiD,GAAA,WAgFI,SAAAA,EACWljC,EACC4iC,GADD7gD,KAAAie,WAAAA,EACCje,KAAA6gD,mBAAAA,kBAR2B7gD,KAAK6gD,mBAAmBhB,kBAW/DsB,EAAAxiD,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAEIA,KAAKK,cAAgBL,KAAK6gD,mBAAmBh8B,UAAU7iB,UAAU,SAAAE,GAG7DzB,EAAKogD,mBAAmBZ,WAAWx/C,EAAKod,KAAM3b,GAE1CA,GAAQzB,EAAK8xB,SACb9xB,EAAK8xB,QAAS,EAGd9xB,EAAKugD,OAAO70B,WAIhBnsB,KAAKygD,MACLzgD,KAAKK,cAAcyB,IACf9B,KAAKygD,KAAKW,SAASp/C,UAAU,WAAM,OAAAvB,EAAK4gD,UAAU30C,QAAQ,SAAAgjB,GAAY,OAAAA,EAAS6N,cAK3F4jB,EAAAxiD,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvB6gD,EAAAxiD,UAAA6H,OAAA,WAGQxG,KAAK6d,KAAKC,WAA8D,IAAlD9d,KAAK6gD,mBAAmBhB,WAAWp4C,YAK7DzH,KAAK6gD,mBAAmBr6C,OAAOxG,KAAK6d,2BA9G3C5e,EAAAA,UAASC,OACNC,SAAU,4CACVC,SAAU,g4DAXMkE,EAAAA,kBAKXm8C,sCA+DJr2C,EAAAA,UAASlK,MAAC,wBACVkK,EAAAA,UAASlK,MAAC,2BACV+gC,EAAAA,aAAY/gC,MAAC0hD,kBAEbvhD,EAAAA,WAxEL,GCAAiiD,GAAA,WAgBI,SAAAA,EAAoBT,GAAA7gD,KAAA6gD,mBAAAA,kBAFC,IAAIt0C,EAAAA,eAIzB+0C,EAAA3iD,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAEIA,KAAK6gD,mBAAmBh8B,UAAU9hB,KAAKkO,EAAAA,MAAM,GAAIzD,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAE,GAGnFzB,EAAKogD,mBAAmBZ,WAAWx/C,EAAKod,KAAM3b,MAKtDo/C,EAAA3iD,UAAAyB,YAAA,WACIJ,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,gCAxBvB1L,EAAAA,UAASlE,OACNC,SAAU,qFAJLsgD,oCAQJpgD,EAAAA,MAAKH,MAAC,4CAXX,GCAAqiD,GAAA,WAmCI,SAAAA,EAAYtjC,EAAwBujC,EAAsCX,GAAA7gD,KAAA6gD,mBAAAA,cAPpB7gD,KAAK6gD,mBAAmBb,8BAClD,kBACP,sBACI,qBAED,IAAI//C,EAAAA,aAGxBD,KAAKK,cAAcyB,IAAI0/C,EAAcjhD,kBAAkB0d,EAAWzd,eAAewB,UAAUhC,KAAKyhD,wBAAwB9zC,KAAK3N,QAC7HA,KAAKK,cAAcyB,IAAI++C,EAAmBh8B,UAAU9hB,KAAKwK,EAAAA,wBAAwBvL,UAAUhC,KAAKyhD,wBAAwB9zC,KAAK3N,QAC7HA,KAAKK,cAAcyB,IAAI++C,EAAmBhB,WAAW98C,KAAKwK,EAAAA,wBAAwBvL,UAAUhC,KAAKyhD,wBAAwB9zC,KAAK3N,eAGlIuhD,EAAA5iD,UAAA6N,gBAAA,WACIxM,KAAKyhD,2BAGTF,EAAA5iD,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBihD,EAAA5iD,UAAA8iD,wBAAA,WAAA,IAAAhhD,EAAAT,KACIsC,WAAW,WAEP,IAAMqrB,EAAWltB,EAAKihD,UAAUv7C,KAAK,SAAA0X,GAAQ,OAAAA,EAAKA,KAAK8P,WAMvD,GAHAltB,EAAKkhD,mBAAqBh0B,EAGtBA,EAAU,CACV,IAAMhQ,EAASzc,iBAAiBysB,EAAS1P,WAAWzd,eAEpDC,EAAKmhD,WAAaj0B,EAAS1P,WAAWzd,cAAciI,WACpDhI,EAAKohD,eAAiBjgC,SAASjE,EAAOxc,iBAAiB,kCAtDtElC,EAAAA,UAASC,OACNC,SAAU,uCACVC,SAAU,oUAUVgjB,MACIkP,KAAQ,wDArBmBhuB,EAAAA,kBAI1BzD,SACsB4/C,yCAqB1Bxf,EAAAA,aAAY/gC,MAACiiD,SA1BlB,iBCiKI,SAAAW,EAAoBhG,EAAqC+E,GAArC7gD,KAAA87C,cAAAA,EAAqC97C,KAAA6gD,mBAAAA,iBA/DP,yBACpB,oBAEE,oCACgB,wBAgD1B,IAAIh+C,EAAAA,4BAI6B7C,KAAK6gD,mBAAmBh8B,6BACpB7kB,KAAK6gD,mBAAmBlB,2DAnDtEmC,EAAAnjD,UAAA,qCAIb,WACI,OAAOqB,KAAK6gD,mBAAmBjB,4CALQx6C,GACvCpF,KAAK6gD,mBAAmBjB,8BAAgCx6C,yDAO/C08C,EAAAnjD,UAAA,sBAAM6jB,GACfxiB,KAAK6gD,mBAAmBX,SAAS19B,0DAGxBs/B,EAAAnjD,UAAA,2BAIb,WACI,OAAOqB,KAAK6gD,mBAAmBhB,WAAWp4C,yBALb64C,GAC7BtgD,KAAK6gD,mBAAmBR,uBAAuBC,0DAOtCwB,EAAAnjD,UAAA,cAIb,WACI,OAAOqB,KAAK+hD,UAASn8C,EAAO5F,KAAKgiD,UAAWhzB,MAAOhvB,KAAK0mB,UAAY1mB,KAAKgiD,sBALzDC,GAChBjiD,KAAKgiD,QAAUC,yDAQfH,EAAAnjD,UAAA,wBAIJ,WACI,OAAOqB,KAAKkiD,gCALKrN,GACjB70C,KAAKkiD,kBAAoBliD,KAAK87C,cAActY,QAAQqR,0DAQpDiN,EAAAnjD,UAAA,wBAIJ,WACI,OAAOqB,KAAKmiD,gCALKtN,GACjB70C,KAAKmiD,kBAAoBniD,KAAK87C,cAActY,QAAQqR,oCAoBxDiN,EAAAnjD,UAAAyjD,OAAA,WACIpiD,KAAKqiD,UAAUl/C,QAGnB2+C,EAAAnjD,UAAA6H,OAAA,SAAOqX,GACH7d,KAAK6gD,mBAAmBr6C,OAAOqX,wBA/JtC5e,EAAAA,UAASC,OACNC,SAAU,iBACVkN,SAAU,iBACVjN,SAAU,ovGAgFViE,WAAao8C,iDA1FR3L,UAKsB2L,oCAyF1BpgD,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,4CACAA,EAAAA,6CAEAA,EAAAA,qBAQAA,EAAAA,mCAIAA,EAAAA,sBAQAA,EAAAA,gCAQAA,EAAAA,gCASAA,EAAAA,yBASAkE,EAAAA,4BAEAwJ,EAAAA,gBAAe7N,MAACsgD,IAAiCr4C,KAAMC,EAAAA,sBCxJ5Dk7C,GAAA,oDAgBC/iD,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAH,EACAs8C,GACAp4C,EACA++C,GACAnmB,EAAAA,iBAAiB9B,WAErB36B,SACImiD,GACAtC,IAEJ5/C,cACIkiD,GACAvB,GACAf,GACA+B,GACAJ,GACAP,GACAU,gDApCR,GCAAkB,GAAA,mCAa6B,WACF,wBACW,6BAbrCvjD,EAAAA,UAASC,OACNC,SAAU,kBACVC,SAAU,wTAMV2H,gBAAiBC,EAAAA,wBAAwBC,gFAGxC5H,EAAAA,mBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,WAjBL,GCAAojD,GAAA,oDAKCljD,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJE,SAAU6iD,IACV5iD,cAAe4iD,gDAVnB,GCGaE,IACTn5C,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAi5C,KAC9B/4C,OAAO,GAGPg5C,GAAgB,iDAsCiB,sBAAqBA,WAEhC5iD,KAAK6iD,6BAGC,kBACE,iBACD,mBACE,iBAEU,uBACU,0BACE,sBAEV,IAAIhgD,EAAAA,0BAsBzB,gBAEH,yBACa,mCACK,0CAvBjC8/C,EAAAhkD,UAAA,wBACA,OAAOqB,KAAK+J,YAGhB,SAAU3E,GACNpF,KAAK+J,OAAS3E,EAGdpF,KAAKmK,YAAYhH,KAAKnD,KAAK+J,QAG3B/J,KAAKoK,iBAAiBpK,KAAK+J,QAC3B/J,KAAKqK,qDAGT1G,OAAA2G,eAAIq4C,EAAAhkD,UAAA,eAAJ,WACI,OAAUqB,KAAKuK,IAAMvK,KAAK6iD,gBAAc,0CAS5CF,EAAAhkD,UAAA6L,OAAA,YAEQxK,KAAKyK,UAAazK,KAAK0K,YAK3B1K,KAAKoF,MAAQpF,KAAK8iD,OAGlB9iD,KAAKoK,iBAAiBpK,KAAKoF,SAI/Bu9C,EAAAhkD,UAAAgM,WAAA,SAAWvF,GACHA,IAAUpF,KAAK+J,SACf/J,KAAK+J,OAAS3E,IAItBu9C,EAAAhkD,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAKoK,iBAAmBS,GAG5B83C,EAAAhkD,UAAAmM,kBAAA,SAAkBD,GACd7K,KAAKqK,kBAAoBQ,GAG7B83C,EAAAhkD,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,uBA3GvB/L,EAAAA,UAASC,OACNC,SAAU,kBACVC,SAAU,glCA8BViE,WAAYq/C,0EAMXrjD,EAAAA,oBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,MAAKH,MAAC,sCACNG,EAAAA,MAAKH,MAAC,4CACNG,EAAAA,MAAKH,MAAC,yCAENqE,EAAAA,sBAEAlE,EAAAA,cC/DL0jD,GAAA,oDAKCxjD,EAAAA,SAAQL,OACLM,SAAU0L,EAAAA,aACVvL,SAAUgjD,IACV/iD,cAAe+iD,gDARnB,GCAAK,GAAA,uDAU6C,IAAIz2C,EAAAA,8BACF,IAAI5L,EAAAA,iBAAyB,qBAE3C,iDAO/BqiD,EAAArkD,UAAAskD,kBAAA,SAAkBt2C,GAGhB,GAAI3M,KAAKkjD,YAAY/8C,KAAK,SAAAg9C,GAAO,OAAAA,EAAI7jC,OAAS3S,EAAU2S,OACtD,MAAM,IAAIlL,MAAM,+DAA+DzH,EAAU2S,KAAI,2BAI/Ftf,KAAKkjD,YAAYx9C,KAAKiH,IAOxBq2C,EAAArkD,UAAAykD,mBAAA,SAAmB32C,GAAnB,IAAAhM,EAAAT,KACEyM,EAAWC,QAAQ,SAAAC,GAAa,OAAAlM,EAAKwiD,kBAAkBt2C,MAMzDq2C,EAAArkD,UAAA0kD,aAAA,SAAa/jC,GAGX,IAAM3S,EAAY3M,KAAKkjD,YAAY/8C,KAAK,SAAAg9C,GAAO,OAAAA,EAAI7jC,OAASA,IAG5D,IAAK3S,EACH,MAAM,IAAIyH,MAAM,2CAA2CkL,EAAI,WAMjE,OAFA3S,EAAU22C,OAAS32C,EAAU22C,WAEtB32C,GAOTq2C,EAAArkD,UAAA4kD,SAAA,SAASzlB,GACP99B,KAAK89B,MAAQn6B,OAAOa,UAAWs5B,IAMjCklB,EAAArkD,UAAA6kD,SAAA,WACE,OAAOxjD,KAAK89B,OAMdklB,EAAArkD,UAAA8kD,gBAAA,WACEzjD,KAAK0jD,YAAYxhD,KAAKlC,KAAK89B,QAM7BklB,EAAArkD,UAAAglD,SAAA,SAASp5C,EAAY6V,GAArB,IAAA3f,EAAAT,KAGEA,KAAK4jD,YAAYr5C,GAAM6V,EAGvBpgB,KAAK6jD,iBAAiB3hD,MAAMyB,OAAOmgD,KAAK9jD,KAAK4jD,aAAapQ,KAAK,SAAA5nC,GAAO,OAACnL,EAAKmjD,YAAYh4C,OAM1Fo3C,EAAArkD,UAAAolD,oBAAA,WACE,OAAO/jD,KAAKgkD,oCA1FfzhD,EAAAA,qDAND,GCAA0hD,GAAA,WASE,SAAAA,EAAoBC,GAAAlkD,KAAAkkD,sBAAAA,SAKpBD,EAAAtlD,UAAA8xC,KAAA,SAAKlmC,GAAL,IAAA9J,EAAAT,KAEEA,KAAKmkD,IAAM55C,EAGNvK,KAAKkkD,sBAAsBpmB,MAAM99B,KAAKmkD,OAGzCnkD,KAAKkkD,sBAAsBpmB,MAAM99B,KAAKmkD,QAGtC7hD,WAAW,WAAM,OAAA7B,EAAKyjD,sBAAsBT,sBAOhDQ,EAAAtlD,UAAAylD,OAAA,SAAOC,GAEL,IAAMvmB,EAAQ99B,KAAKwjD,WAGnB1lB,EAAMhxB,OAAOgxB,EAAM5vB,QAAQm2C,GAAQ,IAMrCJ,EAAAtlD,UAAA6kD,SAAA,WACE,OAAOxjD,KAAKkkD,sBAAsBpmB,MAAM99B,KAAKmkD,KAAOnkD,KAAKkkD,sBAAsBpmB,MAAM99B,KAAKmkD,6BAxC7F5hD,EAAAA,sDAFQygD,QAFT,GCAAsB,GAAA,WA0EE,SAAAA,EAAmBC,EAA8DL,GAA9DlkD,KAAAukD,0BAAAA,EAA8DvkD,KAAAkkD,sBAAAA,gBARjC,mBACrB,oCAES,WAEM,IAAIrhD,EAAAA,yBACY,IAAIA,EAAAA,oBAI9DyhD,EAAA3lD,UAAAmE,SAAA,WAGE,IAAK9C,KAAKuK,GACR,MAAM,IAAI6J,MAAM,oDAIlBpU,KAAKukD,0BAA0B9T,KAAKzwC,KAAKuK,KAG3C+5C,EAAA3lD,UAAA6lD,YAAA,SAAYH,GACVrkD,KAAKukD,0BAA0BH,OAAOC,GACtCrkD,KAAKokD,OAAOjhD,KAAKkhD,wBApFpBplD,EAAAA,UAASC,OACRC,SAAU,0BACVC,SAAU,6pDAqDViE,WAAY4gD,iDA3DLA,UACAjB,kCA8DN3jD,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,uBACAA,EAAAA,2BACAA,EAAAA,+BACAA,EAAAA,mBAEAkE,EAAAA,uBACAA,EAAAA,YAxEH,GCAAkhD,GAAA,WAaI,SAAAA,EACY/yB,EACAgzB,EACAR,GAFAlkD,KAAA0xB,kBAAAA,EACA1xB,KAAA0kD,0BAAAA,EACA1kD,KAAAkkD,sBAAAA,SAGZO,EAAA9lD,UAAAmE,SAAA,WAGI,IAAM6hD,EAAsB3kD,KAAKkkD,sBAAsBb,aAAarjD,KAAK4kD,uBAGnEC,EAAmB7kD,KAAK0kD,0BAA0BI,wBAAwBH,EAAoBh4C,WAGpG3M,KAAK+kD,cAAgB/kD,KAAK0xB,kBAAkBszB,gBAAgBH,GAG5D,IAAMvB,EAAS3/C,OAAOa,UAAWmgD,EAAoBrB,OAAQtjD,KAAKilD,6BAA6B3B,YAG/FtjD,KAAK+kD,cAAcjxB,SAAS1C,QAAUpxB,KAAKilD,6BAC3CjlD,KAAK+kD,cAAcjxB,SAASwvB,OAASA,uBAhC5ClgD,EAAAA,UAASlE,OACNC,SAAU,uEAJ6Dm2B,EAAAA,wBAAlE4vB,EAAAA,gCACAlC,qDAOJ3jD,EAAAA,4CACAA,EAAAA,WATL,GCAA8lD,GAAA,WA6CI,SAAAA,EACYjB,EACAkB,GADAplD,KAAAkkD,sBAAAA,EACAlkD,KAAAolD,2BAAAA,WAhCUplD,KAAKkkD,sBAAsBH,mCACvB,SAK1BpgD,OAAA2G,eAAI66C,EAAAxmD,UAAA,aAAJ,WACI,OAAOqB,KAAKoxB,QAAQhsB,WAMxB,SAAUA,GACNpF,KAAKoxB,QAAQhsB,MAAQA,EACrBpF,KAAKkkD,sBAAsBT,kBAG3BzjD,KAAKqlD,4CAGT1hD,OAAA2G,eAAI66C,EAAAxmD,UAAA,aAAJ,WACI,OAAOqB,KAAKukC,YAGhB,SAAUnkB,GACNpgB,KAAKukC,OAASnkB,EACdpgB,KAAKkkD,sBAAsBP,SAAS3jD,KAAKmkD,IAAK/jC,oCAWlD+kC,EAAAxmD,UAAAyB,YAAA,WACIJ,KAAKogB,OAAQ,GAMjB+kC,EAAAxmD,UAAA0mD,SAAA,WAEIrlD,KAAKogB,OAAQpgB,KAAKsjD,OAAOgC,YAAatlD,KAAKsjD,OAAOgC,WAAWtlD,KAAMA,KAAKoF,4BAzD/EnG,EAAAA,UAASC,OACNC,SAAU,iBACVC,SAAU,gDAJL4jD,UADAiB,QAFT,2FCUiB,gBAFwBtzC,EAAAA,EAAAA,GAIvChN,OAAA2G,eAAIi7C,EAAA5mD,UAAA,aAAJ,WACE,OAAOqB,KAAKsjD,OAAO3W,uCAGrBhpC,OAAA2G,eAAIi7C,EAAA5mD,UAAA,mBAAJ,WACE,OAAOqB,KAAKsjD,OAAOxsC,aAAe,kEAdrC7X,EAAAA,UAASC,OACRC,SAAU,iBACVC,SAAU,yLAG6B+lD,4FCaxB,gBAFwBx0C,EAAAA,EAAAA,GAIvChN,OAAA2G,eAAIk7C,EAAA7mD,UAAA,aAAJ,WACE,OAAOqB,KAAKsjD,OAAO3W,uCAGrBhpC,OAAA2G,eAAIk7C,EAAA7mD,UAAA,mBAAJ,WACE,OAAOqB,KAAKsjD,OAAOxsC,aAAe,8CAGpC0uC,EAAA7mD,UAAAmE,SAAA,WAGO9C,KAAKoF,QACRpF,KAAKoF,MAAQ,IAAIwJ,2BAhCtB3P,EAAAA,UAASC,OACRC,SAAU,iBACVC,SAAU,osBAc6B+lD,4FC8BtB,sBAF2Bx0C,EAAAA,EAAAA,GAI1ChN,OAAA2G,eAAIm7C,EAAA9mD,UAAA,aAAJ,WACI,OAAOqB,KAAKsjD,OAAO3W,uCAGvBhpC,OAAA2G,eAAIm7C,EAAA9mD,UAAA,YAAJ,WAYI,OATKqB,KAAKoF,OAAUpF,KAAKoF,MAAM2pB,OAC3B/uB,KAAK+uB,KAAO,IAAIngB,MAIhB5O,KAAKoF,MAAM2pB,gBAAgBngB,OAAS,IACpC5O,KAAKoF,MAAM2pB,KAAO,IAAIngB,KAAK5O,KAAKoF,MAAM2pB,OAGnC/uB,KAAKoF,MAAM2pB,UAGtB,SAAS22B,GAGL,IAAMtgD,EAAQzB,OAAOa,UAAWxE,KAAKoF,OAGjCsgD,aAAqB92C,OAAS,IAC9B82C,EAAY,IAAI92C,KAAK82C,IAIzBtgD,EAAM2pB,KAAO22B,EAGb1lD,KAAKoF,MAAQA,mCAGjBzB,OAAA2G,eAAIm7C,EAAA9mD,UAAA,UAAJ,WAYI,OATKqB,KAAKoF,OAAUpF,KAAKoF,MAAMg/B,KAC3BpkC,KAAKokC,GAAK,IAAIx1B,MAId5O,KAAKoF,MAAMg/B,cAAcx1B,OAAS,IAClC5O,KAAKoF,MAAMg/B,GAAK,IAAIx1B,KAAK5O,KAAKoF,MAAMg/B,KAGjCpkC,KAAKoF,MAAMg/B,QAGtB,SAAOuhB,GAGH,IAAMvgD,EAAQzB,OAAOa,UAAWxE,KAAKoF,OAGjCugD,aAAmB/2C,OAAS,IAC5B+2C,EAAU,IAAI/2C,KAAK+2C,IAIvBvgD,EAAMg/B,GAAKuhB,EAGX3lD,KAAKoF,MAAQA,mCAGjBzB,OAAA2G,eAAIm7C,EAAA9mD,UAAA,iBAAJ,WACI,OAAOqB,KAAKsjD,OAAOsC,WAAa,wCAGpCjiD,OAAA2G,eAAIm7C,EAAA9mD,UAAA,eAAJ,WACI,OAAOqB,KAAKsjD,OAAOuC,SAAW,sCAGlCliD,OAAA2G,eAAIm7C,EAAA9mD,UAAA,uBAAJ,WACI,OAAOqB,KAAKsjD,OAAOwC,iDAGvBniD,OAAA2G,eAAIm7C,EAAA9mD,UAAA,qBAAJ,WACI,OAAOqB,KAAKsjD,OAAOyC,+CAMvBN,EAAA9mD,UAAA0mD,SAAA,WAGI,GAAIrlD,KAAKsjD,OAAOgC,WACZ,OAAO50C,EAAA/R,UAAM0mD,SAAQrmD,KAAAgB,MAIzB,IAAM+uB,EAAO,IAAIngB,KAAK5O,KAAKoF,MAAM2pB,MAC3BqV,EAAK,IAAIx1B,KAAK5O,KAAKoF,MAAMg/B,IAG/BrV,EAAKxO,SAAS,EAAG,EAAG,EAAG,GACvB6jB,EAAG7jB,SAAS,EAAG,EAAG,EAAG,GAGrBvgB,KAAKogB,MAAQ2O,GAAQqV,uBAvJ5BnlC,EAAAA,UAASC,OACNC,SAAU,uBACVC,SAAU,w8DA0CgC+lD,4FCrB7B,kBAF0Bx0C,EAAAA,EAAAA,GAOzChN,OAAA2G,eAAI07C,EAAArnD,UAAA,aAAJ,WACE,OAAOqB,KAAKsjD,OAAO3W,uCAGrBhpC,OAAA2G,eAAI07C,EAAArnD,UAAA,eAAJ,WACE,OAAOqB,KAAKsjD,OAAOzxC,6CAGrBlO,OAAA2G,eAAI07C,EAAArnD,UAAA,gBAAJ,WACE,OAAOqB,KAAKsjD,OAAO2C,WAAY,mCAGjCtiD,OAAA2G,eAAI07C,EAAArnD,UAAA,mBAAJ,WACE,OAAOqB,KAAKsjD,OAAOxsC,aAAe,+CAGpCnT,OAAA2G,eAAI07C,EAAArnD,UAAA,qBAAJ,WACE,OAAOqB,KAAKsjD,OAAO4C,eAAiB,wCAGtCviD,OAAA2G,eAAI07C,EAAArnD,UAAA,iBAAJ,WACE,OAAOqB,KAAKsjD,OAAO6C,YAAa,mCAGlCxiD,OAAA2G,eAAI07C,EAAArnD,UAAA,gBAAJ,WACE,OAAOqB,KAAKsjD,OAAO74C,WAAY,mCAGjC9G,OAAA2G,eAAI07C,EAAArnD,UAAA,iBAAJ,WACE,OAAOqB,KAAKsjD,OAAO8C,WAAa,yCAGlCziD,OAAA2G,eAAI07C,EAAArnD,UAAA,gBAAJ,WACE,OAAOqB,KAAKsjD,OAAO+C,UAAY,wDA5DlCpnD,EAAAA,UAASC,OACRC,SAAU,mBACVC,SAAU,6qBAkB+B+lD,ICxB3CmB,GAAA,WAqCE,SAAAA,EAAoBpC,GAApB,IAAAzjD,EAAAT,KAAoBA,KAAAkkD,sBAAAA,mBATsC,IAAIrhD,EAAAA,wBACrB,IAAIA,EAAAA,cAAsB,GAWjE7C,KAAKumD,mBAAqBrC,EAAsBR,YAAY1hD,UAAU,SAAA87B,GAAS,OAAAr9B,EAAKijD,YAAYvgD,KAAK26B,KAGrG99B,KAAKwmD,mBAAqBtC,EAAsBL,iBAAiB9gD,KAAKwK,EAAAA,wBAAwBvL,UAAU,SAAAoe,GAAS,OAAA3f,EAAK2f,MAAMjd,KAAKid,kCA5B/HkmC,EAAA3nD,UAAA,2BAAW8N,GACbzM,KAAKkkD,sBAAsBd,mBAAmB32C,0DAI5C65C,EAAA3nD,UAAA,aAIJ,WACE,OAAOqB,KAAKkkD,sBAAsBV,yBAL1Bp+C,GACRpF,KAAKkkD,sBAAsBX,SAASn+C,oCA4BtCkhD,EAAA3nD,UAAAyB,YAAA,WACEJ,KAAKumD,mBAAmBjmD,cACxBN,KAAKwmD,mBAAmBlmD,mCA5C3BrB,EAAAA,UAASC,OACRC,SAAU,oBACVC,SAAU,4BACViE,WAAY2/C,iDALLA,0CASN3jD,EAAAA,qBAKAA,EAAAA,2BASAkE,EAAAA,sBACAA,EAAAA,YA7BH,GCAAkjD,GACI,SAAmB3D,GAAA9iD,KAAA8iD,OAAAA,GCAvB4D,GAAA,WAKI,SAAAA,YAEAA,EAAA/nD,UAAAgoD,UAAA,SAAU9nD,EAAsB+nD,GAC5B,GAAIA,EACA,OAAQ/nD,EAAM+M,KACV,IAAK,UACL,IAAK,KACIg7C,EAAUvpB,KAGXupB,EAAUC,eAAe,GAFzBD,EAAUvpB,MAAO,EAIrBx+B,EAAM4d,iBACN,MACJ,IAAK,YACL,IAAK,OACImqC,EAAUvpB,KAGXupB,EAAUC,cAAc,GAFxBD,EAAUvpB,MAAO,EAIrBx+B,EAAM4d,iBACN,MACJ,IAAK,SACL,IAAK,MACDmqC,EAAUvpB,MAAO,wBA5BpC96B,EAAAA,qDAFD,GCDAukD,GAAA,mCAMY,IAAInmD,EAAAA,iBAAyB,4BAEf,IAAIA,EAAAA,gBAA6B,iCAL1D4B,EAAAA,qDAHD,GCSIwkD,GAAW,gBAkIX,SAAAC,EACWC,EACCC,EACAhvB,GAHZ,IAAAz3B,EAAAT,KACWA,KAAAinD,iBAAAA,EACCjnD,KAAAknD,OAAAA,EACAlnD,KAAAk4B,SAAAA,UA9DkC,mBAAkB6uB,mBAazC,IAAIlkD,EAAAA,gCAKa,sBACX,8BACiD,2BACvC,gBACX,qBACI,sBAML,IAAIA,EAAAA,oCAED,IAAIA,EAAAA,2CACG,IAAIA,EAAAA,kCAOvB,IAAIlC,EAAAA,kCACZ,iBACC,oBACI,IAAIA,EAAAA,gBAAwC,0BAClC,iBAOA,qBACD,IAAIV,EAAAA,6BAGxBknD,OAAQnnD,KAAKmnD,OAAOx5C,KAAK3N,MACzBonD,WAAYpnD,KAAKonD,WAAWz5C,KAAK3N,MACjCqnD,eAAgBrnD,KAAKqnD,eAAe15C,KAAK3N,OASzCA,KAAKsnD,oBAAsB,SAACC,EAAiBlB,EAAkBrgD,GAC3D,GAA4B,mBAAjBvF,EAAKoR,QAAwB,CAGpC,IAAM21C,EAAiB/mD,EAAKoR,QAAQ01C,EAASlB,EAAUrgD,GAGvD,OAAOu9B,QAAQC,QAAQgkB,GAAgBxiB,KAAK,SAAAyiB,GAExC,OAAK3jD,MAAMmK,QAAQw5C,GAIZA,EAAW3gD,IAAI,SAACg8C,GACnB,OACI19C,MAAO09C,EACPl3C,IAAKnL,EAAK0mD,OAAOrE,MANd2E,IAWnB,OAAO,MAGXznD,KAAKK,cAAcyB,IACf9B,KAAKk4B,SAASoF,MAAMv6B,KAAKwK,EAAAA,wBAAwBvL,UAAU,SAACE,GACxDzB,EAAKghC,WAAWt+B,KAAKjB,GAEjBA,GACAzB,EAAKinD,iBAKjB1nD,KAAKK,cAAcyB,IACf9B,KAAK2nD,aAAa3lD,UAAU,SAACE,GACzBzB,EAAKmnD,eAAiB1lD,EAAOA,EAAK0J,IAAM,KACxCnL,EAAKonD,kBAAkB1kD,KAAKjB,EAAOA,EAAKkD,MAAQ,SAIxDpF,KAAKK,cAAcyB,IACfmmB,EAAAA,cAAcjoB,KAAKk4B,SAASoF,MAAOt9B,KAAKk4B,SAAS4vB,oBAAqB9nD,KAAK+nD,iBACtE/lD,UAAU,SAAC0G,OAAAwf,EAAA5iB,EAAAoD,EAAA,GAAC20B,EAAAnV,EAAA,GAAM8/B,EAAA9/B,EAAA,GAAoB+/B,EAAA//B,EAAA,GACnCznB,EAAKynD,yBAAyB/kD,KAAKk6B,GAAgC,EAAxB4qB,EAAenjD,OAAakjD,EAAqB,sCAvGxGhB,EAAAroD,UAAA,uBACA,OAAOqB,KAAKk4B,SAASoF,MAAM71B,gBAE/B,SAASrC,GACLpF,KAAKk4B,SAASoF,MAAMp7B,KAAKkD,oCAmC7BzB,OAAA2G,eAAI08C,EAAAroD,UAAA,mBAAJ,WACI,IAAMyG,EAAQpF,KAAK2nD,aAAalgD,WAChC,OAAOrC,EAAQA,EAAMA,MAAQ,sCAmEjC4hD,EAAAroD,UAAA6N,gBAAA,WAESxM,KAAKmoD,kBACNnoD,KAAKmoD,gBAAkBnoD,KAAKooD,yBAI3BpoD,KAAKqoD,iBACNroD,KAAKqoD,eAAiBroD,KAAKsoD,wBAI1BtoD,KAAKuoD,oBACNvoD,KAAKuoD,kBAAoBvoD,KAAKwoD,2BAGlCxoD,KAAKknD,OAAO1zB,iBAGhBwzB,EAAAroD,UAAA8zB,YAAA,SAAYC,GAEJA,EAAO,QACH1yB,KAAKyoD,oBAAsB/1B,EAAO,OAAQlkB,cAAqD,EAArCkkB,EAAO,OAAQlkB,aAAa1J,SACtF9E,KAAKq9B,MAAO,GAKpBr9B,KAAK0oD,iBAGT1B,EAAAroD,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAIvB0mD,EAAAroD,UAAAgqD,4BACI3oD,KAAK4oD,UAAW,GAIpB5B,EAAAroD,UAAAkqD,0BACI7oD,KAAK4oD,UAAW,GAGpB5B,EAAAroD,UAAAmqD,uBAAA,SAAuBjqD,GAEnBA,EAAM4d,kBAGVuqC,EAAAroD,UAAAoqD,mBAAA,SAAmBlqD,EAAmBikD,GAClC9iD,KAAKwG,OAAOs8C,IAMhBkE,EAAAroD,UAAAwoD,OAAA,SAAOrE,GACH,MAAwB,mBAAb9iD,KAAK4L,IACL5L,KAAK4L,IAAIk3C,GAEI,iBAAb9iD,KAAK4L,KAAoBk3C,GAAUA,EAAO5+C,eAAelE,KAAK4L,KAC9Dk3C,EAAe9iD,KAAQ,KAE3BA,KAAKonD,WAAWtE,IAM3BkE,EAAAroD,UAAAyoD,WAAA,SAAWtE,GACP,MAA4B,mBAAjB9iD,KAAKgpD,QACLhpD,KAAKgpD,QAAQlG,GAEI,iBAAjB9iD,KAAKgpD,SAAwBlG,GAAUA,EAAO5+C,eAAelE,KAAKgpD,SAClElG,EAAe9iD,KAAY,SAE/B8iD,GAOXkE,EAAAroD,UAAA0oD,eAAA,SAAevE,GACX,IAAMmG,EAAcjpD,KAAKonD,WAAWtE,GAAQzyB,QAAQ,KAAM,SAASA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QACnG64B,EAAcD,EAClB,GAAIjpD,KAAKgG,OAAQ,CACb,IAAMmjD,EAASnpD,KAAKgG,OAAOlB,OACrBskD,EAAaH,EAAYjjB,cAAc93B,QAAQlO,KAAKgG,OAAOggC,eACjE,GAAkB,GAAdojB,EAAiB,CACjB,IAAIC,EAAY,iCAAiCJ,EAAYK,OAAOF,EAAYD,GAAO,UACvFD,EAAcD,EAAYK,OAAO,EAAGF,GAAcC,EAAYJ,EAAYK,OAAOF,EAAaD,IAGtG,OAAOD,GAMXlC,EAAAroD,UAAA4qD,iBAAA,WACI,MAA+B,mBAAjBvpD,KAAK6R,SAMvBm1C,EAAAroD,UAAA6H,OAAA,SAAOs8C,GACE9iD,KAAKgL,WAAW83C,KACjB9iD,KAAKwpD,eAAermD,KAAK,IAAIsjD,GAAqB3D,EAAO19C,QACzDpF,KAAK2nD,aAAazlD,KAAK,MACvBlC,KAAKq9B,MAAO,IAOpB2pB,EAAAroD,UAAAqM,WAAA,SAAW83C,GAAX,IAAAriD,EAAAT,KACI,QAAIA,KAAKypD,iBACUzpD,KAAKypD,gBAAgBtjD,KAAK,SAACujD,GACtC,OAAOjpD,EAAK0mD,OAAOuC,KAAoB5G,EAAOl3C,QAEhC6H,WAQ1BuzC,EAAAroD,UAAA0qD,UAAA,SAAUvG,GACD9iD,KAAKgL,WAAW83C,IACjB9iD,KAAK2nD,aAAazlD,KAAK4gD,IAQ/BkE,EAAAroD,UAAAkoD,cAAA,SAAc9iD,GAMV,IALA,IAAMkkD,EAAiBjoD,KAAK+nD,gBAAgBtgD,WAExCkiD,EADmB3pD,KAAK4pD,qBAAqB5pD,KAAK6pD,aAElDp/C,GAAW,EACXq/C,GAAW,EAIXr/C,GADAq/C,EAAwB,IADxBH,GAAsB5lD,IACO4lD,EAAW1B,EAAenjD,SAChC9E,KAAKgL,WAAWi9C,EAAe0B,IAEnDG,GAAYr/C,IAMnB,OAJKA,GAAYq/C,GACb9pD,KAAK2nD,aAAazlD,KAAK+lD,EAAe0B,IAGnC3pD,KAAK6pD,aAMhB7C,EAAAroD,UAAA+oD,YAAA,WAEI1nD,KAAK2nD,aAAazlD,KAAK,MACnBlC,KAAK+pD,aAEL/pD,KAAK6mD,cAAc,IAO3BG,EAAAroD,UAAA+pD,cAAA,WAAA,IAAAjoD,EAAAT,KACI,GAA4B,iBAAjBA,KAAK6R,QAAsB,CAClC,IAAMm4C,GAAmBhqD,KAAKgG,QAAU,IAAIggC,cACtCiiB,EAAiBjoD,KAAK6R,QACvB7L,OAAO,SAAC88C,GACL,OAAyE,GAAlEriD,EAAK2mD,WAAWtE,GAAQ9c,cAAc93B,QAAQ87C,KAExDljD,IAAI,SAAC1B,GACF,OACIA,MAAOA,EACPwG,IAAKnL,EAAK0mD,OAAO/hD,MAG7BpF,KAAK+nD,gBAAgB7lD,KAAK+lD,GAG9BjoD,KAAK0nD,eAMDV,EAAAroD,UAAAirD,8BAAqB9G,GACzB,GAAIA,EAAQ,CACR,IAAMmH,EAAYjqD,KAAKmnD,OAAOrE,GAC9B,OAAO9iD,KAAK+nD,gBAAgBtgD,WAAWiE,UAAU,SAACw+C,GAC9C,OAAOA,EAAGt+C,MAAQq+C,IAI1B,OAAQ,uBAtYfhrD,EAAAA,UAASC,OACNC,SAAU,eACVC,SAAU,wmEAyDViE,WAAYyjD,IACZ1kC,MACIkP,KAAQ,UACR64B,eAAgB,OAChBC,kBAAmB,yBACnBC,oBAAqB,0DA3EyB/mD,EAAAA,kBAA9BiuB,EAAAA,yBAOfu1B,kCAyEJznD,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,4BAErBG,EAAAA,sBACAA,EAAAA,oBAEAA,EAAAA,MAAKH,MAAC,4BAQNqE,EAAAA,wBAEAlE,EAAAA,mBACAA,EAAAA,+BACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,+BACAA,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,yDACrBG,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,+BAEAA,EAAAA,8BACAA,EAAAA,iCACAA,EAAAA,8BAEAkE,EAAAA,kCAEAA,EAAAA,yCACAA,EAAAA,wCAEA6F,EAAAA,UAASlK,MAAC,0DACVkK,EAAAA,UAASlK,MAAC,4DACVkK,EAAAA,UAASlK,MAAC,sDAiHV89B,EAAAA,aAAY99B,MAAC,qCAKb89B,EAAAA,aAAY99B,MAAC,mBC1OlBorD,GAAA,WAkCI,SAAAA,EACY9V,EACA+V,EACAC,EACAtqD,GAHAF,KAAAw0C,SAAAA,EACAx0C,KAAAuqD,UAAAA,EACAvqD,KAAAwqD,eAAAA,EACAxqD,KAAAE,UAAAA,iBAPgB,aACZ,IAAIqM,EAAAA,QAQhBvM,KAAKusC,KAAOvsC,KAAKyqD,MAAMC,4CA9BvBJ,EAAA3rD,UAAA,0BACA,OAAOqB,KAAK2qD,cAEhB,SAAYvlD,GACR,GAAIA,IAAUpF,KAAK2qD,SACf,GAAIvlD,EAAO,CACPpF,KAAKwqD,eAAeI,mBAAmB5qD,KAAKuqD,WAG5C,IAAMM,EAAc7qD,KAAK8qD,sBAAsB9qD,KAAKuqD,UAAUtsC,WAAWzd,eACzER,KAAKE,UAAU6qD,OAAOF,EAAa,QAAS7qD,KAAKjB,QAAQ4O,KAAK3N,YAE9DA,KAAKwqD,eAAeQ,QAI5BhrD,KAAK2qD,SAAWvlD,mCAiBZklD,EAAA3rD,UAAAI,iBAAQF,GACZmB,KAAKyqD,MAAMvoD,KAAKrD,IAGZyrD,EAAA3rD,UAAAmsD,+BAAsBnjD,GAE1B,IADA,IAAIzF,EAAOyF,EACJzF,EAAOA,EAAK+oD,aACf,GAAsB,IAAlB/oD,EAAKgpD,SACL,OAAOhpD,EAGf,OAAO,0BAlDdkB,EAAAA,UAASlE,OACNC,SAAU,4EALMmE,EAAAA,kBAAsC8D,EAAAA,mBAAakuB,EAAAA,wBAAxBvX,EAAAA,8CAS1C1e,EAAAA,MAAKH,MAAC,4CAoBNqE,EAAAA,YA7BL,GCAA4nD,GAAA,WAyBI,SAAAA,EACYC,EACAZ,GADAxqD,KAAAorD,aAAAA,EACAprD,KAAAwqD,eAAAA,iBAJgB,+BAfxBW,EAAAxsD,UAAA,0BACA,OAAOqB,KAAK2qD,cAEhB,SAAYvlD,GACJA,IAAUpF,KAAK2qD,WACXvlD,EACApF,KAAKwqD,eAAeI,mBAAmB5qD,KAAKorD,cAE5CprD,KAAKwqD,eAAeQ,SAI5BhrD,KAAK2qD,SAAWvlD,uDAlBvBhC,EAAAA,UAASlE,OACNC,SAAU,yEAHaiI,EAAAA,mBAAakuB,EAAAA,qDAOnCj2B,EAAAA,MAAKH,MAAC,gCAPX,GCCAmsD,GAAA,WAyEI,SAAAA,EAAoB7W,GAAAx0C,KAAAw0C,SAAAA,oCAvCQ,mBAEG,qBACE,gBACL,yBAEC,IAAI3xC,EAAAA,+BAGlB,IAAIA,EAAAA,8BAGL,IAAIA,EAAAA,iCAGD,IAAIA,EAAAA,+BASE,uBAGG,IAAI0J,EAAAA,wBAET,IAAI5L,EAAAA,iBAAyB,qBAC3B,IAAIA,EAAAA,iBAAyB,2BACvB,IAAIA,EAAAA,iBAAyB,2EAMrC,IAAI4L,EAAAA,QAGrBvM,KAAKsrD,iBAAmBtrD,KAAKurD,WAAWxoD,KAAKklB,EAAAA,cACzCjoB,KAAKwrD,aACLxrD,KAAKyrD,mBACL,SAACC,EAAWC,EAAaC,GACrB,OAAQF,IAAcC,GAAeC,YAzDjDjoD,OAAA2G,eAAI+gD,EAAA1sD,UAAA,kBAAJ,WACI,OAAOqB,KAAK6rD,iBAEhB,SAAezmD,GACXpF,KAAK8rD,iBAAiB3oD,KAAKiC,GAC3BpF,KAAK6rD,YAAczmD,yDAIVimD,EAAA1sD,UAAA,8BAAcgJ,GACvB3H,KAAK+rD,eAAiBpkD,aAAmBrE,EAAAA,WAAaqE,EAAU,IAAIrE,EAAAA,WAAWqE,oCAoDnF0jD,EAAA1sD,UAAAmE,SAAA,WACS9C,KAAK+rD,iBACN/rD,KAAK+rD,eAAiB/rD,KAAKw0C,UAG/Bx0C,KAAKyrD,mBAAmBvpD,MAAMlC,KAAKgsD,eAGvCX,EAAA1sD,UAAAo0C,mBAAA,WAAA,IAAAtyC,EAAAT,KAMIA,KAAKisD,gBAAgBlpD,KAAKmpD,EAAAA,OAAe,SAAA3mB,GAAW,OAAAA,EAAQ4mB,QAAQC,EAAAA,UAAU,KAAM5+C,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAKqsD,UAAU1+C,KAAK3N,OAC9IA,KAAKisD,gBAAgBlpD,KAAKmpD,EAAAA,OAAe,SAAA3mB,GAAW,OAACA,EAAQ4mB,QAAQ3+C,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAUhC,KAAKqsD,UAAU1+C,KAAK3N,OAE3HA,KAAKsgD,SAELtgD,KAAKssD,sBAITtsD,KAAKsrD,iBAAiBvoD,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAAuqD,GAC7D9rD,EAAK+rD,iBAAiB9/C,QAAQ,SAAA+/C,GAC1BA,EAAWv7C,QAAUq7C,MAK7BvsD,KAAKurD,WAAWxoD,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,SAAA0pD,GACvDjrD,EAAKisD,uBAAuBhgD,QAAQ,SAAAuyB,GAChCA,EAAQ/tB,QAAUw6C,MAK1B1rD,KAAK2sD,yBACL3sD,KAAKwsD,iBAAiB95B,QAAQ3vB,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WACrEvB,EAAKksD,2BAIL3sD,KAAK4sD,YACL5sD,KAAK6sD,gBAIbxB,EAAA1sD,UAAA8zB,YAAA,SAAYC,GACR,IAAIy5B,GAAQ,EAERz5B,EAAO,SAAYA,EAAO,QAASlkB,eAAiBkkB,EAAO,QAASo6B,gBAChEp6B,EAAO,QAASlkB,cAChBxO,KAAKssD,sBACLtsD,KAAKikC,QACLkoB,GAAQ,GAERnsD,KAAK+sD,uBAIT/sD,KAAKsgD,UACD5tB,EAAO,QAAWA,EAAO,OAAQlkB,eAAiBkkB,EAAO,OAAQo6B,gBACjE9sD,KAAKikC,QACLkoB,GAAQ,GAGRz5B,EAAO,cACP1yB,KAAKyrD,mBAAmBvpD,MACnBwwB,EAAO,aAAclkB,cAI1BkkB,EAAO,UAAaA,EAAO,SAAUlkB,eAAiBkkB,EAAO,SAAUo6B,gBACvE9sD,KAAKikC,QACLkoB,GAAQ,GAGZnsD,KAAKisD,gBAAgB/pD,MACjBiqD,MAAOA,EACPa,WAAYhtD,KAAKitD,aACjB5G,SAAUrmD,KAAKqmD,SACfrgD,OAAQhG,KAAKgG,WAKzBqlD,EAAA1sD,UAAAyB,YAAA,WACIJ,KAAK+sD,sBACL/sD,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,YAMpBu8C,EAAA1sD,UAAAkuD,aAAA,WACS7sD,KAAKsgD,SAIVtgD,KAAKisD,gBAAgB/pD,MACjBiqD,OAAO,EACPa,WAAYhtD,KAAKitD,aACjB5G,SAAUrmD,KAAKqmD,SACfrgD,OAAQhG,KAAKgG,UAOrBqlD,EAAA1sD,UAAAwtD,MAAA,WACSnsD,KAAKsgD,SAIVtgD,KAAKisD,gBAAgB/pD,MACjBiqD,OAAO,EACPa,WAAYhtD,KAAKitD,aACjB5G,SAAUrmD,KAAKqmD,SACfrgD,OAAQhG,KAAKgG,UAOrBqlD,EAAA1sD,UAAAslC,MAAA,WACSjkC,KAAKsgD,UAKVtgD,KAAKitD,aAAe,EAEpBjtD,KAAKktD,UAGDltD,KAAKmtD,aACLntD,KAAKmtD,WAAWroD,OAAS,GAI7B9E,KAAKwrD,aAAatpD,MAAK,GAGnBlC,KAAKq4B,gBACLr4B,KAAKq4B,eAAe3rB,QAAQ,SAAA64B,GAAW,OAAAA,EAAQjlC,kBAOvD+qD,EAAA1sD,UAAAyuD,OAAA,WAAA,IAAA3sD,EAAAT,KACIA,KAAKktD,OAAOxgD,QAAQ,SAAC2gD,EAAM1oD,GAAM,OAAAlE,EAAK6sD,WAAW3oD,MAOrD0mD,EAAA1sD,UAAA2uD,WAAA,SAAW/F,GACFvnD,KAAKsgD,SAIVtgD,KAAKisD,gBAAgB/pD,MACjBiqD,OAAO,EACPa,WAAYzF,EACZlB,SAAUrmD,KAAKqmD,SACfrgD,OAAQhG,KAAKgG,OACbonD,QAAQ,KAOR/B,EAAA1sD,UAAA2tD,+BAGJ,IAAMt9C,EAAShP,KAAK+rD,eAAevrD,yBAAyB+sD,gBAAkBjxC,SAAWtc,KAAK+rD,eAAevrD,cAG7GR,KAAKwtD,gBAAkBzrD,EAAAA,UAAUiN,EAAQ,UAAUhN,UAAUhC,KAAKmsD,MAAMx+C,KAAK3N,OAI7EA,KAAKytD,aAAe,IAAIC,iBAAiB1tD,KAAKmsD,MAAMx+C,KAAK3N,OACzDA,KAAKytD,aAAaE,QAAQ3tD,KAAK+rD,eAAevrD,eAC1CotD,WAAW,EACXC,SAAS,KAOTxC,EAAA1sD,UAAAouD,+BACA/sD,KAAKwtD,kBACLxtD,KAAKwtD,gBAAgBltD,cACrBN,KAAKwtD,gBAAkB,MAGvBxtD,KAAKytD,eACLztD,KAAKytD,aAAajlB,aAClBxoC,KAAKytD,aAAe,OAQpBpC,EAAA1sD,UAAAguD,6CACJ3sD,KAAK8tD,yBAAyBphD,QAAQ,SAAAhI,GAAK,OAAAA,EAAEpE,gBAC7CN,KAAK8tD,yBAA2B9tD,KAAKwsD,iBAAiB1lD,IAClD,SAAA2lD,GAAc,OAAAA,EAAWlgB,KAAKvqC,UAAUvB,EAAKosD,aAAal/C,KAAKlN,OAO/D4qD,EAAA1sD,UAAA0tD,mBAAU9mB,cAId,GAAIvlC,KAAK+tD,UAAUxoB,IAAYvlC,KAAKguD,aAAazoB,GAAU,CAGvD,IAAM0oB,EAAajuD,KAAKusC,KAAKhH,EAAQynB,WAAYznB,EAAQ8gB,SAAU9gB,EAAQv/B,QAIrEkoD,GAFapqD,MAAMmK,QAAQggD,GAAc7+B,EAAAA,GAAG6+B,GAAcl/B,EAAAA,KAAYk/B,IAE5ClrD,KAAK+lB,EAAAA,SAAS9mB,UAC1C,SAAAwgB,GAGQ+iB,EAAQv/B,SAAWvF,EAAKuF,QAAUu/B,EAAQ8gB,WAAa5lD,EAAK4lD,WACxD7jC,GAASA,EAAM1d,QACfrE,EAAK0tD,aAAa5oB,EAAQynB,WAAYxqC,GAI1C/hB,EAAK2tD,WAAW7oB,EAAS/iB,KAGjC,SAAA6rC,GAEI5tD,EAAK6tD,oBAAoB/oB,EAAS8oB,IAEtC,WAEI5tD,EAAK43B,eAAiB53B,EAAK43B,eAAeryB,OAAO,SAAAtB,GAAK,OAAAA,IAAMwpD,MAKpEluD,KAAKq4B,eAAe3yB,KAAKwoD,KAOzB7C,EAAA1sD,UAAAovD,mBAAUxoB,GACd,IAAKvlC,KAAKsgD,QACN,OAAO,EAIX,IAAK/a,EAAQ4mB,MACT,OAAO,EAIX,GAAInsD,KAAKwrD,aAAa/jD,YAAczH,KAAKurD,WAAW9jD,WAChD,OAAO,EAIX,GAAIzH,KAAK+rD,gBAAkB/rD,KAAKgsD,aAAc,CAE1C,IAAMrkD,EAAuB3H,KAAK+rD,eAA4B,cAK9D,OAHIpkD,EAAQ4mD,cACP5mD,EAAQqoB,UAAYroB,EAAQ6mD,eAEP7mD,EAAQ6mD,aAGtC,OAAO,GAMHnD,EAAA1sD,UAAAqvD,sBAAazoB,GAEjB,IAAM1mC,EAAQ,IAAI4vD,GACdlpB,EAAQynB,WACRznB,EAAQ8gB,SACR9gB,EAAQv/B,QAMZ,OAJAhG,KAAK0uD,aAAavrD,KAAKtE,GAEvBmB,KAAKurD,WAAWrpD,MAAMrD,EAAM8vD,qBAEpB9vD,EAAM8vD,oBAGVtD,EAAA1sD,UAAAwvD,sBAAa5G,EAAiB/kC,GAClCxiB,KAAKktD,OAAO3F,GAAW/kC,EACvBxiB,KAAKmtD,WAAantD,KAAKktD,OAAOx4C,OAAO,SAACtM,EAAUk3B,GAAY,OAAAl3B,EAASvC,OAAOy5B,SAMxE+rB,EAAA1sD,UAAAyvD,oBAAW7oB,EAAgC/K,GAC/Cx6B,KAAKurD,WAAWrpD,MAAK,GAErB,IAAMypD,KAAiBnxB,GAAQA,EAAK11B,OAAS9E,KAAKqmD,UAClDrmD,KAAKwrD,aAAatpD,KAAKypD,GAEvB3rD,KAAK4uD,YAAYzrD,KACb,IAAI0rD,GACAtpB,EAAQynB,WACRznB,EAAQ8gB,SACR9gB,EAAQv/B,OACRw0B,EACAmxB,IAIHpmB,EAAQ6nB,SACTptD,KAAKitD,cAAgB,IAOrB5B,EAAA1sD,UAAA2vD,6BAAoB/oB,EAAgC5/B,GACxD3F,KAAKurD,WAAWrpD,MAAK,GAErBlC,KAAK8uD,eAAe3rD,KAChB,IAAI4rD,GACAxpB,EAAQynB,WACRznB,EAAQ8gB,SACR9gB,EAAQv/B,OACRL,yBAzafvC,EAAAA,UAASlE,OACNC,SAAU,qBACVkN,SAAU,gEAdyC/I,EAAAA,4CAkBlDjE,EAAAA,MAAKH,MAAC,yCAENG,EAAAA,MAAKH,MAAC,qCAUNG,EAAAA,uBAIAA,EAAAA,sBACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,wBACAA,EAAAA,gCAEAkE,EAAAA,6BAEAA,EAAAA,OAAMrE,MAAC,gCAGPqE,EAAAA,OAAMrE,MAAC,kCAGPqE,EAAAA,OAAMrE,MAAC,uCAGP6N,EAAAA,gBAAe7N,MAACorD,oCAGhBv9C,EAAAA,gBAAe7N,MAACisD,SAtDrB,GA+cAsD,GAAA,WAGI,SAAAA,EAIWzB,EAIA3G,EAIArgD,GARAhG,KAAAgtD,WAAAA,EAIAhtD,KAAAqmD,SAAAA,EAIArmD,KAAAgG,OAAAA,0BAdiB,SAoB5ByoD,EAAA9vD,UAAA8d,eAAA,WACIzc,KAAKgvD,mBAAoB,GAG7BP,EAAA9vD,UAAAgwD,iBAAA,WACI,OAAO3uD,KAAKgvD,qBA1BpB,GAiCAH,GACI,SAIW7B,EAIA3G,EAIArgD,EAIAw0B,EAIAy0B,GAhBAjvD,KAAAgtD,WAAAA,EAIAhtD,KAAAqmD,SAAAA,EAIArmD,KAAAgG,OAAAA,EAIAhG,KAAAw6B,KAAAA,EAIAx6B,KAAAivD,UAAAA,GAOfF,GACI,SAIW/B,EAIA3G,EAIArgD,EAIAL,GAZA3F,KAAAgtD,WAAAA,EAIAhtD,KAAAqmD,SAAAA,EAIArmD,KAAAgG,OAAAA,EAIAhG,KAAA2F,MAAAA,GC9hBfupD,GAAA,oDAKC3vD,EAAAA,SAAQL,OACLM,WACAG,SACI0rD,GACAf,GACAa,IAEJvrD,cACIyrD,GACAf,GACAa,IAEJ9nD,yDAjBJ,GCAA8rD,GAAA,gCAKIA,EAAAxwD,UAAA+gC,eAAA,SAAe0vB,EAAmBC,GAC9B,IAAMC,EAAaF,EAAK55C,wBAAwBI,IAAMy5C,EAAar/B,UAAaq/B,EAAa75C,wBAAwBI,IACrH,GAAI05C,EAAYD,EAAar/B,UACzBq/B,EAAar/B,UAAYs/B,MACtB,CACH,IAAMC,EAAeD,EAAYF,EAAKruD,aAClCwuD,EAAgBF,EAAar/B,UAAYq/B,EAAab,eACtDa,EAAar/B,UAAYu/B,EAAeF,EAAab,oCAVpEjsD,EAAAA,qDAFD,GCAAitD,GAAA,WAYI,SAAAA,EAAoBhb,EAA8Bib,GAA9BzvD,KAAAw0C,SAAAA,EAA8Bx0C,KAAAyvD,uBAAAA,kBAHT,SAKzCD,EAAA7wD,UAAA8zB,YAAA,WAAA,IAAAhyB,EAAAT,KACQA,KAAK0vD,WACLptD,WAAW,WAAM,OAAA7B,EAAKgvD,uBAAuB/vB,eAAej/B,EAAK+zC,SAASh0C,cAAeC,EAAK4uD,qCAbzGjsD,EAAAA,UAASlE,OACNC,SAAU,uBACVkE,WAAY8rD,iDALI7rD,EAAAA,kBACX6rD,yCAQJ9vD,EAAAA,MAAKH,MAAC,4CACNG,EAAAA,WAVL,GCAAswD,GAAA,WAaI,SAAAA,EAAoBhtD,GAAA3C,KAAA2C,YAAAA,yBALiB,8BAG6B,SAIlEgtD,EAAAhxD,UAAA6N,gBAAA,WACQxM,KAAK4vD,kBACL5vD,KAAK2C,YAAYnC,cAAck/B,eAAe1/B,KAAK6vD,4CAf9DzsD,EAAAA,UAASlE,OACNC,SAAU,kEAHqBmE,EAAAA,wDAQ9BjE,EAAAA,qCAGAA,EAAAA,WAXL,GCAAywD,GAAA,oDAKCvwD,EAAAA,SAAQL,OACLS,SAAU6vD,GAA2BG,IACrC/vD,cAAe4vD,GAA2BG,gDAP9C,GCAAI,GAAA,WAeI,SAAAA,EAAoB73B,EAAoCv1B,GAApC3C,KAAAk4B,SAAAA,EAAoCl4B,KAAA2C,YAAAA,+BANpDotD,EAAApxD,UAAA,0BAAUyG,GACNA,GACApF,KAAKk4B,SAAS4vB,oBAAoB5lD,KAAKlC,KAAK2C,YAAYnC,oEARnE4C,EAAAA,UAASlE,OACNC,SAAU,sEAHL2nD,UADWxjD,EAAAA,iDAQfjE,EAAAA,MAAKH,MAAC,6BARX,GCAAm7B,GAAA,oDAQC96B,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyvD,GACAY,IAEJnwD,SAAUqnD,IACVpnD,cAAeonD,GAAoB+I,IACnC1sD,WAAYqjD,gDAhBhB,GCUIK,GAAW,EAEFiJ,IACTzmD,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAumD,KAC9BrmD,OAAO,iBAwJP,SAAAqmD,EACYzb,EACkBsJ,EAClBoS,GAFAlwD,KAAAw0C,SAAAA,EACkBx0C,KAAA89C,UAAAA,EAClB99C,KAAAkwD,qBAAAA,UAtEkC,gBAAenJ,mBAsC/B,iBACD,qBACW,sBACX,uBACA,gBACD,oBAOJ,IAAIlkD,EAAAA,8BACJ,IAAIA,EAAAA,qCACG,IAAIA,EAAAA,kCAQjB,SAAC+qB,kBAGD,IAAIjtB,EAAAA,gBAAwB,wBACb,qBACT,IAAIV,EAAAA,0CA9DxBgwD,EAAAtxD,UAAA,wBACA,OAAOqB,KAAK+J,YAEhB,SAAU3E,GACNpF,KAAK+J,OAAS3E,EACdpF,KAAKmK,YAAYhH,KAAKiC,GACtBpF,KAAKmwD,gBAAgB/qD,GAGhBpF,KAAKimD,UAAsB,OAAV7gD,IAClBpF,KAAKowD,MAAQpwD,KAAKonD,WAAWhiD,2DAKjC6qD,EAAAtxD,UAAA,wBACA,OAAOqB,KAAKqwD,QAAQjrD,WAExB,SAAUA,GACNpF,KAAKqwD,QAAQnuD,KAAKkD,GAClBpF,KAAKswD,YAAYntD,KAAKiC,0DAItB6qD,EAAAtxD,UAAA,+BACA,OAAOqB,KAAKuwD,mBAEhB,SAAiBnrD,GACbpF,KAAKuwD,cAAgBnrD,EACrBpF,KAAKwwD,mBAAmBrtD,KAAKiC,oCAwCjC6qD,EAAAtxD,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAGU6N,EAAU7N,KAAKqwD,QAAQttD,KACzBiD,EAAAA,OAAO,SAAAZ,GAAS,OAAA3E,EAAK0lD,YACrBngD,EAAAA,OAAO,SAAAZ,GAAS,OAAC3E,EAAKwlD,UAAY7gD,IAAU3E,EAAK2mD,WAAW3mD,EAAK2E,UACnEpD,UAAU,SAAAoD,GAAS,OAAA3E,EAAK2E,MAAQ,OAGlCpF,KAAKywD,QAAUzwD,KAAKqwD,QAAQttD,KACxB+D,EAAAA,IAAI,SAAAspD,GAAS,OAAC3vD,EAAKwlD,UAAYmK,IAAU3vD,EAAK2mD,WAAW3mD,EAAK2E,OAAcgrD,EAAL,KACvEptD,EAAAA,aAAa,MAIjB,IAAM0tD,EAAW1wD,KAAKywD,QAAQ1tD,KAAKiD,EAAAA,OAAO,SAAAZ,GAAS,OAAAA,GAAwB,EAAfA,EAAMN,UAAa9C,UAAU,WAAM,OAAAvB,EAAKsgD,cAAe,IAGnH/gD,KAAKK,cAAcyB,IAAI+L,GACvB7N,KAAKK,cAAcyB,IAAI4uD,IAG3BT,EAAAtxD,UAAA8zB,YAAA,SAAYC,GACJA,EAAO,WAAcA,EAAO,SAAUC,aAAeD,EAAO,SAAUlkB,eAAiBkkB,EAAO,SAAUo6B,gBACxG9sD,KAAKowD,MAAQ,KAIrBH,EAAAtxD,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvB2vD,EAAAtxD,UAAAgM,WAAA,SAAWgmD,GACHA,IAAQl9C,WAAak9C,IAAQ3wD,KAAK+J,SAClC/J,KAAKoF,MAAQurD,IAIrBV,EAAAtxD,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAKmwD,gBAAkBtlD,GAG3BolD,EAAAtxD,UAAAmM,kBAAA,SAAkBD,KAElBolD,EAAAtxD,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,GAGpBilD,EAAAtxD,UAAAiyD,kBAAA,SAAkB/xD,GACdmB,KAAK6wD,kBACL7wD,KAAK+gD,cAAe,GAGxBkP,EAAAtxD,UAAAmyD,iBAAA,SAAiBjyD,GAAjB,IAAA4B,EAAAT,KAIQA,KAAK+wD,iBAAmB/wD,KAAK+wD,gBAAgBnI,SAC7C5oD,KAAKgxD,YAAYxwD,cAAc2rB,QAKnC7pB,WAAW,WACF7B,EAAK+zC,SAASh0C,cAAcs4B,SAASr4B,EAAKq9C,UAAUjuB,iBACrDpvB,EAAKsgD,cAAe,EACftgD,EAAKwlD,WACNxlD,EAAK2vD,MAAQ3vD,EAAK2mD,WAAW3mD,EAAK2E,UAG3C,MAMP6qD,EAAAtxD,UAAAsyD,gBAAA,SAAgBpyD,GAKZ,OAFAmB,KAAKkwD,qBAAqBvJ,UAAU9nD,EAAOmB,KAAK+wD,iBAExClyD,EAAM+M,KACV,IAAK,QACG5L,KAAKuwD,gBAELvwD,KAAKoF,MAAQpF,KAAK+wD,gBAAgBlH,YAClC7pD,KAAK+gD,cAAe,GAIxB/gD,KAAKowD,MAAQpwD,KAAKonD,WAAWpnD,KAAKoF,OAClCvG,EAAM4d,mBAKlBwzC,EAAAtxD,UAAAuyD,qBAAA,SAAqBryD,GACbA,EAAMikD,SACN9iD,KAAKoF,MAAQvG,EAAMikD,OACnB9iD,KAAK+gD,cAAe,IAO5BkP,EAAAtxD,UAAAyoD,WAAA,SAAWtE,GACP,OAAe,OAAXA,GAAmBA,IAAWrvC,UACvB,GAEiB,mBAAjBzT,KAAKgpD,QACLhpD,KAAKgpD,QAAQlG,GAEI,iBAAjB9iD,KAAKgpD,SAAwBlG,EAAO5+C,eAAelE,KAAKgpD,SACxDlG,EAAe9iD,KAAY,SAE/B8iD,GAGHmN,EAAAtxD,UAAAkyD,2BACJ7wD,KAAKgxD,YAAYxwD,cAAcgG,8BAlRtCvH,EAAAA,UAASC,OACNC,SAAU,YACVC,SAAU,i4EA4EViE,WAAY2sD,iDAhGI1sD,EAAAA,8CAyKX07C,EAAAA,OAAM9/C,MAAC+/C,EAAAA,mBAjKayH,kCA4FxBrnD,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,0BAErBG,EAAAA,qBAeAA,EAAAA,4BASAA,EAAAA,uBASAA,EAAAA,uBACAA,EAAAA,mBACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,+BAEAA,EAAAA,iCACAA,EAAAA,8BACAA,EAAAA,2BAEAkE,EAAAA,4BACAA,EAAAA,mCACAA,EAAAA,4BAEA6F,EAAAA,UAASlK,MAAC,0CACVkK,EAAAA,UAASlK,MAAC,8CACVkK,EAAAA,UAASlK,MAAC,2BC5JfiyD,GAAA,WAII,SAAAA,EAAmBC,GAAApxD,KAAAoxD,IAAAA,0BAFS,SAI5BD,EAAAxyD,UAAA8d,eAAA,WACIzc,KAAKgvD,mBAAoB,GAG7BmC,EAAAxyD,UAAAgwD,iBAAA,WACI,OAAO3uD,KAAKgvD,qBAXpB,GCSIjI,GAAW,EAETsK,IACF9nD,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA4nD,KAC9B1nD,OAAO,GAEL2nD,IACFhoD,QAASioD,EAAAA,cACT/nD,YAAaC,EAAAA,WAAW,WAAM,OAAA4nD,KAC9B1nD,OAAO,iBAwIP,SAAA0nD,EACY9c,EACkBsJ,EAClBoS,GAFAlwD,KAAAw0C,SAAAA,EACkBx0C,KAAA89C,UAAAA,EAClB99C,KAAAkwD,qBAAAA,UAjFkC,mBAAkBnJ,mBAezC,IAAIlkD,EAAAA,8BAWH,IAAIA,EAAAA,8BAGG,iBACF,yBACQ,kBACP,eACH4uD,OAAOC,uBACP,mBACI,8BACU,qBACR,iBAGK,WAAM,OAAAj+C,mDAItB,IAAI5Q,EAAAA,2BACL,IAAIA,EAAAA,iCACE,IAAIA,EAAAA,8BACP,IAAIA,EAAAA,6BACL,IAAIA,EAAAA,2BACN,IAAIA,EAAAA,iCAQA,eAGrB8uD,cAAe3xD,KAAK2xD,cAAchkD,KAAK3N,MACvC4xD,YAAa5xD,KAAK4xD,YAAYjkD,KAAK3N,MACnC6xD,eAAgB7xD,KAAK6xD,eAAelkD,KAAK3N,mBAG5B,mBACK,cAMG,uCAEoB,oCACL,0CAxEpCsxD,EAAA3yD,UAAA,uBAIA,OAHKqB,KAAK8xD,QACN9xD,KAAK8xD,UAEF9xD,KAAK8xD,WAEhB,SAAS1sD,GACLpF,KAAK8xD,MAAQ1sD,EACbpF,KAAK+xD,iBAAiB/xD,KAAK8xD,OAC3B9xD,KAAKgyD,WAAW7uD,KAAKnD,KAAK8xD,8DAM1BR,EAAA3yD,UAAA,wBACA,OAAOqB,KAAKiyD,YAEhB,SAAU7sD,GACNpF,KAAKiyD,OAAS7sD,EACdpF,KAAKswD,YAAYntD,KAAKiC,oCA4D1BksD,EAAA3yD,UAAAmE,SAAA,WACS9C,KAAKkyD,cACNlyD,KAAKkyD,YAAclyD,KAAKmyD,sBAIhCb,EAAA3yD,UAAAo0C,mBAAA,WAAA,IAAAtyC,EAAAT,KAEIA,KAAKoyD,iBAAiBpyD,KAAKqyD,eAAevpC,OAC1C9oB,KAAKqyD,eAAe3/B,QAAQ1wB,UAAU,SAAC87B,GACnCr9B,EAAK2xD,iBAAiBt0B,EAAMhV,UAIpCwoC,EAAA3yD,UAAA8zB,YAAA,SAAYC,GACJA,EAAO,UACHA,EAAO,SAAUlkB,eAEjBxO,KAAKsyD,eAAiB,EAClBtyD,KAAK4mD,YACL5mD,KAAK4mD,UAAUvpB,MAAO,IAMlCr9B,KAAKqlD,YAGTiM,EAAA3yD,UAAAgM,WAAA,SAAWvF,GACHA,IACApF,KAAKuyD,KAAOntD,IAIpBksD,EAAA3yD,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAK+xD,iBAAmBlnD,GAG5BymD,EAAA3yD,UAAAmM,kBAAA,SAAkBD,GACd7K,KAAKwyD,kBAAoB3nD,GAG7BymD,EAAA3yD,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,GAGpBsmD,EAAA3yD,UAAAyB,YAAA,WACQJ,KAAKyyD,wBACLzyD,KAAKyyD,uBAAuBnyD,eAOpCgxD,EAAA3yD,UAAA0mD,SAAA,WACIrlD,KAAKogB,OAAQ,EACb,IAAIsyC,EAAgB,KAChB1yD,KAAKuyD,OAASvyD,KAAKuyD,KAAKztD,OAAS9E,KAAK2yD,SAAW3yD,KAAKuyD,KAAKztD,OAAS9E,KAAK4yD,WACzEF,GACIG,MAAO7yD,KAAKuyD,KAAKztD,OACjByD,IAAKvI,KAAK2yD,QACVnqD,IAAKxI,KAAK4yD,SAEd5yD,KAAKogB,OAAQ,GAEjBpgB,KAAK8yD,iBAAgC,cAAIJ,GAI7CpB,EAAA3yD,UAAAo0D,oBAAWl0D,GAEP,IAAImB,KAAKyK,SAAT,CAGA,IAAMuoD,EAAiBhzD,KAAKizD,SAASzyD,cAAc0yD,eAG7CC,EAAenzD,KAAKizD,SAASzyD,cAAc0yD,iBAAmBlzD,KAAKizD,SAASzyD,cAAc4yD,aAG1FC,EAAcrzD,KAAKszD,gBAAgBtzD,KAAKsyD,eAExCiB,EAAcvzD,KAAKowD,MAAQpwD,KAAKowD,MAAMtrD,OAAS,EAG/C0uD,EAAkBH,GAAgBL,GAAkB,IAAMG,EAC1DM,EAAmBJ,GAAkCE,GAAlBP,IAAkCG,EAK3E,OAFAnzD,KAAKkwD,qBAAqBvJ,UAAU9nD,EAAOmB,KAAK4mD,WAExC/nD,EAAM+M,KACV,IAAK,QAEG5L,KAAK4mD,WAAa5mD,KAAK4mD,UAAUvpB,MAAQr9B,KAAK4mD,UAAUiD,aAExD7pD,KAAK0zD,gBAAgB1zD,KAAK4mD,UAAUiD,aACpC7pD,KAAK4mD,UAAUvpB,MAAO,GAGtBr9B,KAAK2zD,cAET90D,EAAM4d,iBACN,MACJ,IAAK,YACG+2C,IACAxzD,KAAK4zD,YACL/0D,EAAM+/C,kBACN//C,EAAM4d,kBAEV,MACJ,IAAK,SACL,IAAK,MACG42C,GACArzD,KAAK4xD,YAAY5xD,KAAKsyD,eAE1B,MACJ,IAAK,YACL,IAAK,OACGkB,IACAxzD,KAAK6zD,eAAe,GACpBh1D,EAAM4d,kBAEV,MACJ,IAAK,aACL,IAAK,QACGg3C,IACAzzD,KAAK6zD,cAAc,GACnBh1D,EAAM4d,kBAMdzc,KAAK8zD,eAAuE,GAAtD9zD,KAAK8zD,cAAc5lD,QAAQlO,KAAK+zD,WAAWl1D,MAEjEmB,KAAK2zD,cACL90D,EAAM+/C,kBACN//C,EAAM4d,oBAKd60C,EAAA3yD,UAAAq1D,yBAAgBn1D,cAIRmB,KAAK4mD,WAAa5mD,KAAK4mD,UAAUgC,UAKrCtmD,WAAW,WACF7B,EAAK+zC,SAASh0C,cAAcs4B,SAASr4B,EAAKq9C,UAAUjuB,iBACrDpvB,EAAK6xD,eAAiB,EAClB7xD,EAAKmmD,YACLnmD,EAAKmmD,UAAUvpB,MAAO,KAG/B,MAGPi0B,EAAA3yD,UAAAs1D,gBAAA,SAAgBp1D,EAAmBuyD,EAAUjoC,GAEzC,IAAInpB,KAAKyK,SAAT,CAGA,IAAMypD,EAAgB,IAAI/C,GAAcC,GACxCpxD,KAAKm0D,SAAShxD,KAAK+wD,GAGfA,EAAcvF,mBACd9vD,EAAM4d,iBAKVzc,KAAKo0D,YAAYjrC,KAGrBmoC,EAAA3yD,UAAAiyD,kBAAA,WAEQ5wD,KAAKyK,UAELzK,KAAK4mD,WAAa5mD,KAAKq0D,uBACvBr0D,KAAK4mD,UAAUvpB,MAAO,IAI9Bi0B,EAAA3yD,UAAA21D,kBAAA,WAEQt0D,KAAKyK,UAETzK,KAAKu0D,eAGTjD,EAAA3yD,UAAA61D,kBAAA,SAAkB31D,GAEd,IAAImB,KAAKyK,UAELzK,KAAKy0D,WAAY,CAEjB,IAAIrE,EAAgB,KAChBvxD,EAAM61D,cACNtE,EAAQvxD,EAAM61D,cAAcC,QAAQ,cAC7B,OAAcD,gBAErBtE,EAAQ,OAAcsE,cAAcC,QAAQ,SAI5C30D,KAAK40D,OAAOxE,KACZpwD,KAAKu0D,cACL11D,EAAM+/C,kBACN//C,EAAM4d,oBAKlB60C,EAAA3yD,UAAAk2D,+BAAA,SAA+Bh2D,GAEvBmB,KAAKyK,UAGTzK,KAAK0zD,gBAAgB70D,EAAMikD,SAM/BwO,EAAA3yD,UAAAg1D,YAAA,WACQ3zD,KAAK40D,OAAO50D,KAAKowD,SACjBpwD,KAAKu0D,cACLv0D,KAAKowD,MAAQ,KAOrBkB,EAAA3yD,UAAA+0D,gBAAA,SAAgBtC,GACRpxD,KAAK80D,OAAO1D,KACZpxD,KAAKu0D,cACLv0D,KAAKowD,MAAQ,KAOrBkB,EAAA3yD,UAAAi2D,OAAA,SAAOxE,GACH,GAAIA,GAASpwD,KAAK+0D,UAAW,CAGzB,IAAMC,EAAUh1D,KAAKi1D,cAAc7E,GAG/B8E,GAAW,MACf,IAAmB,IAAAC,EAAA/9B,EAAA49B,GAAOI,EAAAD,EAAAjzD,QAAAkzD,EAAA/vD,KAAA+vD,EAAAD,EAAAjzD,OAAA,CAArB,IAAImzD,EAAMD,EAAAhwD,MACGpF,KAAKs1D,YAAYD,KAE3BH,GAAW,wGAKnB,GAAIA,EAAU,KACV,IAAmB,IAAAK,EAAAn+B,EAAA49B,GAAOQ,EAAAD,EAAArzD,QAAAszD,EAAAnwD,KAAAmwD,EAAAD,EAAArzD,OAAA,CAAjBmzD,EAAMG,EAAApwD,MACXpF,KAAK80D,OAAO90D,KAAKy1D,UAAUJ,yGAG/B,OAAO,GAIf,OAAO,eAMX/D,EAAA3yD,UAAAi1D,UAAA,WAEQ5zD,KAAKyK,WAEJzK,KAAKszD,gBAAgBtzD,KAAKsyD,eAG3BtyD,KAAK4xD,YAAY5xD,KAAKsyD,eAFtBtyD,KAAKo0D,YAAYp0D,KAAKuyD,KAAKztD,OAAS,KAU5CwsD,EAAA3yD,UAAAk1D,cAAA,SAAc9vD,GAEN/D,KAAKyK,UAELzK,KAAK01D,mBAAmB11D,KAAKsyD,iBAC7BtyD,KAAKsyD,eAAiBvuD,EAGlB/D,KAAKsyD,cAAgB,EACrBtyD,KAAKsyD,cAAgBtyD,KAAKuyD,KAAKztD,OACxB9E,KAAKsyD,cAAgBtyD,KAAKuyD,KAAKztD,SACtC9E,KAAKsyD,cAAgB,KAQjChB,EAAA3yD,UAAAgzD,cAAA,SAAcP,GACV,MAA4B,mBAAjBpxD,KAAKgpD,QACLhpD,KAAKgpD,QAAQoI,GAEI,iBAAjBpxD,KAAKgpD,QACLoI,EAAYpxD,KAAY,SAE5BoxD,GAMXE,EAAA3yD,UAAAg3D,WAAA,SAAWxsC,GACP,OAAOA,IAAUnpB,KAAKsyD,eAM1BhB,EAAA3yD,UAAAy1D,YAAA,SAAYwB,GAEJ51D,KAAKyK,UAELzK,KAAKszD,gBAAgBsC,KACrB51D,KAAKsyD,cAAgBsD,IAO7BtE,EAAA3yD,UAAA41D,YAAA,WAEQv0D,KAAKyK,WAETzK,KAAKsyD,cAAgBtyD,KAAKuyD,KAAKztD,SAMnCwsD,EAAA3yD,UAAAizD,YAAA,SAAYgE,GAER,IAAI51D,KAAKyK,UAAazK,KAAK6xD,eAAe+D,IAGtC51D,KAAKszD,gBAAgBsC,GAAW,CAChC,IAAMxE,EAAMpxD,KAAKuyD,KAAKqD,GAChBC,EAAmB,IAAI1E,GAAcC,GAC3CpxD,KAAK81D,YAAY3yD,KAAK0yD,GACjBA,EAAiBlH,qBAElB3uD,KAAKu0D,cAELv0D,KAAKuyD,KAAKzlD,OAAO8oD,EAAU,GAE3B51D,KAAKu0D,cACLv0D,KAAK+1D,WAAW5yD,KAAK,IAAIguD,GAAcC,IACvCpxD,KAAKqlD,cAQjBiM,EAAA3yD,UAAAkzD,eAAA,SAAe+D,GACX,OAAO51D,KAAKuyD,KAAKztD,OAAS9E,KAAK2yD,UAAY3yD,KAAKg2D,kBAMpD1E,EAAA3yD,UAAAs3D,eAAA,WACI,OAAOj2D,KAAKuyD,KAAKztD,OAAS9E,KAAK4yD,UAAY5yD,KAAKg2D,kBAMpD1E,EAAA3yD,UAAAu3D,SAAA,WACI,OAAOl2D,KAAK01D,mBAAmB11D,KAAKsyD,gBAGhChB,EAAA3yD,UAAAyzD,0BAAiBxL,cACjB5mD,KAAKyyD,yBACLzyD,KAAKyyD,uBAAuBnyD,cAC5BN,KAAKyyD,uBAAyB,MAGlCzyD,KAAK4mD,UAAYA,EACb5mD,KAAK4mD,YAEL5mD,KAAKyyD,uBAAyBzyD,KAAK4mD,UAAU4C,eAAexnD,UAAUhC,KAAK60D,+BAA+BlnD,KAAK3N,OAI/GA,KAAKyyD,uBAAuB3wD,IACxB9B,KAAK4mD,UAAUsB,yBAAyBnlD,KAAKkO,EAAAA,MAAM,IAAIjP,UAAU,SAAC2F,GAC9DlH,EAAKunD,mBAAqBrgD,OASlC2pD,EAAA3yD,UAAA22D,qBAAYa,GAChB,IAAIC,EAAe,KAUnB,OATAp2D,KAAKq2D,YAAa,EACdr2D,KAAKs2D,aAAet2D,KAAKs2D,WAAWC,KAAKJ,KACzCC,GACIvD,MAAOsD,EACPK,QAASx2D,KAAKs2D,YAElBt2D,KAAKq2D,YAAa,GAEtBr2D,KAAK8yD,iBAA+B,aAAIsD,EACjCp2D,KAAKq2D,YAMR/E,EAAA3yD,UAAA82D,mBAAUU,GACd,IAAI/E,EAAM,KASV,OARIpxD,KAAKy2D,kBAAqD,mBAA1Bz2D,KAAKy2D,iBACrCrF,EAAMpxD,KAAKy2D,iBAAiBN,GACG,iBAAjBn2D,KAAKgpD,SACnBoI,MACYpxD,KAAY,SAAIm2D,EAE5B/E,EAAM+E,EAEH/E,GAMHE,EAAA3yD,UAAAm2D,gBAAO1D,GACX,GAAIA,EAAK,CAEL,IAAMsF,EAAe12D,KAAK2xD,cAAcP,GACxC,GAAIsF,GAAwC,iBAAjBA,GAAmD,EAAtBA,EAAa5xD,OAAY,CAC7E,IAAM6xD,EAAiB,IAAIxF,GAAcC,GAEzC,GADApxD,KAAK42D,UAAUzzD,KAAKwzD,IACfA,EAAehI,mBAKhB,OAJA3uD,KAAKuyD,KAAOvyD,KAAKuyD,SACjBvyD,KAAKuyD,KAAK7sD,KAAK0rD,GACfpxD,KAAK62D,SAAS1zD,KAAK,IAAIguD,GAAcC,IACrCpxD,KAAKqlD,YACE,GAKnB,OAAO,GAMHiM,EAAA3yD,UAAA20D,yBAAgBsC,GACpB,OAAmB,GAAZA,GAAiBA,EAAW51D,KAAKuyD,KAAKztD,QAMzCwsD,EAAA3yD,UAAA+2D,4BAAmBvsC,GACvB,OAAgB,GAATA,GAAcA,GAASnpB,KAAKuyD,KAAKztD,QAMpCwsD,EAAA3yD,UAAAo1D,oBAAWl1D,GACf,OAAQA,EAAM+M,KACV,IAAK,WACD,MAAO,IAEf,OAAO/M,EAAM+M,KAMT0lD,EAAA3yD,UAAAs2D,uBAAc7E,GAClB,IAAI0G,GAAa1G,GACjB,GAAIpwD,KAAK8zD,eAA+C,iBAAvB9zD,KAAK8zD,cAA4B,CAC9D,IAAMiD,EAAoB/2D,KAAK8zD,cAAczjC,QAAQ,yBAA0B,QACzE2mC,EAAiB,IAAI5mC,OAAO,IAAI2mC,EAAiB,IAAK,KAC5DD,EAAY1G,EAAM6G,MAAMD,GAAgBhxD,OAAO,SAACtB,GAAM,OAAW,EAAXA,EAAEI,SAE5D,OAAOgyD,uBA5oBd73D,EAAAA,UAASC,OACNC,SAAU,eACVC,SAAU,g3DA4CViE,WAAYguD,GAAyBE,IACrCnvC,MACI80C,mBAAoB,WACpBC,gBAAiB,aACjBC,kBAAmB,sEAxE4B9zD,EAAAA,8CA6J9C07C,EAAAA,OAAM9/C,MAAC+/C,EAAAA,mBAxJayH,kCAwExBrnD,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,yBAErBG,EAAAA,MAAKH,MAAC,4BAaNqE,EAAAA,sBAEAlE,EAAAA,MAAKH,MAAC,8BASNqE,EAAAA,wBAEAlE,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,gCACAA,EAAAA,yBACAA,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,2BACAA,EAAAA,oCACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,gCACAA,EAAAA,gCACAA,EAAAA,MAAKH,MAAC,gCAENqE,EAAAA,yBACAA,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,+BAEAwJ,EAAAA,gBAAe7N,MAAC8nD,sBAEhB59C,EAAAA,UAASlK,MAAC,yCAEVkK,EAAAA,UAASlK,MAAC,0CAkGV89B,EAAAA,aAAY99B,MAAC,WAAY,oCA0EzB89B,EAAAA,aAAY99B,MAAC,YAAa,mBChT/Bm4D,GAAA,oDAOC93D,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyL,EAAAA,YACAqhB,GACA8N,IAEJ16B,SAAU2xD,IACV1xD,cAAe0xD,IACfjuD,yDAhBJ,GCAAi0D,GAAA,oDAQC/3D,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAyL,EAAAA,YACAgkD,GACAmI,GACAh9B,IAEJ16B,SAAUswD,IACVrwD,cAAeqwD,gDAjBnB,GCAAsH,GAAA,oDAeCh4D,EAAAA,SAAQL,OACPM,SACEC,EAAAA,aACAyL,EAAAA,YACAshB,GACAyU,GACAq2B,IAEF33D,SACE2mD,GACAhC,GACAa,IAEFvlD,cACE0mD,GACAhC,GACAiB,GACAC,GACAC,GACAhB,GACAuB,GACAb,IAEFvvB,iBACE2vB,GACAC,GACAC,GACAO,gDA1CJ,GCAAwR,GAAA,WAQI,SAAAA,EAAoBt/B,GAAAl4B,KAAAk4B,SAAAA,SAGpBs/B,EAAA74D,UAAAijC,wBACI5hC,KAAKk4B,SAASqF,6BATrBn6B,EAAAA,UAASlE,OACNC,SAAU,kEAHLgiC,4CASJnE,EAAAA,aAAY99B,MAAC,cAVlB,GCMMqgD,IACFne,GACAo2B,2DAGHj4D,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJE,QAAS4/C,GACT3/C,aAAc2/C,gECqMd,SAAAkY,EAAYC,EAAoClnC,GAAAxwB,KAAAwwB,mBAAAA,aAtET,mBAEqB,IAAI3tB,EAAAA,6BAUnD80D,oBACCC,mBACDC,mBACAC,oBACCC,uBACGC,yBACEC,6BACIC,gBAGnB3wD,OACI2+B,KAAM,EACN2O,MAAO,IAEXsjB,QACIjyB,KAAM,EACN2O,MAAO,IAEXrtC,OACI0+B,KAAM,EACN2O,MAAO,oBAKXttC,OACI2J,SAAS,EACTxK,SAAU,EACVimC,MAAO,IAEXnlC,OACI0J,SAAS,EACTxK,SAAU,EACVimC,MAAO,kBAKXplC,OACI6wD,OAAO,EACPl8C,MAAM,EACNxV,SAAU,EACVmG,MAAO,IACPzH,MAAK,MAEToC,OACI4wD,OAAO,EACPl8C,MAAM,EACNxV,SAAU,EACVmG,MAAO,IACPzH,MAAK,qBAWTpF,KAAK+Q,gBACD5H,KAAMwuD,GAAWU,MACjB9+B,SACI3b,MAAOg6C,GAAYU,OACnBC,SACI57B,QAASu7B,GAAqBj5C,KAC9Bu5C,WAAYd,EAAaviB,SAAS,SAASmB,QAC3CzB,MAAO,OACP4jB,UAAW,SAACrzD,GAAmC,OAAAA,IAEnDszD,UACIC,MAAO,EACPC,MAAO,GAEXC,MACIjpB,MAAO,eACPkpB,WAAY,qBACZC,WAAY,uBAGpBC,OACIl4D,OAAQ+2D,GAAWoB,KACnB1wD,IAAK,EACLC,IAAK,IACL0wD,OACIC,KAAMrB,GAAW74C,KACjB05C,OACInmC,MAAM,EACN0Q,MAAO,GACPk2B,QAAQ,EACRX,UAAW,SAACrzD,GAAmC,OAAAA,IAEnDwzD,OACIpmC,MAAM,EACN0Q,MAAO,EACPk2B,QAAQ,EACRX,UAAW,SAACrzD,GAAmC,OAAAA,KAGvDi0D,QACI9xD,MAAOmwD,EAAaviB,SAAS,SAASmB,QACtC7zB,MAAOi1C,EAAaviB,SAAS,UAAU2B,SAAS,KAAMhB,SACtDwjB,OAAQ5B,EAAaviB,SAAS,SAASmB,kBAMvDmhB,EAAA94D,UAAAmE,SAAA,WAEI9C,KAAK0oD,gBACL1oD,KAAKu5D,eAELv5D,KAAKw5D,cAAczB,GAAY0B,OAAO,GAAO,GAC7Cz5D,KAAKw5D,cAAczB,GAAY2B,OAAO,GAAO,GAG7C15D,KAAKmK,YAAYjI,KAAKlC,KAAK0c,MAAM1c,KAAKoF,SAG1CqyD,EAAA94D,UAAAg7D,UAAA,WAEQ35D,KAAK45D,kBAAkB55D,KAAKoF,MAAOpF,KAAK+J,UACxC/J,KAAKu5D,eACLv5D,KAAK+J,OAAS/J,KAAK0c,MAAM1c,KAAKoF,SAItCqyD,EAAA94D,UAAA6N,gBAAA,WAAA,IAAA/L,EAAAT,KAEIsC,WAAW,WACP7B,EAAKo5D,sBAAsB9B,GAAY0B,OACvCh5D,EAAKo5D,sBAAsB9B,GAAY2B,OAGvCj5D,EAAK+vB,mBAAmBM,kBAIhC2mC,EAAA94D,UAAAm7D,kBAAA,SAAkBlqB,EAAoBmqB,EAAwBC,GAGlD,IAAA50D,EAAApF,KAAAi6D,cAAArqB,GAAAxqC,MAGF80D,EAAUl6D,KAAKm6D,iBAAiB/0D,EAAOwqC,EAAOmqB,GAC/C/zD,OAAO,SAAAo0D,GAAQ,OAAAA,EAAKh1D,QAAUA,IAC9Be,KAAK,SAAAi0D,GAAQ,OAAAJ,EAAWI,EAAKh1D,MAAQA,EAAQg1D,EAAKh1D,MAAQA,IAG/D,GAAI80D,EACA,OAAOl6D,KAAKq6D,cAAczqB,EAAO5vC,KAAKs6D,cAAc1qB,EAAOsqB,EAAQ90D,QAGvE,IAAMy9B,EAAOk3B,IAAejC,GAAWyC,MAAQv6D,KAAK6R,QAAQ0nB,QAAQm/B,SAASC,MAAQ34D,KAAK6R,QAAQ0nB,QAAQm/B,SAASE,MAEnH54D,KAAKq6D,cAAczqB,EAAO5vC,KAAKs6D,cAAc1qB,EAAOxqC,GAAS40D,EAAWn3B,GAAQA,MAIpF40B,EAAA94D,UAAA67D,UAAA,SAAU5qB,EAAoBoqB,GAC1Bh6D,KAAKq6D,cAAczqB,EAAO5vC,KAAKs6D,cAAc1qB,EAAOoqB,EAAWh6D,KAAK6R,QAAQmnD,MAAMxwD,IAAMxI,KAAK6R,QAAQmnD,MAAMzwD,OAG/GkvD,EAAA94D,UAAA87D,cAAA,SAAc7qB,GACV,OAAO5vC,KAAKi6D,cAAcrqB,GAAOxqC,OAGrCqyD,EAAA94D,UAAA+7D,kBAAA,SAAkB9qB,GACd,OAAO5vC,KAAK6R,QAAQ0nB,QAAQg/B,QAAQE,UAAUz4D,KAAKi6D,cAAcrqB,GAAOxqC,QAGpEqyD,EAAA94D,UAAAs7D,uBAAcrqB,GAClB,OAAOA,IAAUmoB,GAAY0B,MAAQz5D,KAAK26D,OAAOpzD,MAAQvH,KAAK26D,OAAOnzD,OAGjEiwD,EAAA94D,UAAA66D,uBAAc5pB,EAAoBwoB,EAAgBl8C,GAElD0zB,IAAUmoB,GAAY0B,OACtBz5D,KAAK26D,OAAOpzD,MAAM6wD,MAAQA,EAC1Bp4D,KAAK26D,OAAOpzD,MAAM2U,KAAOA,IAEzBlc,KAAK26D,OAAOnzD,MAAM4wD,MAAQA,EAC1Bp4D,KAAK26D,OAAOnzD,MAAM0U,KAAOA,GAI7Blc,KAAK46D,eAAehrB,IAGxB6nB,EAAA94D,UAAAk8D,WAAA,SAAWjrB,EAAoB/wC,GAG3B,IAAMgN,EAAQ7L,KAAKi6D,cAAcrqB,GAGjC,OAAQ/wC,GAEJ,KAAKo5D,GAAiB6C,UAClBjvD,EAAMqQ,MAAO,EACb,MAEJ,KAAK+7C,GAAiB8C,QAClBlvD,EAAMqQ,MAAO,EACb,MAEJ,KAAK+7C,GAAiB+C,UAClBnvD,EAAMusD,OAAQ,EACd,MAEJ,KAAKH,GAAiBgD,WAClBpvD,EAAMusD,OAAQ,EACd,MAEJ,KAAKH,GAAiBh5C,KAClBpT,EAAMqQ,MAAO,EACbrQ,EAAMusD,OAAQ,EAKtBp4D,KAAKw5D,cAAc5pB,EAAO/jC,EAAMusD,MAAOvsD,EAAMqQ,OAGjDu7C,EAAA94D,UAAAu8D,iBAAA,SAAiBtrB,GAEb,IAAMxqC,EAAQpF,KAAKy6D,cAAc7qB,GAG3BwqB,EAAOp6D,KAAKk5D,MAAM/yD,KAAK,SAAAg1D,GAAS,OAAAA,EAAM/1D,QAAUA,IAEtD,OAAIg1D,GAAQA,EAAKztB,MACNytB,EAAKztB,MAIT3sC,KAAK06D,kBAAkB9qB,IAG1B6nB,EAAA94D,UAAAi8D,wBAAehrB,GAEnB,IAAI1+B,GAAU,EACRrF,EAAQ7L,KAAKi6D,cAAcrqB,GAEjC,OAAQ5vC,KAAK6R,QAAQ0nB,QAAQg/B,QAAQ57B,SAEjC,KAAKu7B,GAAqBkD,WACtBlqD,GAAU,EACV,MAEJ,KAAKgnD,GAAqBmD,KACtBnqD,EAAUrF,EAAMqQ,KAChB,MAEJ,KAAKg8C,GAAqBoD,MACtBpqD,EAAUrF,EAAMusD,OAASvsD,EAAMqQ,KAC/B,MAEJ,KAAKg8C,GAAqBqD,QACtBrqD,GAAU,EAKlBlR,KAAKw7D,WAAW5rB,GAAO1+B,QAAUA,EAGjClR,KAAKy7D,kBAAkB7rB,GAGvB5vC,KAAK65D,sBAAsBjqB,IAGvB6nB,EAAA94D,UAAA88D,2BAAkB7rB,GAGV5vC,KAAKi6D,cAAcrqB,GACjB5vC,KAAKw7D,WAAW5rB,GAGtBjD,MAAQ3sC,KAAK06D,kBAAkB9qB,GAAOj0B,YAG1C87C,EAAA94D,UAAA+8D,2BAAkB9rB,GACtB,OAAOA,IAAUmoB,GAAY0B,MAAQz5D,KAAK27D,aAAe37D,KAAK47D,cAG1DnE,EAAA94D,UAAA68D,oBAAW5rB,GACf,OAAOA,IAAUmoB,GAAY0B,MAAQz5D,KAAK09B,SAASn2B,MAAQvH,KAAK09B,SAASl2B,OAGrEiwD,EAAA94D,UAAAk7D,+BAAsBjqB,GAE1B,IAAMxd,EAAUpyB,KAAKw7D,WAAW5rB,GAGhC,IAAwB,IAApBxd,EAAQlhB,QAAZ,CAIA,IAGI2qD,EAHAC,EAAiB97D,KAAK07D,kBAAkB9rB,GAMxCisB,EADA77D,KAAK6R,QAAQ0nB,QAAQ3b,QAAUg6C,GAAYU,OAC9Bt4D,KAAK6R,QAAQmnD,MAAMl4D,SAAW+2D,GAAWkE,OAAS,GAAK,GAEvD,EAGjB,IAAIC,EAAeF,EAAet7D,cAAcK,YAG5Co7D,EAAkB3zD,KAAK+R,MAAM2hD,EAAeH,GAAc,GAG9DzpC,EAAQ1rB,UAAYu1D,EAEhBj8D,KAAK6R,QAAQ1I,OAASwuD,GAAWuE,OAASl8D,KAAK6R,QAAQ0nB,QAAQg/B,QAAQ57B,UAAYu7B,GAAqBqD,SACxGv7D,KAAKm8D,sBAAsB/pC,KAI3BqlC,EAAA94D,UAAAw9D,+BAAsB/pC,GAC1B,IAAMgqC,EAAap8D,KAAKg5D,MAAMx4D,cAAcK,YAEtC0G,EAAS60D,EAAa,IAAOp8D,KAAK26D,OAAOpzD,MAAMb,SAC/Cc,EAAS40D,EAAa,IAAOp8D,KAAK26D,OAAOnzD,MAAMd,SAK/C21D,EAAQ90D,EAHKvH,KAAK27D,aAAan7D,cAAcK,YAAc,GAG5B2G,EAFlBxH,KAAK47D,aAAap7D,cAAcK,YAAc,GAKtD,EAAPw7D,IACIjqC,IAAYpyB,KAAK09B,SAASn2B,QAAoC,IAA3BvH,KAAK26D,OAAOpzD,MAAM2U,KACrDkW,EAAQ1rB,UAAa21D,EAAO,EACrBjqC,IAAYpyB,KAAK09B,SAASl2B,QAAoC,IAA3BxH,KAAK26D,OAAOnzD,MAAM0U,OAC5DkW,EAAQ1rB,UAAa21D,EAAO,KAKhC5E,EAAA94D,UAAA29D,eAAMl3D,EAAemD,EAAaC,GACtC,OAAOF,KAAKC,IAAID,KAAKE,IAAIpD,EAAOmD,GAAMC,IAG1CivD,EAAA94D,UAAA49D,oBAAA,SAAoB19D,EAAgC+wC,GAGhD,IAAI4sB,EAAgB39D,aAAiB49D,WAAa59D,EAAM0e,QAAU1e,EAAM69D,SAAkC,EAAvB79D,EAAM69D,QAAQ53D,OAAajG,EAAM69D,QAAQ,GAAGn/C,QAAU,KAGzI,GAAsB,OAAlBi/C,EAAJ,CAKA,IAAI/mD,EAASxU,OAAOkU,YAAcqnD,EAG9BG,EAAc38D,KAAKg5D,MAAMx4D,cAAcgV,wBAMvConD,EAHW58D,KAAKs8D,MAAM7mD,EAASknD,EAAYjnD,KAAM,EAAGinD,EAAY/7D,OAGzC+7D,EAAY/7D,MAGnCwE,GAAUpF,KAAK6R,QAAQmnD,MAAMxwD,IAAMxI,KAAK6R,QAAQmnD,MAAMzwD,KAAOq0D,EAAY58D,KAAK6R,QAAQmnD,MAAMzwD,IAGhGnD,EAAQpF,KAAKs6D,cAAc1qB,EAAOxqC,GAGlCA,EAAQpF,KAAK68D,WAAWz3D,EAAOwqC,GAG/B5vC,KAAKq6D,cAAczqB,EAAOxqC,GAE1BpF,KAAK88D,YAAYltB,GACjB5vC,KAAKu5D,eAGLv5D,KAAKy7D,kBAAkB7rB,GAGvB5vC,KAAK65D,sBAAsB9B,GAAY0B,OACvCz5D,KAAK65D,sBAAsB9B,GAAY2B,OAGvC15D,KAAKwwB,mBAAmBM,iBAGpB2mC,EAAA94D,UAAAm+D,qBAAYltB,GAEhB,IAAIroC,EAAQqoC,IAAUmoB,GAAY0B,MAAQ,IAAM,IAC5CjyD,EAAQooC,IAAUmoB,GAAY0B,MAAQ,IAAM,IAGhDz5D,KAAK26D,OAAOpzD,MAAMsF,MAAQtF,EAC1BvH,KAAK26D,OAAOnzD,MAAMqF,MAAQrF,GAGtBiwD,EAAA94D,UAAAw7D,0BAAiB/0D,EAAewqC,EAAoBmqB,GAGxD,GAAIA,IAAejC,GAAW74C,KAC1B,SAIJ,IAAIi6C,EAEJ,OAAQa,GAEJ,KAAKjC,GAAWiF,MACZ7D,EAAQl5D,KAAKk5D,MAAMlzD,OAAO,SAAAo0D,GAAQ,OAAAA,EAAKjxD,OAAS6uD,GAAe+E,QAC/D,MAEJ,KAAKjF,GAAWyC,MACZrB,EAAQl5D,KAAKk5D,MAAMlzD,OAAO,SAAAo0D,GAAQ,OAAAA,EAAKjxD,OAAS6uD,GAAeuC,QAC/D,MAEJ,QACIrB,EAAQl5D,KAAKk5D,MAAM9gD,MAAM,GAIjC,IAAI4kD,EAAah9D,KAAK6R,QAAQmnD,MAAMzwD,IAChC2R,EAAala,KAAK6R,QAAQmnD,MAAMxwD,IAEhCxI,KAAK6R,QAAQ1I,OAASwuD,GAAWuE,OAAStsB,IAAUmoB,GAAY0B,QAChEv/C,EAAala,KAAK26D,OAAOnzD,MAAMpC,OAG/BpF,KAAK6R,QAAQ1I,OAASwuD,GAAWuE,OAAStsB,IAAUmoB,GAAY2B,QAChEsD,EAAah9D,KAAK26D,OAAOpzD,MAAMnC,OAInC,IAAMqd,EAAQy2C,EAAMlzD,OAAO,SAAAo0D,GAAQ,OAAAA,EAAKh1D,OAAS43D,GAAc5C,EAAKh1D,OAAS8U,IAG7E,OAAqB,IAAjBuI,EAAM3d,UAIH2d,EAAMtU,KAAK,SAAC8uD,EAASC,GAKxB,OAHqB50D,KAAKE,IAAIy0D,EAAQ73D,MAAOA,GAASkD,KAAKC,IAAI00D,EAAQ73D,MAAOA,IACzDkD,KAAKE,IAAI00D,EAAQ93D,MAAOA,GAASkD,KAAKC,IAAI20D,EAAQ93D,MAAOA,OAM9EqyD,EAAA94D,UAAAk+D,oBAAWz3D,EAAewqC,GAE9B,IAAMutB,EAAgBn9D,KAAKm6D,iBAAiB/0D,EAAOwqC,EAAO5vC,KAAK6R,QAAQmnD,MAAME,MAAMC,MAGnF,OAA6B,IAAzBgE,EAAcr4D,OACPM,EAIJ+3D,EAAc,GAAG/3D,OAGpBqyD,EAAA94D,UAAA27D,uBAAc1qB,EAAoBxqC,GAGtC,OAAIpF,KAAK6R,QAAQ1I,OAASwuD,GAAWU,MAC1B/vD,KAAKE,IAAIF,KAAKC,IAAInD,EAAOpF,KAAK6R,QAAQmnD,MAAMxwD,KAAMxI,KAAK6R,QAAQmnD,MAAMzwD,KAI5EnD,EAAQpF,KAAK6R,QAAQmnD,MAAMxwD,IACpBonC,IAAUmoB,GAAY0B,MAAQnxD,KAAKC,IAAIvI,KAAK6R,QAAQmnD,MAAMxwD,IAAKxI,KAAK26D,OAAOnzD,MAAMpC,OAASpF,KAAK6R,QAAQmnD,MAAMxwD,IAGpHpD,EAAQpF,KAAK6R,QAAQmnD,MAAMzwD,IACpBqnC,IAAUmoB,GAAY2B,MAAQpxD,KAAKE,IAAIxI,KAAK6R,QAAQmnD,MAAMzwD,IAAKvI,KAAK26D,OAAOpzD,MAAMnC,OAASpF,KAAK6R,QAAQmnD,MAAMzwD,IAIpHqnC,IAAUmoB,GAAY0B,MAEU,OAA5Bz5D,KAAK26D,OAAOnzD,MAAMpC,MACXA,EAGJA,GAASpF,KAAK26D,OAAOnzD,MAAMpC,MAAQA,EAAQpF,KAAK26D,OAAOnzD,MAAMpC,MAGpEwqC,IAAUmoB,GAAY2B,MAEU,OAA5B15D,KAAK26D,OAAOpzD,MAAMnC,MACXA,EAGJA,GAASpF,KAAK26D,OAAOpzD,MAAMnC,MAAQA,EAAQpF,KAAK26D,OAAOpzD,MAAMnC,WANxE,GAUIqyD,EAAA94D,UAAA+pD,yBAGJ1oD,KAAK6R,QAAU7R,KAAKo9D,UAAUp9D,KAAK6R,YAAe7R,KAAK+Q,gBAEvD/Q,KAAKq9D,oBACLr9D,KAAKs9D,cACLt9D,KAAKu5D,gBAGD9B,EAAA94D,UAAA46D,wBAEAv5D,KAAKoF,QAAUqO,WAA4B,OAAfzT,KAAKoF,QACjCpF,KAAKoF,MAAQ,GAGjB,IAAIm4D,EAAmC,iBAAfv9D,KAAKoF,MAAqBpF,KAAKoF,MAAQpF,KAAKoF,MAAMo4D,IACtEC,EAAmC,iBAAfz9D,KAAKoF,MAAqBpF,KAAKoF,MAAQpF,KAAKoF,MAAMs4D,KAG1EH,EAAav9D,KAAKs6D,cAAcvC,GAAY0B,MAAOhI,OAAO8L,EAAWvrB,QAAQ,KAC7EyrB,EAAaz9D,KAAKs6D,cAAcvC,GAAY2B,MAAOjI,OAAOgM,EAAWzrB,QAAQ,KAG7E,IAAI2rB,GAAmBJ,EAAav9D,KAAK6R,QAAQmnD,MAAMzwD,MAAQvI,KAAK6R,QAAQmnD,MAAMxwD,IAAMxI,KAAK6R,QAAQmnD,MAAMzwD,KAAQ,IAC/Gq1D,GAAmBH,EAAaz9D,KAAK6R,QAAQmnD,MAAMzwD,MAAQvI,KAAK6R,QAAQmnD,MAAMxwD,IAAMxI,KAAK6R,QAAQmnD,MAAMzwD,KAAQ,IAGnHvI,KAAK26D,OAAOpzD,MAAMb,SAAWi3D,EAC7B39D,KAAK26D,OAAOnzD,MAAMd,SAAWk3D,EAG7B59D,KAAK69D,OAAOt2D,MAAM2+B,KAAOy3B,EACzB39D,KAAK69D,OAAO1F,OAAOjyB,KAAO03B,EAAgBD,EAC1C39D,KAAK69D,OAAOr2D,MAAM0+B,KAAOlmC,KAAK6R,QAAQ1I,OAASwuD,GAAWU,MAAQ,IAAMsF,EAAgB,IAAMC,EAG9F59D,KAAK89D,SAASP,EAAYE,IAGtBhG,EAAA94D,UAAAm/D,kBAASN,EAAaE,GAE1B19D,KAAK26D,OAAOpzD,MAAMnC,MAAQo4D,EAC1Bx9D,KAAK26D,OAAOnzD,MAAMpC,MAAQs4D,EAE1B,IAAI5Q,EAAgB9sD,KAAK0c,MAAM1c,KAAK+J,QAEpC/J,KAAKoF,MAAQpF,KAAK6R,QAAQ1I,OAASwuD,GAAWU,MAAQmF,GAAQA,IAAKA,EAAKE,KAAMA,GAG1E19D,KAAK45D,kBAAkB55D,KAAKoF,MAAO0nD,IACnC9sD,KAAKmK,YAAYhH,KAAKnD,KAAK0c,MAAM1c,KAAKoF,QAEtCpF,KAAKy7D,kBAAkB1D,GAAY0B,OACnCz5D,KAAKy7D,kBAAkB1D,GAAY2B,QAEnC15D,KAAKmK,YAAYhH,KAAKnD,KAAK0c,MAAM1c,KAAKoF,SAItCqyD,EAAA94D,UAAA07D,uBAAczqB,EAAoBxqC,GAGtCpF,KAAKi6D,cAAcrqB,GAAOxqC,MAAQA,EAGlCpF,KAAK89D,SAAS99D,KAAK26D,OAAOpzD,MAAMnC,MAAOpF,KAAK26D,OAAOnzD,MAAMpC,QAGrDqyD,EAAA94D,UAAA2+D,uBAGJ,IAAMS,EAAe/9D,KAAK6R,QAAQmnD,MAAME,MAAMP,MACxCqF,EAAeh+D,KAAK6R,QAAQmnD,MAAME,MAAMN,OAGpB,IAAtBmF,EAAavrC,OAAwC,IAAtBwrC,EAAaxrC,OAC5CxyB,KAAKk5D,UAIT,IAAM+E,EAAaj+D,KAAKk+D,SAASH,EAAc/F,GAAeuC,OAAOv0D,OAAO,SAAAo0D,GAAQ,OAAAA,EAAK+D,YACnFC,EAAap+D,KAAKk+D,SAASF,EAAchG,GAAe+E,OAAO/2D,OAAO,SAAAo0D,GAAQ,OAAAA,EAAK+D,YAGzFn+D,KAAKk5D,MAAQl5D,KAAKq+D,WAAWJ,EAAYG,IAGrC3G,EAAA94D,UAAA0+D,6BAGJ,IAAA30D,EAAA1I,KAAA6R,QAAAmnD,MAAAK,OAAQ9xD,EAAAmB,EAAAnB,MAAOkb,EAAA/Z,EAAA+Z,MAAO62C,EAAA5wD,EAAA4wD,OAGtBt5D,KAAK69D,OAAOt2D,MAAMstC,MAAyB,iBAAVttC,EAAqBA,EAAQ,6BAA6BA,EAAM+2D,KAAK,MAAK,IAC3Gt+D,KAAK69D,OAAO1F,OAAOtjB,MAAyB,iBAAVpyB,EAAqBA,EAAQ,6BAA6BA,EAAM67C,KAAK,MAAK,IAC5Gt+D,KAAK69D,OAAOr2D,MAAMqtC,MAA0B,iBAAXykB,EAAsBA,EAAS,6BAA6BA,EAAOgF,KAAK,MAAK,KAG1G7G,EAAA94D,UAAA4/D,kBAASr7B,GAGb,GAAIA,aAAiBp/B,MACjB,OAAOo/B,EAMX,IAHA,IAAIs7B,KAGK/yD,EAAMzL,KAAK6R,QAAQmnD,MAAMzwD,IAAKkD,GAAOzL,KAAK6R,QAAQmnD,MAAMxwD,IAAKiD,GAAOy3B,EACzEs7B,EAAO94D,KAAK+F,GAGhB,OAAO+yD,GAGH/G,EAAA94D,UAAAu/D,kBAASrsD,EAA4B1I,GAGzC,IAAI+5B,EAAQljC,KAAKu+D,SAAS1sD,EAAQqxB,OAG9B36B,EAAMvI,KAAK6R,QAAQmnD,MAAMzwD,IACzBC,EAAMxI,KAAK6R,QAAQmnD,MAAMxwD,IAG7B,OAAO06B,EAAMp8B,IAAI,SAAA+7B,GACb,OACIs7B,UAAWtsD,EAAQ2gB,KACnBisC,WAAY5sD,EAAQunD,OACpBjwD,KAAMA,EACNzC,UAAYm8B,EAAOt6B,IAAQC,EAAMD,GAAQ,IACzCnD,MAAOy9B,EACP8J,MAAO96B,EAAQ4mD,UAAU51B,MAE9B78B,OAAO,SAAAo0D,GAAQ,OAAiB,GAAjBA,EAAK1zD,UAAiB0zD,EAAK1zD,UAAY,OAGrD+wD,EAAA94D,UAAA0/D,oBAAWJ,EAA0BG,GAGzC,OAAOH,EAAWp4D,OAAOu4D,GACpBp4D,OAAO,SAACo0D,EAAMjxC,EAAOjR,GAAU,OAAAkiD,EAAKjxD,OAAS6uD,GAAeuC,QAAUriD,EAAM/R,KAAK,SAAAu4D,GAAM,OAAAA,EAAGv1D,OAAS6uD,GAAeuC,OAASmE,EAAGh4D,WAAa0zD,EAAK1zD,aAChJyH,KAAK,SAACwwD,EAAIC,GAAO,OAAAD,EAAGv5D,MAAQw5D,EAAGx5D,SAGhCqyD,EAAA94D,UAAAy+D,mBAAa90B,EAAgB5qB,GAGjC,IAAK,IAAI1N,KAAQ0N,EAGR4qB,EAAYpkC,eAAe8L,GAOC,iBAAtBs4B,EAAYt4B,KAKnBs4B,EAAYt4B,aAAiBlM,QAKjCwkC,EAAYt4B,GAAQhQ,KAAKo9D,UAAU90B,EAAYt4B,GAAO0N,EAAO1N,MAfzDs4B,EAAYt4B,GAAQ0N,EAAO1N,GAkBnC,OAAOs4B,GAGHmvB,EAAA94D,UAAAi7D,2BAAkBiF,EAA8BC,GAGpD,GAAI9+D,KAAK++D,cAAcF,IAAW7+D,KAAK++D,cAAcD,GAAS,CAG1D,IAAME,EAAI,EACJC,EAAI,EAEV,OAAOD,EAAKxB,MAAQyB,EAAKzB,KAAOwB,EAAKtB,OAASuB,EAAKvB,KAIvD,OAAOmB,IAAWC,GAQdrH,EAAA94D,UAAAogE,uBAAc35D,GAGlB,MAAqB,iBAAVA,IAKJ,QAASA,GAAS,SAAUA,IAG/BqyD,EAAA94D,UAAA+d,eAAMtX,GAGV,GAAqB,iBAAVA,EACP,OAAOA,EAIX,IAAM0uB,EAAQvvB,KAAQa,GAMtB,OAHAA,EAAQqO,UAGDqgB,uBAn3Bd70B,EAAAA,UAASC,OACNC,SAAU,YACVC,SAAU,kyPAsIV2H,gBAAiBC,EAAAA,wBAAwBC,oDA1IpC6sC,UADwCviB,EAAAA,oDA+I5ClyB,EAAAA,uBACAA,EAAAA,2BACAkE,EAAAA,6BAEA6F,EAAAA,UAASlK,MAAC,sCACVkK,EAAAA,UAASlK,MAAC,+BACVkK,EAAAA,UAASlK,MAAC,6zBCrJf,IAAAggE,GAAA,oDAOC3/D,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAm8C,GACAx9B,IAEJze,SAAU83D,IACV73D,cAAe63D,gDAdnB,GCAA0H,GAAA,WAwHI,SAAAA,EAAoBrjB,GAAA97C,KAAA87C,cAAAA,gCA7DS,eASK,yDAI9BqjB,EAAAxgE,UAAA,aAIJ,WACI,OAAOqB,KAAKo/D,qBALNh6D,GACNpF,KAAKo/D,OAASp/D,KAAK87C,cAAczG,iBAAiBjwC,0DAQlD+5D,EAAAxgE,UAAA,kBAIJ,WACI,OAAOqB,KAAKq/D,0BALDj6D,GACXpF,KAAKq/D,YAAcr/D,KAAK87C,cAActY,QAAQp+B,0DAQ9C+5D,EAAAxgE,UAAA,gBASJ,WACI,OAAOqB,KAAKs/D,wBAVHl6D,cAELtB,MAAMmK,QAAQ7I,GACdpF,KAAKs/D,UAAYl6D,EAAM0B,IAAI,SAAA+tC,GAAS,OAAAp0C,EAAKq7C,cAActY,QAAQqR,KAE/D70C,KAAKs/D,WAAat/D,KAAK87C,cAActY,QAAQp+B,2DASjD+5D,EAAAxgE,UAAA,aAYJ,WACI,OAAOqB,KAAKu/D,qBAbNn6D,GAGN,IAAMm6D,EAASz7D,MAAMmK,QAAQ7I,GAASA,GAASA,GAGzCo6D,EAAQl3D,KAAKE,IAAI+2D,EAAO7qD,OAAO,SAACtM,EAAUk3B,GAAY,OAAAl3B,EAAWk3B,GAAS,GAAI,KAGpFt/B,KAAKu/D,OAASA,EAAOz4D,IAAI,SAAA24D,GAAO,OAACA,EAAMD,EAAS,2DA7GvDvgE,EAAAA,UAASC,OACNC,SAAU,WACVC,SAAU,40EA+CV2H,gBAAiBC,EAAAA,wBAAwBC,oDApDpC6sC,yCA0DJz0C,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,gCACAA,EAAAA,uBACAA,EAAAA,qBAMAA,EAAAA,0BASAA,EAAAA,wBASAA,EAAAA,qBAcAA,EAAAA,WAvGL,GCAAqgE,GAAA,oDAOCngE,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACAm8C,GACAnmB,IAEJ91B,SAAUw/D,IACVv/D,cAAeu/D,gDAdnB,yCCOY,IAAIx+D,EAAAA,iCACF,IAAIA,EAAAA,gBAA8B,oBACjC,IAAIA,EAAAA,iBAAyB,qBACzB,IAAIA,EAAAA,gBAA8B,aAEjDg/D,EAAAhhE,UAAAmD,IAAA,SAAIsE,GACApG,KAAK+F,MAAM7D,KAAI0D,EAAK5F,KAAK+F,MAAMX,OAAOgB,KAGjCpG,KAAK09C,QAAQt4C,OACdpF,KAAKwG,OAAOJ,IAIpBu5D,EAAAhhE,UAAAylD,OAAA,SAAOh+C,GAGHpG,KAAK+F,MAAM7D,KAAKlC,KAAK+F,MAAMX,MAAMY,OAAO,SAAAO,GAAQ,OAAAA,IAASH,MAG7Du5D,EAAAhhE,UAAA6H,OAAA,SAAOJ,GACEA,EAAIqE,WACLzK,KAAK09C,QAAQx7C,KAAKkE,GAClBpG,KAAK2nD,aAAazlD,KAAKkE,KAI/Bu5D,EAAAhhE,UAAAihE,cAAA,SAAcz2C,GAGV,GAAgC,IAA5BnpB,KAAK+F,MAAMX,MAAMN,OAArB,CAKA,GAAIqkB,EAAQ,EACR,OAAOnpB,KAAK4/D,cAAc5/D,KAAK+F,MAAMX,MAAMN,OAAS,GACjD,GAAIqkB,GAASnpB,KAAK+F,MAAMX,MAAMN,OACjC,OAAO9E,KAAK4/D,cAAc,GAG9B,IAAM5wD,EAAShP,KAAK+F,MAAMX,MAAM+jB,GAE5Bna,GACAhP,KAAKwG,OAAOwI,KAIpB2wD,EAAAhhE,UAAAkhE,cAAA,WAEI,QAAM12C,EAAQnpB,KAAK+F,MAAMX,MAAM8I,QAAQlO,KAAK09C,QAAQt4C,OAG9Ca,EAAOjG,KAAK+F,MAAMX,MAAMgT,MAAM+Q,EAAQ,OAG5C,IAAgB,IAAA22C,EAAA1oC,EAAAnxB,GAAI85D,EAAAD,EAAA59D,QAAA69D,EAAA16D,KAAA06D,EAAAD,EAAA59D,OAAA,CAAf,IAAIkE,EAAG25D,EAAA36D,MACR,IAAKgB,EAAIqE,SACL,OAAOzK,KAAKwG,OAAOJ,wGAK3BpG,KAAKggE,kBAGTL,EAAAhhE,UAAAshE,kBAAA,WAEI,QAAM92C,EAAQnpB,KAAK+F,MAAMX,MAAM8I,QAAQlO,KAAK09C,QAAQt4C,OAG9Ca,EAAOjG,KAAK+F,MAAMX,MAAMgT,MAAM,EAAG+Q,OAGvC,IAAgB,IAAAzgB,EAAA0uB,EAAAnxB,EAAKi6D,WAASh4C,EAAAxf,EAAAxG,QAAAgmB,EAAA7iB,KAAA6iB,EAAAxf,EAAAxG,OAAA,CAAzB,IAAIkE,EAAG8hB,EAAA9iB,MACR,IAAKgB,EAAIqE,SACL,OAAOzK,KAAKwG,OAAOJ,wGAK3BpG,KAAKmgE,iBAGTR,EAAAhhE,UAAAqhE,eAAA,WAEI,IAAMI,EAAWpgE,KAAK+F,MAAMX,MAAMsG,UAAU,SAAAtF,GAAO,OAACA,EAAIqE,YAEtC,IAAd21D,GACApgE,KAAK4/D,cAAcQ,IAI3BT,EAAAhhE,UAAAwhE,cAAA,WAEI,IAAMC,EAAWpgE,KAAK+F,MAAMX,MAAMgT,QAAQ8nD,UAAUx0D,UAAU,SAAAtF,GAAO,OAACA,EAAIqE,YAExD,IAAd21D,GACApgE,KAAK4/D,cAAe5/D,KAAK+F,MAAMX,MAAMN,OAAS,EAAKs7D,wBArG9D79D,EAAAA,wDCJD89D,GAAA,WAkEI,SAAAA,EAAmBC,GAAAtgE,KAAAsgE,OAAAA,gBAJS,eACkB,cAQ9CD,EAAA1hE,UAAA6H,OAAA,SAAOJ,GACHpG,KAAKsgE,OAAO95D,OAAOJ,IAGvBi6D,EAAA1hE,UAAAshE,kBAAA,SAAkBphE,GAGd,IAAM0hE,EAA0B,cAAd1hE,EAAM+M,KAAyC,KAAlB/M,EAAMkiC,QAC/Cy/B,EAAwB,YAAd3hE,EAAM+M,KAAuC,KAAlB/M,EAAMkiC,QAG7Cw/B,GAA8B,SAAjBvgE,KAAKwR,SAAsBgvD,GAA4B,SAAjBxgE,KAAKwR,UAK5DxR,KAAKsgE,OAAOL,oBAGZphE,EAAM4d,mBAGV4jD,EAAA1hE,UAAAkhE,cAAA,SAAchhE,GAGV,IAAM4hE,EAA2B,eAAd5hE,EAAM+M,KAA0C,KAAlB/M,EAAMkiC,QACjD2/B,EAA0B,cAAd7hE,EAAM+M,KAAyC,KAAlB/M,EAAMkiC,QAGjD0/B,GAA+B,SAAjBzgE,KAAKwR,SAAsBkvD,GAA8B,SAAjB1gE,KAAKwR,UAK/DxR,KAAKsgE,OAAOT,gBAGZhhE,EAAM4d,uCAxGbxd,EAAAA,UAASC,OACNC,SAAU,YACVC,SAAU,0wDA+CV2H,gBAAiBC,EAAAA,wBAAwBC,OACzC5D,WAAYs8D,IACZv9C,MACIu+C,oBAAqB,qBACrBC,qBAAsB,oEAvDrBjB,uCA4DJtgE,EAAAA,uBACAA,EAAAA,yBACAA,EAAAA,MAAKH,MAAC,mBAhEX,GCMI2hE,GAAc,gBAmCd,SAAAC,EAAoBC,GAApB,IAAAtgE,EAAAT,KAAoBA,KAAA+gE,QAAAA,UAnBE,aAAYF,kBACL,cAIV,IAAIh+D,EAAAA,2BACF,IAAIA,EAAAA,0BASM7C,KAAK+gE,QAAQrjB,QAAQ36C,KAAK+D,EAAAA,IAAI,SAAA68B,GAAU,OAAAA,IAAWljC,KAK9EsgE,EAAQj/D,IAAI9B,MAEZA,KAAKK,cAAgBL,KAAK09C,QAAQ17C,UAAU,SAAA2hC,GAAU,OAAAA,EAASljC,EAAK+F,OAAOrD,OAAS1C,EAAKs/C,SAAS58C,sCAdzF29D,EAAAniE,UAAA,uBAAOyG,GACZA,GACApF,KAAK+gE,QAAQv6D,OAAOxG,uCAe5B8gE,EAAAniE,UAAAyB,YAAA,WACIJ,KAAK+gE,QAAQ3c,OAAOpkD,MACpBA,KAAKK,cAAcC,mCAzC1BrB,EAAAA,UAASC,OACNC,SAAU,SACVC,SAAU,wOAQV2H,gBAAiBC,EAAAA,wBAAwBC,oDAdpC04D,kCAkBJtgE,EAAAA,wBACAA,EAAAA,uBACAA,EAAAA,2BACAA,EAAAA,sBAEAkE,EAAAA,yBACAA,EAAAA,uBAEAlE,EAAAA,cC9BL2hE,GAAA,WAQI,SAAAA,EAAY/kB,EAA+B71C,GACvCA,EAAI66D,WAAahlB,6BANxB74C,EAAAA,UAASlE,OACNC,SAAU,8DAJMiI,EAAAA,mBACX05D,QADT,GCAAI,GAAA,WAeI,SAAAA,EAAoBH,EAAgCp+D,GAAhC3C,KAAA+gE,QAAAA,EAAgC/gE,KAAA2C,YAAAA,SAEpDu+D,EAAAviE,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KACIA,KAAKK,cAAgBL,KAAK+gE,QAAQpZ,aAAa5kD,KAC3CiD,EAAAA,OAAO,WAAM,OAAgC,IAAhCvF,EAAKsgE,QAAQ14C,SAASjjB,QACnCY,EAAAA,OAAO,WAAM,OAAAvF,EAAKsgE,QAAQpZ,aAAaviD,QAAU3E,EAAK0gE,cACxDn/D,UAAU,WAAM,OAAAvB,EAAKkC,YAAYnC,cAAc2rB,WAGrD+0C,EAAAviE,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,mCAnB1B8C,EAAAA,UAASlE,OACNC,SAAU,4DAJLwgE,UAHWr8D,EAAAA,kDAWfjE,EAAAA,WAXL,GCAA+hE,GAAA,oDAQC7hE,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJE,SAAU0gE,GAAiBS,GAAcE,IACzCphE,cAAeygE,GAAiBS,GAAcE,GAAqBE,gDAbvE,GCAAG,GAAA,oDAECpiE,EAAAA,UAASC,OACNC,SAAU,cACVC,SAAU,8GAJd,GCAAkiE,GAAA,oDAECriE,EAAAA,UAASC,OACNC,SAAU,oBACVC,SAAU,oPAUTC,EAAAA,0BACAA,EAAAA,WAfL,GCAAkiE,GAAA,oDAKChiE,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJE,SACI0hE,GACAC,IAEJ1hE,cACIyhE,GACAC,gDAfR,GCGME,IACFj4D,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA+3D,KAC9B73D,OAAO,GAGP83D,GAAuB,kDAuCW,sBAAqBA,WAEjC1hE,KAAK2hE,8BAEC,kBACE,iBACD,iBACY,uBACU,sBAEJ,IAAI9+D,EAAAA,0BAsBzB,gBAEP,yBACa,mCACK,0CAvBjC4+D,EAAA9iE,UAAA,wBACA,OAAOqB,KAAK+J,YAGhB,SAAU3E,GACNpF,KAAK+J,OAAS3E,EAGdpF,KAAKmK,YAAYhH,KAAKiC,GAGtBpF,KAAKoK,iBAAiBhF,GACtBpF,KAAKqK,qDAGT1G,OAAA2G,eAAIm3D,EAAA9iE,UAAA,eAAJ,WACI,OAAUqB,KAAKuK,IAAMvK,KAAK2hE,iBAAe,0CAS7CF,EAAA9iE,UAAA6L,OAAA,YACSxK,KAAKyK,UAAYzK,KAAK0K,YACvB1K,KAAKoF,OAASpF,KAAKoF,QAI3Bq8D,EAAA9iE,UAAAgM,WAAA,SAAWvF,GACPpF,KAAKoF,QAAUA,GAGnBq8D,EAAA9iE,UAAAiM,iBAAA,SAAiBC,GACb7K,KAAKoK,iBAAmBS,GAG5B42D,EAAA9iE,UAAAmM,kBAAA,SAAkBD,GACd7K,KAAKqK,kBAAoBQ,GAG7B42D,EAAA9iE,UAAAoM,iBAAA,SAAiBC,GACbhL,KAAKyK,SAAWO,uBA9FvB/L,EAAAA,UAASC,OACNC,SAAU,kBACVC,SAAU,q/BA+BViE,WAAYm+D,0EAMXniE,EAAAA,oBACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,MAAKH,MAAC,sCACNG,EAAAA,MAAKH,MAAC,wCAENqE,EAAAA,sBAEAlE,EAAAA,cC5DLuiE,GAAA,oDAKCriE,EAAAA,SAAQL,OACLM,SAAW0L,EAAAA,aACXvL,SAAW8hE,IACX7hE,cAAgB6hE,gDARpB,GCAAI,GAAA,WAcI,SAAAA,EAAoBl/D,GAAA3C,KAAA2C,YAAAA,eANV,IAAIE,EAAAA,oBAEdc,OAAA2G,eAAIu3D,EAAAljE,UAAA,aAAJ,WACI,OAAOqB,KAAK2C,YAAYnC,cAAcK,6CAM1CghE,EAAAljE,UAAAijC,wBACI5hC,KAAK8hE,QAAQ3+D,4BAhBpBC,EAAAA,UAASlE,OACNC,SAAU,uEAH0CmE,EAAAA,+CAOnDC,EAAAA,6BASAy5B,EAAAA,aAAY99B,MAAC,cAhBlB,GCGM6iE,GACK,GADLA,GAEM,iBAuBR,SAAAC,EACYr/D,EACYs/D,GADZjiE,KAAA2C,YAAAA,EACY3C,KAAAiiE,SAAAA,cAhBf,IAAIp/D,EAAAA,yBAGJ,IAAIA,EAAAA,oBAEbc,OAAA2G,eAAI03D,EAAArjE,UAAA,YAAJ,WAEI,OAAIqB,KAAKiiE,SACEjiE,KAAKiiE,SAAS78D,MAGlBpF,KAAK2C,YAAYnC,cAAc4E,uCAO1C48D,EAAArjE,UAAAwtB,MAAA,WAAA,IAAA1rB,EAAAT,KACIsC,WAAW,WACP7B,EAAKkC,YAAYnC,cAAc2rB,WAIvC61C,EAAArjE,UAAAujE,KAAA,WAAA,IAAAzhE,EAAAT,KACIsC,WAAW,WACP7B,EAAKkC,YAAYnC,cAAc0hE,UAIvCF,EAAArjE,UAAAqsD,MAAA,WAEQhrD,KAAKiiE,SACLjiE,KAAKiiE,SAASh+B,QAEdjkC,KAAK2C,YAAYnC,cAAc4E,MAAQ,IAK/C48D,EAAArjE,UAAAy/C,wBAAev/C,cACXyD,WAAW,WACHzD,EAAMkiC,UAAYghC,GAClBthE,EAAK0hE,OAAOh/D,KAAK1C,EAAK2hE,MACfvjE,EAAMkiC,UAAYghC,KACzBthE,EAAKkC,YAAYnC,cAAc0hE,OAC/BzhE,EAAKo3B,OAAO10B,+BApD3BC,EAAAA,UAASlE,OACNC,SAAU,sEATMmE,EAAAA,kBACX++D,EAAAA,QAAO9xD,aAAApH,KA6BPqH,EAAAA,8CAjBJjN,EAAAA,uBAGAA,EAAAA,+BAqCAy5B,EAAAA,aAAY99B,MAAC,WAAY,mBCrD9BojE,GAAA,WA+FI,SAAAA,EACY3/D,EACAm5C,EACkBgC,GAFlB99C,KAAA2C,YAAAA,EACA3C,KAAA87C,cAAAA,EACkB97C,KAAA89C,UAAAA,iBAvCA,sBAIpB,sBAQO,IAAIj7C,EAAAA,yBAGZ,IAAIA,EAAAA,6BAEgB,gBAYa,gCACe,2CArDrDy/D,EAAA3jE,UAAA,2BACA,OAAOqB,KAAKuiE,eAGhB,SAAan9D,GACTpF,KAAKuiE,UAAYn9D,EAEjBpF,KAAKsuB,eAAenrB,KAAKiC,GAErBA,EAEApF,KAAKqkD,MAAMl4B,SAGXnsB,KAAKqkD,MAAM2G,QAGXhrD,KAAKqkD,MAAM6d,+DAafI,EAAA3jE,UAAA,2BAAWyG,GACXpF,KAAKk1C,gBAAkBl1C,KAAK87C,cAActY,QAAQp+B,IAAU,qEAY5Dk9D,EAAA3jE,UAAA,oCACA,OACIyG,MAAOpF,KAAKquB,SAAW,WAAa,YACpCm0C,QACIC,aAAcziE,KAAKghD,OAAOpgD,MAAQ,wCAkB9C0hE,EAAA3jE,UAAAo0C,mBAAA,WAAA,IAAAtyC,EAAAT,KAEIA,KAAKqkD,MAAM8d,OAAOngE,UAAU,SAACogE,GAAiB,OAAA3hE,EAAKiiE,OAAOv/D,KAAKi/D,KAG/DpiE,KAAKqkD,MAAMxsB,OAAO71B,UAAU,WAAM,OAAAvB,EAAK4tB,UAAW,IAGlDruB,KAAKghD,OAAO8gB,QAAQ9/D,UAAU,WACtBvB,EAAK4tB,UAAY5tB,EAAK4jD,MAAM+d,KAC5B3hE,EAAKiiE,OAAOv/D,KAAK1C,EAAK4jD,MAAM+d,MAE5B3hE,EAAK4tB,UAAY5tB,EAAK4tB,WAK9BruB,KAAK2iE,qBAITL,EAAA3jE,UAAAikE,wBAAe/jE,GACW,aAAlBA,EAAMgkE,UACN7iE,KAAK0G,SAAW,WAChB1G,KAAK8iE,mBAAkB,KAK/BR,EAAA3jE,UAAAokE,uBAAclkE,GACY,cAAlBA,EAAMgkE,UACN7iE,KAAK0G,SAAW,WAChB1G,KAAK8iE,mBAAkB,KAIvBR,EAAA3jE,UAAAgkE,6BAEJ,IAAMhlD,EAASzc,iBAAiBlB,KAAK2C,YAAYnC,eAGjDR,KAAKgjE,aAAehjE,KAAK89C,UAAUz8C,cAAc,OACjDrB,KAAKgjE,aAAaplD,MAAMorC,QAAU,OAClChpD,KAAKgjE,aAAaplD,MAAMhd,MAAQZ,KAAKghD,OAAOpgD,MAAQ,KACpDZ,KAAKgjE,aAAaplD,MAAM9c,OAAS6c,EAAO7c,OACxCd,KAAKgjE,aAAaplD,MAAMqlD,WAAa,SAGrCjjE,KAAK2C,YAAYnC,cAAco0C,WAAWsuB,aAAaljE,KAAKgjE,aAAchjE,KAAK2C,YAAYnC,gBAGvF8hE,EAAA3jE,UAAAmkE,2BAAkBxiB,GACtBtgD,KAAKgjE,aAAaplD,MAAMorC,QAAW1I,EAAU,eAAiB,4BAjJrErhD,EAAAA,UAASC,OACNC,SAAU,oBACVC,SAAU,4BACVw+B,YACIjB,EAAAA,QAAQ,YACJ9wB,EAAAA,MACI,YACA+R,EAAAA,OACIhd,MAAO,sBAGP4hE,QAAUC,aAAc,UAGhC52D,EAAAA,MACI,WACA+R,EAAAA,OACIhd,MAAO,UAGfi9B,EAAAA,WAAW,0BAA2BI,EAAAA,QAAQ,mEA1BN36B,EAAAA,kBAC3CwwC,sCA+FAkL,EAAAA,OAAM9/C,MAAC+/C,EAAAA,iDAhEX/1C,EAAAA,YAAWhK,MAAC,oBAAgBiK,KAC5B9J,EAAAA,yBAsBAA,EAAAA,QAAK8J,KACLD,EAAAA,YAAWhK,MAAC,0BAGZG,EAAAA,QAAK8J,KACLD,EAAAA,YAAWhK,MAAC,qCAGZG,EAAAA,8BAKAkE,EAAAA,uBAGAA,EAAAA,kCAKA2F,EAAAA,YAAWhK,MAAC,+BAUZgK,EAAAA,YAAWhK,MAAC,2CACZgK,EAAAA,YAAWhK,MAAC,yCACZgI,EAAAA,aAAYhI,MAAC8iE,oBACb96D,EAAAA,aAAYhI,MAAC2iE,4BA8Bb7kC,EAAAA,aAAY99B,MAAC,mBAAoB,kCAQjC89B,EAAAA,aAAY99B,MAAC,kBAAmB,gBAjIrC,GCOMmf,IACFikD,GACAN,GACAH,2DAGHtiE,EAAAA,SAAQL,OACLM,SACIC,EAAAA,cAEJE,QAAS0e,GACTze,aAAcye,GACdhb,4DCnBJ8/D,GAAA,oDAEC//D,EAAAA,UAASlE,OACNC,SAAU,uEAHd,GCAAikE,GAAA,oDAEChgE,EAAAA,UAASlE,OACNC,SAAU,0EAHd,GCAAkkE,GAAA,oDAECjgE,EAAAA,UAASlE,OACNC,SAAU,oEAHd,iBCmDI,SAAAmkE,EAAoB3gE,EAAyB6+C,GAA7C,IAAA/gD,EAAAT,KAAoBA,KAAA2C,YAAAA,kBApBqBksB,EAAAA,WAAWvqB,4BAEnB,eAES,IAAIzB,EAAAA,wBAMd,IAAIlC,EAAAA,mCAChB,kBACC,kBACA,qCAEM,EAQvB6gD,EAAcjhD,kBAAkBoC,EAAYnC,eAAewB,UAAU,SAAAnD,GAAS,OAAA4B,EAAK8iE,QAAU1kE,EAAMiC,gBAGvGwiE,EAAA3kE,UAAAmE,SAAA,WAEI,IAAK9C,KAAKwjE,WACN,MAAM,IAAIpvD,MAAM,0EAIpBpU,KAAKyjE,kBAGLzjE,KAAK6sD,gBAGTyW,EAAA3kE,UAAAo0C,mBAAA,WAEI/yC,KAAK0jE,eAGTJ,EAAA3kE,UAAA8zB,YAAA,SAAYC,GACJA,EAAO,YAAeA,EAAO,WAAYlkB,eAAiBkkB,EAAO,WAAYo6B,gBAAkBp6B,EAAO,WAAYixC,kBAClH3jE,KAAKyjE,kBACLzjE,KAAKikC,UAIbq/B,EAAA3kE,UAAAyB,YAAA,WACIJ,KAAKK,cAAcC,eAGvBgjE,EAAA3kE,UAAA8kE,gBAAA,WAAA,IAAAhjE,EAAAT,KAGQA,KAAKK,eAAiBL,KAAKK,cAAcC,aACzCN,KAAKK,cAAcC,cAGvBN,KAAKK,cAAgBL,KAAKmtD,WAAWnrD,UAAU,SAAAmrD,UAC3CzkD,EAAAjI,EAAK+5B,MAAK90B,KAAI2J,MAAA3G,EAAA9C,EAAIunD,IAClB1sD,EAAKijE,cACLjjE,EAAKirD,WAAY,GAClB,KAAM,WACLjrD,EAAKmjE,iBAAkB,KAIPN,EAAA3kE,UAAA+kE,wBACpB1jE,KAAK6jE,MAAM3hE,KAAKlC,KAAK8jE,oBAEjB9jE,KAAKgsD,cAAiBhsD,KAAK0rD,WAAc1rD,KAAK4jE,kBACtB5jE,KAAK2C,YAAYnC,cAAc+tD,cAAgBvuD,KAAK2C,YAAYnC,cAAcwvB,UAAYhwB,KAAK2C,YAAYnC,cAAcguD,eAG1HxuD,KAAK2C,YAAYnC,cAAcguD,cAClDxuD,KAAK6sD,gBAKjByW,EAAA3kE,UAAAmlE,gBAAA,WAGS9jE,KAAKujE,UACNvjE,KAAKujE,QAAUvjE,KAAK2C,YAAYnC,cAAcO,cAIlD,IAAMivB,EAAYhwB,KAAK2C,YAAYnC,cAAcwvB,UAC3C+zC,EAAYz7D,KAAK4L,MAAM8b,EAAYhwB,KAAKwjE,YACxCQ,EAAU17D,KAAK+R,KAAKra,KAAKujE,QAAUvjE,KAAKwjE,YAAc,EAM5D,OAHAxjE,KAAKgwB,UAAYA,EAAaA,EAAYhwB,KAAKwjE,WAGxCxjE,KAAKw6B,KAAKpiB,MAAM2rD,EAAWA,EAAYC,IAGlDV,EAAA3kE,UAAAslE,eAAA,WACI,OAAOjkE,KAAKwjE,WAAaxjE,KAAKw6B,KAAK11B,QAGvCw+D,EAAA3kE,UAAAkuD,aAAA,WACI7sD,KAAK0rD,WAAY,EACjB1rD,KAAKi/B,QAAQ/8B,KAAKlC,KAAKgtD,YACvBhtD,KAAKgtD,cAGTsW,EAAA3kE,UAAAslC,MAAA,WAGIjkC,KAAKgwB,UAAY,EACjBhwB,KAAKw6B,QACLx6B,KAAKujE,QAAU9vD,UACfzT,KAAKgtD,WAAa,EAClBhtD,KAAK4jE,iBAAkB,EAGvB5jE,KAAK2C,YAAYnC,cAAcwvB,UAAY,EAG3ChwB,KAAK0jE,cAGL1jE,KAAK6sD,oCAvJZ5tD,EAAAA,UAASC,OACNC,SAAU,oBACVC,SAAU,y4BAXyDkE,EAAAA,kBAC9DzD,yCA8BJR,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,uBAEAkE,EAAAA,6BAEA2D,EAAAA,aAAYhI,MAACmkE,IAA8Bl8D,KAAMC,EAAAA,gDACjDF,EAAAA,aAAYhI,MAACikE,IAAiCh8D,KAAMC,EAAAA,0CACpDF,EAAAA,aAAYhI,MAACkkE,IAAoCj8D,KAAMC,EAAAA,mCA+DvD41B,EAAAA,aAAY99B,MAAC,kBC7FZmf,IACFilD,GACAH,GACAC,GACAC,2DAGH9jE,EAAAA,SAAQL,OACLM,SACIC,EAAAA,aACA+D,GAEJ7D,QAAS0e,GACTze,aAAcye,kDCtBlB6lD,GAAA,WAOE,SAAAA,EAAoBvhE,EAAiCzC,GAEnD,GAFkBF,KAAA2C,YAAAA,EAAiC3C,KAAAE,UAAAA,EAEK,aAApDyC,EAAYnC,cAAci5B,QAAQuM,cACpC,MAAM,IAAI5xB,MAAM,wEAIpB8vD,EAAAvlE,UAAA6N,gBAAA,WACExM,KAAKqb,UAIP6oD,EAAAvlE,UAAA0c,kBAGErb,KAAKE,UAAUoB,SAAStB,KAAK2C,YAAYnC,cAAe,YAAa,UACrER,KAAKE,UAAUoB,SAAStB,KAAK2C,YAAYnC,cAAe,SAAU,QAG1D,IAAA+tD,EAAAvuD,KAAA2C,YAAAnC,cAAA+tD,aACAnI,EAAAllD,iBAAAlB,KAAA2C,YAAAnC,eAAA4lD,UAGF+d,EAAWriD,MAAM7Y,WAAWm9C,IAAsCrJ,SAAxB9zC,WAAWm9C,GAGvD+d,EAAU5V,GACZvuD,KAAKE,UAAUoB,SAAStB,KAAK2C,YAAYnC,cAAe,YAAa,QACrER,KAAKE,UAAUoB,SAAStB,KAAK2C,YAAYnC,cAAe,SAAU2jE,EAAU,OAE5EnkE,KAAKE,UAAUoB,SAAStB,KAAK2C,YAAYnC,cAAe,SAAU+tD,EAAe,2BAnCtFnrD,EAAAA,UAASlE,OACRC,SAAU,4DAHuBmE,EAAAA,kBAA0Bya,EAAAA,6CAkB1Dif,EAAAA,aAAY99B,MAAC,cAlBhB,GCAAklE,GAAA,oDAIC7kE,EAAAA,SAAQL,OACLS,SAAUukE,IACVtkE,cAAeskE,gDANnB,GCAAG,GAAA,WAaE,SAAAA,EAAoB1hE,EAAiCzC,GAAjCF,KAAA2C,YAAAA,EAAiC3C,KAAAE,UAAAA,mBALP,IAAI2C,EAAAA,oBAOlDwhE,EAAA1lE,UAAAmE,SAAA,WAGE9C,KAAKE,UAAU0c,SAAS5c,KAAK2C,YAAYnC,cAAe,yBAGxDR,KAAKskE,WAAatkE,KAAK2C,YAAYnC,cAAcovB,cAAc,SAC/D5vB,KAAKukE,WAAavkE,KAAK2C,YAAYnC,cAAcovB,cAAc,SAG/D5vB,KAAKE,UAAU6qD,OAAO/qD,KAAKukE,WAAY,SAAUvkE,KAAKo9C,SAASzvC,KAAK3N,OAGpEA,KAAKwkE,YAGLxkE,KAAKykE,YAAYthE,QAOnBkhE,EAAA1lE,UAAA+lE,SAAA,WACE,OAAO1kE,KAAK2C,YAAYnC,eAMlB6jE,EAAA1lE,UAAAy+C,oBAGFp9C,KAAKukE,WAAWv0C,YAAehwB,KAAKukE,WAAWhW,aAAevuD,KAAKukE,WAAWxjE,cAChFf,KAAKykE,YAAYthE,QAQbkhE,EAAA1lE,UAAA6lE,qBAGN,IAAMG,EAAY3kE,KAAKukE,WAAW1jE,YAAcb,KAAKukE,WAAWK,YAGhE5kE,KAAKE,UAAUoB,SAAStB,KAAKskE,WAAY,gBAAiBK,EAAY,MAGtE3kE,KAAKE,UAAUoB,SAAStB,KAAKukE,WAAY,SAAsC,iBAArBvkE,KAAK6kE,YAA8B7kE,KAAK6kE,YAAW,KAAO7kE,KAAK6kE,kCAhE5HzhE,EAAAA,UAASlE,OACRC,SAAU,oEAHQmE,EAAAA,kBAAiDya,EAAAA,kDAOlE1e,EAAAA,2BACAkE,EAAAA,YARH,GCAAuhE,GAAA,oDAICvlE,EAAAA,SAAQL,OACLS,SAAU0kE,IACVzkE,cAAeykE,gDANnB,GCAAU,GAAA,WA0BI,SAAAA,EAAoBpiE,EAAiCzC,GAAjCF,KAAA2C,YAAAA,EAAiC3C,KAAAE,UAAAA,YAT3B,qBAGR,iBAGC,+BAKnB6kE,EAAApmE,UAAAmE,SAAA,WACI9C,KAAKglE,cAAct/D,KACf1F,KAAKE,UAAU6qD,OAAO/qD,KAAKowD,MAAO,QAASpwD,KAAKilE,WAAWt3D,KAAK3N,OAChEA,KAAKE,UAAU6qD,OAAO/qD,KAAKowD,MAAO,OAAQpwD,KAAKklE,UAAUv3D,KAAK3N,OAC9DA,KAAKE,UAAU6qD,OAAO/qD,KAAKowD,MAAO,QAASpwD,KAAKswD,YAAY3iD,KAAK3N,QAIrEA,KAAKmlE,OAASnlE,KAAKolE,WAGdplE,KAAK2C,YAAYnC,cAAc6kE,aAAa,QAAUrlE,KAAKowD,MAAMiV,aAAa,OAC/ErlE,KAAKE,UAAUqB,aAAavB,KAAK2C,YAAYnC,cAAe,MAAOR,KAAKowD,MAAMiV,aAAa,QAInGN,EAAApmE,UAAA8zB,YAAA,WACwB,UAAdzyB,KAAK0lB,MAAoB1lB,KAAKslE,WAChCtlE,KAAKmlE,OAASnlE,KAAKolE,YAI3BL,EAAApmE,UAAAyB,YAAA,WAEIJ,KAAKglE,cAAct4D,QAAQ,SAAC64D,GAAgB,OAAAA,OAGxCR,EAAApmE,UAAAymE,mBACJ,OAAIplE,KAAKoF,QAAUqO,YACNzT,KAAKowD,MAAMhrD,QAEfpF,KAAKoF,OAGV2/D,EAAApmE,UAAAsmE,sBACc,UAAdjlE,KAAK0lB,OACL1lB,KAAKslE,UAAW,EAChBtlE,KAAKmlE,QAAS,IAIdJ,EAAApmE,UAAAumE,qBACc,UAAdllE,KAAK0lB,OACL1lB,KAAKslE,UAAW,EAChBtlE,KAAKmlE,OAASnlE,KAAKolE,YAInBL,EAAApmE,UAAA2xD,uBACc,UAAdtwD,KAAK0lB,OACL1lB,KAAKmlE,OAASnlE,KAAKolE,gCA5E9BhiE,EAAAA,UAASlE,OACNC,SAAU,iBACVijB,MACI0f,QAAS,+DALGx+B,EAAAA,kBAA8Dya,EAAAA,4CAU7E1e,EAAAA,MAAKH,MAAC,+BAGNG,EAAAA,oBAGAA,EAAAA,sBAGA6J,EAAAA,YAAWhK,MAAC,oCAnBjB,GCAAsmE,GAAA,oDAICjmE,EAAAA,SAAQL,OACLM,WACAG,SAAUolE,IACVnlE,cAAemlE,IACf1hE,yDARJ,GCAAoiE,GAAA,mCAM+C,IAAI9kE,EAAAA,2BAE/C8kE,EAAA9mE,UAAA+mE,aAAA,SAAa7nD,GAGT,IAAI2E,EAAQxiB,KAAKwiB,MAAM/a,WAGvB+a,EAAM9c,KAAKmY,GAGX7d,KAAKwiB,MAAMtgB,KAAKsgB,IAGpBijD,EAAA9mE,UAAAgnE,eAAA,SAAe9nD,GAGX,IAAI2E,EAAQxiB,KAAKwiB,MAAM/a,WAGvB+a,EAAQA,EAAMxc,OAAO,SAAA4/D,GAAO,OAAAA,IAAQ/nD,IAGpC7d,KAAKwiB,MAAMtgB,KAAKsgB,wBA1BvBjgB,EAAAA,qDAHD,GCAAsjE,GAAA,WAQI,SAAAA,EAAoBC,GAAA9lE,KAAA8lE,mBAAAA,SAEpBD,EAAAlnE,UAAAmE,SAAA,WAGI9C,KAAK8lE,mBAAmBJ,aAAa1lE,KAAK+lE,mBAG9CF,EAAAlnE,UAAAyB,YAAA,WAEIJ,KAAK8lE,mBAAmBH,eAAe3lE,KAAK+lE,uCAfnD3iE,EAAAA,UAASlE,OAAGC,SAAU,kEAFdsmE,gDAKJpmE,EAAAA,WANL,GCAA2mE,GAAA,oDAICzmE,EAAAA,SAAQL,OACLM,WACAG,SAAUkmE,IACVjmE,cAAeimE,IACfxiE,WAAYoiE,gDARhB,GCAAQ,GAAA,oCAQuC,IAAItlE,EAAAA,iBAAyB,kBAGpC,iBACA,0BAG5BslE,EAAAtnE,UAAA23B,SAAA,SAASzhB,GACL7U,KAAKkmE,SAASxgE,KAAKmP,IAGvBoxD,EAAAtnE,UAAAg4B,WAAA,SAAW9hB,GACP7U,KAAKkmE,SAAWlmE,KAAKkmE,SAASlgE,OAAO,SAAAmgE,GAAQ,OAAAA,IAAStxD,KAG1DoxD,EAAAtnE,UAAAynE,aAAA,SAAa5vC,GACTx2B,KAAKo4B,WAAa5B,GAGtByvC,EAAAtnE,UAAA0nE,cAAA,SAAcl6C,GACVnsB,KAAKslE,SAAWn5C,EAChBnsB,KAAKsmE,oBAGTL,EAAAtnE,UAAA4nE,cAAA,SAAcnO,GACVp4D,KAAKwmE,SAAWpO,EAChBp4D,KAAKsmE,oBAGTL,EAAAtnE,UAAAuD,KAAA,WAGI,GAAIlC,KAAKymE,oBAEL,OADAzmE,KAAK0mE,mBAAmB,GACjB1mE,KAAKsmE,mBAIhB,GAAItmE,KAAK2mE,iBAAkB,CACvB,IAAIx9C,EAAQnpB,KAAK4mE,wBAA0B,EAC3C5mE,KAAK0mE,mBAAmBv9C,GACxBnpB,KAAKsmE,qBAIbL,EAAAtnE,UAAAyJ,SAAA,WAEI,GAAIpI,KAAK2mE,iBAAkB,CACvB,IAAIx9C,EAAQnpB,KAAK4mE,wBAA0B,EAE9B,GAATz9C,EACAnpB,KAAK0mE,mBAAmBv9C,GAExBnpB,KAAKo4B,WAAWjM,QAIxBnsB,KAAKsmE,oBAGTL,EAAAtnE,UAAA2nE,iBAAA,WACItmE,KAAK2jC,OAAOzhC,KAAKlC,KAAKslE,UAAYtlE,KAAKwmE,UAAYxmE,KAAK2mE,mBAGpDV,EAAAtnE,UAAA+nE,4BAAmBv9C,GACV,GAATA,GAAcA,EAAQnpB,KAAKkmE,SAASphE,QACpC9E,KAAKkmE,SAAS/8C,GAAOgD,SAIrB85C,EAAAtnE,UAAAioE,4CACJ,OAAO5mE,KAAKkmE,SAASx6D,UAAU,SAAAmJ,GAAU,OAAAA,IAAWpU,EAAKomE,sBAGrDZ,EAAAtnE,UAAA8nE,6BACJ,OAAOzmE,KAAKslE,UAGRW,EAAAtnE,UAAAgoE,0BACJ,QAAS3mE,KAAK6mE,oBAGVZ,EAAAtnE,UAAAkoE,4BACJ,OAAO7mE,KAAKkmE,SAAS//D,KAAK,SAAA0O,GAAU,OAAAA,EAAO2U,+BAtFlDjnB,EAAAA,qDALD,GCAAukE,GAAA,WAmBI,SAAAA,EAAoBnkE,EAAiCokE,GAArD,IAAAtmE,EAAAT,KAAoBA,KAAA2C,YAAAA,EAAiC3C,KAAA+mE,oBAAAA,gBALzB,eACV,EAMd/mE,KAAK+mE,oBAAoBX,aAAapmE,MAGtCA,KAAK09C,QAAU19C,KAAK+mE,oBAAoBpjC,OAAO3hC,UAAU,SAAA2hC,GAAU,OAAAljC,EAAKkjC,OAASA,WAGrFmjC,EAAAnoE,UAAAyB,YAAA,WACIJ,KAAK09C,QAAQp9C,eAGMwmE,EAAAnoE,UAAAwtB,iBACnBnsB,KAAK2C,YAAYnC,cAAc2rB,SAGZ26C,EAAAnoE,UAAAqzB,mBACnBhyB,KAAK+mE,oBAAoBV,eAAc,IAGrBS,EAAAnoE,UAAAszB,kBAClBjyB,KAAK+mE,oBAAoBV,eAAc,IAGfS,EAAAnoE,UAAAqoE,mBACxBhnE,KAAK+mE,oBAAoBR,eAAc,IAGfO,EAAAnoE,UAAAsoE,mBACxBjnE,KAAK+mE,oBAAoBR,eAAc,IAGPO,EAAAnoE,UAAAuD,gBAChClC,KAAK+mE,oBAAoB7kE,4BAhDhCkB,EAAAA,UAASlE,OACNC,SAAU,2BACVkE,WAAY4iE,IACZ7jD,MACI8kD,wCAAyC,SACzCC,aAAc,yDATF7jE,EAAAA,kBAEX2iE,wCAYJ5mE,EAAAA,qBAiBA29B,EAAAA,aAAY99B,MAAC,0BAIb89B,EAAAA,aAAY99B,MAAC,yBAIb89B,EAAAA,aAAY99B,MAAC,yBAIb89B,EAAAA,aAAY99B,MAAC,+BAIb89B,EAAAA,aAAY99B,MAAC,4BAIb89B,EAAAA,aAAY99B,MAAC,2BAnDlB,GCAAkoE,GAAA,WAoBI,SAAAA,EAAoBzkE,EAAiCokE,GAArD,IAAAtmE,EAAAT,KAAoBA,KAAA2C,YAAAA,EAAiC3C,KAAA+mE,oBAAAA,gBANzB,eACV,gBACC,EAOf/mE,KAAK+mE,oBAAoBzwC,SAASt2B,MAGlCA,KAAK09C,QAAU19C,KAAK+mE,oBAAoBpjC,OAAO3hC,UAAU,SAAA2hC,GAAU,OAAAljC,EAAKkjC,OAASA,WAGrFyjC,EAAAzoE,UAAAyB,YAAA,WACIJ,KAAK+mE,oBAAoBpwC,WAAW32B,MACpCA,KAAK09C,QAAQp9C,eAGjB8mE,EAAAzoE,UAAAwtB,MAAA,WACInsB,KAAK2C,YAAYnC,cAAc2rB,SAGZi7C,EAAAzoE,UAAAqzB,mBACnBhyB,KAAKwpB,SAAU,EACfxpB,KAAK+mE,oBAAoBT,oBAGPc,EAAAzoE,UAAAszB,kBAClBjyB,KAAKwpB,SAAU,EACfxpB,KAAK+mE,oBAAoBT,oBAGkBc,EAAAzoE,UAAAyJ,kBAASvJ,GACpDA,EAAM+/C,kBACN5+C,KAAK+mE,oBAAoB3+D,YAGmBg/D,EAAAzoE,UAAAuD,cAAKrD,GACjDA,EAAM+/C,kBACN5+C,KAAK+mE,oBAAoB7kE,4BAnDhCkB,EAAAA,UAASlE,OACNC,SAAU,kBACVijB,MACIilD,8BAA+B,SAC/BC,+BAAgC,UAChCH,aAAc,yDATF7jE,EAAAA,kBACX2iE,wCAaJ5mE,EAAAA,uBAwBA29B,EAAAA,aAAY99B,MAAC,yBAKb89B,EAAAA,aAAY99B,MAAC,0BAKb89B,EAAAA,aAAY99B,MAAC,qBAAsB,yBAKnC89B,EAAAA,aAAY99B,MAAC,sBAAuB,gBArDzC,GCIMmf,IACF+oD,GACAN,2DAGHvnE,EAAAA,SAAQL,OACLS,QAAS0e,GACTze,aAAcye,kDCXlBkpD,GAAA,WAWI,SAAAA,EAAoBnc,EAAwC15B,GAAxC1xB,KAAAorD,aAAAA,EAAwCprD,KAAA0xB,kBAAAA,SAE5D61C,EAAA5oE,UAAA6oE,UAAA,WACI,OAAOxnE,KAAKorD,cAGhBmc,EAAA5oE,UAAA8oE,UAAA,WACI,OAAOznE,KAAKgkB,SAGhBujD,EAAA5oE,UAAA+oE,SAAA,WACI1nE,KAAK2nE,cAAgB3nE,KAAK0xB,kBAAkBk5B,mBAAmB5qD,KAAKorD,eAGxEmc,EAAA5oE,UAAAipE,WAAA,WACI,IAAIz+C,EAAQnpB,KAAK0xB,kBAAkBxjB,QAAQlO,KAAK2nE,eAChD3nE,KAAK0xB,kBAAkB0yB,OAAOj7B,GAC9BnpB,KAAK2nE,cAAgB,0BA1B5BvkE,EAAAA,UAASlE,OACNC,SAAU,sEAH8BiI,EAAAA,mBAAakuB,EAAAA,qDAOpDj2B,EAAAA,MAAKH,MAAC,6BAPX,GCAA2oE,GAAA,WAeI,SAAAA,EAAoBllE,EAAyB6+C,EACjC9vB,GADZ,IAAAjxB,EAAAT,KAAoBA,KAAA2C,YAAAA,EACR3C,KAAA0xB,kBAAAA,EAGR8vB,EAAcjhD,kBAAkBoC,EAAYnC,eAAewB,UAAU,SAAAnD,GACjE4B,EAAKsH,OAASlJ,EAAM+B,MAGpBH,EAAKqnE,8BAIbD,EAAAlpE,UAAA8zB,YAAA,SAAYC,GAGJA,EAAO,MAAOlkB,eAAiBkkB,EAAO,MAAOo6B,eAC7C9sD,KAAK8nE,sBAIbD,EAAAlpE,UAAAopE,gBAAA,WAAA,IAAAtnE,EAAAT,KAGI,OAAKA,KAAKgoE,SAKHhoE,KAAKgoE,SAAShiE,OAAO,SAAA+U,GAAU,OAAAta,EAAKm2B,QAAU7b,EAAO0sD,YAAY7wC,QAAOzwB,KAAK,SAAA4U,GAEhF,IAAI1H,EAAW0H,EAAO0sD,YAAYp0D,UAAY,EAC1C40D,EAAWltD,EAAO0sD,YAAYQ,UAAYlrB,SAE9C,OAAOt8C,EAAKsH,QAAUsL,GAAY5S,EAAKsH,OAASkgE,IATzC,MAafJ,EAAAlpE,UAAAmpE,mBAAA,WAGI,IAAI/sD,EAAS/a,KAAK+nE,kBAGd/nE,KAAKkoE,gBAAkBntD,IAKvB/a,KAAKkoE,eACLloE,KAAKkoE,cAAcN,aAIvB5nE,KAAKkoE,cAAgBntD,EAGjB/a,KAAKkoE,eACLloE,KAAKkoE,cAAcR,aAI3BG,EAAAlpE,UAAAo0C,mBAAA,WAGI/yC,KAAK+H,OAAS/H,KAAK2C,YAAYnC,cAAcK,YAG7CsnE,sBAAsBnoE,KAAK8nE,mBAAmBn6D,KAAK3N,4BA9E1DoD,EAAAA,UAASlE,OACNC,SAAU,kEALMmE,EAAAA,kBACXzD,SAD4Ey1B,EAAAA,mDAShFj2B,EAAAA,wBACA0N,EAAAA,gBAAe7N,MAACqoE,SAVrB,GCKMlpD,IACFwpD,GACAN,2DAGHhoE,EAAAA,SAAQL,OACLM,SACIgE,GAEJ7D,QAAS0e,GACTze,aAAcye,GACdhb,4DChBJ+kE,GAAA,WA+BE,SAAAA,EAAoBzlE,GAAA3C,KAAA2C,YAAAA,iBAjBS,0BAGE,IAAIE,EAAAA,+CAGM,IAAIA,EAAAA,6CAGN,IAAIA,EAAAA,0BAGxBwlE,oBAAoB,EAAOC,kBAAkB,mBAG3C,IAAI/7D,EAAAA,eAKzB67D,EAAAzpE,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KACMA,KAAK28B,SACP38B,KAAK28B,QAAQ55B,KAAKyK,EAAAA,UAAUxN,KAAKyN,aAAazL,UAAU,WAAM,OAAAvB,EAAK8nE,sBAKvEH,EAAAzpE,UAAA6N,gBAAA,WAAA,IAAA/L,EAAAT,KACEmoE,sBAAsB,WAAM,OAAA1nE,EAAK8nE,sBAInCH,EAAAzpE,UAAAyB,YAAA,WACEJ,KAAKyN,WAAWvL,OAChBlC,KAAKyN,WAAWqB,YAIlBs5D,EAAAzpE,UAAA4pE,iBAAA,WAEE,IAAA7/D,EAAA1I,KAAA2C,YAAAnC,cAAQK,EAAA6H,EAAA7H,YAAaE,EAAA2H,EAAA3H,aAAcmH,EAAAQ,EAAAR,YAAaqmD,EAAA7lD,EAAA6lD,aAC1C8Z,EAAsBngE,EAAcrH,EAAeb,KAAKwoE,UACxDF,EAAoB/Z,EAAextD,EAAgBf,KAAKwoE,UAE1DH,IAAuBroE,KAAKyoE,OAAOJ,oBACrCroE,KAAK0oE,6BAA6BvlE,KAAKklE,GAGrCC,IAAqBtoE,KAAKyoE,OAAOH,kBACnCtoE,KAAK2oE,2BAA2BxlE,KAAKmlE,GAGnCD,IAAuBroE,KAAKyoE,OAAOJ,oBAAsBC,IAAqBtoE,KAAKyoE,OAAOH,kBAC5FtoE,KAAK4oE,mBAAmBzlE,KAAMklE,GAAsBC,GAItDtoE,KAAKyoE,QAAWJ,mBAAkBA,EAAEC,iBAAgBA,wBAnEvDllE,EAAAA,UAASlE,OACRC,SAAU,qFACVkN,SAAU,oEANuB/I,EAAAA,+CAWhCjE,EAAAA,yBAGAA,EAAAA,kCAGAkE,EAAAA,6CAGAA,EAAAA,2CAGAA,EAAAA,YAvBH,GCAAoyB,GAAA,oDAGCp2B,EAAAA,SAAQL,OACPS,SAAUyoE,IACVxoE,cAAewoE,gDALjB,iICEAS,GAAA,WAEE,SAAAA,EAAsBC,GAAA9oE,KAAA8oE,iBAAAA,SAEtBD,EAAAlqE,UAAAoqE,oBAAA,SAAoBD,GAClB9oE,KAAK8oE,iBAAmBA,GAG1BD,EAAAlqE,UAAAqqE,UAAA,SAAUnqE,EAAmB27B,KAE7BquC,EAAAlqE,UAAAwhC,MAAA,SAAMthC,EAAmB27B,KAEzBquC,EAAAlqE,UAAAsqE,QAAA,SAAQpqE,EAAsB27B,KAK9BquC,EAAAlqE,UAAA6H,OAAA,eAAO,MAAAg0B,KAAArrB,EAAA,EAAAA,EAAAtK,UAAAC,OAAAqK,IAAAqrB,EAAArrB,GAAAtK,UAAAsK,IACLzG,EAAA1I,KAAK8oE,kBAAiBtiE,OAAM6I,MAAA3G,EAAA9C,EAAI40B,KAMlCquC,EAAAlqE,UAAA6L,OAAA,eAAO,MAAAgwB,KAAArrB,EAAA,EAAAA,EAAAtK,UAAAC,OAAAqK,IAAAqrB,EAAArrB,GAAAtK,UAAAsK,IACLzG,EAAA1I,KAAK8oE,kBAAiBt+D,OAAM6E,MAAA3G,EAAA9C,EAAI40B,KAMlCquC,EAAAlqE,UAAAohD,SAAA,eAAS,MAAAvlB,KAAArrB,EAAA,EAAAA,EAAAtK,UAAAC,OAAAqK,IAAAqrB,EAAArrB,GAAAtK,UAAAsK,IACPzG,EAAA1I,KAAK8oE,kBAAiB/oB,SAAQ1wC,MAAA3G,EAAA9C,EAAI40B,KAMpCquC,EAAAlqE,UAAAuqE,UAAA,WACElpE,KAAKwG,OAAM6I,MAAXrP,KAAI4F,EAAW5F,KAAK8oE,iBAAiBK,WAMvCN,EAAAlqE,UAAAkvB,YAAA,WACE7tB,KAAK+/C,SAAQ1wC,MAAbrP,KAAI4F,EAAa5F,KAAK8oE,iBAAiBK,WAGzCN,EAAAlqE,UAAAkQ,QAAA,eAjDF,GCCAu6D,GAAA,SAAA14D,mFAGoCgS,MAAO,KAAMC,IAAK,eAHZhS,EAAAA,EAAAA,GASxCy4D,EAAAzqE,UAAAqqE,UAAA,SAAUnqE,GACRA,EAAM4d,kBAMR2sD,EAAAzqE,UAAAwhC,MAAA,SAAMthC,EAAmB27B,GAGf,IAAA6uC,EAAAxqE,EAAAwqE,QAGR,OAHiBxqE,EAAAyqE,SAIRtpE,KAAKupE,eAAe/uC,GAIzB6uC,EACKrpE,KAAKwK,OAAOgwB,QAIrBx6B,KAAKwpE,aAAahvC,IAUpB4uC,EAAAzqE,UAAAsqE,QAAA,SAAQpqE,EAAsB27B,GAE5B,OAAQ37B,EAAMkiC,SAEZ,KAAK0oC,GAAQC,QACb,KAAKD,GAAQE,UACX9qE,EAAM4d,iBACNzc,KAAK4pE,SAAS/qE,EAAO27B,GACrB,MAEF,KAAKivC,GAAQI,SACXhrE,EAAM4d,iBACNzc,KAAK8oE,iBAAiB70C,SAASzpB,OAAOgwB,GAAM,KAUlD4uC,EAAAzqE,UAAA6L,OAAA,SAAOgwB,EAAWktC,QAAA,IAAAA,IAAAA,GAAA,GAChBh3D,EAAA/R,UAAM6L,OAAMxL,KAAAgB,KAACw6B,GAGbx6B,KAAK8oE,iBAAiBnT,WAAWn7B,GAAQx6B,KAAK8pE,kBAAkBtvC,GAAQx6B,KAAK+pE,iBAGzErC,GACF1nE,KAAK8oE,iBAAiBpB,SAASltC,IAQ3B4uC,EAAAzqE,UAAA6qE,sBAAahvC,GAGnBx6B,KAAK6tB,cAGL7tB,KAAKwG,OAAOg0B,GAGZx6B,KAAK8pE,kBAAkBtvC,IASf4uC,EAAAzqE,UAAA4qE,eAAV,SAAyB/uC,GAGvB,IAAKx6B,KAAKgqE,WAAWtnD,MAMnB,OAHA1iB,KAAKwG,OAAOg0B,GAGLx6B,KAAK8pE,kBAAkBtvC,GAI5Bx6B,KAAKgqE,WAAWtnD,OAAS1iB,KAAKgqE,WAAWrnD,KAC3C3iB,KAAK+/C,SAAQ1wC,MAAbrP,KAAI4F,EAAa5F,KAAKiqE,qBAIxBjqE,KAAKkqE,gBAAgB1vC,GAGrBx6B,KAAKwG,OAAM6I,MAAXrP,KAAI4F,EAAW5F,KAAKiqE,sBAOdb,EAAAzqE,UAAAmrE,2BAAkBtvC,GACxBx6B,KAAKgqE,WAAWtnD,MAAQ8X,EACxBx6B,KAAKgqE,WAAWrnD,IAAM,KAGtB3iB,KAAK8oE,iBAAiBpB,SAASltC,IAMzB4uC,EAAAzqE,UAAAurE,yBAAgB1vC,GACtBx6B,KAAKgqE,WAAWrnD,IAAM6X,EAGtBx6B,KAAK8oE,iBAAiBpB,SAASltC,IAMvB4uC,EAAAzqE,UAAAorE,eAAV,SAAyBnC,QAAA,IAAAA,IAAAA,GAAA,GAGvB5nE,KAAKgqE,YAAetnD,MAAO,KAAMC,IAAK,MAGlCilD,GACF5nE,KAAK8oE,iBAAiBlB,cASlBwB,EAAAzqE,UAAAsrE,4BAGE,IAAAd,EAAAnpE,KAAA8oE,iBAAAK,QAGFgB,EAAWhB,EAAQj7D,QAAQlO,KAAKgqE,WAAWtnD,OAC3C0nD,EAASjB,EAAQj7D,QAAQlO,KAAKgqE,WAAWrnD,KAG/C,OAAOwmD,EAAQ/wD,MAAM9P,KAAKC,IAAI4hE,EAAUC,GAAS9hE,KAAKE,IAAI2hE,EAAUC,GAAU,IAMxEhB,EAAAzqE,UAAAirE,kBAAS/qE,EAAsB27B,GAG7B,IAAA6uC,EAAAxqE,EAAAwqE,QAASC,EAAAzqE,EAAAyqE,SAGZD,GAAYC,IACftpE,KAAK6tB,cACL7tB,KAAK+pE,gBAAe,IAItB,IAAMpyC,EAAU33B,KAAK8oE,iBAAiBuB,gBAAgBxrE,EAAMkiC,UAAY0oC,GAAQC,SAG5EJ,GAAY3xC,IAGT33B,KAAKgqE,WAAWtnD,OACnB1iB,KAAKupE,eAAe/uC,GAGtBx6B,KAAKupE,eAAe5xC,OAzM1B,CAA0CkxC,ICA1CyB,GAAA,SAAA55D,sEAA6CC,EAAAA,EAAAA,GACzC25D,EAAA3rE,UAAAsqE,QAAA,SAAQpqE,EAAsB27B,GAC1B,OAAQ37B,EAAMkiC,SACV,KAAK0oC,GAAQC,QACb,KAAKD,GAAQE,UACT9qE,EAAM4d,iBACNzc,KAAKuqE,gBAAgB1rE,EAAO27B,GAC5B,MAEJ,KAAKivC,GAAQI,SACThrE,EAAM4d,iBACNzc,KAAK8oE,iBAAiB70C,SAASzpB,OAAOgwB,KAQ1C8vC,EAAA3rE,UAAA4rE,yBAAgB1rE,EAAsB27B,GAElC,IAAA6uC,EAAAxqE,EAAAwqE,QAASC,EAAAzqE,EAAAyqE,SAQjB,GALKD,GAAYC,IACbtpE,KAAK6tB,cACL7tB,KAAK+pE,gBAAe,IAGpBV,EACArpE,KAAK8oE,iBAAiBuB,gBAAgBxrE,EAAMkiC,UAAY0oC,GAAQC,aAC7D,CACH,IAAM/xC,EAAU33B,KAAK8oE,iBAAiB0B,WAAW3rE,EAAMkiC,UAAY0oC,GAAQC,SAC3E1pE,KAAKupE,eAAe5xC,GAAoB6C,OAjCpD,CAA6C4uC,ICA7CqB,GAAA,SAAA/5D,sEAA6CC,EAAAA,EAAAA,GAK3C85D,EAAA9rE,UAAAwhC,MAAA,SAAMthC,EAAmB27B,GACvBx6B,KAAKwK,OAAOgwB,IAOdiwC,EAAA9rE,UAAAsqE,QAAA,SAAQpqE,EAAsB27B,GAE5B,OAAQ37B,EAAMkiC,SAEZ,KAAK0oC,GAAQC,QAEX,OADA7qE,EAAM4d,iBACCzc,KAAK8oE,iBAAiBuB,iBAAgB,GAE/C,KAAKZ,GAAQE,UAEX,OADA9qE,EAAM4d,iBACCzc,KAAK8oE,iBAAiBuB,iBAAgB,GAE/C,KAAKZ,GAAQI,SAEX,OADAhrE,EAAM4d,iBACCzc,KAAKwK,OAAOgwB,KAOzBiwC,EAAA9rE,UAAA6L,OAAA,SAAOgwB,GACL9pB,EAAA/R,UAAM6L,OAAMxL,KAAAgB,KAACw6B,GACbx6B,KAAK8oE,iBAAiBpB,SAASltC,MApCnC,CAA6CquC,ICH7C6B,GAAA,WAyBE,SAAAA,oBAbqB,IAAIC,kCAIN,qBACK,wBACG,gBACG,IAAIF,GAAwBzqE,mBAEhD,IAAIW,EAAAA,gBAAqB,wBACpB,IAAIA,EAAAA,gBAAqB,sBAC3B,IAAIA,EAAAA,oBAGfX,KAAK4qE,mBAAqB5qE,KAAKi0B,gBAGjCy2C,EAAA/rE,UAAAyB,YAAA,WACMJ,KAAK4qE,oBACP5qE,KAAK4qE,mBAAmB/7D,WAQ5B67D,EAAA/rE,UAAA6H,OAAA,eAAA,IAAA/F,EAAAT,KAAO6qE,KAAA17D,EAAA,EAAAA,EAAAtK,UAAAC,OAAAqK,IAAA07D,EAAA17D,GAAAtK,UAAAsK,GAGL07D,EAAWn+D,QAAQ,SAAAo+D,GAAa,OAAArqE,EAAKupE,WAAWloE,IAAIgpE,KAGpD9qE,KAAK+qE,uBAMPL,EAAA/rE,UAAAohD,SAAA,eAAA,IAAAt/C,EAAAT,KAAS6qE,KAAA17D,EAAA,EAAAA,EAAAtK,UAAAC,OAAAqK,IAAA07D,EAAA17D,GAAAtK,UAAAsK,GAEP07D,EAAWn+D,QAAQ,SAAAo+D,GAAa,OAAArqE,EAAKupE,WAAWgB,UAAOF,KAGvD9qE,KAAK+qE,uBAMPL,EAAA/rE,UAAA6L,OAAA,eAAA,IAAA/J,EAAAT,KAAO6qE,KAAA17D,EAAA,EAAAA,EAAAtK,UAAAC,OAAAqK,IAAA07D,EAAA17D,GAAAtK,UAAAsK,GACL07D,EAAWn+D,QAAQ,SAAAo+D,GAAa,OAAArqE,EAAKk1D,WAAWmV,GAAarqE,EAAKs/C,SAAS+qB,GAAarqE,EAAK+F,OAAOskE,MAMtGJ,EAAA/rE,UAAAg3D,WAAA,SAAWn7B,GACT,OAAOx6B,KAAKgqE,WAAWiB,IAAIzwC,IAO7BkwC,EAAA/rE,UAAAkmB,UAAA,SAAU2V,GAAV,IAAA/5B,EAAAT,KACE,OAAOA,KAAKkrE,WAAWnoE,KAAK+D,EAAAA,IAAI,WAAM,OAAArG,EAAKk1D,WAAWn7B,KAAQjtB,EAAAA,yBAShEm9D,EAAA/rE,UAAAwsE,QAAA,SAAQzlD,GAQN,GANI1lB,KAAK4qE,qBAEP5qE,KAAK4qE,mBAAmB/7D,UACxB7O,KAAK4qE,mBAAqB,MAGxBllD,aAAgBmjD,GAGlB7oE,KAAKi0B,SAAWvO,EAChB1lB,KAAKi0B,SAAS80C,oBAAoB/oE,WAIlC,OAAQ0lB,EAAKsgB,cAAcolC,QAEzB,IAAK,SACHprE,KAAKi0B,SAAWj0B,KAAK4qE,mBAAqB,IAAIH,GAAwBzqE,MACtE,MAEF,IAAK,MACHA,KAAKi0B,SAAWj0B,KAAK4qE,mBAAqB,IAAIxB,GAAqBppE,MACnE,MAEF,IAAK,UACHA,KAAKi0B,SAAWj0B,KAAK4qE,mBAAqB,IAAIN,GAAwBtqE,MACtE,MAEF,QACE,MAAM,IAAIoU,MAAM,uBAAuBsR,EAAI,sEAQnDglD,EAAA/rE,UAAA+oE,SAAA,SAASltC,GACPx6B,KAAK09C,QAAQx7C,KAAKs4B,IAMpBkwC,EAAA/rE,UAAAipE,WAAA,WACE5nE,KAAK09C,QAAQx7C,KAAK,OAOpBwoE,EAAA/rE,UAAA6rE,WAAA,SAAWpiE,QAAA,IAAAA,IAAAA,GAAA,GAGT,IAAMk3B,EAAUt/B,KAAK09C,QAAQj2C,WAG7B,GAAK63B,EAAL,CAKA,IAAM7zB,EAAMzL,KAAKmpE,QAAQj7D,QAAQoxB,GAGjC,OAFet/B,KAAKmpE,QAAQ/gE,EAAWqD,EAAM,EAAIA,EAAM,KAWzDi/D,EAAA/rE,UAAA0rE,gBAAA,SAAgBjiE,QAAA,IAAAA,IAAAA,GAAA,GAEd,IAAM4G,EAAShP,KAAKwqE,WAAWpiE,GAO/B,OAJI4G,GACFhP,KAAK0nE,SAAS14D,GAGTA,GAGT07D,EAAA/rE,UAAA0sE,YAAA,SAAY5gE,GAEVzK,KAAKsgD,SAAW71C,EAGhBzK,KAAK09C,QAAQx7C,KAAK,MAClBlC,KAAKgqE,WAAWhf,QAGhBhrD,KAAK+qE,uBAGCL,EAAA/rE,UAAAosE,+BACN/qE,KAAKkrE,WAAWhpE,KAAK4B,MAAMirB,KAAK/uB,KAAKgqE,kCApLxCznE,EAAAA,qDATD,GCAA+oE,GAAA,WAqCE,SAAAA,EAAoBC,EAA6C5oE,GAA7C3C,KAAAurE,kBAAAA,EAA6CvrE,KAAA2C,YAAAA,gBAfrC,yBAED,IAAIE,EAAAA,0BAE8B,kBAOhC,yBACO,sBACX,IAAI5C,EAAAA,0CArBzBqrE,EAAA3sE,UAAA,gBAIJ,WACE,OAAOqB,KAAKwrE,wBALD79C,GACXA,EAAW3tB,KAAKwG,SAAWxG,KAAK+/C,kEAc9BurB,EAAA3sE,UAAA,+BACF,OAA0B,OAAlBqB,KAAKuuB,SAAqBvuB,KAAKuuB,SAAWvuB,KAAKyrE,kDASzDH,EAAA3sE,UAAAmE,SAAA,WAAA,IAAArC,EAAAT,KAGE,IAAKA,KAAK0rE,gBACR,MAAM,IAAIt3D,MAAM,oEAIlBpU,KAAKq4B,eAAev2B,IAAI9B,KAAKurE,kBAAkB1mD,UAAU7kB,KAAK0rE,iBAAiB1pE,UAAU,SAAA2rB,GAGvFltB,EAAK+qE,UAAY79C,EAGjBltB,EAAKqtB,eAAe3qB,KAAKwqB,MAI3B3tB,KAAKq4B,eAAev2B,IAAI9B,KAAKurE,kBAAkB7tB,QAAQ36C,KAAK+D,EAAAA,IAAI,SAAA68B,GAAU,OAAAA,IAAWljC,EAAKirE,mBAAkB1pE,UAAU,SAAA2hC,IAMrG,KAHfljC,EAAKkjC,OAASA,KAIZljC,EAAK8qE,kBAAkBI,aAAazpE,KAAKzB,EAAKirE,iBAC9CjrE,EAAKkC,YAAYnC,cAAc2rB,YAMnCnsB,KAAKq4B,eAAev2B,IAAI9B,KAAKurE,kBAAkBI,aAAa3pE,UAAU,SAAA4pE,GACpEnrE,EAAKgrE,iBAAoBG,IAAgBnrE,EAAKirE,gBAAmB,GAAK,MAI1EJ,EAAA3sE,UAAAyB,YAAA,WACEJ,KAAKq4B,eAAe/3B,eAGagrE,EAAA3sE,UAAAwhC,eAAMthC,GACnCmB,KAAKurE,kBAAkBjrB,SAAWtgD,KAAKurE,kBAAkBM,cAC3D7rE,KAAKurE,kBAAkBt3C,SAASkM,MAAMthC,EAAOmB,KAAK0rE,kBAIfJ,EAAA3sE,UAAAqqE,mBAAUnqE,GAC3CmB,KAAKurE,kBAAkBjrB,SAAWtgD,KAAKurE,kBAAkBM,cAC3D7rE,KAAKurE,kBAAkBt3C,SAAS+0C,UAAUnqE,EAAOmB,KAAK0rE,kBAIrBJ,EAAA3sE,UAAAsqE,iBAAQpqE,GACvCmB,KAAKurE,kBAAkBjrB,SAAWtgD,KAAKurE,kBAAkBO,iBAC3D9rE,KAAKurE,kBAAkBt3C,SAASg1C,QAAQpqE,EAAOmB,KAAK0rE,kBAIjCJ,EAAA3sE,UAAAwtB,iBAEjBnsB,KAAKurE,kBAAkB7tB,QAAQj2C,aAAezH,KAAK0rE,iBACrD1rE,KAAKurE,kBAAkB7D,SAAS1nE,KAAK0rE,kBAOzCJ,EAAA3sE,UAAA6H,OAAA,WACMxG,KAAKurE,kBAAkBjrB,SACzBtgD,KAAKurE,kBAAkBt3C,SAASztB,OAAOxG,KAAK0rE,kBAOhDJ,EAAA3sE,UAAAohD,SAAA,WACM//C,KAAKurE,kBAAkBjrB,SACzBtgD,KAAKurE,kBAAkBt3C,SAAS8rB,SAAS//C,KAAK0rE,sCAlHnDtoE,EAAAA,UAASlE,OACRC,SAAU,oBACVkN,SAAU,iEAJHq+D,UAHWpnE,EAAAA,uDAWjBjE,EAAAA,wBAEAA,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,iDASrBG,EAAAA,8BAEAkE,EAAAA,uBAEA2F,EAAAA,YAAWhK,MAAC,oDAEZgK,EAAAA,YAAWhK,MAAC,gCAoDZ89B,EAAAA,aAAY99B,MAAC,SAAU,8BAMvB89B,EAAAA,aAAY99B,MAAC,aAAc,4BAM3B89B,EAAAA,aAAY99B,MAAC,WAAY,0BAMzB89B,EAAAA,aAAY99B,MAAC,cAlGhB,iBC0CE,SAAA6sE,EAAoBR,EAA6CrkB,GAAjE,IAAAzmD,EAAAT,KAAoBA,KAAAurE,kBAAAA,EAA6CvrE,KAAAknD,OAAAA,gBARP,4BAE5B,IAAIrkD,EAAAA,iCAIT,IAAI5C,EAAAA,aAG3BD,KAAKq4B,eAAev2B,IAAIypE,EAAkBL,WAAWlpE,UAAU,SAAAwgB,GAAS,OAAA/hB,EAAKurE,kBAAkB7oE,KAAKqf,mCA7BzFupD,EAAAptE,UAAA,4BAAY6jB,UACvB9Z,EAAA1I,KAAKurE,mBAAkB/kE,OAAM6I,MAAA3G,EAAA9C,EAAI4c,2DAGtBupD,EAAAptE,UAAA,yBAAS8L,GACpBzK,KAAKurE,kBAAkBF,YAAY5gE,0DAGxBshE,EAAAptE,UAAA,qBAAK+mB,GAChB1lB,KAAKurE,kBAAkBJ,QAAQzlD,0DAGpBqmD,EAAAptE,UAAA,+BAAe2hD,GAC1BtgD,KAAKurE,kBAAkBM,aAAevrB,yDAG3ByrB,EAAAptE,UAAA,kCAAkB2hD,GAC7BtgD,KAAKurE,kBAAkBO,gBAAkBxrB,mCAe3CyrB,EAAAptE,UAAAo0C,mBAAA,WAAA,IAAAtyC,EAAAT,KAEEA,KAAKqb,SAGLrb,KAAKq4B,eAAev2B,IAAI9B,KAAKwiB,MAAMkQ,QAAQ1wB,UAAU,WAAM,OAAAvB,EAAK4a,YAGhErb,KAAKknD,OAAO1zB,iBAGdu4C,EAAAptE,UAAAyB,YAAA,WACEJ,KAAKq4B,eAAe/3B,eAMtByrE,EAAAptE,UAAA0c,OAAA,WAEErb,KAAKurE,kBAAkBpC,QAAUnpE,KAAKwiB,MAAM1b,IAAI,SAAA+W,GAAQ,OAAAA,EAAK6tD,kBAGN,OAAnD1rE,KAAKurE,kBAAkBI,aAAalkE,YAA+D,EAAxCzH,KAAKurE,kBAAkBpC,QAAQrkE,QAC5F9E,KAAKurE,kBAAkBI,aAAazpE,KAAKlC,KAAKurE,kBAAkBpC,QAAQ,KAO5E4C,EAAAptE,UAAAuqE,UAAA,WACMlpE,KAAKurE,kBAAkBjrB,SACzBtgD,KAAKurE,kBAAkBt3C,SAASi1C,aAOpC6C,EAAAptE,UAAAkvB,YAAA,WACM7tB,KAAKurE,kBAAkBjrB,SACzBtgD,KAAKurE,kBAAkBt3C,SAASpG,mCAjFrCzqB,EAAAA,UAASlE,OACRC,SAAU,gBACVkN,SAAU,eACVhJ,WAAaqnE,iDAPSA,UAHGn5C,EAAAA,0DAcxBlyB,EAAAA,wBAIAA,EAAAA,oBAIAA,EAAAA,8BAIAA,EAAAA,iCAIAA,EAAAA,wBAIAA,EAAAA,QAAK8J,KAAID,EAAAA,YAAWhK,MAAC,4CAErBqE,EAAAA,sBAEAwJ,EAAAA,gBAAe7N,MAACosE,YCtCnBW,GAAA,oDAKC1sE,EAAAA,SAAQL,OACPM,SACEC,EAAAA,cAEFG,cAAemsE,GAAoBT,IACnC3rE,SAAUosE,GAAoBT,gDAVhC,kBCgBI,SAAAY,EAAYjuD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,eAAgBie,EAAYkuD,IAASnsE,4BAHD,IAAI6C,EAAAA,sBARZ8N,EAAAA,EAAAA,uBAHzCvN,EAAAA,UAASlE,OACNC,SAAU,6DAJMmE,EAAAA,kBAAY8oE,EAAAA,8CAQ3B/sE,EAAAA,4BACAA,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,2BACAA,EAAAA,6BAEAkE,EAAAA,aARqC8oE,EAAAA,iCCYtC,SAAAC,EAAYruD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,cAAeie,EAAYkuD,IAASnsE,oBAHN,IAAI6C,EAAAA,sBAVH8N,EAAAA,EAAAA,uBAH5CvN,EAAAA,UAASlE,OACNC,SAAU,4DAJMmE,EAAAA,kBAAY8oE,EAAAA,4CAQ3B/sE,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,uBACAA,EAAAA,qBAEAkE,EAAAA,aAVwC8oE,EAAAA,iCCQzC,SAAAE,EAAYtuD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,uBAAwBie,EAAYkuD,IAASnsE,gCATL2Q,EAAAA,EAAAA,uBAHrDvN,EAAAA,UAASlE,OACNC,SAAU,sEAJMmE,EAAAA,kBAAY8oE,EAAAA,2CAQ3B/sE,EAAAA,uBACAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,mCACAA,EAAAA,YANiDgtE,EAAAA,iCCSlD,SAAAG,EAAYvuD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,YAAaie,EAAYkuD,IAASnsE,0BAJpB,IAAI6C,EAAAA,2BACJ,IAAIA,EAAAA,sBAPM8N,EAAAA,EAAAA,uBAHrCvN,EAAAA,UAASlE,OACNC,SAAU,oDAJMmE,EAAAA,kBAAY8oE,EAAAA,6CAQ3B/sE,EAAAA,uBACAA,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,2BACAkE,EAAAA,4BACAA,EAAAA,aAPiC8oE,EAAAA,iCCYlC,SAAAI,EAAYxuD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,OAAQie,EAAYkuD,IAASnsE,8CAbL2Q,EAAAA,EAAAA,uBAHrCvN,EAAAA,UAASlE,OACNC,SAAU,oDAJMmE,EAAAA,kBAAY8oE,EAAAA,4CAQ3B/sE,EAAAA,uBACAA,EAAAA,uBAKAA,EAAAA,sBACAA,EAAAA,uBACAA,EAAAA,YAViCgtE,EAAAA,iCCOlC,SAAAK,EAAYzuD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,eAAgBie,EAAYkuD,IAASnsE,YARL2Q,EAAAA,EAAAA,uBAH7CvN,EAAAA,UAASlE,OACNC,SAAU,6DAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,YALyCgtE,EAAAA,iCCc1C,SAAAM,EAAY1uD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,gBAAiBie,EAAYkuD,IAASnsE,gCAHiB,IAAI6C,EAAAA,sBAZ1B8N,EAAAA,EAAAA,uBAH9CvN,EAAAA,UAASlE,OACNC,SAAU,8DAJMmE,EAAAA,kBAAY8oE,EAAAA,gDAQ3B/sE,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,iCAEAkE,EAAAA,aAZ0C8oE,EAAAA,iCCK3C,SAAAO,EAAY3uD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,mBAAoBie,EAAYkuD,IAASnsE,YANV2Q,EAAAA,EAAAA,uBAH5CvN,EAAAA,UAASlE,OACNC,SAAU,4DAJMmE,EAAAA,kBAAY8oE,EAAAA,6CAQ3B/sE,EAAAA,uBACAA,EAAAA,YAHwCgtE,EAAAA,iCCOzC,SAAAQ,EAAY5uD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,yBAA0Bie,EAAYkuD,IAASnsE,yBAJlC,IAAI6C,EAAAA,6BACD,IAAIA,EAAAA,sBALiB8N,EAAAA,EAAAA,uBAHlDvN,EAAAA,UAASlE,OACNC,SAAU,kEAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,0BACAkE,EAAAA,8BACAA,EAAAA,aAL8C8oE,EAAAA,iCCM/C,SAAAS,EAAY7uD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,oBAAqBie,EAAYkuD,IAASnsE,YAPV2Q,EAAAA,EAAAA,uBAH7CvN,EAAAA,UAASlE,OACNC,SAAU,6DAJMmE,EAAAA,kBAAY8oE,EAAAA,+CAQ3B/sE,EAAAA,4BACAA,EAAAA,4BACAA,EAAAA,YAJyCgtE,EAAAA,iCCK1C,SAAAU,EAAY9uD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,qBAAsBie,EAAYkuD,IAASnsE,YANV2Q,EAAAA,EAAAA,uBAH9CvN,EAAAA,UAASlE,OACNC,SAAU,yDAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,YAH0CgtE,EAAAA,iCCK3C,SAAAW,EAAY/uD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,sBAAuBie,EAAYkuD,IAASnsE,YANV2Q,EAAAA,EAAAA,uBAH/CvN,EAAAA,UAASlE,OACNC,SAAU,0DAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,YAH2CgtE,EAAAA,iCCK5C,SAAAY,EAAYhvD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,qBAAsBie,EAAYkuD,IAASnsE,YANV2Q,EAAAA,EAAAA,uBAH9CvN,EAAAA,UAASlE,OACNC,SAAU,yDAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,YAH0CgtE,EAAAA,iCCO3C,SAAAa,EAAYjvD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,8BAA+Bie,EAAYkuD,IAASnsE,YARV2Q,EAAAA,EAAAA,uBAHvDvN,EAAAA,UAASlE,OACNC,SAAU,mEAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,sBACAA,EAAAA,8BACAA,EAAAA,YALmDgtE,EAAAA,iCCOpD,SAAAc,EAAYlvD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,cAAeie,EAAYkuD,IAASnsE,YARV2Q,EAAAA,EAAAA,uBAHvCvN,EAAAA,UAASlE,OACNC,SAAU,sDAJMmE,EAAAA,kBAAY8oE,EAAAA,+CAQ3B/sE,EAAAA,yBACAA,EAAAA,uBACAA,EAAAA,qBACAA,EAAAA,YALmCgtE,EAAAA,iCCQpC,SAAAe,EAAYnvD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,gBAAiBie,EAAYkuD,IAASnsE,YATL2Q,EAAAA,EAAAA,uBAH9CvN,EAAAA,UAASlE,OACNC,SAAU,8DAJMmE,EAAAA,kBAAY8oE,EAAAA,qDAQ3B/sE,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,uBACAA,EAAAA,YAN0CgtE,EAAAA,iCCY3C,SAAAgB,EAAYpvD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,cAAeie,EAAYkuD,IAASnsE,6BAHG,IAAI6C,EAAAA,sBAVZ8N,EAAAA,EAAAA,uBAH5CvN,EAAAA,UAASlE,OACNC,SAAU,4DAJMmE,EAAAA,kBAAY8oE,EAAAA,4CAQ3B/sE,EAAAA,8BACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,2BACAA,EAAAA,iCACAA,EAAAA,8BAEAkE,EAAAA,aAVwC8oE,EAAAA,kBCFhCiB,IACT/jE,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAA6jE,KAC9B3jE,OAAO,kBAgBP,SAAA2jE,EAAYtvD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,cAAeie,EAAYkuD,IAASnsE,4BAHD,IAAI6C,EAAAA,sBAPR8N,EAAAA,EAAAA,GAazC48D,EAAA5uE,UAAAgM,WAAA,SAAWgmD,KAEX4c,EAAA5uE,UAAAiM,iBAAA,SAAiBC,KAEjB0iE,EAAA5uE,UAAAmM,kBAAA,SAAkBD,yBArBrBzH,EAAAA,UAASlE,OACNC,SAAU,eACVkE,WAAYiqE,iDAZIhqE,EAAAA,kBAAY8oE,EAAAA,mDAgB3B/sE,EAAAA,uBACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,6BAEAkE,EAAAA,aAPwC8oE,EAAAA,iCCqBzC,SAAAmB,EAAYvvD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,mBAAoBie,EAAYkuD,IAASnsE,YA9BV2Q,EAAAA,EAAAA,uBAH5CvN,EAAAA,UAASlE,OACNC,SAAU,4DAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,mBACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,kCACAA,EAAAA,iCACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,oCACAA,EAAAA,wCACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,gCACAA,EAAAA,mCACAA,EAAAA,yBACAA,EAAAA,YA1BwCgtE,EAAAA,iCCMzC,SAAAoB,EAAYxvD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,sBAAuBie,EAAYkuD,IAASnsE,YAPL2Q,EAAAA,EAAAA,uBAHpDvN,EAAAA,UAASlE,OACNC,SAAU,qEAJMmE,EAAAA,kBAAY8oE,EAAAA,2CAQ3B/sE,EAAAA,uBACAA,EAAAA,uBACAA,EAAAA,YAJgDgtE,EAAAA,iCCcjD,SAAAqB,EAAYzvD,EAAwBkuD,GAApC,IAAA1rE,EACIiQ,EAAA1R,KAAAgB,KAAM,WAAYie,EAAYkuD,IAASnsE,4BANc,IAAI6C,EAAAA,8BACb,IAAIA,EAAAA,gCACJ,IAAIA,EAAAA,8BACK,IAAIA,EAAAA,sBAZvB8N,EAAAA,EAAAA,uBAHzCvN,EAAAA,UAASlE,OACNC,SAAU,wDAJMmE,EAAAA,kBAAY8oE,EAAAA,0CAQ3B/sE,EAAAA,uBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,uBACAA,EAAAA,6BAEAkE,EAAAA,+BACAA,EAAAA,iCACAA,EAAAA,+BACAA,EAAAA,aAZqC8oE,EAAAA,iCCOtC,SAAAsB,EAAY1vD,EAAwBkuD,UAChCz7D,EAAA1R,KAAAgB,KAAM,YAAaie,EAAYkuD,IAASnsE,YARL2Q,EAAAA,EAAAA,uBAH1CvN,EAAAA,UAASlE,OACNC,SAAU,yDAJMmE,EAAAA,kBAAY8oE,EAAAA,yCAQ3B/sE,EAAAA,oBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,YALsCgtE,EAAAA,kBCN3CuB,GAAA,WAMI,SAAAA,EAAgDC,GAAA7tE,KAAA6tE,uBAAAA,SAEhDD,EAAAjvE,UAAA6zB,KAAA,WACIxyB,KAAK6tE,uBAAuBr7C,QAGhCo7C,EAAAjvE,UAAA2zB,KAAA,WACItyB,KAAK6tE,uBAAuBv7C,QAGhCs7C,EAAAjvE,UAAAuS,QAAA,WACI,OAAOlR,KAAK6tE,uBAAuB38D,WAGvC08D,EAAAjvE,UAAAmvE,gBAAA,WACI,OAAO9tE,KAAK6tE,uBAAuBC,mBAGvCF,EAAAjvE,UAAAovE,mBAAA,SAAmBntE,GACfZ,KAAK6tE,uBAAuBE,mBAAmBntE,IAGnDgtE,EAAAjvE,UAAAqvE,0BAAA,WACIhuE,KAAK6tE,uBAAuBG,iDA1BnCzrE,EAAAA,kFAGiBy8C,EAAAA,OAAM9/C,MAAC,0BANzB,GAkCA,SAAA+uE,GAA6C9B,GACzC,OAAOA,EAAS+B,IAAI,mBAGxB,IAAaC,IACT5kE,QAAS,kBACT6kE,WAAYH,GACZI,MAAO,cCzCXC,GAAA,WAMI,SAAAA,EAAoCC,GAAAvuE,KAAAuuE,YAAAA,SAEpCD,EAAA3vE,UAAA6vE,YAAA,SAAY18D,EAAqB28D,EAAa58D,GAC1C,YAD0C,IAAAA,IAAAA,MACnC7R,KAAKuuE,YAAYC,YAAY18D,EAAS28D,EAAM58D,wBAN1DtP,EAAAA,kFAGgBy8C,EAAAA,OAAM9/C,MAAC,eANxB,GAaA,SAAAwvE,GAAkCvC,GAC9B,OAAOA,EAAS+B,IAAI,QAGxB,IAAaS,IACTplE,QAAS,OACT6kE,WAAYM,GACZL,MAAO,cCpBXO,GAAA,WAMI,SAAAA,EAA8CC,GAAA7uE,KAAA6uE,gBAAAA,SAE9CD,EAAAjwE,UAAAmwE,WAAA,SAAWC,GACP/uE,KAAK6uE,gBAAgBC,WAAWC,IAGpCH,EAAAjwE,UAAAqwE,UAAA,SAAUC,EAAYC,GAClB,OAAOlvE,KAAK6uE,gBAAgBG,UAAUC,EAAMC,IAGhDN,EAAAjwE,UAAAwwE,aAAA,SAAaC,GACT,OAAOpvE,KAAK6uE,gBAAgBM,aAAaC,wBAdhD7sE,EAAAA,kFAGgBy8C,EAAAA,OAAM9/C,MAAC,yBANxB,GAsBA,SAAAmwE,GAAsClD,GAClC,OAAOA,EAAS+B,IAAI,kBAGxB,IAAaoB,IACT/lE,QAAS,iBACT6kE,WAAYiB,GACZhB,MAAO,cCDLzuE,IACFssE,GACAI,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAE,GACAC,GACAC,GACAC,GACAC,2DAGHpuE,EAAAA,SAAQL,OACLM,WACAG,QAASC,GACTA,aAAcA,GACdyD,WACI8qE,GACAQ,GACAW,GACAV,GACAN,GACAV,mDC/DR2B,GAAA,gCAOIA,EAAA5wE,UAAAygB,UAAA,SAAUoD,EAAcpd,GACpB,OAAKod,EAGEA,EAAMxc,OAAO,SAAAwpE,GAAM,OAAiD,GAAjDA,EAAGxpC,cAAc93B,QAAQ9I,EAAM4gC,yCAThE3mB,EAAAA,KAAIngB,OACDogB,KAAM,wBAET/c,EAAAA,qDALD,GCAAktE,GAAA,oDAGClwE,EAAAA,SAAQL,OACLS,SAAU4vE,IACV3vE,cAAe2vE,gDALnB,GCEAG,GAAA,gCAEIA,EAAA/wE,UAAAgxE,QAAA,SAAQ/jE,GAEJ,GAAI0Q,SAASszD,OAAQ,CAGjB,IAGM/3D,EAHUyE,SAASszD,OAAO3Y,MAAM,KAIjCnwD,IAAI,SAAA8oE,GAAU,OAAGhkE,IAAKgkE,EAAO3Y,MAAM,KAAK,GAAGmU,OAAQhmE,MAAOwqE,EAAO3Y,MAAM,KAAK,GAAGmU,UAC/EjlE,KAAK,SAAAypE,GAAU,OAAAA,EAAOhkE,MAAQA,IAEnC,OAAOiM,EAAQA,EAAMzS,MAAQ,KAGjC,OAAO,MAGXsqE,EAAA/wE,UAAAkxE,QAAA,SAAQjkE,EAAaxG,GACjBkX,SAASszD,OAAYhkE,EAAG,IAAIxG,EAAK,YAGrCsqE,EAAA/wE,UAAAmxE,WAAA,SAAWlkE,GAEP0Q,SAASszD,OAAO3Y,MAAM,KAAKvqD,QAAQ,SAAAkjE,GAC/B,IAAMG,EAAQH,EAAO1hE,QAAQ,OACP,EAAT6hE,EAAaH,EAAOtmB,OAAO,EAAGymB,GAAO3E,OAASwE,KAE9ChkE,IACT0Q,SAASszD,OAASA,EAAOxE,OAAO/6C,QAAQ,MAAO,cAAa,IAAIzhB,MAAOohE,cAAa,eAKhGN,EAAA/wE,UAAAqsD,MAAA,WAAA,IAAAvqD,EAAAT,KAGIsc,SAASszD,OAAO3Y,MAAM,KAAKnwD,IAAI,SAAA8oE,GAAU,OAAAA,EAAO3Y,MAAM,KAAK,GAAGmU,SACzD1+D,QAAQ,SAAAkjE,GAAU,OAAAnvE,EAAKqvE,WAAWF,MAG3CF,EAAA/wE,UAAAsxE,aAAA,WAEI,OAAOjwE,QA7Cf,GCCAkwE,GAAA,gCAEIA,EAAAvxE,UAAAgxE,QAAA,SAAQ/jE,GACJ,OAAOukE,aAAaR,QAAQ/jE,IAGhCskE,EAAAvxE,UAAAkxE,QAAA,SAAQjkE,EAAaxG,GACjB+qE,aAAaN,QAAQjkE,EAAKxG,IAG9B8qE,EAAAvxE,UAAAmxE,WAAA,SAAWlkE,GACPukE,aAAaL,WAAWlkE,IAG5BskE,EAAAvxE,UAAAqsD,MAAA,WACImlB,aAAanlB,SAGjBklB,EAAAvxE,UAAAsxE,aAAA,WAGI,IAAKE,aACD,OAAO,IAAIT,GAIf,IAII,OAHAS,aAAaN,QAAQ,6BAA8B,8BACnDM,aAAaL,WAAW,8BAEjB9vE,KACT,MAAOowE,GACL,OAAO,IAAIV,OAhCvB,GCAAW,GAAA,gCAEIA,EAAA1xE,UAAAgxE,QAAA,SAAQ/jE,GACJ,OAAO0kE,eAAeX,QAAQ/jE,IAGlCykE,EAAA1xE,UAAAkxE,QAAA,SAAQjkE,EAAaxG,GACjBkrE,eAAeT,QAAQjkE,EAAKxG,IAGhCirE,EAAA1xE,UAAAmxE,WAAA,SAAWlkE,GACP0kE,eAAeR,WAAWlkE,IAG9BykE,EAAA1xE,UAAAqsD,MAAA,WACIslB,eAAetlB,SAGnBqlB,EAAA1xE,UAAAsxE,aAAA,WAGI,IAAKK,eACD,OAAO,IAAIZ,GAIf,IAII,OAHAY,eAAeT,QAAQ,6BAA8B,8BACrDS,eAAeR,WAAW,8BAEnB9vE,KACT,MAAOowE,GACL,OAAO,IAAIV,OAhCvB,GCHAa,GAAA,gCAYIA,EAAA5xE,UAAAkxE,QAAA,SAAQjkE,EAAaxG,EAAe+D,QAAA,IAAAA,IAAAA,EAAkCqnE,GAA0BC,cAC5FzwE,KAAK0wE,WAAWvnE,GAAM0mE,QAAQjkE,EAAKxG,IAMvCmrE,EAAA5xE,UAAAgxE,QAAA,SAAQ/jE,EAAazC,GACjB,YADiB,IAAAA,IAAAA,EAAkCqnE,GAA0BC,cACtEzwE,KAAK0wE,WAAWvnE,GAAMwmE,QAAQ/jE,IAMzC2kE,EAAA5xE,UAAAmxE,WAAA,SAAWlkE,EAAazC,QAAA,IAAAA,IAAAA,EAAkCqnE,GAA0BC,cAChFzwE,KAAK0wE,WAAWvnE,GAAM2mE,WAAWlkE,IAMrC2kE,EAAA5xE,UAAAqsD,MAAA,SAAM7hD,QAAA,IAAAA,IAAAA,EAAkCqnE,GAA0BC,cAC9DzwE,KAAK0wE,WAAWvnE,GAAM6hD,SAMlBulB,EAAA5xE,UAAA+xE,oBAAWvnE,GAEf,OAAQA,GAEJ,KAAKqnE,GAA0BG,OAC3B,OAAO,IAAIjB,GAEf,KAAKc,GAA0BC,aAE3B,OAD4B,IAAIP,IACLD,eAE/B,KAAKO,GAA0BI,eAE3B,OAD8B,IAAIP,IACLJ,qCA/C5C1tE,EAAAA,qDAND,kJCAA,IAAAsuE,GAAA,oDAICtxE,EAAAA,SAAQL,OACLmE,WAAYktE,gDALhB,GCAAO,wc3OOA,SAAwBjhE,GACpB,OAAO,SAACb,EAAgBoB,GAEM,mBAAfP,IACPA,EAAaA,EAAW7Q,KAAK,OAI5BgQ,EAAO9K,eAAe2M,KACvBlN,OAAO2G,eAAe0E,EAAQ6B,IAAYzL,WAI9C4J,EAAO6B,IAAUnL,KAAKqrE,KAAKngE,GAAwBf,GAAYb,OAAMA,EAAEoB,YAAWA","sourcesContent":["import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-breadcrumbs',\n    template: `<nav aria-label=\"Breadcrumb\">\n    <ol class=\"breadcrumb\">\n        <li *ngFor=\"let crumb of crumbs\">\n\n            <!-- If there is a router link then use a tag -->\n            <a *ngIf=\"crumb.routerLink || crumb.onClick\"\n                tabindex=\"0\"\n                [routerLink]=\"crumb.routerLink\"\n                [fragment]=\"crumb.fragment\"\n                [queryParams]=\"crumb.queryParams\"\n                (click)=\"clickCrumb($event, crumb)\">\n                {{ crumb.title }}\n            </a>\n\n            <!-- If there is not router link then display text in a span -->\n            <span *ngIf=\"!crumb.routerLink && !crumb.onClick\">{{ crumb.title }}</span>\n        </li>\n    </ol>\n</nav>`\n})\n\nexport class BreadcrumbsComponent {\n\n    @Input() crumbs: Breadcrumb[];\n\n    clickCrumb(event: MouseEvent, crumb: Breadcrumb) {\n        if (crumb.onClick) {\n            crumb.onClick.call(null, event);\n        }\n    }\n}\n\nexport interface Breadcrumb {\n    title: string;\n    routerLink?: string;\n    fragment?: string;\n    queryParams?: any;\n    onClick?: (event: MouseEvent) => void;\n}","import { NgModule } from '@angular/core';\n\nimport { BreadcrumbsComponent } from './breadcrumbs.component';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n    imports: [\n        CommonModule, \n        RouterModule\n    ],\n    exports: [BreadcrumbsComponent],\n    declarations: [BreadcrumbsComponent]\n})\nexport class BreadcrumbsModule { }\n","import { Injectable, NgZone, OnDestroy, Renderer2, RendererFactory2 } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Subscription } from 'rxjs/Subscription';\n\n\n@Injectable()\nexport class ResizeService implements OnDestroy {\n\n    private _renderer: Renderer2;\n    private _subscription = new Subscription();\n\n    constructor(rendererFactory: RendererFactory2, private _ngZone: NgZone) {\n        this._renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addResizeListener(nativeElement: HTMLElement): BehaviorSubject<ResizeDimensions> {\n\n        // create a behavior subject subject\n        const subject = new BehaviorSubject<ResizeDimensions>({ width: nativeElement.offsetWidth, height: nativeElement.offsetHeight });\n\n        // determine the style of the element\n        const displayMode = window.getComputedStyle(nativeElement).getPropertyValue('display');\n\n        // create the iframe element\n        const iframe: HTMLIFrameElement = this._renderer.createElement('iframe');\n\n        // style the iframe to be invisible but fill containing element\n        this._renderer.setStyle(iframe, 'position', 'absolute');\n        this._renderer.setStyle(iframe, 'width', '100%');\n        this._renderer.setStyle(iframe, 'height', '100%');\n        this._renderer.setStyle(iframe, 'top', '0');\n        this._renderer.setStyle(iframe, 'right', '0');\n        this._renderer.setStyle(iframe, 'bottom', '0');\n        this._renderer.setStyle(iframe, 'left', '0');\n        this._renderer.setStyle(iframe, 'z-index', '-1');\n        this._renderer.setStyle(iframe, 'opacity', '0');\n        this._renderer.setStyle(iframe, 'border', 'none');\n        this._renderer.setStyle(iframe, 'margin', '0');\n        this._renderer.setStyle(iframe, 'pointer-events', 'none');\n        this._renderer.setStyle(iframe, 'overflow', 'hidden');\n\n        // ensure the iframe ignores any tabbing\n        this._renderer.setAttribute(iframe, 'tabindex', '-1');\n        this._renderer.setAttribute(iframe, 'aria-hidden', 'true');\n\n        // statically positioned elements need changed to relative for this method to work\n        if (displayMode !== 'relative' && displayMode !== 'absolute' && displayMode !== 'fixed') {\n            this._renderer.setStyle(nativeElement, 'position', 'relative');\n        }\n\n        // add the iframe to the container element\n        this._renderer.appendChild(nativeElement, iframe);\n\n        this.waitUntilReady(iframe, () => {\n            const iframeDoc = iframe.contentDocument || iframe.contentWindow.document as Document;\n\n            const attachListener = () => {\n\n                // watch for any future resizes - run inside ngzone as an iframe event listener is not patched\n                this._subscription.add(fromEvent(iframe.contentWindow, 'resize').subscribe((event: ResizeDimensions) =>\n                    this._ngZone.run(() => subject.next({ width: nativeElement.offsetWidth, height: nativeElement.offsetHeight }))\n                ));\n            };\n\n            if (iframeDoc.readyState === 'complete') {\n                attachListener();\n            } else {\n\n                // wait for iframe to load\n                iframe.addEventListener('load', () => attachListener());\n            }\n        });\n\n\n        return subject;\n    }\n\n    private waitUntilReady(iframe: HTMLIFrameElement, callback: () => void) {\n        if (iframe.contentDocument || iframe.contentWindow) {\n            callback.call(this);\n        } else {\n            setTimeout(() => this.waitUntilReady(iframe, callback));\n        }\n    }\n}\n\nexport interface ResizeDimensions {\n    width: number;\n    height: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ResizeDimensions, ResizeService } from './resize.service';\n\n@Directive({\n    selector: '[uxResize]',\n    providers: [ResizeService]\n})\nexport class ResizeDirective implements OnInit, OnDestroy {\n\n    @Input() throttle: number = 0;\n    @Output() uxResize: EventEmitter<ResizeDimensions> = new EventEmitter<ResizeDimensions>();\n\n    private _subscription: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _resizeService: ResizeService, private _ngZone: NgZone) { }\n\n    ngOnInit(): void {\n        this._subscription = this._resizeService.addResizeListener(this._elementRef.nativeElement)\n            .pipe(debounceTime(this.throttle))\n            .subscribe((event: ResizeDimensions) => this._ngZone.run(() => this.uxResize.emit(event)));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { ResizeDirective } from './resize.directive';\nimport { ResizeService } from './resize.service';\n\n@NgModule({\n    exports: [ResizeDirective],\n    declarations: [ResizeDirective],\n    providers: [ResizeService]\n})\nexport class ResizeModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n  selector: '[uxCardTabContent]'\n})\nexport class CardTabContentDirective { }\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { CardTabComponent } from './card-tab/card-tab.component';\n\n@Injectable()\nexport class CardTabsService implements OnDestroy {\n\n  tab$ = new BehaviorSubject<CardTabComponent>(null);\n  tabs$ = new BehaviorSubject<CardTabComponent[]>([]);\n  position$ = new BehaviorSubject<string>('top');\n\n  private _subscription: Subscription;\n\n  constructor() {\n\n    // when a tab is added or removed ensure we always select one if any are available\n    this._subscription = this.tabs$.pipe(\n      filter(tabs => !this.tab$.value || !tabs.find(tab => tab === this.tab$.value)),\n    ).subscribe(tabs => this.tab$.next(tabs.length > 0 ? tabs[0] : null));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Add a tab to the list of tabs\n   */\n  addTab(tab: CardTabComponent): void {\n    this.tabs$.next([...this.tabs$.value, tab]);\n  }\n\n  /**\n   * Remove a tab from the list\n   */\n  removeTab(tab: CardTabComponent): void {\n    this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n  }\n\n  /**\n   * Select the tab\n   */\n  select(tab: CardTabComponent): void {\n    this.tab$.next(tab);\n  }\n\n  /**\n   * Set the position of the tab content\n   */\n  setPosition(position: string): void {\n    this.position$.next(position);\n  }\n}\n","import { ChangeDetectionStrategy, Component, ContentChild, OnDestroy, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { CardTabsService } from '../card-tabs.service';\nimport { CardTabContentDirective } from './card-tab-content.directive';\n\n@Component({\n  selector: 'ux-card-tab',\n  template: `<ng-content *ngIf=\"active$ | async\"></ng-content>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardTabComponent implements OnDestroy {\n\n  active$: Observable<boolean> = this._tabService.tab$.pipe(map(tab => tab === this));\n  @ContentChild(CardTabContentDirective, { read: TemplateRef }) content: TemplateRef<any>;\n\n  constructor(private _tabService: CardTabsService) {\n    this._tabService.addTab(this);\n  }\n\n  ngOnDestroy(): void {\n    this._tabService.removeTab(this);\n  }\n\n}\n","import { Component, ElementRef, HostBinding, Input, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../../directives/resize';\nimport { CardTabComponent } from '../card-tab/card-tab.component';\nimport { CardTabsService } from '../card-tabs.service';\n\n@Component({\n  selector: 'ux-card-tabset',\n  template: `<div class=\"card-tab-content\" role=\"tabpanel\" *ngIf=\"(tabService.tab$ | async)\">\n    <ng-content></ng-content>\n</div>\n\n<div class=\"card-tabs\" #tabs>\n\n    <button class=\"card-tabs-paging-btn card-tabs-paging-btn-previous\" aria-label=\"Previous Tabs\" (click)=\"previous()\" *ngIf=\"offset < bounds.lower\">\n        <i class=\"hpe-icon hpe-previous\"></i>\n    </button>\n\n    <div class=\"card-tabs-list\" role=\"tablist\" #tablist (uxResize)=\"resize($event)\" [style.transform]=\"'translateX(' + offset + 'px)'\">\n\n        <div class=\"card-tab\"\n            role=\"tab\"\n            tabindex=\"0\" #card\n            *ngFor=\"let tab of tabService.tabs$ | async\"\n            [ngClass]=\"tabService.position$ | async\"\n            [class.active]=\"tab.active$ | async\"\n            [attr.aria-selected]=\"tab.active$ | async\"\n            (click)=\"select(tab, card)\"\n            (focus)=\"tabs.scrollLeft = 0\"\n            (keydown.enter)=\"select(tab, card)\">\n\n            <ng-container [ngTemplateOutlet]=\"tab.content\"></ng-container>\n        </div>\n\n    </div>\n\n    <button class=\"card-tabs-paging-btn card-tabs-paging-btn-next\" aria-label=\"Next Tabs\" (click)=\"next()\" *ngIf=\"offset > bounds.upper\">\n        <i class=\"hpe-icon hpe-next\"></i>\n    </button>\n</div>`,\n  providers: [CardTabsService]\n})\nexport class CardTabsetComponent {\n\n  @HostBinding('class')\n  @Input() set position(direction: string) {\n    this.tabService.setPosition(direction);\n  }\n\n  get position(): string {\n    return this.tabService.position$.getValue();\n  }\n\n  @ViewChild('tablist') tablist: ElementRef;\n\n  offset: number = 0;\n  bounds: CardTabsBounds = { lower: 0, upper: 0 };\n\n  private _width: number;\n  private _innerWidth: number;\n\n  constructor(public tabService: CardTabsService) {}\n\n  select(tab: CardTabComponent, element: HTMLElement): void {\n    // select the tab\n    this.tabService.select(tab);\n\n    // ensure the tab is moved into view if required\n    this.moveIntoView(element);\n  }\n\n  resize(dimensions: ResizeDimensions): void {\n    this._width = dimensions.width;\n    this._innerWidth = this.tablist.nativeElement.scrollWidth;\n\n    this.bounds.lower = 0;\n    this.bounds.upper = -(this._innerWidth - this._width);\n  }\n\n  previous(): void {\n    this.offset += this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.min(this.offset, this.bounds.lower);\n  }\n\n  next(): void {\n    this.offset -= this._width;\n\n    // ensure it remains within the allowed bounds\n    this.offset = Math.max(this.offset, this.bounds.upper);\n  }\n\n  private moveIntoView(element: HTMLElement): void {\n\n    // if we dont have the dimensions we cant check\n    if (!this._width || !this._innerWidth) {\n      return;\n    }\n\n    // get the current element bounds\n    const { offsetLeft, offsetWidth } = element;\n    const { marginLeft, marginRight } = getComputedStyle(element);\n\n    // calculate the visible area\n    const viewportStart = Math.abs(this.offset);\n    const viewportEnd = viewportStart + this._width;\n    const cardWidth = parseFloat(marginLeft) + offsetWidth + parseFloat(marginRight);\n\n    // if we need to move to the left - figure out how much\n    if (offsetLeft < viewportStart) {\n      this.offset -= (offsetLeft - parseFloat(marginLeft)) - viewportStart;\n    }\n    \n    // if we need to move to the right - figure out how much\n    if ((offsetLeft + cardWidth) > viewportEnd) {\n      this.offset -= (offsetLeft + cardWidth) - viewportEnd;\n    }\n  }\n}\n\nexport interface CardTabsBounds {\n  lower: number;\n  upper: number;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { CardTabContentDirective } from './card-tab/card-tab-content.directive';\nimport { CardTabComponent } from './card-tab/card-tab.component';\nimport { CardTabsetComponent } from './card-tabset/card-tabset.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ResizeModule\n  ],\n  declarations: [CardTabsetComponent, CardTabComponent, CardTabContentDirective],\n  exports: [CardTabsetComponent, CardTabComponent, CardTabContentDirective]\n})\nexport class CardTabsModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const CHECKBOX_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CheckboxComponent),\n    multi: true\n};\n\nlet uniqueCheckboxId = 0;\n\n@Component({\n    selector: 'ux-checkbox',\n    template: `<label [attr.for]=\"inputId\"\n       class=\"ux-checkbox\"\n       [class.ux-checkbox-checked]=\"value === true\"\n       [class.ux-checkbox-indeterminate]=\"indeterminate\"\n       [class.ux-checkbox-simplified]=\"simplified\"\n       [class.ux-checkbox-disabled]=\"disabled\"\n       [class.ux-checkbox-focused]=\"focused\">\n\n    <div class=\"ux-checkbox-container\">\n        <input type=\"checkbox\"\n               class=\"ux-checkbox-input\"\n               [id]=\"inputId\"\n               [required]=\"required\"\n               [checked]=\"value\"\n               [attr.value]=\"value\"\n               [disabled]=\"disabled\"\n               [attr.name]=\"name\"\n               [tabindex]=\"tabindex\"\n               [indeterminate]=\"indeterminate\"\n               [attr.aria-label]=\"ariaLabel\"\n               [attr.aria-labelledby]=\"ariaLabelledby\"\n               [attr.aria-checked]=\"ariaChecked\"\n               (focus)=\"focused = true\"\n               (blur)=\"focused = false\"\n               (change)=\"$event.stopPropagation()\"\n               (click)=\"toggle()\">\n    </div>\n\n    <span class=\"ux-checkbox-label\">\n        <ng-content></ng-content>\n    </span>\n</label>\n`,\n    providers: [CHECKBOX_VALUE_ACCESSOR]\n})\nexport class CheckboxComponent implements ControlValueAccessor {\n\n    private _checkboxId: string = `ux-checkbox-${++uniqueCheckboxId}`;\n\n    @Input() id: string = this._checkboxId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() simplified: boolean = false;\n    @Input() indeterminateValue: any = -1;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this._value = value;\n\n        // determine if it is in the indeterminate state\n        this.indeterminate = this._value === this.indeterminateValue;\n\n        // determine the checked state\n        this.ariaChecked = this.indeterminate ? 'mixed' : this._value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string { \n        return `${this.id || this._checkboxId}-input`;\n    }\n\n    private _value: any = false;\n\n    indeterminate: boolean = false;\n    ariaChecked: boolean | string;\n    focused: boolean = false;\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        if (this.value === this.indeterminateValue) {\n            this.value = true;\n            return;\n        }\n\n        // toggle the checked state\n        this.value = !this.value;\n    }\n\n    // Functions required to update ngModel\n\n    writeValue(value: any): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { CheckboxComponent } from './checkbox.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [CheckboxComponent],\n    declarations: [CheckboxComponent]\n})\nexport class CheckboxModule { }\n","import { ColumnSortingDirective, ColumnSortingOrder } from './column-sorting.directive';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-column-sorting',\n    template: `<div class=\"ux-column-sorting\">\n    <i class=\"ux-column-sorting-icon hpe-icon\" \n        [class.hpe-ascend]=\"state === columnSortingState.Ascending\" \n        [class.hpe-descend]=\"state === columnSortingState.Descending\" \n        [class.column-sorting-icon-hidden]=\"state === columnSortingState.NoSort\"></i>\n    <p class=\"ux-column-sorting-number\">{{ orderNumber }}</p>\n</div>`,\n    exportAs: 'ux-column-sorting'\n})\nexport class ColumnSortingComponent {\n\n    @Input() state: ColumnSortingState;\n    @Input() key: string;\n    @Input() orderNumber: number;\n    @Output() stateChange: EventEmitter<ColumnSortingState> = new EventEmitter<ColumnSortingState>();\n\n    private _parent: ColumnSortingDirective;\n    columnSortingState = ColumnSortingState;\n\n    initParent(parent: ColumnSortingDirective) {\n        this._parent = parent;\n\n        // watch for any events\n        this._parent.events.subscribe(event => {\n\n            let idx = event.findIndex(column => column.key === this.key);\n\n            if (idx == -1) {\n                this.state = ColumnSortingState.NoSort;\n            }\n\n            // only store the number if we have 2 or more columns being sorted\n            if (event.length > 1) {\n                this.orderNumber = idx === -1 ? null : idx + 1;\n            } else {\n                this.orderNumber = null;\n            }\n\n            this.stateChange.emit(this.state);\n\n        });\n    }\n\n    changeState(): ColumnSortingOrder[] {\n\n        if (this.state === ColumnSortingState.Ascending) {\n            this.state = ColumnSortingState.Descending;\n        } else if (this.state === ColumnSortingState.Descending) {\n            this.state = ColumnSortingState.NoSort;\n        } else {\n            this.state = ColumnSortingState.Ascending;\n        }\n\n        // inform parent\n        return this._parent.toggleColumn(this.key, this.state);\n\n    }\n}\n\nexport enum ColumnSortingState {\n    Ascending,\n    Descending,\n    NoSort\n}","import { ColumnSortingComponent, ColumnSortingState } from './column-sorting.component';\nimport { Directive, Host, QueryList, ContentChildren, Input } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxColumnSorting]'\n})\nexport class ColumnSortingDirective {\n\n    @Input() singleSort: boolean;\n    @ContentChildren(ColumnSortingComponent) components: QueryList<ColumnSortingComponent>;\n\n    events: Subject<ColumnSortingOrder[]> = new Subject<ColumnSortingOrder[]>();\n    order: ColumnSortingOrder[] = [];\n\n    ngAfterViewInit() {\n        this.components.forEach(component => component.initParent(this));\n    }\n\n    toggleColumn(key: string, state: ColumnSortingState) {\n\n        if (this.singleSort) {\n            if (state === ColumnSortingState.NoSort) {\n                this.order = [];\n            } else {\n                this.order = [{key: key, state: state}];\n            }\n        } else {\n            // reorder columns here\n            let idx = this.order.findIndex(column => column.key === key);\n\n            // if wasnt previously selected add to list\n            if (idx === -1) {\n                this.order.push({ key: key, state: state});\n            } else if (state === ColumnSortingState.Ascending || state === ColumnSortingState.Descending) {\n                this.order.splice(idx, 1);\n                this.order.push({ key: key, state: state});\n            } else {\n                this.order.splice(idx, 1);\n            }\n        }\n\n            this.events.next(this.order);\n            // return the order\n            return this.order;\n\n    }\n}\n\nexport interface ColumnSortingOrder {\n    key: string;\n    state: ColumnSortingState; \n}","import { NgModule } from '@angular/core';\n\nimport { ColumnSortingComponent } from './column-sorting.component';\n\nimport { ColumnSortingDirective } from './column-sorting.directive';\n\n@NgModule({\n    exports: [ColumnSortingComponent, ColumnSortingDirective],\n    declarations: [ColumnSortingComponent, ColumnSortingDirective]\n})\nexport class ColumnSortingModule { }","import { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\n\nexport class ConduitSubject {\n\n    private _subject: Subject<any>;\n    private _onDestroy = new Subject<void>();\n\n    constructor(public conduit: ConduitMetadata, private _zone: ConduitZone, public zoneId: string) {\n\n        // store the target subject object\n        this._subject = conduit.subject;\n\n        // check if there are any conduits that have supplied an initial value\n        this.getInitialValue();\n\n        // subscribe to changes to the source subject\n        this._subject.pipe(distinctUntilChanged(conduit.changeDetection), takeUntil(this._onDestroy))\n            .subscribe(this.onOutput.bind(this));\n\n        // subscribe to the zone events and root zone events\n        _zone.getEvents().pipe(filter(event => event.conduit.id === conduit.id), takeUntil(this._onDestroy)).subscribe(this.onInput.bind(this));\n    }\n\n    /** Check all allow inputs to see if there is a value we should initially set the conduit to */\n    getInitialValue(): void {\n\n        // if we do not accept inputs then do nothing\n        if (this.conduit.acceptsInput === false) {\n            return;\n        }\n\n        // return all subjects that are 1) Not itself 2) In a zone that is listed in acceptsInput 3) Have a currentValue set\n        const subjects = this._zone.getSubjects().filter(subject => {\n\n            // If this is itself or if it has not value to give us then do nothing\n            if (subject === this || subject.conduit.id !== this.conduit.id || !subject.conduit.hasOwnProperty('currentValue')) {\n                return false;\n            }\n\n            // if acceptsInput is true then we return every time\n            if (this.conduit.acceptsInput === true) {\n                return true;\n            }\n\n            if (Array.isArray(this.conduit.acceptsInput)) {\n                return this.conduit.acceptsInput.indexOf(subject.zoneId) !== -1;\n            }\n        });\n\n        // if there are no matches then do nothing\n        if (subjects.length === 0) {\n            return;\n        }\n\n        // otherwise sort by the last modified field\n        subjects.sort((subjectOne, subjectTwo) => subjectOne.conduit.lastModified.getTime() < subjectTwo.conduit.lastModified.getTime() ? 1 : -1);\n\n        // get the most recent value\n        this._subject.next(subjects[0].conduit.currentValue);\n    }\n\n    /** This will be triggered when a conduits value has changed */\n    onInput(event: ConduitEvent): void {\n        // if we dont accept input or we emitted this value then do nothing\n        if (this.conduit.acceptsInput === false || event.conduit === this.conduit) {\n            return;\n        }\n\n        // check if the conduit produces output - if not we only do something if we are in the same zone\n        if (event.conduit.producesOutput === false && event.zoneId !== this.zoneId) {\n            return;\n        }\n\n        // check if we only accept inputs from specific zones\n        if (Array.isArray(this.conduit.acceptsInput)) {\n            // check if the event came from an acceptable zone\n            if (!this.conduit.acceptsInput.find(zone => zone === event.zoneId)) {\n                return;\n            }\n        }\n\n        // if required transform the value\n        const outputValue = this.conduit.map ? this.conduit.map(event.value) : event.value;\n\n        // update the subject\n        this._subject.next(outputValue);\n    }\n\n    /** This will be fired when this conduit emits a new value */\n    onOutput(value: any): void {\n\n        // store the most recent value and when it was modified - can be used for any new conduits to lookup a value\n        this.conduit.currentValue = value;\n        this.conduit.lastModified = new Date();\n\n        // check if this should produce output\n        if (this.conduit.producesOutput) {\n            this._zone.emit({ conduit: this.conduit, zoneId: this.zoneId, value });\n        }\n    }\n\n    /** Unsubscribe once this subject is destroyed */\n    destroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n","/** This utility is to ensure a all functions with the specified name are called in all super classes */\nexport function invokeSuperFunction(target: object, functionName: string): void {\n    // get all instances of the function\n    const functionList: Function[] = [];\n\n    // store the current prototype we are checking\n    let prototype: any = target;\n\n    // look through every base class and check it\n    do {\n        if (prototype.hasOwnProperty(functionName)) {\n            functionList.push(prototype[functionName]);\n        }\n\n        prototype = prototype.__proto__;\n    } while (prototype.__proto__);\n\n    // augment the top level function to call all the functions\n    target[functionName] = function (...args: any[]) {\n        functionList.forEach(func => func.call(target, ...args));\n    };\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { ConduitSubject } from './conduit-subject';\nimport { ConduitEvent } from './interfaces/conduit-event';\nimport { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\n@Injectable()\nexport class ConduitZone implements OnDestroy {\n\n    /** Create a global subject store */\n    static subjects: ConduitSubject[] = [];\n\n    /** Expose an event stream of new values */\n    static events = new Subject<ConduitEvent>();\n\n    /** Store the zone name */\n    private _zoneId: string;\n\n    ngOnDestroy(): void {\n        // find all conduit subjects that are part of this zone\n        ConduitZone.subjects.filter(_subject => _subject.zoneId === this._zoneId)\n            .forEach(_subject => this.unregisterConduit(_subject.conduit));\n    }\n\n    /** Store reference to the repository and begin watching for and emitting changes */\n    registerConduit(conduit: ConduitMetadata): void {\n        ConduitZone.subjects.push(new ConduitSubject(conduit, this, this._zoneId));\n    }\n\n    /** Destroy a conduit */\n    unregisterConduit(conduit: ConduitMetadata): void {\n        const subject = this.getConduitSubject(conduit.subject);\n\n        if (subject) {\n            // remove the subject from the internal list of conduit subjects\n            ConduitZone.subjects = ConduitZone.subjects.filter(_subject => _subject !== subject);\n\n            // perform all unsubscriptions\n            subject.destroy();\n        }\n    }\n\n    /** Provide the zone with an ID */\n    setZoneId(zoneId: string): void {\n        this._zoneId = zoneId;\n    }\n\n    /** Emit a value to all zones for checking */\n    emit(event: ConduitEvent): void {\n        ConduitZone.events.next(event);\n    }\n\n    /** Retrieve a conduit subsject object from the rxjs subject */\n    getConduitSubject(subject: Subject<any>): ConduitSubject | null {\n        return ConduitZone.subjects.find(_subject => _subject.conduit.subject === subject);\n    }\n\n    /** Get all subjects from all zones */\n    getSubjects(): ConduitSubject[] {\n        return ConduitZone.subjects;\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n\n        // find the conduit with the matching subject\n        const conduitSubject = this.getSubjects().find(_conduit => _conduit.conduit.subject === subject);\n\n        // if a match was found update the properties\n        if (conduitSubject) {\n\n            // update each specified property\n            for (const prop in properties) {\n                conduitSubject.conduit[prop] = properties[prop];\n            }\n        }\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n\n        // register the conduit with the zone\n        this.registerConduit({ ...properties, subject });\n    }\n\n    /** Register all conduits in a component */\n    registerConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.registerConduit({ ...conduit, subject: component[conduit.propertyKey] }));\n        }\n    }\n\n    /** Register all conduits in a component */\n    unregisterConduits(component: any): void {\n        if (Array.isArray(component._conduits)) {\n            component._conduits.forEach((conduit: ConduitMetadata) => this.unregisterConduit(conduit));\n        }\n    }\n\n    /** Return the global event stream */\n    getEvents(): Subject<ConduitEvent> {\n        return ConduitZone.events;\n    }\n}\n","import { OnDestroy, OnInit, Optional } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { invokeSuperFunction } from './conduit-utils';\nimport { ConduitZone } from './conduit-zone.service';\nimport { ConduitProperties } from './interfaces/conduit-properties';\n\nexport class ConduitComponent implements OnInit, OnDestroy {\n\n    constructor(@Optional() protected _zone: ConduitZone) {\n        // we want to ensure these functions get called even if a class overrides them\n        invokeSuperFunction(this, 'ngOnInit');\n        invokeSuperFunction(this, 'ngOnDestroy');\n    }\n\n    /** We need to register the conduits with the zone when the component is initialised */\n    ngOnInit(): void {\n        // register the conduit in the zone and ensure it gets the correct instance of the target\n        this._zone.registerConduits(this);\n    }\n\n    /** We need to unregister the conduits when the component is destroyed */\n    ngOnDestroy(): void {\n        this._zone.unregisterConduits(this);\n    }\n\n    /** Alter the properties of a conduit dynamically */\n    setConduitProperties(subject: Subject<any>, properties: Partial<ConduitProperties>): void {\n        this._zone.setConduitProperties(subject, properties);\n    }\n\n    /** Programmatically create a conduit at runtime */\n    createConduit(subject: Subject<any>, properties: ConduitProperties): void {\n        this._zone.createConduit(subject, properties);\n    }\n\n}\n","import { OnInit } from '@angular/core';\nimport { ConduitComponent } from './conduit.component';\n\nexport abstract class ConduitZoneComponent extends ConduitComponent implements OnInit {\n    abstract zoneId: string;\n\n    ngOnInit(): void {\n        this._zone.setZoneId(this.zoneId);\n    }\n}\n","export interface ConduitProperties {\n    id: number | string;\n    acceptsInput?: boolean | string[];\n    producesOutput?: boolean;\n    changeDetection?: (x: any, y: any) => boolean;\n    map?: any;\n}\n\nexport const defaultConduitProps: Partial<ConduitProperties> = {\n    acceptsInput: true,\n    producesOutput: true,\n};\n","import { ConduitMetadata } from './interfaces/conduit-metadata';\nimport { ConduitProperties, defaultConduitProps } from './interfaces/conduit-properties';\n\n/** Expose the property that conduits will be stored in */\nexport const CONDUITS = '_conduits';\n\n/** Create the conduit property decorator */\nexport function Conduit(properties: ConduitProperties | Function): PropertyDecorator {\n    return (target: Object, propertyKey: string) => {\n\n        if (typeof properties === 'function') {\n            properties = properties.call(null);\n        }\n\n        // if the target does not already have a conduit list then create one\n        if (!target.hasOwnProperty(CONDUITS)) {\n            Object.defineProperty(target, CONDUITS, { value: [] });\n        }\n\n        // add the conduit to the list ensuring all required properties are provided\n        target[CONDUITS].push({ ...defaultConduitProps, ...properties, target, propertyKey } as ConduitMetadata);\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { delay, distinctUntilChanged, filter, map } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { DashboardOptions } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\n\n@Injectable()\nexport class DashboardService {\n\n    private _widgetOrigin: { column?: number, row?: number, columnSpan?: number, rowSpan?: number };\n    private _actionWidget: DashboardAction;\n    private _rowHeight: number = 0;\n    private _cache: DashboardCache[];\n    private _mouseEvent: MouseEvent;\n\n    widgets$ = new BehaviorSubject<DashboardWidgetComponent[]>([]);\n    options$ = new BehaviorSubject<DashboardOptions>(defaultOptions);\n    dimensions$ = new BehaviorSubject<DashboardDimensions>({});\n    height$: Observable<number> = this.dimensions$.pipe(delay(0), map((dimensions: DashboardDimensions) => dimensions.height), distinctUntilChanged());\n    placeholder$ = new BehaviorSubject<DashboardPlaceholder>({ visible: false, x: 0, y: 0, width: 0, height: 0 });\n    layout$ = new Subject<DashboardLayoutData[]>();\n    stacked$ = new BehaviorSubject<boolean>(false);\n\n    get options() {\n        return this.options$.getValue();\n    }\n\n    get widgets() {\n        return this.widgets$.getValue();\n    }\n\n    get stacked() {\n        return this.stacked$.getValue();\n    }\n\n    get dimensions() {\n        return this.dimensions$.getValue();\n    }\n\n    get columnWidth() {\n        return this.dimensions.width / this.options.columns;\n    }\n\n    constructor() {\n        this.layout$.subscribe(this.setLayoutData.bind(this));\n        this.stacked$.pipe(filter(stacked => stacked === true)).subscribe(this.updateWhenStacked.bind(this));\n        this.widgets$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n        this.dimensions$.pipe(delay(0)).subscribe(() => this.renderDashboard());\n    }\n\n    /**\n     * Add a widget to the dashboard\n     * @param widget The widget component to add to the dashboard\n     */\n    addWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next([...this.widgets$.getValue(), widget]);\n    }\n\n    /**\n     * Remove a widget from the dashboard\n     * @param widget The widget to remove\n     */\n    removeWidget(widget: DashboardWidgetComponent): void {\n        this.widgets$.next(this.widgets$.getValue().filter(_widget => _widget !== widget));\n    }\n\n    /**\n     * Indicate that the dashboard element has been resized\n     * @param width The width of the dashboard element in px\n     * @param height The height of the dashboard element in px\n     */\n    setDimensions(width: number = this.dimensions.width, height: number = this.dimensions.height): void {\n        if (this.dimensions.width !== width || this.dimensions.height !== height) {\n            this.dimensions$.next({ width: width, height: height });\n        }\n    }\n\n    /**\n     * Produce an object containing all the required layout data.\n     * This can be useful for exporting/saving a layout\n     */\n    getLayoutData(): DashboardLayoutData[] {\n        return this.widgets.map(widget => {\n            return { id: widget.id, col: widget.getColumn(), row: widget.getRow(), colSpan: widget.getColumnSpan(), rowSpan: widget.getRowSpan() };\n        });\n    }\n\n    /**\n     * Position widgets programatically\n     */\n    setLayoutData(widgets: DashboardLayoutData[]): void {\n\n        // iterate through each widget data and find a match\n        widgets.forEach(widget => {\n\n            // find the matching widget\n            const target = this.widgets.find(_widget => _widget.id === widget.id);\n\n            if (target) {\n                target.setColumn(widget.col);\n                target.setRow(widget.row);\n                target.setColumnSpan(widget.colSpan);\n                target.setRowSpan(widget.rowSpan);\n            }\n        });\n    }\n\n    /**\n     * Update the positions and sizes of the widgets\n     */\n    renderDashboard(): void {\n\n        // get the dimensions of the dashboard\n        this._rowHeight = this.options.rowHeight || this.columnWidth;\n\n        // ensure the column width is not below the min widths\n        this.stacked$.next(this.columnWidth < this.options.minWidth);\n\n        // ensure the row height is not below the min widths\n        if (this._rowHeight < this.options.minWidth) {\n            this._rowHeight = this.options.minWidth;\n        }\n\n        this.setDashboardLayout();\n\n        // iterate through each widget and set the size - except the one being resized\n        this.widgets.filter(widget => !this._actionWidget || widget !== this._actionWidget.widget)\n            .forEach(widget => widget.render());\n    }\n\n    /**\n     * Determine where widgets should be positioned based on their positions, width and the size of the container\n     */\n    setDashboardLayout(): void {\n\n        // find any widgets that do not currently have a position set\n        this.widgets.filter(widget => widget.getColumn() === undefined || widget.getRow() === undefined)\n            .forEach(widget => this.setWidgetPosition(widget));\n\n        this.setDashboardHeight();\n    }\n\n    updateWhenStacked(): void {\n\n        // iterate through each widget set it's stacked state and\n        this.getWidgetsByOrder().forEach((widget, idx) => {\n            widget.setColumn(0);\n            widget.setRow(idx);\n        });\n\n    }\n\n    getWidgetsByOrder(): DashboardWidgetComponent[] {\n        return this.widgets.sort((w1, w2) => {\n\n            const w1Position = w1.getColumn() * w1.getRow();\n            const w2Position = w2.getColumn() * w2.getRow();\n\n            if (w1Position < w2Position) {\n                return -1;\n            }\n\n            if (w1Position > w2Position) {\n                return 1;\n            }\n\n            return 0;\n        });\n    }\n\n    /**\n     * Find a position that a widget can fit in the dashboard\n     * @param widget The widget to try and position\n     */\n    setWidgetPosition(widget: DashboardWidgetComponent): void {\n\n        // find a position for the widget\n        let position = 0;\n        let success = false;\n\n        // repeat until a space is found\n        while (!success) {\n\n            // get a position to try\n            const column = position % this.options.columns;\n            const row = Math.floor(position / this.options.columns);\n\n            // check the current position\n            if (this.getPositionAvailable(column, row, widget.getColumnSpan(), widget.getRowSpan())) {\n                success = true;\n                widget.setColumn(column);\n                widget.setRow(row);\n                return;\n            }\n\n            if (column === 0 && widget.colSpan > this.options.columns) {\n                throw new Error('Dashboard widgets have a colSpan greater than the max number of dashboard columns!');\n            }\n\n            position++;\n        }\n    }\n\n    /**\n     * Check if a position in the dashboard is vacant or not\n     */\n    getPositionAvailable(column: number, row: number, columnSpan: number, rowSpan: number, ignoreWidget?: DashboardWidgetComponent): boolean {\n\n        // get a list of grid spaces that are populated\n        const spaces = this.getOccupiedSpaces();\n\n        // check if the block would still be in bounds\n        if (column + columnSpan > this.options.columns) {\n            return false;\n        }\n\n        // check each required position\n        for (let x = column; x < column + columnSpan; x++) {\n            for (let y = row; y < row + rowSpan; y++) {\n                if (spaces.find(block => block.column === x && block.row === y && block.widget !== ignoreWidget)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    getOccupiedSpaces(): DashboardSpace[] {\n\n        // find all spaces that are currently occupied\n        return this.widgets.filter(widget => widget.getColumn() !== undefined && widget.getRow() !== undefined)\n            .reduce((value, widget) => {\n\n                this.forEachBlock(widget, (column, row) => value.push({ widget: widget, column: column, row: row }));\n\n                return value;\n            }, []);\n    }\n\n    /**\n     * Begin resizing a widget\n     * @param action The the widget to resize\n     */\n    onResizeStart(action: DashboardAction): void {\n\n        // store the mouse event\n        this._mouseEvent = action.event;\n        this._actionWidget = action;\n\n        // bring the widget to the font\n        this.bringToFront(action.widget);\n    }\n\n    onResizeDrag(action: DashboardAction): void {\n\n        const mousePosX = this._mouseEvent.pageX - pageXOffset;\n        const mousePosY = this._mouseEvent.pageY - pageYOffset;\n\n        // if there was no movement then do nothing\n        if (action.event.x === mousePosX && action.event.y === mousePosY) {\n            return;\n        }\n\n        // update the stored mouse event\n        this._mouseEvent = action.event;\n\n        // get handle for direction\n        const { handle } = action;\n\n        // get the bounds of the handle\n        const bounds = handle.getBoundingClientRect();\n\n        // get the center of the handle\n        const centerX = bounds.left + (bounds.width / 2);\n        const centerY = bounds.top + (bounds.height / 2);\n\n        // get the current mouse position\n        const mouseX = mousePosX - centerX;\n        const mouseY = mousePosY - centerY;\n\n        // store the new proposed dimensions for the widget\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x,\n            y: action.widget.y,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        // update widget based on the handle being dragged\n        switch (action.direction) {\n\n            case ActionDirection.Right:\n                dimensions.width += mouseX;\n                break;\n\n            case ActionDirection.Left:\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                break;\n\n            case ActionDirection.Bottom:\n                dimensions.height += mouseY;\n                break;\n\n            case ActionDirection.Top:\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            // Support resizing on multiple axis simultaneously\n            case ActionDirection.TopLeft:\n\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.TopRight:\n                dimensions.width += mouseX;\n                dimensions.y += mouseY;\n                dimensions.height -= mouseY;\n\n                if (dimensions.height < this.options.minHeight) {\n                    const difference = this.options.minHeight - dimensions.height;\n                    dimensions.y -= difference;\n                    dimensions.height += difference;\n                }\n                break;\n\n            case ActionDirection.BottomLeft:\n                dimensions.height += mouseY;\n                dimensions.x += mouseX;\n                dimensions.width -= mouseX;\n\n                if (dimensions.width < this.options.minWidth) {\n                    const difference = this.options.minWidth - dimensions.width;\n                    dimensions.x -= difference;\n                    dimensions.width += difference;\n                }\n                break;\n\n            case ActionDirection.BottomRight:\n                dimensions.height += mouseY;\n                dimensions.width += mouseX;\n                break;\n        }\n\n        const currentWidth = action.widget.x + action.widget.width;\n        const currentHeight = action.widget.y + action.widget.height;\n\n        // ensure values are within the dashboard bounds\n        if (dimensions.x < 0) {\n            dimensions.x = 0;\n            dimensions.width = currentWidth;\n        }\n\n        if (dimensions.y < 0) {\n            dimensions.y = 0;\n            dimensions.height = currentHeight;\n        }\n\n        if ((dimensions.x + dimensions.width) > this.dimensions.width) {\n            dimensions.width = this.dimensions.width - dimensions.x;\n        }\n\n        // if the proposed width is smaller than allowed then reset width to minimum and ignore x changes\n        if (dimensions.width < this.options.minWidth) {\n            dimensions.x = action.widget.x;\n            dimensions.width = this.options.minWidth;\n        }\n\n        // if the proposed height is smaller than allowed then reset height to minimum and ignore y changes\n        if (dimensions.height < this.options.minHeight) {\n            dimensions.y = action.widget.y;\n            dimensions.height = this.options.minHeight;\n        }\n\n        // update the widget actual values\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.updateWidgetPositions(action.widget);\n    }\n\n    onResizeEnd(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // commit resize changes\n        this.commitWidgetChanges();\n\n        // hide placeholder\n        placeholder.visible = false;\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n\n        this._actionWidget = null;\n        this._mouseEvent = null;\n\n        // ensure any vacant upper spaces are filled where required\n        this.shiftWidgetsUp();\n\n        // update dashboard height\n        this.setDashboardHeight();\n\n        // emit information about the layout\n        this.layout$.next(this.getLayoutData());\n    }\n\n    onDragStart(action: DashboardAction): void {\n        this.onResizeStart(action);\n\n        // store the starting placeholder position\n        this.setWidgetOrigin();\n\n        this.cacheWidgets();\n    }\n\n    onDragEnd(): void {\n        this.onResizeEnd();\n\n        this._widgetOrigin = {};\n    }\n\n    onDrag(action: DashboardAction): void {\n\n        // if there was no movement then do nothing\n        if (action.event.pageX === this._mouseEvent.pageX && action.event.pageY === this._mouseEvent.pageY) {\n            return;\n        }\n\n        // get the current mouse position\n        const mouseX = action.event.pageX - this._mouseEvent.pageX;\n        const mouseY = action.event.pageY - this._mouseEvent.pageY;\n\n        // store the latest event\n        this._mouseEvent = action.event;\n\n        const dimensions: DashboardWidgetDimensions = {\n            x: action.widget.x + mouseX,\n            y: action.widget.y + mouseY,\n            width: action.widget.width,\n            height: action.widget.height\n        };\n\n        this.restoreWidgets(true);\n\n        // update widget position\n        action.widget.setBounds(dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // update placeholder position and value\n        this.setPlaceholderBounds(true, dimensions.x, dimensions.y, dimensions.width, dimensions.height);\n\n        // show the widget positions if the current positions and sizes were to persist\n        this.shiftWidgets();\n\n        this.setDashboardHeight();\n    }\n\n    getRowHeight(): number {\n        return this._rowHeight;\n    }\n\n    cacheWidgets(): void {\n        this._cache = this.widgets.map(widget => ({ id: widget.id, column: widget.getColumn(), row: widget.getRow() }));\n    }\n\n    restoreWidgets(ignoreActionWidget: boolean = false): void {\n        this._cache.filter(widget => !ignoreActionWidget || widget.id !== this._actionWidget.widget.id).forEach(widget => {\n\n            const match = this.widgets.find(wgt => wgt.id === widget.id);\n\n            if (match) {\n                match.setColumn(widget.column);\n                match.setRow(widget.row);\n            }\n        });\n    }\n\n    /**\n     * When dragging any widgets that need to be moved should be moved to an appropriate position\n     */\n    shiftWidgets(): void {\n\n        let widgetsToMove: DashboardWidgetComponent[] = [];\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if there are any widgets under the placeholder\n        for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n            for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n\n                // store reference to any widgets that need moved\n                this.getOccupiedSpaces()\n                    .filter(space => space.column === column && space.row === row && space.widget !== this._actionWidget.widget)\n                    .forEach(space => widgetsToMove.push(space.widget));\n            }\n        }\n\n        // remove any duplicates\n        widgetsToMove = widgetsToMove.filter((widget, idx, array) => array.indexOf(widget) === idx);\n\n        // if no widgets need moved then we can stop here\n        if (widgetsToMove.length === 0) {\n            return;\n        }\n\n        // create a duplicate we can use to keep track of which have been moved\n        const unmovedWidgets = widgetsToMove.slice();\n\n        // attempt to move any widgets to the previous widget position\n        widgetsToMove.forEach(widget => {\n\n            // get a grid off all occupied spaces - taking into account the placeholder and ignoring widgets that need moved\n            const grid = this.getOccupiedSpaces().filter(space => !unmovedWidgets.find(wgt => wgt === space.widget));\n\n            // iterate each free block\n            for (let row = this._widgetOrigin.row; row < this._widgetOrigin.row + this._widgetOrigin.rowSpan; row++) {\n                for (let column = this._widgetOrigin.column; column < this._widgetOrigin.column + this._widgetOrigin.columnSpan; column++) {\n\n                    // determine if the block can fit in this space\n                    let requiredSpaces = this.getRequiredSpacesFromPoint(widget, column, row);\n\n                    // check if widget would fit in space\n                    let available = requiredSpaces.every(space => {\n                        return !grid.find(gridSpace => gridSpace.column === space.column && gridSpace.row === space.row) && space.column < this.getColumnCount();\n                    });\n\n                    if (available) {\n                        widget.setColumn(column);\n                        widget.setRow(row);\n                        unmovedWidgets.splice(unmovedWidgets.findIndex(wgt => wgt === widget), 1);\n                        return;\n                    }\n                }\n            }\n\n            // if we get to here then we can't simply swap the positions - next try moving right\n            if (this.canWidgetMoveRight(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Right);\n                return;\n            }\n\n            // next try moving left\n            if (this.canWidgetMoveLeft(widget, true)) {\n\n                // after the shift check if placeholder position is still valid\n                this.validatePlaceholderPosition(ActionDirection.Left);\n                return;\n            }\n\n            // determine the distance that the widget needs to be moved down\n            let distance = (this._actionWidget.widget.getRow() - widget.getRow()) + this._actionWidget.widget.getRowSpan();\n\n            // as a last resort move the widget downwards\n            this.moveWidgetDown(widget, distance);\n        });\n    }\n\n    /**\n     * After shifts have taken place we should verify the place holder position is still valid\n     * @param shiftDirection - the position widgets were shifted\n     */\n    validatePlaceholderPosition(shiftDirection: ActionDirection) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check if the placeholder is over a widget\n        if (this.getWidgetsAtPosition(placeholder.column, placeholder.row, true).length > 0) {\n\n            // move the placeholder the opposite direction\n            switch (shiftDirection) {\n\n                case ActionDirection.Left:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x + this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n\n                case ActionDirection.Right:\n                    this.setPlaceholderBounds(placeholder.visible, placeholder.x - this.getColumnWidth(), placeholder.y, placeholder.width, placeholder.height);\n                    break;\n            }\n\n            // validate this new position again\n            this.validatePlaceholderPosition(shiftDirection);\n        }\n    }\n\n    /**\n     * Determine if a widget can be moved left - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveLeft(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the action widget or occupies the first column\n        if (widget === this._actionWidget.widget || widget.getColumn() === 0) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column - widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveLeft(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveLeft(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() - 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Determine if a widget can be moved right - or if it can move the widgets to the right to make space for the widget\n     */\n    canWidgetMoveRight(widget: DashboardWidgetComponent, performMove: boolean = false): boolean {\n\n        // check if the widget is the dragging widget or the widget occupies the final column\n        if (widget === this._actionWidget.widget || widget.getColumn() + widget.getColumnSpan() === this.options.columns) {\n            return false;\n        }\n\n        // find the positions required\n        const targetSpaces = this.getOccupiedSpaces().filter(space => space.widget === widget).map(space => {\n            return { column: space.column + widget.getColumnSpan(), row: space.row, widget: space.widget };\n        });\n\n        // check if there are widget in the required positions and if so, can they move right?\n        const moveable = targetSpaces.every(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).every(wgt => this.canWidgetMoveRight(wgt)));\n\n        if (performMove && moveable) {\n\n            // move all widgets to the right\n            targetSpaces.forEach(space => this.getWidgetsAtPosition(space.column, space.row).filter(wgt => wgt !== space.widget).forEach(wgt => this.canWidgetMoveRight(wgt, true)));\n\n            // move current widget to the right\n            widget.setColumn(widget.getColumn() + 1);\n        }\n\n        return moveable;\n    }\n\n    /**\n     * Store the initial position of the widget being dragged\n     */\n    setWidgetOrigin(): void {\n        this._widgetOrigin = {\n            column: this._actionWidget.widget.getColumn(),\n            row: this._actionWidget.widget.getRow(),\n            columnSpan: this._actionWidget.widget.getColumnSpan(),\n            rowSpan: this._actionWidget.widget.getRowSpan()\n        };\n    }\n\n    /**\n     * Calculate all the required positions is a widget was to be positioned at a particular point\n     */\n    getRequiredSpacesFromPoint(widget: DashboardWidgetComponent, column: number, row: number): DashboardSpace[] {\n        const spaces: DashboardSpace[] = [];\n\n        for (let y = row; y < row + widget.getRowSpan(); y++) {\n            for (let x = column; x < column + widget.getColumnSpan(); x++) {\n                spaces.push({ column: x, row: y, widget: widget });\n            }\n        }\n\n        return spaces;\n    }\n\n    /**\n     * Position widgets based on the position of the placeholder - this is temporary until confirmed\n     */\n    updateWidgetPositions(widget: DashboardWidgetComponent) {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check all spaces the placeholder will occupy and move any widget currently in them down\n        for (let column = placeholder.column; column < placeholder.column + placeholder.columnSpan; column++) {\n            for (let row = placeholder.row; row < placeholder.row + placeholder.rowSpan; row++) {\n\n                this.getWidgetsAtPosition(column, row, true)\n                    .filter(wgt => wgt !== widget)\n                    .forEach(wgt => this.moveWidgetDown(wgt));\n            }\n        }\n\n        // update the height of the dashboard\n        this.setDashboardHeight();\n\n        // if we arent dragging the top handle then fill spaces\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Determine if a widget is occupying a specific row and column\n     * @param column The columns to check if occupied\n     * @param row The row to check if occupied\n     * @param ignoreResizing Whether or not to ignore the widget currently being resized\n     */\n    getWidgetsAtPosition(column: number, row: number, ignoreResizing: boolean = false): DashboardWidgetComponent[] {\n        return this.getOccupiedSpaces()\n            .filter(space => space.column === column && space.row === row)\n            .filter(space => space.widget !== this._actionWidget.widget || !ignoreResizing)\n            .map(space => space.widget);\n    }\n\n    /**\n     * Update the placeholder visibility, position and size\n     */\n    setPlaceholderBounds(visible: boolean, x: number, y: number, width: number, height: number): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        const rounding = this._actionWidget.direction === ActionDirection.Left ||\n            this._actionWidget.direction === ActionDirection.Top ? Rounding.RoundDownBelowHalf : Rounding.RoundUpOverHalf;\n\n        placeholder.visible = visible;\n\n        placeholder.column = this.getPlaceholderColumn(x, width);\n        placeholder.row = this.getPlaceholderRow(y, height);\n        placeholder.columnSpan = this.getPlaceholderColumnSpan(width);\n        placeholder.rowSpan = this.getPlaceholderRowSpan(height);\n\n        // calculate the maximum number of rows\n        const rowCount = this.widgets.filter(widget => widget !== this._actionWidget.widget)\n            .reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n\n        // constrain maximum placeholder row\n        placeholder.row = Math.min(placeholder.row, rowCount);\n\n        placeholder.x = (placeholder.column * this.getColumnWidth()) + this.options.padding;\n        placeholder.y = (placeholder.row * this._rowHeight) + this.options.padding;\n        placeholder.width = (placeholder.columnSpan * this.getColumnWidth()) - (this.options.padding * 2);\n        placeholder.height = (placeholder.rowSpan * this._rowHeight) - (this.options.padding * 2);\n\n        // set the values of the widget to match the values of the placeholder - however do not render the changes\n        this._actionWidget.widget.setColumn(placeholder.column, false);\n        this._actionWidget.widget.setRow(placeholder.row, false);\n        this._actionWidget.widget.setColumnSpan(placeholder.columnSpan, false);\n        this._actionWidget.widget.setRowSpan(placeholder.rowSpan, false);\n\n        // update the placeholder\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the placeholder column position\n     */\n    getPlaceholderColumn(x: number, width: number): number {\n\n        const column = this.getColumnFromPx(x, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const columnSpan = Math.floor(width / this.getColumnWidth());\n        const upperLimit = this.getColumnCount() - columnSpan;\n\n        // if we arent dragging left then just return the column\n        if (this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(Math.min(column, upperLimit), 0);\n        }\n\n        // get any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (x <= 0 || overflow === 0 || columnSpan === 0 || overflow > (this.getColumnWidth() / 2)) ?\n            Math.max(Math.min(column, upperLimit), 0) :\n            Math.max(Math.min(column + 1, upperLimit), 0);\n    }\n\n    /**\n     * Get the column span of the placeholder\n     */\n    getPlaceholderColumnSpan(width: number): number {\n\n        const columnSpan = this.getColumnFromPx(width);\n\n        // if we arent dragging right or left then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Right &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.BottomRight &&\n            this._actionWidget.direction !== ActionDirection.Left &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft) {\n            return Math.max(columnSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = width % this.getColumnWidth();\n\n        return (columnSpan > 0 && overflow > (this.getColumnWidth() / 2)) ? Math.max(columnSpan + 1, 1) : Math.max(columnSpan, 1);\n    }\n\n    /**\n     * Get the row position of the placeholder\n     */\n    getPlaceholderRow(y: number, height: number): number {\n\n        const row = this.getRowFromPx(y, this._actionWidget.direction === ActionDirection.Move ? Rounding.RoundUpOverHalf : Rounding.RoundDown);\n        const rowSpan = Math.ceil(height / this._rowHeight);\n\n        // if we arent dragging up then just return the row\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight) {\n            return Math.max(row, 0);\n        }\n\n        // get any overflow\n        let overflow = height < this._rowHeight ? 0 : height % this._rowHeight;\n\n        return (y <= 0 || rowSpan === 0 || overflow === 0 || overflow > (this._rowHeight / 2)) ? Math.max(row, 0) : Math.max(row + 1, 0);\n    }\n\n    /**\n     * Get the row span of the placeholder\n     */\n    getPlaceholderRowSpan(height: number): number {\n\n        const rowSpan = this.getRowFromPx(height);\n\n        // if we arent dragging up or down then just return the column span\n        if (this._actionWidget.direction !== ActionDirection.Top &&\n            this._actionWidget.direction !== ActionDirection.TopLeft &&\n            this._actionWidget.direction !== ActionDirection.TopRight &&\n            this._actionWidget.direction !== ActionDirection.Bottom &&\n            this._actionWidget.direction !== ActionDirection.BottomLeft &&\n            this._actionWidget.direction !== ActionDirection.BottomRight) {\n            return Math.max(rowSpan, 1);\n        }\n\n        // get the current column span and any overflow\n        const overflow = height % this._rowHeight;\n\n        return (overflow > (this._rowHeight / 2)) ? Math.max(rowSpan + 1, 1) : Math.max(rowSpan, 1);\n    }\n\n    getColumnFromPx(x: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const column = Math.floor(x / Math.floor(this.getColumnWidth()));\n        const overflow = (x % Math.floor(this.getColumnWidth()));\n        const half = this.getColumnWidth() / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return column;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? column : column + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? column + 1 : column;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? column + 1 : column;\n        }\n\n    }\n\n    getRowFromPx(y: number, rounding: Rounding = Rounding.RoundDown): number {\n\n        const row = Math.floor(y / Math.floor(this._rowHeight));\n        const overflow = (y % Math.floor(this._rowHeight));\n        const half = this._rowHeight / 2;\n\n        switch (rounding) {\n\n            case Rounding.RoundDown:\n                return row;\n\n            case Rounding.RoundDownBelowHalf:\n                return overflow < half ? row : row + 1;\n\n            case Rounding.RoundUpOverHalf:\n                return overflow > half ? row + 1 : row;\n\n            case Rounding.RoundUp:\n                return overflow > 0 ? row + 1 : row;\n        }\n    }\n\n    commitWidgetChanges(): void {\n\n        const placeholder = this.placeholder$.getValue();\n\n        // check that we have all the values we need\n        if (placeholder.column === undefined || placeholder.row === undefined ||\n            placeholder.columnSpan === undefined || placeholder.rowSpan === undefined) {\n            return;\n        }\n\n        if (this._actionWidget) {\n            this._actionWidget.widget.setColumn(placeholder.column);\n            this._actionWidget.widget.setRow(placeholder.row);\n            this._actionWidget.widget.setColumnSpan(placeholder.columnSpan);\n            this._actionWidget.widget.setRowSpan(placeholder.rowSpan);\n        }\n\n        // reset all placeholder values\n        placeholder.column = undefined;\n        placeholder.row = undefined;\n        placeholder.columnSpan = undefined;\n        placeholder.rowSpan = undefined;\n\n        // emit the new placeholder values\n        this.placeholder$.next(placeholder);\n    }\n\n    /**\n     * Get the current column width\n     */\n    getColumnWidth(): number {\n        return Math.floor(this.columnWidth);\n    }\n\n    /**\n     * Calculate the number of rows populated with widgets\n     */\n    getRowCount(): number {\n        return this.widgets.reduce((previous, widget) => Math.max(widget.getRow() + widget.getRowSpan(), previous), 0);\n    }\n\n    /**\n     * Set the height of the dashboard container element\n     */\n    setDashboardHeight(): void {\n\n        // size the dashboard container to ensure all rows fit\n        let rowCount = this.getRowCount();\n\n        // if we should show an empty row increment the row count by 1\n        if (this.options.emptyRow) {\n            rowCount++;\n        }\n\n        this.setDimensions(undefined, rowCount * this._rowHeight);\n    }\n\n    /**\n     * Orders the z-index of all widgets to move the active one to the front\n     * @param widget The widget that should be brought to the front\n     */\n    bringToFront(widget: DashboardWidgetComponent): void {\n        this.widgets.forEach(_widget => _widget === widget ? _widget.bringToFront() : _widget.sendToBack());\n    }\n\n    /**\n     * Move a widget down - if widgets are in the position below, then move them down further\n     * @param widget The widget to move downwards\n     */\n    moveWidgetDown(widget: DashboardWidgetComponent, distance: number = 1): void {\n\n        // move the widget down one position\n        widget.setRow(widget.getRow() + distance);\n\n        // check every space the widget occupies for collisions\n        this.forEachBlock(widget, (column, row) =>\n            this.getWidgetsAtPosition(column, row, true)\n                .filter(wgt => wgt !== widget)\n                .forEach(wgt => this.moveWidgetDown(wgt, distance)));\n    }\n\n    /**\n     * Widgets should not be allowed to have a vacant space above them - if there is one they should move upwards to fill it\n     */\n    shiftWidgetsUp(): void {\n\n        // check whether or not changes have been made - if so we need to repeat until stable\n        let stable = true;\n\n        // iterate each widget and\n        this.widgets.forEach(widget => {\n\n            // if widget is already on the top row then do nothing\n            if (widget.getRow() === 0) {\n                return;\n            }\n\n            // if we are currently dragging and this is the dragging widget then skip\n            if (this._actionWidget && this._actionWidget.widget === widget) {\n                return;\n            }\n\n            if (this.getPositionAvailable(widget.getColumn(), widget.getRow() - 1, widget.getColumnSpan(), 1)) {\n                widget.setRow(widget.getRow() - 1);\n                stable = false;\n            }\n        });\n\n        // if changes occurred then we should repeat the process\n        if (!stable) {\n            this.shiftWidgetsUp();\n        }\n    }\n\n    /**\n     * Iterate over each space a widget occupied\n     * @param widget The widget to determine spaces\n     * @param callback The function to be called for each space, should expect a column and row argument witht he context being the widget\n     */\n    forEachBlock(widget: DashboardWidgetComponent, callback: (column: number, row: number) => void): void {\n        for (let row = widget.getRow(); row < widget.getRow() + widget.getRowSpan(); row++) {\n            for (let column = widget.getColumn(); column < widget.getColumn() + widget.getColumnSpan(); column++) {\n                callback.call(widget, column, row);\n            }\n        }\n    }\n\n    /**\n     * Returns the number of columns available\n     */\n    getColumnCount(): number {\n        return this.stacked ? 1 : this.options.columns;\n    }\n}\n\nexport const defaultOptions: DashboardOptions = { columns: 5, padding: 5, minWidth: 100, minHeight: 100, emptyRow: true };\n\nexport interface DashboardDimensions {\n    width?: number;\n    height?: number;\n}\n\nexport interface DashboardWidgetDimensions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n}\n\nexport interface DashboardAction {\n    widget: DashboardWidgetComponent;\n    direction: ActionDirection;\n    event: MouseEvent;\n    handle?: HTMLElement;\n}\n\nexport interface DashboardSpace {\n    widget: DashboardWidgetComponent;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardPlaceholder {\n    visible: boolean;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    column?: number;\n    row?: number;\n    columnSpan?: number;\n    rowSpan?: number;\n}\n\nexport interface DashboardCache {\n    id: string;\n    column: number;\n    row: number;\n}\n\nexport interface DashboardLayoutData {\n    id: string;\n    col: number;\n    row: number;\n    colSpan: number;\n    rowSpan: number;\n}\n\nexport enum ActionDirection {\n    Top = 0,\n    TopRight = 1,\n    Right = 2,\n    BottomRight = 3,\n    Bottom = 4,\n    BottomLeft = 5,\n    Left = 6,\n    TopLeft = 7,\n    Move = 8\n}\n\nexport enum Rounding {\n    RoundDown,\n    RoundDownBelowHalf,\n    RoundUp,\n    RoundUpOverHalf\n}","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { ResizeDimensions } from '../../directives/resize/resize.service';\nimport { DashboardLayoutData, DashboardService, defaultOptions } from './dashboard.service';\n\n@Component({\n    selector: 'ux-dashboard',\n    template: `<div #dashboard class=\"dashboard-container\" [style.height.px]=\"dashboardService.height$ | async\">\n    <div (uxResize)=\"onResize($event)\" [throttle]=\"16\" class=\"dashboard\">\n        <ng-content></ng-content>\n    </div>\n    \n    <div class=\"position-indicator\" *ngIf=\"(dashboardService.placeholder$ | async).visible\" \n        [style.left.px]=\"(dashboardService.placeholder$ | async).x\" \n        [style.top.px]=\"(dashboardService.placeholder$ | async).y\" \n        [style.width.px]=\"(dashboardService.placeholder$ | async).width\"\n        [style.height.px]=\"(dashboardService.placeholder$ | async).height\"></div>\n</div>`,\n    providers: [DashboardService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DashboardComponent implements AfterViewInit {\n\n    @Input() set layout(layout: DashboardLayoutData[]) {\n        if (layout) {\n            this.dashboardService.layout$.next(layout);\n        }\n    }\n\n    @Input() set options(options: DashboardOptions) {\n        this.dashboardService.options$.next({ ...defaultOptions, ...options });\n    }\n\n    @Output() layoutChange = new EventEmitter<DashboardLayoutData[]>();\n\n    @ViewChild('dashboard') dashboardElement: ElementRef;\n\n    constructor(public dashboardService: DashboardService) {\n        dashboardService.layout$.subscribe(layout => this.layoutChange.emit(layout));\n    }\n\n    /**\n     * Set the initial dimensions\n     */\n    ngAfterViewInit(): void {\n        this.dashboardService.setDimensions(this.dashboardElement.nativeElement.offsetWidth, this.dashboardElement.nativeElement.offsetHeight);\n    }\n\n    onResize(event: ResizeDimensions): void {\n        this.dashboardService.setDimensions(event.width, event.height);\n    }\n}\n\nexport interface DashboardOptions {\n    columns?: number;\n    padding?: number;\n    minWidth?: number;\n    minHeight?: number;\n    rowHeight?: number;\n    emptyRow?: boolean;\n}","import { Component, Input, OnInit, OnDestroy, HostBinding, AfterViewInit } from '@angular/core';\nimport { DashboardService, ActionDirection } from '../dashboard.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-dashboard-widget',\n    template: `<div class=\"widget-content widget-col-span-{{ getColumnSpan() }} widget-row-span-{{ getRowSpan() }}\">\n    <ng-content></ng-content>\n</div>\n\n<div uxDrag #handleTop class=\"resizer-handle handle-top\" \n    (dragstart)=\"dragstart(handleTop, $event, 0)\"\n    (drag)=\"drag(handleTop, $event, 0)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [hidden]=\"!resizable\">\n</div>\n\n<div uxDrag #handleTopRight class=\"resizer-handle handle-top-right\" \n    (dragstart)=\"dragstart(handleTopRight, $event, 1)\"\n    (drag)=\"drag(handleTopRight, $event, 1)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleRight class=\"resizer-handle handle-right\" \n    (dragstart)=\"dragstart(handleRight, $event, 2)\"\n    (drag)=\"drag(handleRight, $event, 2)\"\n    (dragend)=\"dragend()\"\n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable || (dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleBottomRight class=\"resizer-handle handle-bottom-right\" \n    (dragstart)=\"dragstart(handleBottomRight, $event, 3)\"\n    (drag)=\"drag(handleBottomRight, $event, 3)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [style.right.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleBottom class=\"resizer-handle handle-bottom\" \n    (dragstart)=\"dragstart(handleBottom, $event, 4)\"\n    (drag)=\"drag(handleBottom, $event, 4)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [hidden]=\"!resizable\">\n</div>\n\n<div uxDrag #handleBottomLeft class=\"resizer-handle handle-bottom-left\" \n    (dragstart)=\"dragstart(handleBottomLeft, $event, 5)\"\n    (drag)=\"drag(handleBottomLeft, $event, 5)\"\n    (dragend)=\"dragend()\"\n    [style.bottom.px]=\"padding\" \n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleLeft class=\"resizer-handle handle-left\" \n    (dragstart)=\"dragstart(handleLeft, $event, 6)\"\n    (drag)=\"drag(handleLeft, $event, 6)\"\n    (dragend)=\"dragend()\"\n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable || (dashboardService.stacked$ | async)\">\n</div>\n\n<div uxDrag #handleTopLeft class=\"resizer-handle handle-top-left\" \n    (dragstart)=\"dragstart(handleTopLeft, $event, 7)\"\n    (drag)=\"drag(handleTopLeft, $event, 7)\"\n    (dragend)=\"dragend()\"\n    [style.top.px]=\"padding\" \n    [style.left.px]=\"padding\" \n    [hidden]=\"!resizable && !(dashboardService.stacked$ | async)\">\n</div>`\n})\nexport class DashboardWidgetComponent implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() id: string;\n    @Input() col: number;\n    @Input() row: number;\n    @Input() colSpan: number = 1;\n    @Input() rowSpan: number = 1;\n    @Input() resizable: boolean = false;\n\n    @HostBinding('style.left.px') x: number = 0;\n    @HostBinding('style.top.px') y: number = 0;\n    @HostBinding('style.width.px') width: number = 100;\n    @HostBinding('style.height.px') height: number = 100;\n    @HostBinding('style.padding.px') padding: number = 0;\n    @HostBinding('style.z-index') zIndex: number = 0;\n\n    private _column: StackableValue = { regular: undefined, stacked: undefined };\n    private _row: StackableValue = { regular: undefined, stacked: undefined };\n    private _columnSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _rowSpan: StackableValue = { regular: 1, stacked: 1 };\n    private _subscription: Subscription;\n\n    constructor(public dashboardService: DashboardService) {\n        this._subscription = dashboardService.options$.subscribe(() => this.update());\n    }\n\n    ngOnInit(): void {\n\n        this._columnSpan.regular = this.colSpan;\n        this._rowSpan.regular = this.rowSpan;\n\n        if (!this.id) {\n            console.warn('Dashboard Widget is missing an ID.');\n\n            // set random id - keeps things working but prevents exporting of positions\n            this.id = Math.floor(Math.random() * 100000).toString();\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // add the widget to the dashboard\n        this.dashboardService.addWidget(this);\n\n        // apply the current options\n        this.update();\n    }\n\n    /**\n     * If component is removed, then unregister it from the service\n     */\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n        this.dashboardService.removeWidget(this);\n    }\n\n    /**\n     * Apply the current dashboard options\n     */\n    update(): void {\n\n        // get the current options at the time \n        const { padding, columns } = this.dashboardService.options;\n\n        this.padding = padding;\n        this._columnSpan.stacked = columns;\n    }\n\n    /**\n     * Set the actual position and size values\n     */\n    render(): void {\n        this.x = this.getColumn() * this.dashboardService.getColumnWidth();\n        this.y = this.getRow() * this.dashboardService.getRowHeight();\n        this.width = this.getColumnSpan() * this.dashboardService.getColumnWidth();\n        this.height = this.getRowSpan() * this.dashboardService.getRowHeight();\n    }\n\n    getColumn(): number {\n        return this.getStackableValue(this._column);\n    }\n\n    getRow(): number {\n        return this.getStackableValue(this._row);\n    }\n\n    setColumn(column: number, render: boolean = true): void {\n        this.setStackableValue(this._column, column);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRow(row: number, render: boolean = true): void {\n        this.setStackableValue(this._row, row);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    getColumnSpan(): number {\n        return this.getStackableValue(this._columnSpan);\n    }\n\n    getRowSpan(): number {\n        return this.getStackableValue(this._rowSpan);\n    }\n\n    setColumnSpan(columnSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._columnSpan, columnSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    setRowSpan(rowSpan: number, render: boolean = true): void {\n        this.setStackableValue(this._rowSpan, rowSpan);\n\n        if (render) {\n            this.render();\n        }\n    }\n\n    bringToFront(): void {\n        this.zIndex = 1;\n    }\n\n    sendToBack(): void {\n        this.zIndex = 0;\n    }\n\n    setBounds(x: number, y: number, width: number, height: number): void {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n\n    dragstart(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeStart({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    drag(handle: HTMLElement, event: MouseEvent, direction: ActionDirection): void {\n        this.dashboardService.onResizeDrag({ widget: this, direction: direction, event: event, handle: handle });\n    }\n\n    dragend(): void {\n        this.dashboardService.onResizeEnd();\n    }\n\n    /**\n     * Allows automatic setting of stackable value\n     * @param property The current StackableValue object\n     * @param value The value to set in the appropriate field\n     */\n    private setStackableValue(property: StackableValue, value: number): void {\n\n        if (this.dashboardService.stacked) {\n            property.stacked = value;\n        } else {\n            property.regular = value;\n        }\n    }\n\n    /**\n     * Return the appropriate value from a stackable value\n     * @param property The Stackable value object\n     */\n    private getStackableValue(property: StackableValue): number {\n        return this.dashboardService.stacked ? property.stacked : property.regular;\n    }\n}\n\nexport interface StackableValue {\n    regular: number;\n    stacked: number;\n}","import { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, Output, Renderer2 } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxDrag]'\n})\nexport class DragDirective implements OnDestroy {\n\n    /** Detemine if we should show a clone when dragging */\n    @Input() clone: boolean = false;\n\n    /** Emit an event when dragging starts */\n    @Output() dragstart = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the mouse moves while dragging */\n    @Output() drag = new EventEmitter<MouseEvent>();\n\n    /** Emit an event when the dragging finishes */\n    @Output() dragend = new EventEmitter<void>();\n\n    /** Store the element we have cloned */\n    private _clone: Element;\n\n    /** Store the mouse offset for the cloned element position */\n    private _offset: { x: number, y: number };\n\n    /** Create an observable from the mouse down event */\n    private _mousedown$ = fromEvent<MouseEvent>(this._elementRef.nativeElement, 'mousedown');\n\n    /** Create an observable from the mouse move event */\n    private _mousemove$ = fromEvent<MouseEvent>(document, 'mousemove');\n\n    /** Create an observable from the mouse up event */\n    private _mouseup$ = fromEvent<MouseEvent>(document, 'mouseup');\n\n    /** Use an observable to unsubscribe from all subscriptions */\n    protected _onDestroy = new Subject<void>();\n\n    constructor(private _elementRef: ElementRef, private _ngZone: NgZone, private _renderer: Renderer2) {\n        this._mousedown$.pipe(takeUntil(this._onDestroy)).subscribe(this.dragStart.bind(this));\n    }\n\n    /** Emit events and create clone when drag starts */\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this.clone) {\n            // clone the node\n            this.cloneNode(event);\n        }\n\n        // apply a class to the element being dragged\n        this._renderer.addClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        // emit the drag start event\n        this._ngZone.run(() => this.dragstart.emit(event));\n\n        this._mousemove$.pipe(takeUntil(this._mouseup$), takeUntil(this._onDestroy))\n            .subscribe(this.dragMove.bind(this), null, this.dragEnd.bind(this));\n    }\n\n    /** Emit event and update clone position when dragging moves */\n    dragMove(event: MouseEvent): void {\n        event.preventDefault();\n\n        if (this._clone) {\n            this.updateNodePosition(event);\n        }\n\n        // emit the drag start event\n        this._ngZone.run(() => this.drag.emit(event));\n    }\n\n    /** Emit event and destroy clone when dragging ends */\n    dragEnd(): void {\n        // if there was a clone, remove it\n        if (this._clone) {\n            this._renderer.removeChild(document.body, this._clone);\n            this._clone = null;\n        }\n\n        // remove the dragging class\n        this._renderer.removeClass(this._elementRef.nativeElement, 'ux-drag-dragging');\n\n        this._ngZone.run(() => this.dragend.emit());\n    }\n\n    /** Create an exact clone of an element */\n    cloneNode(event: MouseEvent): void {\n\n        // duplicate the node\n        this._clone = this._elementRef.nativeElement.cloneNode(true);\n\n        // store the position within the draggable element\n        const { top, left } = this._elementRef.nativeElement.getBoundingClientRect();\n        this._offset = { x: event.clientX - left, y: event.clientY - top };\n\n        // inline all styles so it looks identical regardless of its position in the DOM\n        this.inlineStyles(this._elementRef.nativeElement, this._clone);\n\n        // ensure we can easily position the node an it is above all other elements\n        this._renderer.setAttribute(this._clone, 'aria-hidden', 'true');\n        this._renderer.setStyle(this._clone, 'position', 'absolute');\n        this._renderer.setStyle(this._clone, 'z-index', '99999');\n\n        // apply a class to allow custom styling\n        this._renderer.addClass(this._clone, 'ux-drag-dragging-clone');\n\n        // insert the cloned element\n        this._renderer.appendChild(document.body, this._clone);\n\n        // set the cloned element initial position\n        this.updateNodePosition(event);\n    }\n\n    /** Position the clone relative to the mouse */\n    updateNodePosition(event: MouseEvent): void {\n        this._renderer.setStyle(this._clone, 'left', (event.pageX - this._offset.x) + 'px');\n        this._renderer.setStyle(this._clone, 'top', (event.pageY - this._offset.y) + 'px');\n    }\n\n    /** Inline all styles to ensure styling is consistent regardless of its position in the dom */\n    inlineStyles(source: Element, target: Element): void {\n        // get all the computed styles from the source element\n        const styles = getComputedStyle(source);\n\n        // inline every specified style\n        for (let idx = 0; idx < styles.length; idx++) {\n            const style = styles.item(idx);\n\n            if (style !== undefined) {\n                this._renderer.setStyle(target, styles[idx], styles[style]);\n            }\n        }\n\n        // ensure we dont capture any move events\n        this._renderer.setStyle(target, 'pointer-events', 'none');\n\n        // do the same for all the child elements\n        for (let idx = 0; idx < source.children.length; idx++) {\n            this.inlineStyles(source.children[idx], target.children[idx]);\n        }\n    }\n\n    /** Unsubscribe from all subscriptions */\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}","import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { DragDirective } from '../../../directives/drag/drag.directive';\nimport { ActionDirection, DashboardService } from '../dashboard.service';\nimport { DashboardWidgetComponent } from '../widget/dashboard-widget.component';\n\n@Directive({\n    selector: '[uxDashboardWidgetDragHandle], [ux-dashboard-widget-drag-handle]'\n})\nexport class DashboardDragHandleDirective extends DragDirective {\n\n    constructor(widget: DashboardWidgetComponent, dashboardService: DashboardService, elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n        super(elementRef, ngZone, renderer);\n\n        this.dragstart.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDragStart({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.drag.pipe(takeUntil(this._onDestroy))\n            .subscribe((event: MouseEvent) => dashboardService.onDrag({ widget: widget, direction: ActionDirection.Move, event: event }));\n\n        this.dragend.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => dashboardService.onDragEnd());\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DragDirective } from './drag.directive';\n\n@NgModule({\n    exports: [DragDirective],\n    declarations: [DragDirective]\n})\nexport class DragModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardWidgetComponent } from './widget/dashboard-widget.component';\nimport { DashboardService } from './dashboard.service';\nimport { DashboardDragHandleDirective } from './drag-handle/drag-handle.directive';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { DragModule } from '../../directives/drag/index';\n\nconst DECLARATIONS: any[] = [\n    DashboardComponent,\n    DashboardWidgetComponent,\n    DashboardDragHandleDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        DragModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [DashboardService],\n})\nexport class DashboardModule { }\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SPIN_BUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SpinButtonComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-spin-button',\n    template: `<button class=\"spin-button\"\n        *ngIf=\"spinners\"\n        tabindex=\"-1\"\n        [disabled]=\"disabled\"\n        [attr.aria-label]=\"incrementAriaLabel\"\n        [attr.aria-disabled]=\"disabled\"\n        (click)=\"triggerIncrement()\">\n\n  <span class=\"hpe-icon hpe-up\"></span>\n</button>\n\n<input [type]=\"type\"\n       role=\"spinbutton\"\n       [min]=\"min\"\n       [max]=\"max\"\n       [tabindex]=\"0\"\n       class=\"form-control\"\n       [placeholder]=\"placeholder\"\n       [readOnly]=\"readOnly\"\n       [disabled]=\"disabled\"\n       [attr.aria-label]=\"inputAriaLabel\"\n       [attr.aria-disabled]=\"disabled\"\n       [attr.aria-valuemin]=\"min\"\n       [attr.aria-valuenow]=\"value\"\n       [attr.aria-valuemax]=\"max\"\n       [attr.aria-readonly]=\"readOnly\"\n       [ngModel]=\"value\"\n       (ngModelChange)=\"valueChange.emit($event)\"\n       (wheel)=\"scroll($event)\"\n       (keydown.arrowup)=\"arrowkeys ? triggerIncrement() : null; $event.preventDefault()\"\n       (keydown.arrowdown)=\"arrowkeys ? triggerDecrement() : null; $event.preventDefault()\">\n\n<button class=\"spin-button\"\n        *ngIf=\"spinners\"\n        tabindex=\"-1\"\n        [disabled]=\"disabled\"\n        [attr.aria-label]=\"decrementAriaLabel\"\n        [attr.aria-disabled]=\"disabled\"\n        (click)=\"triggerDecrement()\">\n\n  <span class=\"hpe-icon hpe-down\"></span>\n</button>`,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [SPIN_BUTTON_VALUE_ACCESSOR]\n})\nexport class SpinButtonComponent implements ControlValueAccessor {\n\n    @Input() set value(value: any) {\n        this._value = value;\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get value(): any {\n        return this._value;\n    }\n\n    @Input() type: string = 'text';\n    @Input() min: number;\n    @Input() max: number;\n    @Input() placeholder: string = '';\n    @Input() disabled: boolean = false;\n    @Input() spinners: boolean = true;\n    @Input() readOnly: boolean = true;\n    @Input() scrolling: boolean = true;\n    @Input() arrowkeys: boolean = true;\n\n    @Input() incrementAriaLabel: string;\n    @Input() inputAriaLabel: string;\n    @Input() decrementAriaLabel: string;\n\n    @Output() valueChange = new EventEmitter<any>();\n\n    @Output() increment = new EventEmitter<void>();\n    @Output() decrement = new EventEmitter<void>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    private _value: any;\n\n    scroll(event: WheelEvent): void {\n\n        if (!this.scrolling) {\n            return;\n        }\n\n        if (event.deltaY > 0) {\n            this.triggerDecrement();\n        } else {\n            this.triggerIncrement();\n        }\n\n        event.preventDefault();\n    }\n\n    triggerIncrement(): void {\n        if (!this.disabled) {\n            this.increment.emit();\n        }\n    }\n\n    triggerDecrement(): void {\n        if (!this.disabled) {\n            this.decrement.emit();\n        }\n    }\n\n    writeValue(value: any): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: any) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonComponent } from './spin-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [SpinButtonComponent],\n    declarations: [SpinButtonComponent]\n})\nexport class SpinButtonModule { }","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timeFormat'\n})\nexport class TimeFormatPipe implements PipeTransform {\n\n  transform(value: number): string | number {\n    return value < 10 ? '0' + value : value;\n  }\n\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\nexport const TIME_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TimePickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-time-picker',\n    template: `<div class=\"time-picker\" aria-label=\"Time picker\">\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showHours\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            placeholder=\"HH\"\n            [min]=\"0\"\n            [max]=\"showMeridian ? 12 : 23\"\n            [value]=\"hour$ | async | timeFormat\"\n            (valueChange)=\"hourChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"hour\"\n            incrementAriaLabel=\"Increment the hour\"\n            decrementAriaLabel=\"Decrement the hour\"\n            (increment)=\"incrementHour()\"\n            (decrement)=\"decrementHour()\">\n        </ux-spin-button>\n\n    </div>\n\n    <div class=\"time-picker-separator\" *ngIf=\"showMinutes\">:</div>\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showMinutes\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            placeholder=\"MM\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [value]=\"minute$ | async | timeFormat\"\n            (valueChange)=\"minuteChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"minute\"\n            incrementAriaLabel=\"Increment the minute\"\n            decrementAriaLabel=\"Decrement the minute\"\n            (increment)=\"incrementMinute()\"\n            (decrement)=\"decrementMinute()\">\n        </ux-spin-button>\n\n    </div>\n\n    <div class=\"time-picker-separator\" *ngIf=\"showSeconds\">:</div>\n\n    <div class=\"time-picker-column\" [class.has-error]=\"!(valid$ | async)\" *ngIf=\"showSeconds\">\n\n        <ux-spin-button\n            type=\"number\"\n            class=\"time-spinner\"\n            type=\"number\"\n            placeholder=\"SS\"\n            [min]=\"0\"\n            [max]=\"59\"\n            [value]=\"second$ | async | timeFormat\"\n            (valueChange)=\"secondChange($event)\"\n            [spinners]=\"showSpinners\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readOnly\"\n            inputAriaLabel=\"seconds\"\n            incrementAriaLabel=\"Increment the second\"\n            decrementAriaLabel=\"Decrement the second\"\n            (increment)=\"incrementSecond()\"\n            (decrement)=\"decrementSecond()\">\n        </ux-spin-button>\n\n    </div>\n</div>\n\n<div class=\"time-picker-meridian\" *ngIf=\"showMeridian\">\n\n    <div class=\"btn-group\" role=\"radiogroup\">\n\n        <button class=\"btn button-toggle-accent\"\n                *ngFor=\"let meridian of meridians\"\n                role=\"radio\"\n                tabindex=\"0\"\n                [disabled]=\"disabled\"\n                (click)=\"selectMeridian(meridian)\"\n                [class.active]=\"meridian === (meridian$ | async)\"\n                [attr.aria-label]=\"meridian\"\n                [attr.aria-checked]=\"meridian === (meridian$ | async)\"\n                [attr.aria-disabled]=\"disabled\">\n                {{ meridian }}\n        </button>\n\n    </div>\n</div>`,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TIME_PICKER_VALUE_ACCESSOR],\n    host: {\n        'aria-label': 'Time Picker'\n    }\n})\nexport class TimePickerComponent implements ControlValueAccessor, OnDestroy {\n\n    @Input() arrowkeys: boolean = true;\n    @Input() mousewheel: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() readOnly: boolean = false;\n\n    @Input() showMeridian: boolean = false;\n    @Input() showHours: boolean = true;\n    @Input() showMinutes: boolean = true;\n    @Input() showSeconds: boolean = false;\n    @Input() showSpinners: boolean = true;\n\n    @Input() hourStep: number = 1;\n    @Input() minuteStep: number = 1;\n    @Input() secondStep: number = 1;\n\n    @Input() min: Date;\n    @Input() max: Date;\n    @Input() meridians: string[] = ['AM', 'PM'];\n\n    @Input() set value(value: Date) {\n        this.value$.next(new Date(value));\n        this.valueChange.emit(this.value$.value);\n\n        this.onChangeCallback(this.value$.value);\n        this.onTouchedCallback();\n    }\n\n    get value(): Date {\n        return new Date(this.value$.value);\n    }\n\n    @Output() valueChange = new EventEmitter<Date>();\n    @Output() isValid = new EventEmitter<boolean>();\n\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: Date) => void = () => { };\n\n    value$ = new BehaviorSubject<Date>(new Date());\n\n    // create observables that are derived from the latest value\n    hour$: Observable<number> = this.value$.pipe(map(date => date.getHours()), map(hour => this.showMeridian ? this.getMeridianTime(hour) : hour));\n    minute$: Observable<number> = this.value$.pipe(map(date => date.getMinutes()));\n    second$: Observable<number> = this.value$.pipe(map(date => date.getSeconds()));\n    meridian$: Observable<string> = this.value$.pipe(map(date => date.getHours() < 12 ? this.meridians[0] : this.meridians[1]));\n    valid$: Observable<boolean> = this.value$.pipe(map(date => this.checkValidity(date)));\n\n    private _meridian: string = this.meridians[0];\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.valid$.pipe(distinctUntilChanged()).subscribe(valid => this.isValid.emit(valid));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    writeValue(value: Date): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (_: Date) => void): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    getMeridianTime(hour: number): number {\n        return hour > 12 ? hour - 12 : hour;\n    }\n\n    setHour(hour: number): void {\n        const date = this.value;\n        date.setHours(hour ? hour : 0);\n\n        this.value = date;\n    }\n\n    setMinute(minute: number): void {\n        const date = this.value;\n        date.setMinutes(minute ? minute : 0);\n\n        this.value = date;\n    }\n\n    setSeconds(seconds: number): void {\n        const date = this.value;\n        date.setSeconds(seconds ? seconds : 0);\n\n        this.value = date;\n    }\n\n    incrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() + this.hourStep);\n    }\n\n    decrementHour(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setHour(this.value.getHours() - this.hourStep);\n    }\n\n    incrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() + this.minuteStep);\n    }\n\n    decrementMinute(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setMinute(this.value.getMinutes() - this.minuteStep);\n    }\n\n    incrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() + this.secondStep);\n    }\n\n    decrementSecond(arrowkey: boolean = false): void {\n        if (this.disabled || arrowkey && !this.arrowkeys) {\n            return;\n        }\n\n        this.setSeconds(this.value.getSeconds() - this.secondStep);\n    }\n\n    selectMeridian(meridian: string): void {\n        this._meridian = meridian;\n\n        // get the current time\n        const hour = this.value.getHours();\n\n        // if we have selected AM\n        if (meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                this.setHour(hour - 12);\n            }\n        }\n\n        // if we have selected PM\n        if (meridian === this.meridians[1]) {\n            if (hour < 12) {\n                this.setHour(hour + 12);\n            }\n        }\n    }\n\n    checkValidity(date: Date): boolean {\n        let valid = true;\n\n        if (this.min && date.getTime() <= this.min.getTime()) {\n            valid = false;\n        }\n\n        if (this.max && date.getTime() >= this.max.getTime()) {\n            valid = false;\n        }\n\n        return valid;\n    }\n\n    hourChange(value: string): void {\n\n        // convert the string to a number\n        let hour = parseInt(value);\n        let currentHour = this.value.getHours();\n\n        // if the value hasn't changed, do nothing\n        if (hour === currentHour) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(hour)) {\n            if (hour < 0) {\n                hour = 0;\n            }\n\n            if (hour > (this.showMeridian ? 12 : 23)) {\n                hour = this.showMeridian ? 12 : 23;\n            }\n        }\n\n        hour = isNaN(hour) ? currentHour : hour;\n\n        // if the number is invalid then restore it to the previous value\n        if (this._meridian === this.meridians[0]) {\n            if (hour >= 12) {\n                hour -= 12;\n            }\n        }\n\n        // if we have selected PM\n        if (this._meridian === this.meridians[1]) {\n            if (hour < 12) {\n                hour += 12;\n            }\n        }\n\n        this.setHour(hour);\n    }\n\n    minuteChange(value: string): void {\n\n        // convert the string to a number\n        let minute = parseInt(value);\n        let currentMinute = this.value.getMinutes();\n\n        // if the value hasn't changed, do nothing\n        if (minute === currentMinute) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(minute)) {\n            if (minute < 0) {\n                minute = 59;\n            }\n\n            if (minute > 59) {\n                minute = 0;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setMinute(isNaN(minute) ? currentMinute : minute);\n    }\n\n    secondChange(value: string): void {\n        // convert the string to a number\n        let second = parseInt(value);\n        let currentSecond = this.value.getSeconds();\n\n        // if the value hasn't changed, do nothing\n        if (second === currentSecond) {\n            return;\n        }\n\n        // ensure the hours is valid\n        if (!isNaN(second)) {\n            if (second < 0) {\n                second = 0;\n            }\n\n            if (second > 59) {\n                second = 59;\n            }\n        }\n\n        // if the number is invalid then restore it to the previous value\n        this.setSeconds(isNaN(second) ? currentSecond : second);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimeFormatPipe } from './time-format.pipe';\nimport { TimePickerComponent } from './time-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        SpinButtonModule\n    ],\n    exports: [TimePickerComponent],\n    declarations: [TimePickerComponent, TimeFormatPipe],\n})\nexport class TimePickerModule { }","import { DateTimePickerTimezone } from './date-time-picker.service';\n\n\n/**\n * Convert a single dimension array to a double dimension array\n * @param items the single dimension array to convert\n * @param columns the number of items each array should have\n */\nexport function gridify<T>(items: T[], columns: number): T[][] {\n\n    // create a copy of array so not to effect the original\n    items = items.slice(0);\n\n    const grid: T[][] = [];\n\n    while (items.length) {\n        grid.push(items.splice(0, columns));\n    }\n\n    return grid;\n}\n\n/**\n * Create an array of numbers between two limits\n * @param start the lower limit\n * @param end the upper limit\n */\nexport function range(start: number, end: number): number[] {\n    const list: number[] = [];\n\n    for (let idx = start; idx <= end; idx++) {\n        list.push(idx);\n    }\n\n    return list;\n}\n\n/**\n * Create an array of dates between two points\n * @param start the date to start the array\n * @param end the date to end the array\n */\nexport function dateRange(start: Date, end: Date): Date[] {\n\n    let dates: Date[] = [];\n\n    // loop through all the days between the date range\n    while (start <= end) {\n\n        // add the date to the array\n        dates.push(new Date(start));\n\n        // move to the next day\n        start.setDate(start.getDate() + 1);\n    }\n\n    return dates;\n}\n\n/**\n * Compare two dates to see if they are on the same day\n * @param day1 the first date to compare\n * @param day2 the second date to compare\n */\nexport function compareDays(day1: Date, day2: Date): boolean {\n    return day1.getDate() === day2.getDate() &&\n        day1.getMonth() === day2.getMonth() &&\n        day1.getFullYear() === day2.getFullYear();\n}\n\n/**\n * Date comparison for use primarily with distinctUntilChanged\n */\nexport function dateComparator(dateOne: Date, dateTwo: Date): boolean {\n    return dateOne.getTime() === dateTwo.getTime();\n}\n\n/**\n * Timezone comparison for use primarily with distinctUntilChanged\n */\nexport function timezoneComparator(zoneOne: DateTimePickerTimezone, zoneTwo: DateTimePickerTimezone): boolean {\n    return zoneOne.name === zoneTwo.name && zoneOne.offset === zoneTwo.offset;\n}\n\n/**\n * Export an array of all the available months\n */\nexport const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nexport const monthsShort = months.map(month => month.substring(0, 3));\n\n/**\n * Export an array of all the available days of the week\n */\nexport const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\nexport const weekdaysShort = weekdays.map(weekday => weekday.substring(0, 3));","/**\n * Add a config service to allow an application\n * to customize the date time picker default settings\n * across the entire application\n */\n\nimport { Injectable } from '@angular/core';\nimport { weekdaysShort } from './date-time-picker.utils';\nimport { DateTimePickerTimezone } from './date-time-picker.service';\n\n@Injectable()\nexport class DateTimePickerConfig {\n\n    showDate: boolean = true;\n    showTime: boolean = true;\n    showTimezone: boolean = true;\n    showSeconds: boolean = false;\n    showMeridian: boolean = true;\n    showSpinners: boolean = true;\n    weekdays: string[] = weekdaysShort;\n    nowBtnText: string = 'Today';\n\n    timezones: DateTimePickerTimezone[] = [\n        { name: 'GMT-11', offset: 660 },\n        { name: 'GMT-10', offset: 600 },\n        { name: 'GMT-9', offset: 540 },\n        { name: 'GMT-8', offset: 480 },\n        { name: 'GMT-7', offset: 420 },\n        { name: 'GMT-6', offset: 360 },\n        { name: 'GMT-5', offset: 300 },\n        { name: 'GMT-4', offset: 240 },\n        { name: 'GMT-3', offset: 180 },\n        { name: 'GMT-2', offset: 120 },\n        { name: 'GMT-1', offset: 60 },\n        { name: 'GMT', offset: 0 },\n        { name: 'GMT+1', offset: -60 },\n        { name: 'GMT+2', offset: -120 },\n        { name: 'GMT+3', offset: -180 },\n        { name: 'GMT+4', offset: -240 },\n        { name: 'GMT+5', offset: -300 },\n        { name: 'GMT+6', offset: -360 },\n        { name: 'GMT+7', offset: -420 },\n        { name: 'GMT+8', offset: -480 },\n        { name: 'GMT+9', offset: -540 },\n        { name: 'GMT+10', offset: -600 },\n        { name: 'GMT+11', offset: -660 },\n        { name: 'GMT+12', offset: -720 }\n    ];\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { dateComparator } from './date-time-picker.utils';\n\n@Injectable()\nexport class DateTimePickerService {\n\n    mode$: BehaviorSubject<DatePickerMode> = new BehaviorSubject<DatePickerMode>(DatePickerMode.Day);\n    date$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n    timezone$ = new BehaviorSubject<DateTimePickerTimezone>(this.getCurrentTimezone());\n    selected$: BehaviorSubject<Date> = new BehaviorSubject<Date>(new Date());\n\n    // the month and year to display in the viewport\n    month$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getMonth());\n    year$: BehaviorSubject<number> = new BehaviorSubject<number>(new Date().getFullYear());\n\n    showDate$ = new BehaviorSubject<boolean>(this._config.showDate);\n    showTime$ = new BehaviorSubject<boolean>(this._config.showTime);\n    showTimezone$ = new BehaviorSubject<boolean>(this._config.showTimezone);\n    showSeconds$ = new BehaviorSubject<boolean>(this._config.showSeconds);\n    showMeridian$ = new BehaviorSubject<boolean>(this._config.showMeridian);\n    showSpinners$ = new BehaviorSubject<boolean>(this._config.showSpinners);\n    weekdays$ = new BehaviorSubject<string[]>(this._config.weekdays);\n    nowBtnText$ = new BehaviorSubject<string>(this._config.nowBtnText);\n    timezones$ = new BehaviorSubject<DateTimePickerTimezone[]>(this._config.timezones);\n\n    header$ = new BehaviorSubject<string>(null);\n    headerEvent$ = new Subject<DatePickerHeaderEvent>();\n    modeDirection: ModeDirection = ModeDirection.None;\n\n    private _subscription: Subscription;\n\n    constructor(private _config: DateTimePickerConfig) {\n\n        // when the active date changes set the currently selected date\n        this._subscription = this.selected$.pipe(distinctUntilChanged(dateComparator)).subscribe(date => {\n\n            // the month and year displayed in the viewport should reflect the newly selected items\n            this.setViewportMonth(date.getMonth());\n            this.setViewportYear(date.getFullYear());\n\n            // emit the new date to the component host\n            this.date$.next(date);\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setViewportMonth(month: number): void {\n        if (month < 0) {\n            this.month$.next(11);\n            this.year$.next(this.year$.value - 1);\n        } else if (month > 11) {\n            this.month$.next(0);\n            this.year$.next(this.year$.value + 1);\n        } else {\n            this.month$.next(month);\n        }\n    }\n\n    setViewportYear(year: number): void {\n        this.year$.next(year);\n    }\n\n    setDate(day: number, month: number, year: number): void {\n        const date = new Date(this.selected$.value);\n\n        date.setDate(day);\n        date.setMonth(month);\n        date.setFullYear(year);\n\n        this.selected$.next(date);\n    }\n\n    setDateToNow(): void {\n        this.selected$.next(new Date());\n    }\n\n    setViewportMode(mode: DatePickerMode): void {\n        this.mode$.next(mode);\n    }\n\n    goToChildMode(): void {\n        this.modeDirection = ModeDirection.Descend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Year:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Day);\n        }\n    }\n\n    goToParentMode(): void {\n        this.modeDirection = ModeDirection.Ascend;\n\n        switch (this.mode$.value) {\n\n            case DatePickerMode.Day:\n                return this.setViewportMode(DatePickerMode.Month);\n\n            case DatePickerMode.Month:\n                return this.setViewportMode(DatePickerMode.Year);\n        }\n    }\n\n    goToNext(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Next);\n    }\n\n    goToPrevious(): void {\n        this.headerEvent$.next(DatePickerHeaderEvent.Previous);\n    }\n\n    setHeader(header: string): void {\n        this.header$.next(header);\n    }\n\n    getCurrentTimezone(): DateTimePickerTimezone {\n        const offset = new Date().getTimezoneOffset();\n        return this._config.timezones.find(timezone => timezone.offset === offset);\n    }\n\n    setTimezone(timezone: DateTimePickerTimezone): void {\n        this.timezone$.next(timezone);\n    }\n}\n\nexport enum DatePickerMode {\n    Day,\n    Month,\n    Year\n}\n\nexport enum ModeDirection {\n    None,\n    Ascend,\n    Descend\n}\n\nexport enum DatePickerHeaderEvent {\n    Previous,\n    Next\n}\n\nexport interface DateTimePickerTimezone {\n    name: string;\n    offset: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output, ChangeDetectionStrategy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService, DateTimePickerTimezone } from './date-time-picker.service';\nimport { dateComparator, timezoneComparator } from './date-time-picker.utils';\n\n@Component({\n  selector: 'ux-date-time-picker',\n  template: `<div class=\"calendar-container\">\n\n  <ux-date-time-picker-header></ux-date-time-picker-header>\n\n  <ng-container *ngIf=\"datepicker.showDate$ | async\" [ngSwitch]=\"datepicker.mode$ | async\">\n\n      <!-- Display days in the current month -->\n      <ux-date-time-picker-day-view *ngSwitchCase=\"DatePickerMode.Day\"></ux-date-time-picker-day-view>\n\n      <!-- Display the months in the current year -->\n      <ux-date-time-picker-month-view *ngSwitchCase=\"DatePickerMode.Month\"></ux-date-time-picker-month-view>\n\n      <!-- Display a decade -->\n      <ux-date-time-picker-year-view *ngSwitchCase=\"DatePickerMode.Year\"></ux-date-time-picker-year-view>\n\n  </ng-container>\n\n  <!-- Display a Time Picker -->\n  <ux-date-time-picker-time-view *ngIf=\"datepicker.showTime$ | async\"></ux-date-time-picker-time-view>\n\n</div>\n\n<button class=\"now-button\" aria-label=\"Set date to now\" (click)=\"setToNow()\">{{ datepicker.nowBtnText$ | async }}</button>`,\n  providers: [DateTimePickerService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DateTimePickerComponent implements OnDestroy {\n\n  private _timezone: DateTimePickerTimezone;\n\n  @Input() set showDate(value: boolean) {\n    this.datepicker.showDate$.next(value);\n  }\n\n  @Input() set showTime(value: boolean) {\n    this.datepicker.showTime$.next(value);\n  }\n\n  @Input() set showTimezone(value: boolean) {\n    this.datepicker.showTimezone$.next(value);\n  }\n\n  @Input() set showSeconds(value: boolean) {\n    this.datepicker.showSeconds$.next(value);\n  }\n\n  @Input() set showMeridian(value: boolean) {\n    this.datepicker.showMeridian$.next(value);\n  }\n\n  @Input() set showSpinners(value: boolean) {\n    this.datepicker.showSpinners$.next(value);\n  }\n\n  @Input() set weekdays(value: string[]) {\n    this.datepicker.weekdays$.next(value);\n  }\n\n  @Input() set nowBtnText(value: string) {\n    this.datepicker.nowBtnText$.next(value);\n  }\n\n  @Input() set timezones(value: DateTimePickerTimezone[]) {\n    this.datepicker.timezones$.next(value);\n  }\n\n\n  @Output() dateChange: EventEmitter<Date> = new EventEmitter<Date>();\n  @Output() timezoneChange: EventEmitter<DateTimePickerTimezone> = new EventEmitter<DateTimePickerTimezone>();\n\n  @Input()\n  set date(value: Date) {\n    if (!dateComparator(value, this.datepicker.selected$.value)) {\n      this.datepicker.selected$.next(new Date(value));\n    }\n  }\n\n  @Input()\n  set timezone(value: DateTimePickerTimezone) {\n    this.datepicker.timezone$.next(value);\n  }\n\n  // expose enum to view\n  DatePickerMode = DatePickerMode;\n\n  private _subscription = new Subscription();\n\n  constructor(public datepicker: DateTimePickerService) {\n    const valueChange = datepicker.selected$.pipe(distinctUntilChanged(dateComparator))\n      .subscribe(date => this.dateChange.emit(date));\n\n    const timezoneChange = datepicker.timezone$.pipe(distinctUntilChanged(timezoneComparator))\n      .subscribe((timezone: DateTimePickerTimezone) => this.timezoneChange.emit(timezone));\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Change the date to the current date and time\n   */\n  setToNow(): void {\n\n    // set the date to the current moment\n    this.datepicker.setDateToNow();\n  }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { combineLatest } from 'rxjs/observable/combineLatest';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { compareDays, dateRange, gridify, months } from '../date-time-picker.utils';\n\n@Injectable()\nexport class DayViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<DayViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedDayItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = combineLatest(_datepicker.month$, _datepicker.year$)\n            .subscribe(([month, year]) => this.createDayGrid(month, year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(day: number, month: number, year: number): void {\n        this.focused$.next({ day: day, month: month, year: year });\n\n        // update the date picker to show the required month and year\n        this._datepicker.setViewportMonth(month);\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createDayGrid(month: number, year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(months[month] + ' ' + year);\n\n        // find the lower and upper boundaries\n        const start = new Date(year, month, 1);\n        const end = new Date(year, month + 1, 0);\n\n        // we always want to show from the sunday - this may include showing some dates from the previous month\n        start.setDate(start.getDate() - start.getDay());\n\n        // we also want to make sure that the range ends on a saturday\n        end.setDate(end.getDate() + (6 - end.getDay()));\n\n        // create an array of all the days to display\n        const dates: DayViewItem[] = dateRange(start, end).map(date => ({\n            day: date.getDate(),\n            month: date.getMonth(),\n            year: date.getFullYear(),\n            date: date,\n            isToday: this.isToday(date),\n            isActive: this.isActive(date),\n            isCurrentMonth: date.getMonth() === month\n        }));\n\n        // turn the dates into a grid\n        const items: DayViewItem[][] = gridify(dates, 7);\n\n        this.grid$.next(items);\n\n        // if no item has yet been focused then focus the first day of the month\n        if ((this._datepicker.modeDirection === ModeDirection.None || this._datepicker.modeDirection === ModeDirection.Descend) && this.focused$.value === null) {\n\n            // check if the selected item is visible\n            const selectedDay = dates.find(day => day.isCurrentMonth && day.isActive);\n\n            if (selectedDay) {\n                this.setFocus(selectedDay.day, selectedDay.month, selectedDay.year);\n            } else {\n\n                // find the first day of the month\n                const first = dates.find(date => date.day === 1);\n    \n                // focus the date\n                this.setFocus(first.day, first.month, first.year);\n            }\n\n        }\n    }\n\n    /**\n   * Determine whether or not a specific date is today\n   * @param date The date to check\n   */\n    private isToday(date: Date): boolean {\n        return compareDays(new Date(), date);\n    }\n\n    /**\n     * Determines whether or not a specific date is the selected one\n     * @param date the date to check\n     */\n    private isActive(date: Date): boolean {\n        return compareDays(this._datepicker.selected$.value, date);\n    }\n}\n\nexport interface DayViewItem {\n    day: number;\n    month: number;\n    year: number;\n    date: Date;\n    isToday: boolean;\n    isActive: boolean;\n    isCurrentMonth: boolean;\n}\n\nexport interface FocusedDayItem {\n    day: number;\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { DayViewItem, DayViewService } from './day-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-day-view',\n  template: `<table class=\"calendar\">\n    <thead>\n        <tr>\n            <th *ngFor=\"let day of datePicker.weekdays$ | async\" class=\"weekday\" [attr.aria-label]=\"day\">{{ day }}</th>\n        </tr>\n    </thead>\n\n    <tbody role=\"grid\">\n        <tr role=\"row\" *ngFor=\"let row of dayService.grid$ | async; trackBy: trackWeekByFn\">\n\n            <td *ngFor=\"let item of row; trackBy: trackDayByFn\" class=\"date-cell\" role=\"gridcell\">\n\n                <button class=\"date-button\"\n                        [focusIf]=\"(dayService.focused$ | async)?.day === item.day && (dayService.focused$ | async)?.month === item.month && (dayService.focused$ | async)?.year === item.year\"\n                        [attr.aria-label]=\"item.date | date\"\n                        [attr.aria-selected]=\"item.isActive\"\n                        [attr.aria-hidden]=\"!item.isCurrentMonth\"\n                        [class.current]=\"item.isToday\"\n                        [class.active]=\"item.isActive\"\n                        [class.preview]=\"!item.isCurrentMonth\"\n                        [tabindex]=\"getTabbable(item) ? 0 : -1\"\n                        (click)=\"select(item.date); $event.stopPropagation()\"\n                        (keydown.ArrowLeft)=\"focusDate(item, -1); $event.preventDefault()\"\n                        (keydown.ArrowRight)=\"focusDate(item, 1); $event.preventDefault()\"\n                        (keydown.ArrowUp)=\"focusDate(item, -7); $event.preventDefault()\"\n                        (keydown.ArrowDown)=\"focusDate(item, 7); $event.preventDefault()\">\n\n                    {{ item.date.getDate() }}\n                </button>\n\n            </td>\n        </tr>\n    </tbody>\n</table>`,\n  providers: [DayViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DayViewComponent implements OnDestroy {\n\n  private _subscription: Subscription;\n\n  constructor(public datePicker: DateTimePickerService, public dayService: DayViewService) {\n    this._subscription = datePicker.headerEvent$\n      .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n  }\n\n  ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n\n  /**\n   * Navigate to the previous page of dates\n   */\n  previous(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value - 1);\n  }\n\n  /**\n   * Navigate to the next page of dates\n   */\n  next(): void {\n    this.datePicker.setViewportMonth(this.datePicker.month$.value + 1);\n  }\n\n  /**\n   * Select a particular date\n   * @param date the date to select\n   */\n  select(date: Date): void {\n    // update the current date object\n    this.datePicker.setDate(date.getDate(), date.getMonth(), date.getFullYear());\n\n    // focus the newly selected date\n    this.dayService.setFocus(date.getDate(), date.getMonth(), date.getFullYear());\n  }\n\n  trackWeekByFn(index: number): number {\n    return index;\n  }\n\n  trackDayByFn(index: number, item: DayViewItem): string {\n    return `${ item.day } ${ item.month } ${ item.year }`;\n  }\n\n  focusDate(item: DayViewItem, dayOffset: number): void {\n\n    // determine the date of the day\n    const target = new Date(item.date.setDate(item.date.getDate() + dayOffset));\n\n    // identify which date should be focused\n    this.dayService.setFocus(target.getDate(), target.getMonth(), target.getFullYear());\n  }\n\n  getTabbable(item: DayViewItem): boolean {\n    const focused = this.dayService.focused$.value;\n    const grid = this.dayService.grid$.value;\n\n    // if there is a focused month check if this is it\n    if (focused) {\n\n      // check if the focused day is visible\n      const isFocusedDayVisible = !!grid.find(row => !!row.find(_item => _item.day === focused.day && _item.month === focused.month && _item.year === focused.year));\n\n      if (isFocusedDayVisible) {\n        return focused.day === item.day && focused.month === item.month && focused.year === item.year;\n      }\n    }\n\n    // if there is no focusable day then check if there is a selected day\n    const isSelectedDayVisible = !!grid.find(row => !!row.find(day => day.isActive));\n\n    if (isSelectedDayVisible) {\n        return item.isActive;\n    }\n\n    // otherwise make the first day tabbable\n    return item.day === 1;\n  }\n\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { map } from 'rxjs/operators';\nimport { DatePickerMode, DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-header',\n    template: `<header class=\"header\">\n\n  <button class=\"header-navigation\"\n          (click)=\"previous(); $event.stopPropagation()\"\n          [attr.aria-label]=\"previousAria$ | async\"\n          tabindex=\"0\">\n\n    <i class=\"hpe-icon hpe-previous\"></i>\n  </button>\n\n  <button class=\"header-title\"\n          [attr.aria-label]=\"headerAria$ | async\"\n          [class.active]=\"canAscend$ | async\"\n          (click)=\"ascend(); $event.stopPropagation()\"\n          [tabindex]=\"(canAscend$ | async) ? 0 : -1\">\n       {{ datepicker.header$ | async }}\n  </button>\n\n  <button class=\"header-navigation\"\n          (click)=\"next(); $event.stopPropagation()\"\n          [attr.aria-label]=\"nextAria$ | async\"\n          tabindex=\"0\">\n\n    <i class=\"hpe-icon hpe-next\"></i>\n  </button>\n</header>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeaderComponent {\n\n    canAscend$: Observable<boolean> = this.datepicker.mode$.pipe(map(mode => mode !== DatePickerMode.Year));\n    \n    mode$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Day';\n            case DatePickerMode.Month:\n                return 'Month';\n            case DatePickerMode.Year:\n                return 'Year';\n        }\n    }));\n\n    headerAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Switch to show months in the year';\n            case DatePickerMode.Month:\n                return 'Switch to show years in the decade';\n            case DatePickerMode.Year:\n                return '';\n        }\n    }));\n\n    previousAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Previous month';\n            case DatePickerMode.Month:\n                return 'Previous year';\n            case DatePickerMode.Year:\n                return 'Previous decade';\n        }\n    }));\n\n    nextAria$: Observable<string> = this.datepicker.mode$.pipe(map(mode => {\n        switch (mode) {\n            case DatePickerMode.Day:\n                return 'Next month';\n            case DatePickerMode.Month:\n                return 'Next year';\n            case DatePickerMode.Year:\n                return 'Next decade';\n        }\n    }));\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    previous(): void {\n        this.datepicker.goToPrevious();\n    }\n\n    ascend(): void {\n        this.datepicker.goToParentMode();\n    }\n\n    next(): void {\n        this.datepicker.goToNext();\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DateTimePickerService, ModeDirection } from '../date-time-picker.service';\nimport { gridify, monthsShort, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class MonthViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<MonthViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<FocusedMonthItem>(null);\n\n    private _subscription: Subscription;\n\n    constructor(private _datepicker: DateTimePickerService) {\n        this._subscription = _datepicker.year$.subscribe(year => this.createMonthGrid(year));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(month: number, year: number): void {\n        this.focused$.next({ month: month, year: year });\n\n        // update the viewport to ensure focused month is visible\n        this._datepicker.setViewportYear(year);\n    }\n\n    private createMonthGrid(year: number): void {\n\n        // update the header\n        this._datepicker.setHeader(year.toString());\n\n        // get the current year and month\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n\n        // get the currently selected month\n        const activeMonth = this._datepicker.selected$.value.getMonth();\n        const activeYear = this._datepicker.selected$.value.getFullYear();\n\n        // create a 4x3 grid of month numbers\n        const months: MonthViewItem[] = range(0, 11).map(month => {\n            return {\n                name: monthsShort[month],\n                month: month,\n                year: year,\n                isCurrentMonth: year === currentYear && month === currentMonth,\n                isActiveMonth: year === activeYear && month === activeMonth\n            };\n        });\n\n        // map these to the appropriate format\n        const items: MonthViewItem[][] = gridify(months, 4);\n\n        // update the grid\n        this.grid$.next(items);\n\n        // if there is no focused month select the first one\n        if (this._datepicker.modeDirection === ModeDirection.Descend && this.focused$.value === null) {\n            \n            // check if the selected month is in view\n            const selectedMonth = months.find(month => month.isActiveMonth);\n\n            this.setFocus(selectedMonth ? selectedMonth.month : 0, year);\n        }\n    }\n}\n\nexport interface MonthViewItem {\n    name: string;\n    month: number;\n    year: number;\n    isCurrentMonth: boolean;\n    isActiveMonth: boolean;\n}\n\nexport interface FocusedMonthItem {\n    month: number;\n    year: number;\n}","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { MonthViewItem, MonthViewService } from './month-view.service';\n\n@Component({\n    selector: 'ux-date-time-picker-month-view',\n    template: `<div class=\"calendar\" role=\"grid\">\n  <div class=\"calendar-row\" *ngFor=\"let row of monthService.grid$ | async; trackBy: trackRowByFn\" role=\"row\">\n\n    <button role=\"gridcell\"\n         class=\"calendar-item\"\n         *ngFor=\"let item of row; trackBy: trackMonthByFn\"\n         [focusIf]=\"(monthService.focused$ | async)?.month === item.month && (monthService.focused$ | async)?.year === item.year\"\n         [tabindex]=\"getTabbable(item) ? 0 : -1\"\n         [attr.aria-label]=\"item.name + ' ' + item.year\"\n         [attr.aria-selected]=\"item.isActiveMonth\"\n         [class.active]=\"item.isActiveMonth\"\n         [class.current]=\"item.isCurrentMonth\"\n         (click)=\"select(item.month); $event.stopPropagation()\"\n         (keydown.ArrowLeft)=\"focusMonth(item, -1); $event.preventDefault()\"\n         (keydown.ArrowRight)=\"focusMonth(item, 1); $event.preventDefault()\"\n         (keydown.ArrowUp)=\"focusMonth(item, -4); $event.preventDefault()\"\n         (keydown.ArrowDown)=\"focusMonth(item, 4); $event.preventDefault()\">\n         {{ item.name }}\n    </button>\n  </div>\n</div>\n`,\n    providers: [MonthViewService],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonthViewComponent implements OnDestroy {\n\n    private _subscription: Subscription;\n\n    constructor(private _datePicker: DateTimePickerService, public monthService: MonthViewService) {\n        this._subscription = _datePicker.headerEvent$\n            .subscribe(event => event === DatePickerHeaderEvent.Next ? this.next() : this.previous());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * Go to the previous year\n     */\n    previous(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value - 1);\n    }\n\n    /**\n     * Go to the next year\n     */\n    next(): void {\n        this._datePicker.setViewportYear(this._datePicker.year$.value + 1);\n    }\n\n    /**\n     * Select a month in the calendar\n     * @param month the index of the month to select\n     */\n    select(month: number): void {\n        this._datePicker.setViewportMonth(month);\n\n        // show the day picker\n        this._datePicker.goToChildMode();\n    }\n\n    focusMonth(item: MonthViewItem, monthOffset: number): void {\n        let targetMonth = item.month + monthOffset;\n        let targetYear = item.year;\n\n        if (targetMonth < 0) {\n            targetMonth += 12;\n            targetYear -= 1;\n        }\n\n        if (targetMonth >= 12) {\n            targetMonth -= 12;\n            targetYear += 1;\n        }\n\n        this.monthService.setFocus(targetMonth, targetYear);\n    }\n\n    trackRowByFn(index: number): number {\n        return index;\n    }\n\n    trackMonthByFn(index: number, item: MonthViewItem): string {\n        return `${item.month} ${item.year}`;\n    }\n\n    getTabbable(item: MonthViewItem): boolean {\n        const focused = this.monthService.focused$.value;\n        const grid = this.monthService.grid$.value;\n\n        // if there is a focused month check if this is it\n        if (focused) {\n\n            // check if the focused month is visible\n            const isFocusedMonthVisible = !!grid.find(row => !!row.find(_item => _item.month === focused.month && _item.year === focused.year));\n            \n            if (isFocusedMonthVisible) {\n                return focused.month === item.month && focused.year === item.year;\n            }\n        }\n\n        // if there is no focusable month then check if there is a selected month\n        const isSelectedMonthVisible = !!grid.find(row => !!row.find(month => month.isActiveMonth));\n\n        if (isSelectedMonthVisible) {\n            return item.isActiveMonth;\n        }\n\n        // otherwise make the first month tabbable\n        return item.month === 0;\n    }\n}","import { Component, ChangeDetectionStrategy } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\n\n@Component({\n    selector: 'ux-date-time-picker-time-view',\n    template: `<ux-time-picker *ngIf=\"datepicker.showTime$ | async\"\n    [value]=\"datepicker.selected$ | async\"\n    (valueChange)=\"datepicker.selected$.next($event)\"\n    [showSeconds]=\"datepicker.showSeconds$ | async\"\n    [showMeridian]=\"datepicker.showMeridian$ | async\"\n    [showSpinners]=\"datepicker.showSpinners$ | async\">\n</ux-time-picker>\n\n<ng-container *ngIf=\"datepicker.showTimezone$ | async\">\n\n    <div class=\"time-zone-picker\" *ngIf=\"datepicker.showSpinners$ | async\">\n\n        <ux-spin-button\n            class=\"time-zone-spinner\"\n            [value]=\"(datepicker.timezone$ | async).name\"\n            [readOnly]=\"true\"\n            (increment)=\"incrementTimezone()\"\n            (decrement)=\"decrementTimezone()\"\n            inputAriaLabel=\"Time Zone\"\n            incrementAriaLabel=\"Switch to the next time zone\"\n            decrementAriaLabel=\"Switch to the previous time zone\">\n        </ux-spin-button>\n    </div>\n\n    <div class=\"time-zone-picker\" *ngIf=\"!(datepicker.showSpinners$ | async)\">\n\n        <select class=\"form-control time-zone-select\"\n                tabindex=\"0\"\n                [ngModel]=\"(datepicker.timezone$ | async).name\"\n                (ngModelChange)=\"selectTimezone($event)\"\n                aria-label=\"Timezone\"\n                [attr.aria-valuenow]=\"(datepicker.timezone$ | async).name\">\n\n            <option *ngFor=\"let zone of datepicker.timezones$ | async\"\n                    [selected]=\"zone.name === (datepicker.timezone$ | async).name\"\n                    [value]=\"zone.name\">\n                {{ zone?.name }}\n            </option>\n\n        </select>\n    </div>\n\n</ng-container>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TimeViewComponent {\n\n    constructor(public datepicker: DateTimePickerService) { }\n\n    selectTimezone(name: string): void {\n        const timezones = this.datepicker.timezones$.value;\n        \n        // find matching timezone\n        const timezone = timezones.find(_timezone => _timezone.name === name);\n\n        if (timezone) {\n            this.datepicker.setTimezone(timezone);\n        }\n    }\n\n    incrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone + 1] ? timezones[currentZone + 1] : timezones[currentZone]);\n    }\n\n    decrementTimezone(): void {\n        const timezone = this.datepicker.timezone$.value;\n        const timezones = this.datepicker.timezones$.value;\n\n        const currentZone = timezones.findIndex(zone => zone.name === timezone.name && zone.offset === timezone.offset);\n\n        // try to get the previous zone\n        this.datepicker.setTimezone(timezones[currentZone - 1] ? timezones[currentZone - 1] : timezones[currentZone]);\n    }\n}","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { DatePickerHeaderEvent, DateTimePickerService } from '../date-time-picker.service';\nimport { gridify, range } from '../date-time-picker.utils';\n\n@Injectable()\nexport class YearViewService implements OnDestroy {\n\n    grid$ = new BehaviorSubject<YearViewItem[][]>([[]]);\n    focused$ = new BehaviorSubject<number>(null);\n\n    private _year: number = new Date().getFullYear();\n\n    private _subscription = new Subscription();\n\n    constructor(private _datepicker: DateTimePickerService) {\n        const year = _datepicker.year$.subscribe(_year => this.createYearGrid(_year));\n\n        const event = _datepicker.headerEvent$\n            .subscribe(_event => _event === DatePickerHeaderEvent.Next ? this.goToNextDecade() : this.goToPreviousDecade());\n\n        this._subscription.add(year);\n        this._subscription.add(event);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setFocus(year: number): void {\n        this.focused$.next(year);\n        this.createYearGrid(year);\n    }\n\n    goToPreviousDecade(): void {\n        this.createYearGrid(this._year - 10);\n    }\n\n    goToNextDecade(): void {\n        this.createYearGrid(this._year + 10);\n    }\n\n    private createYearGrid(year: number = this._year): void {\n\n        this._year = year;\n\n        // get the years to display\n        const decade = this.getDecade(year);\n\n        const currentYear = new Date().getFullYear();\n\n        // produce items in the correct format\n        const items: YearViewItem[] = decade.range.map(_year => {\n            return {\n                year: _year,\n                isCurrentYear: _year === currentYear,\n                isActiveYear: _year === this._datepicker.year$.value\n            };\n        });\n\n        // update the header text\n        this._datepicker.setHeader(decade.start + ' - ' + decade.end);\n\n        // create the grid\n        this.grid$.next(gridify(items, 4));\n    }\n\n    /**\n     * Get the years in the current decade to display\n     */\n    private getDecade(year: number): YearRange {\n\n        // figure the start and end points\n        const start = (year - (year % 10));\n        const end = start + 9;\n\n        // create an array containing all the numbers between the start and end points\n        return { start: start, end: end, range: range(start, end) };\n    }\n}\n\n\nexport interface YearRange {\n    start: number;\n    end: number;\n    range: number[];\n}\n\nexport interface YearViewItem {\n    year: number;\n    isCurrentYear: boolean;\n    isActiveYear: boolean;\n}","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { DateTimePickerService } from '../date-time-picker.service';\nimport { YearViewItem, YearViewService } from './year-view.service';\n\n@Component({\n  selector: 'ux-date-time-picker-year-view',\n  template: `<div class=\"calendar\" role=\"grid\">\n  <div class=\"calendar-row\" role=\"row\" *ngFor=\"let row of yearService.grid$ | async; trackBy: trackRowByFn\">\n\n    <button *ngFor=\"let item of row; trackBy: trackYearByFn\"\n         role=\"gridcell\"\n         class=\"calendar-item\"\n         [focusIf]=\"(yearService.focused$ | async) === item.year\"\n         [attr.aria-label]=\"item.year\"\n         [attr.aria-selected]=\"item.isActiveYear\"\n         [class.current]=\"item.isCurrentYear\"\n         [class.active]=\"item.isActiveYear\"\n         (click)=\"select(item.year); $event.stopPropagation()\"\n         (keydown.ArrowLeft)=\"focusYear(item, -1); $event.preventDefault()\"\n         (keydown.ArrowRight)=\"focusYear(item, 1); $event.preventDefault()\"\n         (keydown.ArrowUp)=\"focusYear(item, -4); $event.preventDefault()\"\n         (keydown.ArrowDown)=\"focusYear(item, 4); $event.preventDefault()\"\n         [tabindex]=\"getTabbable(item) ? 0 : -1\">\n         {{ item.year }}\n    </button>\n  </div>\n</div>\n`,\n  providers: [YearViewService],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YearViewComponent {\n\n  constructor(private _datePicker: DateTimePickerService, public yearService: YearViewService) {}\n\n  select(year: number): void {\n    this._datePicker.setViewportYear(year);\n\n    // show the month picker\n    this._datePicker.goToChildMode();\n  }\n\n  focusYear(item: YearViewItem, yearOffset: number): void {\n    this.yearService.setFocus(item.year + yearOffset);\n  }\n\n  trackRowByFn(index: number): number {\n    return index;\n  }\n\n  trackYearByFn(index: number, item: YearViewItem): number {\n    return item.year;\n  }\n\n  getTabbable(item: YearViewItem): boolean {\n    const focused = this.yearService.focused$.value;\n    const grid = this.yearService.grid$.value;\n\n    // if there is a focused year check if this is it\n    if (focused) {\n\n        // check if the focused year is visible\n        const isFocusedYearVisible = !!grid.find(row => !!row.find(_item => _item.year === focused));\n\n        if (isFocusedYearVisible) {\n            return focused === item.year;\n        }\n    }\n\n    // if there is no focusable year then check if there is a selected year\n    const isSelectedYearVisible = !!grid.find(row => !!row.find(year => year.isActiveYear));\n\n    if (isSelectedYearVisible) {\n        return item.isActiveYear;\n    }\n\n    // otherwise make the first month tabbable\n    return grid[0][0].year === item.year;\n}\n\n}\n","import { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[focusIf]'\n})\nexport class FocusIfDirective {\n\n    @Input() focusIfDelay: number = 0;\n\n    @Input()\n    set focusIf(focus: boolean) {\n\n        // if a timeout is pending then cancel it\n        if (!focus && this._timeout !== null) {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n\n        if (focus && this._timeout === null) {\n            this._timeout = window.setTimeout(() => {\n                this._elementRef.nativeElement.focus();\n                this._timeout = null;\n            }, this.focusIfDelay);\n        }\n    }\n\n    private _timeout: number = null;\n\n    constructor(private _elementRef: ElementRef) { }\n}","import { NgModule } from '@angular/core';\nimport { FocusIfDirective } from './focus-if.directive';\n\n\n@NgModule({\n    exports: [FocusIfDirective],\n    declarations: [FocusIfDirective]\n})\nexport class FocusIfModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SpinButtonModule } from '../spin-button/index';\nimport { TimePickerModule } from '../time-picker/index';\nimport { DateTimePickerComponent } from './date-time-picker.component';\nimport { DateTimePickerConfig } from './date-time-picker.config';\nimport { DayViewComponent } from './day-view/day-view.component';\nimport { HeaderComponent } from './header/header.component';\nimport { MonthViewComponent } from './month-view/month-view.component';\nimport { TimeViewComponent } from './time-view/time-view.component';\nimport { YearViewComponent } from './year-view/year-view.component';\nimport { FocusIfModule } from '../../directives/focus-if/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        TimePickerModule,\n        SpinButtonModule,\n        FocusIfModule\n    ],\n    exports: [DateTimePickerComponent],\n    declarations: [DateTimePickerComponent, HeaderComponent, DayViewComponent, MonthViewComponent, YearViewComponent, TimeViewComponent],\n    providers: [\n        DateTimePickerConfig\n    ]\n})\nexport class DateTimePickerModule { }\n","import { ChangeDetectionStrategy, Component, Directive } from '@angular/core';\n\n@Component({\n    selector: 'ux-ebox',\n    template: `<div class=\"ux-ebox-header\">\n    <ng-content select=\"ux-ebox-header\"></ng-content>\n</div>\n\n<div class=\"ux-ebox-content\">\n    <ng-content select=\"ux-ebox-content\"></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class EboxComponent { }\n\n@Directive({\n    selector: 'ux-ebox-header'\n})\nexport class EboxHeaderDirective { }\n\n@Directive({\n    selector: 'ux-ebox-content'\n})\nexport class EboxContentDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { EboxComponent, EboxContentDirective, EboxHeaderDirective } from './ebox.component';\n\n@NgModule({\n    exports: [EboxComponent, EboxContentDirective, EboxHeaderDirective],\n    declarations: [EboxComponent, EboxContentDirective, EboxHeaderDirective]\n})\nexport class EboxModule { }\n","import { Facet } from './models/facet';\n\nexport class FacetSelect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselect {\n    constructor(public facet: Facet) {}\n}\n\nexport class FacetDeselectAll {\n    constructor() {}\n}\n\nexport type FacetEvent = FacetSelect | FacetDeselect | FacetDeselectAll;","import { Component, Input, EventEmitter, Output } from '@angular/core';\nimport { FacetEvent, FacetSelect, FacetDeselect, FacetDeselectAll } from './facet-events';\nimport { Facet } from './models/facet';\n\n@Component({\n    selector: 'ux-facet-container',\n    template: `<!-- Display Any Selected Facets -->\n<div class=\"facets-selected-container\">\n\n    <!-- Display Title an Clear Button -->\n    <div class=\"facets-selected-header-container\">\n\n        <!-- Show The Selected Text -->\n        <span class=\"facets-selected-header-label\">{{ header }}</span>\n\n        <!-- Add a Clear Button -->\n        <div class=\"facets-selected-clear-button\" tabindex=\"0\" [uxTooltip]=\"clearTooltip\" placement=\"left\" (click)=\"deselectAllFacets()\"\n            (keyup.enter)=\"deselectAllFacets()\" *ngIf=\"facets.length > 0\">\n\n            <svg class=\"facets-selected-clear-graphic\" viewBox=\"0 0 19 12\" shape-rendering=\"geometricPrecision\">\n                <rect class=\"light-grey\" x=\"0\" y=\"2\" width=\"7\" height=\"2\"></rect>\n                <rect class=\"dark-grey\" x=\"0\" y=\"5\" width=\"9\" height=\"2\"></rect>\n                <rect class=\"light-grey\" x=\"0\" y=\"8\" width=\"7\" height=\"2\"></rect>\n                <path class=\"dark-grey\" d=\"M9,1 h1 l9,9 v1 h-1 l-9,-9 v-1 Z\"></path>\n                <path class=\"dark-grey\" d=\"M9,11 v-1 l9,-9 h1 v1 l-9,9 h-1 Z\"></path>\n            </svg>\n        </div>\n\n    </div>\n\n    <!-- Display Tags For Selected Items -->\n    <div class=\"facets-selected-list\" uxReorderable [reorderingDisabled]=\"!facetsReorderable\" [(reorderableModel)]=\"facets\" (reorderableModelChange)=\"facetsChange.emit(facets)\">\n\n        <!-- Show Selected Tags -->\n        <div class=\"facet-selected-tag\" tabindex=\"0\" *ngFor=\"let facet of facets\" (mousedown)=\"$event.preventDefault()\" (click)=\"deselectFacet(facet)\" (keyup.enter)=\"deselectFacet(facet)\"\n             [uxReorderableModel]=\"facet\">\n\n            <!-- Display Label -->\n            <span class=\"facet-selected-tag-label\" uxReorderableHandle>{{ facet.title }}</span>\n\n            <!-- Display Remove Icon -->\n            <span class=\"hpe-icon hpe-close\"></span>\n        </div>\n\n    </div>\n\n    <!-- Show Message Here if No Facets Selected -->\n    <p class=\"facets-selected-none-label\" *ngIf=\"emptyText && facets.length === 0\">{{ emptyText }}</p>\n\n</div>\n\n<!-- Any Facet Elements Should be Added Here By User -->\n<div class=\"facets-region\">\n    <ng-content></ng-content>\n</div>`\n})\nexport class FacetContainerComponent {\n\n    @Input() header: string = 'Selected:';\n    @Input() clearTooltip: string = 'Clear All';\n    @Input() emptyText: string = 'No Items';\n    @Input() facets: Facet[] = [];\n    @Input() facetsReorderable: boolean = false;\n\n    @Output() facetsChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: EventEmitter<FacetEvent> = new EventEmitter<FacetEvent>();\n\n    selectFacet(facet: Facet): void {\n        // push the facet on to the list\n        this.facets.push(facet);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetSelect(facet));\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find the index of the item in the selected array\n        let idx = this.facets.findIndex(selectedFacet => facet === selectedFacet);\n\n        // if match there was no match then finish\n        if (idx === -1) {\n            return;\n        }\n\n        // remove the last item\n        this.facets.splice(idx, 1);\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselect(facet));\n    }\n\n    deselectAllFacets(): void {\n\n        // empty the selected array\n        this.facets = [];\n\n        // update the two way binding\n        this.facetsChange.emit(this.facets);\n\n        // trigger event\n        this.triggerEvent(new FacetDeselectAll());\n    }\n\n    private triggerEvent(event: FacetEvent) {\n        this.events.next(event);\n    }\n}","import { Component, ElementRef, EventEmitter, Host, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { FacetContainerComponent } from '../../facet-container.component';\nimport { FacetDeselect, FacetDeselectAll, FacetEvent, FacetSelect } from '../../facet-events';\nimport { Facet } from '../../models/facet';\n\n@Component({\n    selector: 'ux-facet-base',\n    template: '',\n})\nexport class FacetBaseComponent implements OnInit, OnDestroy {\n\n    @Input() selected: Facet[] = [];\n    @Output() selectedChange: EventEmitter<Facet[]> = new EventEmitter<Facet[]>();\n    @Output() events: Subject<FacetEvent> = new Subject<FacetEvent>();\n\n    protected _onDestroy = new Subject<void>();\n\n    constructor( @Host() private facetContainer: FacetContainerComponent, public _elementRef: ElementRef) {\n\n        if (facetContainer) {\n\n            // subscribe to any deselect events from the facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselect),\n                filter((event: FacetDeselect) => !!this.selected.find(facet => facet === event.facet)),\n                takeUntil(this._onDestroy)\n            ).subscribe((event: FacetDeselect) => this.deselectFacet(event.facet));\n\n            // subscribe to any deselect all events from facet container\n            facetContainer.events.pipe(\n                filter(event => event instanceof FacetDeselectAll),\n                takeUntil(this._onDestroy)\n            ).subscribe(_ => this.deselectAll());\n\n        }\n    }\n\n    ngOnInit(): void {\n        // check if there should be any facets initially selected\n        if (this.facetContainer) {\n            this.selected.forEach(facet => this.facetContainer.selectFacet(facet));\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    selectFacet(facet: Facet): void {\n\n        // if the facet is disabled it should not be selected\n        if (facet.disabled) {\n            return;\n        }\n\n        // add the facet to the list of selected facets\n        this.selected.push(facet);\n\n        // send the new value to the event emitter\n        this.selectedChange.emit(this.selected);\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetSelect(facet));\n\n        // tell the facet container about the selected facet\n        if (this.facetContainer) {\n            this.facetContainer.selectFacet(facet);\n        }\n    }\n\n    deselectFacet(facet: Facet): void {\n\n        // find facet to remove\n        let index = this.selected.findIndex(selectedFacet => selectedFacet === facet);\n\n        // only continue if facet is found\n        if (index !== -1) {\n\n            // remove the facet from the selected list\n            this.selected.splice(index, 1);\n\n            // emit the changes to selected event emitter\n            this.selectedChange.emit(this.selected);\n\n            // fire the event to the observable\n            this.triggerEvent(new FacetDeselect(facet));\n\n            // deselect the facet in the facet container\n            if (this.facetContainer) {\n                this.facetContainer.deselectFacet(facet);\n            }\n        }\n    }\n\n    deselectAll(): void {\n\n        // remove all selected facets\n        this.selected = [];\n\n        // fire the event to the observable\n        this.triggerEvent(new FacetDeselectAll());\n\n        // emit the changes to the selected event emitter\n        this.selectedChange.emit(this.selected);\n    }\n\n    toggleFacetSelection(facet: Facet): void {\n\n        // if the facet is selected then deselect - otherwise select it\n        if (this.isFacetSelected(facet)) {\n            this.deselectFacet(facet);\n        } else {\n            this.selectFacet(facet);\n        }\n\n    }\n\n    isFacetSelected(facet: Facet): boolean {\n        // determine if a facet is currently selected\n        return !!this.selected.find(selectedFacet => selectedFacet === facet);\n    }\n\n    private triggerEvent(event: FacetEvent): void {\n        this.events.next(event);\n    }\n}","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-facet-header',\n    template: `<span class=\"facet-header-title\">{{ header }}</span>\n<span class=\"hpe-icon\" [class.hpe-down]=\"expanded\" [class.hpe-previous]=\"!expanded\" *ngIf=\"canExpand\"></span>`,\n    host: {\n        'tabindex': '0',\n        '(click)': 'toggleExpand()',\n        '(keyup.enter)': 'toggleExpand()'\n    }\n})\nexport class FacetHeaderComponent {\n\n    @Input() header: string;\n    @Input() canExpand: boolean = true;    \n    @Input() expanded: boolean = true;\n    @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    toggleExpand(): void {\n\n        // if not expandable then do nothing\n        if (this.canExpand) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}","import { Component, Input } from '@angular/core';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\n\n@Component({\n    selector: 'ux-facet-check-list',\n    template: `<ux-facet-header [header]=\"header\" [(expanded)]=\"expanded\"></ux-facet-header>\n\n<!-- Create a container which will show when section is expanded -->\n<div class=\"facet-check-list-container\" [class.facet-check-list-scrollbar]=\"scrollbar\" *ngIf=\"expanded\">\n\n    <!-- Iterate through each possible facet -->\n    <div class=\"facet-check-list-item\" *ngFor=\"let facet of facets\" [class.facet-active]=\"isFacetSelected(facet)\" tabindex=\"0\"\n        (click)=\"toggleFacetSelection(facet)\" (keyup.enter)=\"toggleFacetSelection(facet)\" [class.disabled]=\"facet.disabled\">\n\n        <!-- Show check icon to indicate the state -->\n        <span class=\"facet-check-list-item-check\">\n            <span class=\"hpe-icon hpe-active\"></span>\n        </span>\n\n        <!-- Display the title -->\n        <span class=\"facet-check-list-item-title\">{{ facet.title }}</span>\n\n        <!-- Display the count if specified -->\n        <span class=\"facet-check-list-item-count\" *ngIf=\"facet.count !== undefined\">({{ facet.count }})</span>\n    </div>\n</div>`\n})\nexport class FacetCheckListComponent extends FacetBaseComponent {\n\n    @Input() facets: Facet[] = [];\n    @Input() header: string;\n    @Input() scrollbar: boolean = true;\n    @Input() expanded: boolean = true;\n}","import { Component, Input, OnInit, Pipe, PipeTransform } from '@angular/core';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { map } from 'rxjs/operators';\nimport { FacetBaseComponent } from '../base/facet-base/facet-base.component';\nimport { Facet } from '../models/facet';\n\n@Component({\n    selector: 'ux-facet-typeahead-list',\n    template: `<ux-facet-header [header]=\"header\" [(expanded)]=\"expanded\"></ux-facet-header>\n\n<div class=\"facet-typeahead-list-container\" *ngIf=\"expanded\">\n\n    <div class=\"facet-typeahead-list-selected-container\" *ngIf=\"suggestions?.length > 0\">\n\n        <div class=\"facet-typeahead-list-selected-option\" tabindex=\"0\" *ngFor=\"let facet of suggestions\" (click)=\"toggleFacetSelection(facet)\"\n            (keyup.enter)=\"toggleFacetSelection(facet)\">\n\n            <ux-checkbox [clickable]=\"false\" [value]=\"isFacetSelected(facet)\" [simplified]=\"simplified\">\n                <span class=\"facet-typeahead-list-selected-option-title\">{{ facet.title }}</span>\n                <span class=\"facet-typeahead-list-selected-option-count\">({{ facet.count }})</span>\n            </ux-checkbox>\n\n        </div>\n\n    </div>\n\n    <div class=\"facet-typeahead-list-control\">\n\n        <!-- Create Typeahead Control -->\n        <input type=\"text\" class=\"form-control\" [placeholder]=\"typeaheadConfig?.placeholder\" [typeahead]=\"typeaheadOptions\" [(ngModel)]=\"searchQuery\"\n            [typeaheadMinLength]=\"typeaheadConfig?.minCharacters\" [typeaheadOptionsLimit]=\"typeaheadConfig?.maxResults\" [typeaheadWaitMs]=\"typeaheadConfig?.delay\"\n            (typeaheadOnSelect)=\"selectOption($event)\" [typeaheadItemTemplate]=\"facetOptionTemplate\" (keyup.ArrowUp)=\"scrollToFocused()\" (keyup.ArrowDown)=\"scrollToFocused()\">\n\n    </div>\n\n</div>\n\n<ng-template #facetOptionTemplate let-model=\"item\" let-index=\"index\">\n    <p class=\"facet-typeahead-list-option\"><span [innerHTML]=\"model.title | facetTypeaheadHighlight: searchQuery\"></span> <span class=\"facet-typeahead-list-option-count\"\n            *ngIf=\"model.count\">({{ model.count }})</span></p>\n</ng-template>`\n})\nexport class FacetTypeaheadListComponent extends FacetBaseComponent implements OnInit {\n\n    @Input() facets: Facet[] | Observable<Facet[]>;\n    @Input() header: string;\n    @Input() expanded: boolean = true;\n    @Input() typeaheadConfig: FacetTypeaheadListConfig = {};\n    @Input() suggestions: Facet[] = [];\n    @Input() simplified: boolean = true;\n\n    typeaheadOptions: Observable<Facet[]>;\n    searchQuery: string;\n\n    private _nativeElement: HTMLElement = this._elementRef.nativeElement as HTMLElement;\n    private _defaultTypeaheadConfig: FacetTypeaheadListConfig = {\n        placeholder: '',\n        maxResults: 50,\n        minCharacters: 1\n    };\n\n    ngOnInit() {\n\n        // wrap the observable and filter out any already selected items or any disabled items\n        if (this.facets instanceof Observable) {\n\n            // handle an observable of data\n            this.typeaheadOptions = from(this.facets).pipe(map((facets: Facet[]) => {\n\n                // remove disabled facets, selected facets and facets that dont match search term\n                return facets.filter(facet => !facet.disabled)\n                    .filter(facet => !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .filter(facet => facet.title.toUpperCase().includes(this.searchQuery.toUpperCase()));\n            }));\n\n        } else {\n\n            // handle an array of data\n            this.typeaheadOptions = of(this.facets).pipe(map((facets: Facet[]) => {\n\n                // remove disabled facets, selected facets and facets that dont match search term\n                return facets.filter(facet => !facet.disabled)\n                    .filter(facet => !this.selected.find(selectedFacet => selectedFacet === facet))\n                    .filter(facet => facet.title.toUpperCase().includes(this.searchQuery.toUpperCase()));\n            }));\n        }\n\n        // provide default values for typeahead config\n        for (let prop in this._defaultTypeaheadConfig) {\n\n            // check if prop has been defined in the users typeahead config - if not set default value\n            if (this.typeaheadConfig.hasOwnProperty(prop) === false) {\n                this.typeaheadConfig[prop] = this._defaultTypeaheadConfig[prop];\n            }\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n\n        // check to make sure that the item is not currently selected\n        if (this.selected.find(facet => facet === typeaheadOption.item)) {\n            return;\n        }\n\n        // select the facet\n        this.selectFacet(typeaheadOption.item);\n\n        // clear the typeahead\n        this.searchQuery = '';\n    }\n\n    scrollToFocused(): void {\n\n        let dropdown = this._nativeElement.querySelector('.dropdown-menu');\n\n        // delay to allow the typeahead ui to update\n        setTimeout(() => {\n\n            // find the currently active element if there is one\n            let activeElement = dropdown.querySelector('.dropdown-menu > li.active');\n\n            if (activeElement) {\n\n                // check if element is not in view\n                let elementBounds = activeElement.getBoundingClientRect();\n                let dropdownBounds = dropdown.getBoundingClientRect();\n\n                if (elementBounds.top < dropdownBounds.top) {\n                    dropdown.scrollTop += elementBounds.top - dropdownBounds.top;\n                }\n\n                if (elementBounds.bottom > dropdownBounds.bottom) {\n                    dropdown.scrollTop += elementBounds.bottom - dropdownBounds.bottom;\n                }\n            }\n        });\n    }\n\n}\n\nexport interface FacetTypeaheadListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    delay?: number;\n}\n\n@Pipe({\n    name: 'facetTypeaheadHighlight'\n})\nexport class FacetTypeaheadHighlight implements PipeTransform {\n    transform(value: string, searchQuery: string): string {\n        let regex = new RegExp(searchQuery, 'i');\n        return value.replace(regex, `<b class=\"facet-typeahead-highlighted\">${ value.match(regex) }</b>`);\n    }\n}","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, OnDestroy } from '@angular/core';\nimport { AnchorPlacement } from './tooltip.directive';\nimport { Subject } from 'rxjs/Subject';\n\nlet uniqueTooltipId = 0;\n\n@Component({\n  selector: 'ux-tooltip',\n  template: `<div class=\"tooltip in\" [id]=\"id\" [attr.role]=\"role\" [ngClass]=\"[placement, customClass]\">\n    <div class=\"tooltip-arrow\"></div>\n    <div class=\"tooltip-inner\" (cdkObserveContent)=\"reposition()\">\n        <ng-container *ngIf=\"!isTemplateRef\">{{ content }}</ng-container>\n        <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"context\"></ng-container>\n    </div>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TooltipComponent implements OnDestroy {\n\n  /** Define a unique id for each tooltip */\n  id: string = `ux-tooltip-${++uniqueTooltipId}`;\n\n  /** Define the tooltip role */\n  role: string = 'tooltip';\n\n  /** The content of the tooltip, either a string or a TemplateRef for further customization */\n  content: string | TemplateRef<any>;\n\n  /** Allow the user to supply a context for the tooltip TemplateRef */\n  context: any;\n\n  /** The position the tooltip should display relative to the associated element */\n  placement: AnchorPlacement;\n\n  /** Allow a custom class to be added to the tooltip to allow custom styling */\n  customClass: string = '';\n\n  /** Indicates whether or not the content is a string or a TemplateRef */\n  isTemplateRef: boolean = false;\n\n  /** Emit when the tooltip need to update it's position */\n  reposition$ = new Subject<void>();\n\n  constructor(protected _changeDetectorRef: ChangeDetectorRef) {}\n\n  /** Cleanup after the component is destroyed */\n  ngOnDestroy(): void {\n    this.reposition$.complete();\n  }\n\n  /** Inform the parent directive that it needs to recalulate the position */\n  reposition(): void {\n    this.reposition$.next();\n  }\n\n  /** This will update the content of the tooltip and trigger change detection */\n  setContent(content: string | TemplateRef<any>): void {\n    this.content = content;\n    this.isTemplateRef = content instanceof TemplateRef;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will update the tooltip placement and trigger change detection */\n  setPlacement(placement: AnchorPlacement) {\n\n    if (!placement) {\n      return;\n    }\n\n    this.placement = placement;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** This will set a custom class on the tooltip and trigger change detection */\n  setClass(customClass: string): void {\n\n    if (!customClass) {\n      return;\n    }\n\n    this.customClass = customClass;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Updates the context used by the TemplateRef */\n  setContext(context: any): void {\n\n    if (!context) {\n      return;\n    }\n\n    this.context = context;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Specify the tooltip role attribute */\n  setRole(role: string): void {\n\n    if (!role) {\n      return;\n    }\n\n    this.role = role;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { Injectable } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { Subject } from 'rxjs/Subject';\n\n@Injectable()\nexport class TooltipService {\n    shown$ = new Subject<TooltipComponent>();\n}","import { OriginConnectionPosition, Overlay, OverlayConnectionPosition, OverlayRef, ScrollDispatcher } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { filter, takeUntil } from 'rxjs/operators';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\n@Directive({\n    selector: '[uxTooltip]',\n    exportAs: 'ux-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnChanges, OnDestroy {\n\n    /** Contains the content of the tooltip or a TemplateRef for more detailed content */\n    @Input('uxTooltip') content: string | TemplateRef<any>;\n\n    /** Allow the tooltip to be conditionally disabled */\n    @Input('tooltipDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the tooltip */\n    @Input('tooltipClass') customClass: string = '';\n\n    /** All the user to add a role to the tooltip - default is tooltip */\n    @Input('tooltipRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('tooltipContext') context: any = {};\n\n    /** Delay the showing of the tooltip by a number of miliseconds */\n    @Input('tooltipDelay') delay: number = 0;\n\n    /** Programmatically show and hide the tooltip */\n    @Input() isOpen: boolean = false;\n\n    /** Customize how the tooltip should be positioned relative to the element */\n    @Input() placement: AnchorPlacement = 'top';\n\n    /** Specify which events should show the tooltip */\n    @Input() showTriggers: string[] = ['mouseenter', 'focus'];\n\n    /** Specify which events should hide the tooltip */\n    @Input() hideTriggers: string[] = ['mouseleave', 'blur'];\n\n    /** Emits an event when the tooltip is shown */\n    @Output() shown = new EventEmitter<void>();\n\n    /** Emits a event when the tooltip is hidden */\n    @Output() hidden = new EventEmitter<void>();\n\n    /** Allow two way binding to track the visibility of the tooltip */\n    @Output() isOpenChange = new EventEmitter<boolean>();\n\n    /** Keep track of the tooltip visibility */\n    isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<TooltipComponent>;\n\n    /** A reference to the overlay the tooltip will be inserted into */\n    protected _overlayRef: OverlayRef;\n\n    /** A reference to the instance of the tooltip component when created */\n    protected _instance: TooltipComponent;\n\n    /** This will emit when the directive is destroyed allowing us to unsubscribe all subscriptions automatically */\n    protected _onDestroy = new Subject<void>();\n\n    /** Store the timeout interval for cancelation */\n    private _showTimeoutId: number;\n\n    /** Internally store the type of this component - usual for distinctions when extending this class */\n    protected _type: string = 'tooltip';\n\n    constructor(\n        protected _elementRef: ElementRef,\n        protected _viewContainerRef: ViewContainerRef,\n        protected _overlay: Overlay,\n        protected _scrollDispatcher: ScrollDispatcher,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _renderer: Renderer2,\n        private _tooltipService: TooltipService\n    ) { }\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up show and hide event triggers\n        fromEvent(this._elementRef.nativeElement, 'click').pipe(takeUntil(this._onDestroy)).subscribe(this.onClick.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseenter').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseEnter.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'mouseleave').pipe(takeUntil(this._onDestroy)).subscribe(this.onMouseLeave.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'focus').pipe(takeUntil(this._onDestroy)).subscribe(this.onFocus.bind(this));\n        fromEvent(this._elementRef.nativeElement, 'blur').pipe(takeUntil(this._onDestroy)).subscribe(this.onBlur.bind(this));\n\n        // when any other tooltips open hide this one\n        this._tooltipService.shown$.pipe(\n            filter(() => this._type === 'tooltip'),\n            filter(tooltip => tooltip !== this._instance),\n            takeUntil(this._onDestroy)\n        ).subscribe(this.hide.bind(this));\n\n        // if the tooltip should be initially visible then open it\n        if (this.isOpen) {\n            this.show();\n        }\n    }\n\n    /**\n     * We need to send input changes to the tooltip component\n     * We can't use setters as they may trigger before tooltip initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // we can ignore the first change as it's handled in ngOnInit\n        if (changes.isOpen && !changes.isOpen.firstChange && changes.isOpen.currentValue !== this.isVisible) {\n            changes.isOpen.currentValue ? this.show() : this.hide();\n        }\n\n        // destroy the overlay ref so a new correctly positioned instance will be created next time\n        if (changes.placement) {\n            this.destroyOverlay();\n        }\n\n        if (this._instance && changes.placement) {\n            this._instance.setPlacement(changes.placement.currentValue);\n        }\n\n        if (this._instance && changes.content) {\n            this._instance.setContent(changes.content.currentValue);\n        }\n\n        if (this._instance && changes.customClass) {\n            this._instance.setClass(changes.customClass.currentValue);\n        }\n\n        if (this._instance && changes.context) {\n            this._instance.setContext(changes.context.currentValue);\n        }\n\n        if (this._instance && changes.role) {\n            this._instance.setContext(changes.role.currentValue);\n        }\n    }\n\n    /** Ensure we clean up after ourselves */\n    ngOnDestroy(): void {\n\n        // ensure we close the tooltip when the host is destroyed\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._instance = null;\n        }\n\n        // emit this event to automatically unsubscribe from all subscriptions\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /** Make the tooltip open */\n    show(): void {\n\n        // if the tooltip is disabled then do nothing\n        if (this.disabled || this.isVisible || this._showTimeoutId || !this.content) {\n            return;\n        }\n\n        // delay the show by the delay amount\n        this._showTimeoutId = window.setTimeout(() => {\n\n            // create the tooltip and get the overlay ref\n            const overlayRef = this.createOverlay();\n\n            // create the portal to create the tooltip component\n            this._portal = this.createPortal();\n            this._instance = this.createInstance(overlayRef);\n\n            // watch for any changes to the content\n            this._instance.reposition$.pipe(takeUntil(this._onDestroy)).subscribe(this.reposition.bind(this));\n\n            // store the visible state\n            this.isVisible = true;\n\n            // ensure the overlay has the correct initial position\n            this.reposition();\n\n            // emit the show events\n            this.shown.emit();\n            this.isOpenChange.next(true);\n\n            // clear the interval id\n            this._showTimeoutId = null;\n\n            // emit the show event to close any other tooltips\n            this._tooltipService.shown$.next(this._instance);\n\n            // ensure change detection is run\n            this._changeDetectorRef.detectChanges();\n        }, this.delay);\n\n    }\n\n    /** If a tooltip exists and is visible, hide it */\n    hide() {\n\n        // if we are waiting to show a tooltip then cancel the pending timeout\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n            return;\n        }\n\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.setAriaDescribedBy(null);\n        this._instance = null;\n\n        // store the visible state\n        this.isVisible = false;\n\n        // emit the hide events\n        this.hidden.emit();\n        this.isOpenChange.next(false);\n\n        // ensure change detection is run\n        this._changeDetectorRef.detectChanges();\n    }\n\n    /** Toggle the visibility of the tooltip */\n    toggle(): void {\n        this.isVisible ? this.hide() : this.show();\n    }\n\n    /** Recalculate the position of the popover */\n    reposition(): void {\n        if (this.isVisible && this._overlayRef) {\n            this._overlayRef.updatePosition();\n        }\n    }\n\n    /** Create an instance from the overlay ref - allows overriding and additional logic here */\n    protected createInstance(overlayRef: OverlayRef): TooltipComponent {\n        const instance = overlayRef.attach(this._portal).instance as TooltipComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        return instance;\n    }\n\n    /** Create the component portal - allows overriding to allow other portals eg. popovers */\n    protected createPortal(): ComponentPortal<any> {\n        return this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    }\n\n    /** Create the overlay and set up the scroll handling behavior */\n    private createOverlay(): OverlayRef {\n\n        // if the tooltip has already been created then just return the existing instance\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // configure the tooltip\n        const strategy = this._overlay.position()\n            .connectedTo(this._elementRef, this.getOrigin(), this.getOverlayPosition());\n\n        // correctly handle scrolling\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        this._overlayRef = this._overlay.create({\n            positionStrategy: strategy,\n            panelClass: 'ux-overlay-pane',\n            scrollStrategy: this._overlay.scrollStrategies.reposition({ scrollThrottle: 0 }),\n            hasBackdrop: false\n        });\n\n        return this._overlayRef;\n    }\n\n    /** Recreate the overlay ref using the updated origin and overlay positions */\n    private destroyOverlay(): void {\n\n        // destroy the existing overlay\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this.isVisible = false;\n    }\n\n    /** Get the origin position based on the specified tooltip placement */\n    private getOrigin(): OriginConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top' || this.placement == 'bottom') {\n            return { originX: 'center', originY: this.placement };\n        } else if (this.placement == 'left') {\n            return { originX: 'start', originY: 'center' };\n        } else if (this.placement == 'right') {\n            return { originX: 'end', originY: 'center' };\n        }\n    }\n\n    /** Calculate the overlay position based on the specified tooltip placement */\n    private getOverlayPosition(): OverlayConnectionPosition {\n\n        // ensure placement is defined\n        this.placement = this.placement || 'top';\n\n        if (this.placement == 'top') {\n            return { overlayX: 'center', overlayY: 'bottom' };\n        } else if (this.placement == 'bottom') {\n            return { overlayX: 'center', overlayY: 'top' };\n        } else if (this.placement == 'left') {\n            return { overlayX: 'end', overlayY: 'center' };\n        } else if (this.placement == 'right') {\n            return { overlayX: 'start', overlayY: 'center' };\n        }\n    }\n\n    /**\n     * Simple utility method - because IE doesn't support array.includes\n     * And it isn't included in the core-js/es6 polyfills which are the\n     * only ones required by Angular and guaranteed to be there\n     **/\n    protected includes<T>(array: Array<T>, value: T): boolean {\n        return Array.isArray(array) && !!array.find(item => item === value);\n    }\n\n    /** Handle the click event - show or hide accordingly */\n    protected onClick(event: MouseEvent): void {\n\n        // if its not visible and click is a show trigger open it\n        if (!this.isVisible && this.includes(this.showTriggers, 'click')) {\n            return this.show();\n        }\n\n        // if its visible and click is a hide trigger close it\n        if (this.isVisible && this.includes(this.hideTriggers, 'click')) {\n            return this.hide();\n        }\n\n    }\n\n    /** Handle the mouse enter event - show or hide accordingly */\n    protected onMouseEnter(event: MouseEvent): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'mouseenter')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the mouse leave event - show or hide accordingly */\n    protected onMouseLeave(event: MouseEvent): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'mouseleave')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Handle the focus event - show or hide accordingly */\n    protected onFocus(event: Event): void {\n\n        // this is an show only trigger - if already open or it isn't a trigger do nothing\n        if (this.isVisible || !this.includes(this.showTriggers, 'focus')) {\n            return;\n        }\n\n        // otherwise open the tooltip\n        this.show();\n    }\n\n    /** Handle the blur event - show or hide accordingly */\n    protected onBlur(event: Event): void {\n\n        // this is an hide only trigger - if not open or it isn't a trigger do nothing\n        if (!this.isVisible || !this.includes(this.hideTriggers, 'blur')) {\n            return;\n        }\n\n        // otherwise close the tooltip\n        this.hide();\n    }\n\n    /** Determine if the trigger element is focused */\n    private isFocused(): boolean {\n        return document.activeElement === this._elementRef.nativeElement;\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n        if (id === null) {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-describedby');\n        } else {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-describedby', id);\n        }\n    }\n\n}\n\nexport type AnchorPlacement = 'top' | 'right' | 'bottom' | 'left';","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TooltipComponent } from './tooltip.component';\nimport { TooltipDirective } from './tooltip.directive';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { TooltipService } from './tooltip.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule\n  ],\n  exports: [TooltipDirective],\n  declarations: [TooltipComponent, TooltipDirective],\n  providers: [TooltipService],\n  entryComponents: [TooltipComponent]\n})\nexport class TooltipModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxReorderableHandle]'\n})\nexport class ReorderableHandleDirective { }\n","import { Directive, Input, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxReorderableModel]'\n})\nexport class ReorderableModelDirective {\n\n    // allow the user to specify a model for the item - allows use with ngFor\n    @Input() uxReorderableModel: any;\n\n    // this can be used to identify which instance of the directive relates to which element\n    constructor(public elementRef: ElementRef) { }\n}\n","// WORKAROUND: Angular Cli 6 has removed the globals patch, dragular requires this to we can patch it here\n(<any>window).global = (<any>window).global || {};\n\n// WORKAROUND: ng-packagr issue - https://github.com/dherges/ng-packagr/issues/163\nimport * as dragulaNamespace from 'dragula';\nimport { Drake } from 'dragula';\n\nexport const dragula: (containers?: any, options?: any) => Drake = (dragulaNamespace as any).default || dragulaNamespace;","import { Injectable, EventEmitter } from '@angular/core';\nimport { Drake, DragulaOptions } from 'dragula';\nimport { dragula } from './dragula';\n\n@Injectable()\nexport class ReorderableService {\n\n    private _groups: { [k: string]: ReorderableGroup } = {};\n    private _uniqueGroupId = 0;\n\n    /**\n     * Returns a unique string which can be used as a group name if one was not configured.\n     */\n    getUniqueGroupName(): string {\n        return '_uxReorderable_' + this._uniqueGroupId++;\n    }\n\n    /**\n     * Adds the container to the named group.\n     */\n    register(groupName: string, container: ReorderableContainer): ReorderableGroup {\n\n        if (!this._groups[groupName]) {\n            this._groups[groupName] = new ReorderableGroup();\n        }\n\n        this._groups[groupName].register(container);\n\n        return this._groups[groupName];\n    }\n\n    /**\n     * Removes the container from the named group. If it was the last container in the group, destroys the group.\n     */\n    unregister(groupName: string, container: ReorderableContainer): void {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.unregister(container);\n\n            if (group.isEmpty()) {\n                group.destroy();\n\n                delete this._groups[groupName];\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(groupName: string): ReorderableGroup {\n\n        const group = this._groups[groupName];\n\n        if (group) {\n            group.initialize();\n        }\n\n        return group;\n    }\n\n    /**\n     * Returns the group object for the given name.\n     */\n    getGroup(group: string): ReorderableGroup {\n        return this._groups[group];\n    }\n}\n\nexport interface ReorderableContainer {\n    element: Element;\n    getModelFromElement: (element: Element) => any;\n    canMove: (element: Element, container: Element, handle: Element) => boolean;\n}\n\nexport interface ReorderableDragEvent {\n    model: any;\n    element: Element;\n    source: Element;\n}\n\nexport interface ReorderableDragEndEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableDropEvent {\n    model: any;\n    element: Element;\n    target: Element;\n    source: Element;\n    sibling: Element;\n}\n\nexport interface ReorderableCancelEvent {\n    model: any;\n    element: Element;\n}\n\nexport interface ReorderableClonedEvent {\n    clone: Element;\n    element: Element;\n    type: string;\n}\n\n/**\n * Represents a collection of drag-and-drop containers (uxReorderable) that items can be dragged between.\n */\nexport class ReorderableGroup {\n\n    drag = new EventEmitter<ReorderableDragEvent>();\n    dragEnd = new EventEmitter<ReorderableDragEndEvent>();\n    drop = new EventEmitter<ReorderableDropEvent>();\n    cancel = new EventEmitter<ReorderableCancelEvent>();\n    cloned = new EventEmitter<ReorderableClonedEvent>();\n\n    private _instance: Drake;\n    private _containers: ReorderableContainer[] = [];\n\n    private _config: DragulaOptions = {\n        moves: this.canMove.bind(this)\n    };\n\n    /**\n     * Returns true if there are no containers registered with the group.\n     */\n    isEmpty(): boolean {\n        return this._containers.length === 0;\n    }\n\n    /**\n     * Returns the model object (uxReorderableModel) for an elements in one of the containers in the group.\n     */\n    getModelForElement(element: Element): any {\n        for (const container of this._containers) {\n            const model = container.getModelFromElement(element);\n            if (model) {\n                return model;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Adds the container to the group.\n     */\n    register(container: ReorderableContainer): void {\n        this._containers.push(container);\n\n        if (this._instance) {\n            this._instance.containers = this._containers.map((c) => c.element);\n        }\n\n        if (!this._config.mirrorContainer) {\n            this._config.mirrorContainer = container.element;\n        }\n    }\n\n    /**\n     * Removes the container from the group.\n     */\n    unregister(container: ReorderableContainer): void {\n        const index = this._containers.indexOf(container);\n        if (index >= 0) {\n            this._containers.splice(index, 1);\n            if (this._instance) {\n                this._instance.containers = this._containers.map((c) => c.element);\n            }\n        }\n    }\n\n    /**\n     * Creates the dragula instance with the current config and attaches the events, if not already created.\n     */\n    initialize(): void {\n\n        if (this._instance) {\n            return;\n        }\n\n        this._instance = dragula(this._containers.map((c) => c.element), this._config);\n\n        this._instance.on('drag', (element: Element, source: Element) => {\n            this.drag.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                source: source\n            });\n        });\n        this._instance.on('dragend', (element: Element) => {\n            this.dragEnd.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('drop', (element: Element, target: Element, source: Element, sibling: Element) => {\n            this.drop.emit({\n                model: this.getModelForElement(element),\n                element: element,\n                target: target,\n                source: source,\n                sibling: sibling\n            });\n        });\n        this._instance.on('cancel', (element: Element) => {\n            this.cancel.emit({\n                model: this.getModelForElement(element),\n                element: element\n            });\n        });\n        this._instance.on('cloned', (clone: Element, element: Element, type: string) => {\n            this.cloned.emit({\n                clone: clone,\n                element: element,\n                type: type\n            });\n        });\n    }\n\n    /**\n     * Destroys the dragula instance.\n     */\n    destroy(): void {\n        if (this._instance) {\n            this._instance.destroy();\n            this._instance = null;\n        }\n    }\n\n    /**\n     * Finds the container for the containerElement and returns the results of canMove.\n     */\n    private canMove(element: Element, containerElement: Element, handle: Element): boolean {\n        for (let container of this._containers) {\n            if (container.element.isSameNode(containerElement)) {\n                return container.canMove(element, containerElement, handle);\n            }\n        }\n    }\n}\n","import { AfterViewInit, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output, QueryList, Renderer2 } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableCancelEvent, ReorderableClonedEvent, ReorderableContainer, ReorderableDragEndEvent, ReorderableDragEvent, ReorderableDropEvent, ReorderableService } from './reorderable.service';\n\n@Directive({\n    selector: '[uxReorderable]'\n})\nexport class ReorderableDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @Input() reorderableModel: Array<any>;\n    @Input() reorderableGroup: string;\n    @Input() reorderingDisabled: boolean = false;\n    @Output() reorderableModelChange = new EventEmitter<Array<any>>();\n    @Output() reorderStart = new EventEmitter<ReorderEvent>();\n    @Output() reorderCancel = new EventEmitter<ReorderEvent>();\n    @Output() reorderEnd = new EventEmitter<ReorderEvent>();\n\n    @ContentChildren(ReorderableHandleDirective, { read: ElementRef, descendants: true }) handles: QueryList<ElementRef>;\n    @ContentChildren(ReorderableModelDirective) models: QueryList<ReorderableModelDirective>;\n\n    private _container: ReorderableContainer;\n\n    @HostBinding('class.ux-reorderable-container-moving') dragging = false;\n\n    private _subscriptions = new Subscription();\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        private _service: ReorderableService\n    ) { }\n\n    /**\n     * Initialise dragula and bind to all the required events\n     */\n    ngOnInit(): void {\n\n        // If no group name then generate a unique one for this instance only\n        if (!this.reorderableGroup) {\n            this.reorderableGroup = this._service.getUniqueGroupName();\n        }\n\n        this._container = {\n            element: this._elementRef.nativeElement,\n            getModelFromElement: this.getModelFromElement.bind(this),\n            canMove: this.canMove.bind(this)\n        };\n\n        // Register for drag events on this element\n        const group = this._service.register(this.reorderableGroup, this._container);\n        this._subscriptions.add(group.drag.subscribe(this.onDrag.bind(this)));\n        this._subscriptions.add(group.dragEnd.subscribe(this.onDragEnd.bind(this)));\n        this._subscriptions.add(group.drop.subscribe(this.onDrop.bind(this)));\n        this._subscriptions.add(group.cancel.subscribe((event: ReorderableCancelEvent) => this.reorderCancel.emit({ element: event.element, model: event.model })));\n        this._subscriptions.add(group.cloned.subscribe(this.onClone.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this._service.initialize(this.reorderableGroup);\n    }\n\n    /**\n     * We need to destroy the dragula instance on component destroy\n     */\n    ngOnDestroy(): void {\n        this._service.unregister(this.reorderableGroup, this._container);\n        this._subscriptions.unsubscribe();\n    }\n\n    onDrag(event: ReorderableDragEvent): void {\n\n        this.dragging = true;\n\n        this.reorderStart.emit({ element: event.element, model: event.model });\n    }\n\n    /**\n     * This is fired when items get reordered - we need to emit the new order of the models\n     */\n    onDrop(event: ReorderableDropEvent): void {\n\n        // if there is no provided module we can skip this\n        if (!this.reorderableModel) {\n            return;\n        }\n\n        let changed = false;\n\n        if (event.source.isSameNode(this._elementRef.nativeElement)) {\n\n            // remove this model from the list of models\n            const index = this.reorderableModel.indexOf(event.model);\n            if (index >= 0) {\n                this.reorderableModel.splice(index, 1);\n                changed = true;\n            }\n        }\n\n        if (event.target.isSameNode(this._elementRef.nativeElement)) {\n\n            // get the position of sibling element\n            const index = event.sibling && !event.sibling.classList.contains('gu-mirror') ?\n                this.reorderableModel.indexOf(this.getModelFromElement(event.sibling)) :\n                this.reorderableModel.length;\n\n            // insert the model at its new location\n            this.reorderableModel.splice(index, 0, event.model);\n            changed = true;\n        }\n\n        // Emit event if any changes were made\n        if (changed) {\n            this.reorderableModelChange.emit(this.reorderableModel);\n        }\n    }\n\n    /**\n     * Return the model assciated with a particular element in the list.\n     * This should ensure that the items have the draggable model directive applied\n     */\n    getModelFromElement(element: Element): any {\n\n        const model = this.models.find(_model => _model.elementRef.nativeElement === element);\n\n        if (!model) {\n            return null;\n        }\n\n        return model.uxReorderableModel;\n    }\n\n    /**\n     * When we finish dragging remove the utillity class from the element being moved\n     */\n    onDragEnd(event: ReorderableDragEndEvent): void {\n\n        this.dragging = false;\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this._renderer.removeClass(event.element, 'ux-reorderable-moving');\n\n            this.reorderEnd.emit({\n                element: event.element,\n                model: event.model\n            });\n        }\n    }\n\n    /**\n     * We want to ensure that the cloned element is identical\n     * to the original, regardless of it's location in the DOM tree\n     */\n    onClone(event: ReorderableClonedEvent): void {\n\n        if (this._elementRef.nativeElement.contains(event.element)) {\n\n            this.setTableCellWidths(event.element, event.clone);\n            this.captureCanvases(event.element, event.clone);\n\n            this._renderer.addClass(event.element, 'ux-reorderable-moving');\n        }\n    }\n\n    /**\n     * If elements contain handles then only drag when the handle is dragged\n     * otherwise drag whenever an immediate child is specified\n     */\n    canMove(element: Element, container: Element, handle: Element): boolean {\n        if (this.reorderingDisabled) {\n            return false;\n        }\n        return this.handles.length === 0 ? true : !!this.handles.find(_handle => _handle.nativeElement === handle);\n    }\n\n    private setTableCellWidths(source: Element, target: Element): void {\n\n        // if it is not a table row then skip this\n        if (source.tagName !== 'TR') {\n            return;\n        }\n\n        // find any immediate td children and fix their width\n        const sourceCells = Array.from(source.children) as HTMLTableCellElement[];\n        const targetCells = Array.from(target.children) as HTMLTableCellElement[];\n\n        // fix the width of these cells\n        sourceCells.forEach((cell, idx) => targetCells[idx].style.minWidth = getComputedStyle(cell).getPropertyValue('width'));\n    }\n\n    private captureCanvases(source: Element, target: Element): void {\n\n        // find all child canvas elements\n        const sourceCanvases = Array.from(source.querySelectorAll('canvas'));\n        const targetCanvases = Array.from(target.querySelectorAll('canvas'));\n\n        // replicate the canvas content\n        targetCanvases.map(canvas => canvas.getContext('2d'))\n            .forEach((context, idx) => context.drawImage(sourceCanvases[idx], 0, 0));\n\n    }\n\n}\n\nexport interface ReorderEvent {\n    element: Element;\n    model: any;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReorderableDirective } from './reorderable.directive';\nimport { ReorderableHandleDirective } from './reorderable-handle.directive';\nimport { ReorderableModelDirective } from './reorderable-model.directive';\nimport { ReorderableService } from './reorderable.service';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    declarations: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    exports: [\n        ReorderableDirective,\n        ReorderableHandleDirective,\n        ReorderableModelDirective\n    ],\n    providers: [\n        ReorderableService\n    ]\n})\nexport class ReorderableModule { }\n","import { NgModule } from '@angular/core';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { CommonModule } from '@angular/common';\nimport { FacetContainerComponent } from './facet-container.component';\nimport { FacetBaseComponent } from './base/facet-base/facet-base.component';\nimport { FacetHeaderComponent } from './base/facet-header/facet-header.component';\nimport { FacetCheckListComponent } from './facet-check-list/facet-check-list.component';\nimport { FacetTypeaheadListComponent, FacetTypeaheadHighlight } from './facet-typeahead-list/facet-typeahead-list.component';\nimport { FormsModule } from '@angular/forms';\nimport { CheckboxModule } from '../checkbox/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { ReorderableModule } from './../../directives/reorderable/reorderable.module';\n\nconst DECLARATIONS = [\n    FacetContainerComponent,\n    FacetHeaderComponent,\n    FacetBaseComponent,\n    FacetCheckListComponent,\n    FacetTypeaheadListComponent,\n    FacetTypeaheadHighlight\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        CheckboxModule,\n        TooltipModule,\n        ReorderableModule,\n        TypeaheadModule.forRoot()\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FacetsModule { }\n","export class Facet {\n    \n    constructor(\n        public title: string,\n        public data: any = {},\n        public count?: number,\n        public disabled: boolean = false,\n        public id?: string | number\n    ) { }\n}","import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'ux-filter-container',\n    template: `<ng-content></ng-content>\n\n<!-- Add a Clear Button -->\n<div class=\"filter-selected-clear-button\" *ngIf=\"filters.length > 0\" [uxTooltip]=\"clearTooltip || 'Clear All'\" (click)=\"removeAll()\">\n\n    <svg class=\"filter-selected-clear-graphic\" width=\"19\" height=\"12\" viewBox=\"0 0 19 12\" shape-rendering=\"geometricPrecision\">\n        <rect class=\"light-grey\" x=\"0\" y=\"2\" width=\"7\" height=\"2\"></rect>\n        <rect class=\"dark-grey\" x=\"0\" y=\"5\" width=\"9\" height=\"2\"></rect>\n        <rect class=\"light-grey\" x=\"0\" y=\"8\" width=\"7\" height=\"2\"></rect>\n        <path class=\"dark-grey\" d=\"M9,1 h1 l9,9 v1 h-1 l-9,-9 v-1 Z\"></path>\n        <path class=\"dark-grey\" d=\"M9,11 v-1 l9,-9 h1 v1 l-9,9 h-1 Z\"></path>\n    </svg>\n\n</div>`\n})\nexport class FilterContainerComponent {\n\n    @Input() filters: Filter[] = [];\n    @Input() clearTooltip: string;\n    @Output() filtersChange: EventEmitter<Filter[]> = new EventEmitter<Filter[]>();\n    @Output() events: EventEmitter<FilterEvent> = new EventEmitter<FilterEvent>();\n\n\n    addFilter(filter: Filter): void {\n        this.filters.push(filter);\n        this.events.next(new FilterAddEvent(filter));\n        this.filtersChange.emit(this.filters);\n    }\n\n    removeFilter(filter: Filter): void {\n        let idx = this.filters.findIndex(filters => filters === filter);\n\n        if (idx !== -1) {\n            this.filters.splice(idx, 1);\n            this.events.next(new FilterRemoveEvent(filter));\n            this.filtersChange.emit(this.filters);\n        }\n    }\n\n    removeAll(): void {\n        this.events.next(new FilterRemoveAllEvent());\n    }\n\n}\n\nexport interface Filter {\n    group: string;\n    title: string;\n    name: string;\n    initial?: boolean;\n}\n\nexport class FilterAddEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveEvent {\n    constructor(public filter: Filter) {}\n}\n\nexport class FilterRemoveAllEvent {\n}\n\nexport type FilterEvent = FilterAddEvent | FilterRemoveEvent | FilterRemoveAllEvent;","\nimport { Directive, Host, Input, OnDestroy } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { Filter, FilterContainerComponent, FilterRemoveAllEvent } from '../filter-container.component';\n\n@Directive({\n    selector: 'ux-filter-base'\n})\nexport class FilterBaseComponent implements OnDestroy {\n\n    @Input() filters: Filter[];\n\n    private _subscription: Subscription;\n\n    constructor(@Host() private filtersContainer: FilterContainerComponent) {\n        this._subscription = filtersContainer.events.pipe(filter(event => event instanceof FilterRemoveAllEvent)).subscribe(this.removeFilter.bind(this));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    addFilter(_filter: Filter): void {\n        if (!_filter.initial) {\n            this.filtersContainer.addFilter(_filter);\n        }\n    }\n\n    removeFilter(_filter: Filter): void {\n        if (!_filter) {\n            return;\n        }\n\n        this.filtersContainer.removeFilter(_filter);\n    }\n\n}","import { Component, Input } from '@angular/core';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dropdown',\n    template: `<div class=\"btn-group\" dropdown>\n    <button dropdownToggle type=\"button\" class=\"filter-dropdown btn dropdown-toggle\" [class.active]=\"selected !== initial\">{{ selected?.title }} \n        <span class=\"hpe-icon hpe-down\"></span>\n    </button>\n    <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n        <li class=\"dropdown-list-item\" *ngFor=\"let filter of filters\" role=\"menuitem\">\n            <a class=\"dropdown-item\" (click)=\"selectFilter(filter)\">\n                <i class=\"hpe-icon\" [class.hpe-checkmark]=\"filter === selected\"></i>\n                <span class=\"filter-dropdown-title\">{{ filter.name }}</span>\n            </a>\n        </li>\n    </ul>\n</div>`,\n})\nexport class FilterDropdownComponent extends FilterBaseComponent {\n\n    @Input() initial: Filter;\n\n    selected: Filter;\n\n    removeFilter(): void {\n        super.removeFilter(this.selected);\n        this.selected = this.initial;\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n}","import { Component, Input, ViewChild } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead';\nimport { FilterBaseComponent } from '../filter-base/filter-base.component';\nimport { Filter } from '../filter-container.component';\n\n@Component({\n    selector: 'ux-filter-dynamic',\n    template: `<div class=\"btn-group ux-dynamic-filter\" dropdown #dynamicDropdown=\"bs-dropdown\">\n    <button (click)=\"dynamicDropdown.show()\" type=\"button\" [class.active]=\"selected !== initial\" class=\"filter-dropdown btn dropdown-toggle\">{{ selected?.title }} \n        <span class=\"hpe-icon hpe-down\"></span>\n    </button>\n    <ul *dropdownMenu class=\"dropdown-menu\" role=\"menu\">\n\n        <li class=\"dropdown-list-item\" *ngIf=\"showTypeahead\" role=\"menuitem\">\n            <a class=\"dropdown-item\" (click)=\"removeFilter(); dynamicDropdown.hide();\">\n                <i class=\"hpe-icon\" [class.hpe-checkmark]=\"initial === selected\"></i>\n                <span class=\"filter-dropdown-title\">{{ initial.name }}</span>\n            </a>\n        </li>\n\n        <li class=\"dropdown-list-item\" *ngIf=\"selected !== initial && showTypeahead\" role=\"menuitem\">\n            <a class=\"dropdown-item\">\n                <i class=\"hpe-icon hpe-checkmark\"></i>\n                <span class=\"filter-dropdown-title\">{{ selected.name }}</span>\n            </a>\n        </li>\n\n        <hr>\n\n        <li *ngIf=\"showTypeahead\" class=\"typeahead-box\">\n            <input [(ngModel)]=\"searchQuery\" [typeahead]=\"typeaheadItems\" class=\"form-control\" \n            (typeaheadOnSelect)=\"selectOption($event)\" \n            [placeholder]=\"options?.placeholder || defaultOptions.placeholder\"\n            [typeaheadMinLength]=\"options?.minCharacters || defaultOptions.minCharacters\"\n            [typeaheadOptionsLimit]=\"options?.maxResults\">\n        </li>\n\n        <span *ngIf=\"!showTypeahead\">\n            <li class=\"dropdown-list-item\" *ngFor=\"let filter of filters\" role=\"menuitem\">\n                <a class=\"dropdown-item\" (click)=\"selectFilter(filter)\">\n                    <i class=\"hpe-icon\" [class.hpe-checkmark]=\"filter === selected\"></i>\n                    <span class=\"filter-dropdown-title\">{{ filter.name }}</span>\n                </a>\n            </li>\n        </span>\n\n    </ul>\n</div>`,\n    host: {\n        '(document:click)': 'clickOff($event)',\n    }\n})\nexport class FilterDynamicComponent extends FilterBaseComponent {\n\n    @Input() filters: Filter[];\n    @Input() initial: Filter;\n    @Input() options: FilterDynamicListConfig;\n\n    @ViewChild(BsDropdownDirective) dropdown: BsDropdownDirective;\n\n    defaultOptions: FilterDynamicListConfig = {\n        placeholder: '',\n        minCharacters: 3\n    };\n    searchQuery: string;\n    selected: Filter;\n    showTypeahead: boolean = true;\n    typeaheadItems: string[] = [];\n\n    getItems(): string[] {\n        return this.filters.filter(item => item !== this.initial).map(item => item.name);\n    }\n\n    ngOnInit() {\n        this.selected = this.initial;\n        this.typeaheadItems = this.getItems();\n\n        if (this.options && this.options.maxIndividualItems && this.options.maxIndividualItems + 1 >= this.filters.length) {\n            this.showTypeahead = false;\n        }\n    }\n\n    selectOption(typeaheadOption: TypeaheadMatch) {\n        this.removeFilter();\n        let idx = this.filters.findIndex(filter => filter.name === typeaheadOption.value);\n        this.selected = this.filters[idx];\n        this.addFilter(this.selected);\n        this.searchQuery = '';\n        this.dropdown.hide();\n    }\n\n    clickOff(event: MouseEvent) {\n\n        let target = event.target as HTMLElement;\n        let hideDropdown = true;\n\n        while (target && target.nodeName !== 'BODY') {\n            if (target.classList.contains('ux-dynamic-filter')) {\n                hideDropdown = false;\n                break;\n            } else {\n                target = target.parentElement;\n            }\n        }\n\n        if (hideDropdown) {\n            this.searchQuery = '';\n            this.dropdown.hide();\n        }\n\n    }\n\n    removeFilter(): void {\n        if (this.selected !== this.initial) {\n            super.removeFilter(this.selected);\n            this.selected = this.initial;\n        }\n        this.searchQuery = '';\n    }\n\n    selectFilter(filter: Filter) {\n        this.removeFilter();\n        this.selected = filter;\n        this.addFilter(this.selected);\n    }\n\n}\n\nexport interface FilterDynamicListConfig {\n    placeholder?: string;\n    minCharacters?: number;\n    maxResults?: number;\n    maxIndividualItems?: number;\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\nimport { TooltipModule } from '../tooltip/index';\nimport { FilterBaseComponent } from './filter-base/filter-base.component';\nimport { FilterContainerComponent } from './filter-container.component';\nimport { FilterDropdownComponent } from './filter-dropdown/filter-dropdown.component';\nimport { FilterDynamicComponent } from './filter-dynamic/filter-dynamic.component';\n\nconst DECLARATIONS = [\n    FilterBaseComponent,\n    FilterContainerComponent,\n    FilterDropdownComponent,\n    FilterDynamicComponent\n];\n\n@NgModule({\n    imports: [\n        BsDropdownModule.forRoot(),\n        TypeaheadModule.forRoot(),\n        TooltipModule,\n        FormsModule,\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class FilterModule { }\n","import { Component, Input, Directive, HostListener, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-flippable-card',\n    template: `<div class=\"ux-flipper\" [class.ux-flip-card]=\"flipped\" [style.width.px]=\"width\" [style.height.px]=\"height\">\n\n    <div class=\"ux-flippable-card-front\" [style.width.px]=\"width\" [style.height.px]=\"height\">\n        <ng-content select=\"ux-flippable-card-front\"></ng-content>\n    </div>\n\n    <div class=\"ux-flippable-card-back\" [style.width.px]=\"width\" [style.height.px]=\"height\">\n        <ng-content select=\"ux-flippable-card-back\"></ng-content>\n    </div>\n</div>`,\n    host: {\n        '[class.horizontal]': 'direction === \"horizontal\"',\n        '[class.vertical]': 'direction === \"vertical\"'\n    },\n    exportAs: 'ux-flippable-card'\n})\nexport class FlippableCardComponent {\n\n    @Input() direction: 'horizontal' | 'vertical' = 'horizontal';\n    @Input() trigger: 'click' | 'hover' | 'manual' = 'hover';\n    @Input() width: number = 280;\n    @Input() height: number = 200;\n    @Input() flipped: boolean = false;\n    @Output() flippedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    setFlipped(state: boolean) {\n        this.flipped = state;\n        this.flippedChange.emit(this.flipped);\n    }\n\n    toggleFlipped() {\n        this.setFlipped(!this.flipped);\n    }\n\n    @HostListener('click') clickTrigger() {\n\n        // add or remove the class depending on whether or not the card has been flipped\n        if (this.trigger === 'click') {\n            this.toggleFlipped();\n        }\n    }\n\n    @HostListener('mouseenter') hoverEnter() {\n        // if the trigger is hover then begin to flip\n        if (this.trigger === 'hover') {\n            this.setFlipped(true);\n        }\n    }\n\n    @HostListener('mouseleave') hoverExit() {\n        if (this.trigger === 'hover') {\n            this.setFlipped(false);\n        }\n    }\n}\n\n\n@Directive({\n    selector: 'ux-flippable-card-front'\n})\nexport class FlippableCardFrontDirective { }\n\n@Directive({\n    selector: 'ux-flippable-card-back'\n})\nexport class FlippableCardBackDirective { }\n","import { NgModule } from '@angular/core';\n\nimport { FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective } from './flippable-card.component';\n\n@NgModule({\n    exports: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective],\n    declarations: [FlippableCardComponent, FlippableCardBackDirective, FlippableCardFrontDirective]\n})\nexport class FlippableCardModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class FloatingActionButtonsService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open(): void {\n        this.open$.next(true);\n    }\n\n    toggle(): void {\n        this.open$.next(!this.open$.getValue());\n    }\n\n    close(): void {\n        this.open$.next(false);\n    }\n}","import { animate, query, stagger, style, transition, trigger } from '@angular/animations';\nimport { AfterViewInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, HostListener, Input, OnDestroy, QueryList } from '@angular/core';\nimport { TooltipDirective } from 'ngx-bootstrap/tooltip';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-buttons',\n    template: `<ng-content select=\"[fab-primary]\"></ng-content>\n\n<div class=\"floating-action-button-list\" [@fabAnimation]=\"fab.open$ | async\" [ngClass]=\"direction\" *ngIf=\"fab.open$ | async\">\n    <ng-content></ng-content>\n</div>`,\n    providers: [FloatingActionButtonsService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false,\n    animations: [\n        trigger('fabAnimation', [\n            transition('void => true', [\n                query('ux-floating-action-button', style({ opacity: 0 })),\n                query('ux-floating-action-button', stagger(50, animate(250, style({ opacity: 1 }))))\n            ]),\n            transition('true => void', [\n                query('ux-floating-action-button', stagger(-50, animate(250, style({ opacity: 0 }))))\n            ])\n        ])\n    ]\n})\nexport class FloatingActionButtonsComponent implements AfterViewInit, OnDestroy {\n\n    @Input() direction: FloatingActionButtonDirection = 'top';\n    @ContentChildren(TooltipDirective) tooltips: QueryList<TooltipDirective>;\n\n    private _subscription: Subscription;\n\n    constructor(public fab: FloatingActionButtonsService, private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        this._subscription = this.fab.open$.pipe(filter(open => open === false))\n            .subscribe(() => this.tooltips.forEach(tooltip => tooltip.hide()));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /*\n     * Detect any clicks to trigger close of the menu\n     */\n    @HostListener('document:click', ['$event.target']) close(target: HTMLElement): void {\n        if (!this._elementRef.nativeElement.contains(target)) {\n            this.fab.close();\n        }\n    }\n}\n\nexport type FloatingActionButtonDirection = 'top' | 'right' | 'bottom' | 'left';","import { Attribute, ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\nimport { FloatingActionButtonsService } from './floating-action-buttons.service';\n\n@Component({\n    selector: 'ux-floating-action-button',\n    template: `<button class=\"btn floating-action-button\" \n        [class.button-primary]=\"primary\" \n        [class.button-secondary]=\"!primary\" \n        (click)=\"primary ? fab.toggle() : fab.close()\">\n\n    <span class=\"hpe-icon floating-action-button-icon\" *ngIf=\"icon\" [ngClass]=\"icon\"></span>\n    <ng-content *ngIf=\"!icon\"></ng-content>\n\n</button>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class FloatingActionButtonComponent {\n\n    @Input() icon: string;\n    @HostBinding() tabindex = 1;\n\n    primary: boolean = false;\n\n    constructor(@Attribute('fab-primary') primary: string, public fab: FloatingActionButtonsService) {\n        this.primary = primary !== null;\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FloatingActionButtonsComponent } from './floating-action-buttons.component';\nimport { FloatingActionButtonComponent } from './floating-action-button.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ],\n    declarations: [\n        FloatingActionButtonsComponent,\n        FloatingActionButtonComponent\n    ]\n})\nexport class FloatingActionButtonsModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { of } from 'rxjs/observable/of';\nimport { first } from 'rxjs/operators';\n\n@Injectable()\nexport class HierarchyBarService {\n\n    nodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\n\n    private _root: HierarchyBarNode;\n    private _nodes: HierarchyBarNode[] = [];\n\n    /**\n     * Store the root node of the hierarchy tree\n     */\n    setRootNode(root: HierarchyBarNode) {\n\n        // store the root node\n        this._root = root;\n\n        // create a flat structure of nodes\n        this._nodes = this.getNodeList(root);\n\n        // flatten the array - based on the selected node\n        this.nodes$.next(this.getSelectedChildren(root));\n    }\n\n    /**\n     * Select a node. This causes all nodes to be\n     * deselected and the path to the selected node\n     * to be selected\n     */\n    selectNode(node: HierarchyBarNode): void {\n\n        // deselect all nodes\n        this.deselectAll();\n\n        // ensure the current node is selected and its parents\n        this.select(node);\n\n        // emit a new node list to trigger change detection\n        this.nodes$.next(this.getSelectedChildren(this._root));\n    }\n\n    /**\n     * Handles getting children with support for both arrays and observables\n     */\n    getChildren(node: HierarchyBarNode): Observable<HierarchyBarNodeChildren> {\n\n        if (Array.isArray(node.children)) {\n            return of({ loading: false, children: node.children });\n        }\n\n        const children$: Observable<HierarchyBarNode[]> = node.children;\n\n        // if it is an observable then handle loading\n        return Observable.create((observer: Observer<HierarchyBarNodeChildren>) => {\n            // emit initial value\n            observer.next({ loading: true, children: [] });\n\n            // now wait until the children observable completes\n            children$.pipe(first()).subscribe(children => {\n\n                // replace the observable with an array for future loading\n                node.children = children;\n\n                // rebuild the node tree\n                this.setRootNode(this._root);\n\n                // emit the latest value\n                observer.next({ loading: false, children: children });\n\n                // close the observable stream\n                observer.complete();\n            });\n        });\n    }\n\n    /**\n     * Traverses all the parents to ensure they are selected\n     */\n    private select(node: HierarchyBarNode): void {\n        node.selected = true;\n\n        if (node.parent) {\n            this.select(node.parent);\n        }\n    }\n\n    /**\n     * Deselects all nodes\n     */\n    private deselectAll(): void {\n        this._nodes.forEach(node => node.selected = false);\n    }\n\n    /**\n     * Gets all the nodes in the tree as a flat array.\n     * It also stores the parent node in a parent property\n     * on the node for easy traversal in both directions\n     */\n    private getNodeList(node: HierarchyBarNode): HierarchyBarNode[] {\n\n        // if there are no children then return only itself\n        if (!node.children || node.children instanceof Observable || node.children.length === 0) {\n            return [node];\n        }\n\n        // store the parent property\n        node.children.forEach(child => child.parent = node);\n\n        // get all descendants of this node\n        const descendants = node.children.reduce<HierarchyBarNode[]>((nodes, current) => [...nodes, ...this.getNodeList(current)], []);\n\n        return [node, ...descendants];\n    }\n\n    /**\n     * Gets all selected nodes from the parent node.\n     */\n    private getSelectedChildren(node: HierarchyBarNode): HierarchyBarNode[] {\n\n        if (node.children instanceof Observable) {\n            return [node];\n        }\n\n        // get the children - and account for when there is none\n        const children = node.children || [];\n\n        // check if any child is selected\n        const child = children.find(_child => _child.selected);\n\n        // return the remaining chain of selected items\n        return child ? [node, ...this.getSelectedChildren(child)] : [node];\n    }\n}\n\nexport interface HierarchyBarNode {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    parent?: HierarchyBarNode;\n    children?: HierarchyBarNode[] | Observable<HierarchyBarNode[]>;\n}\n\nexport interface HierarchyBarNodeChildren {\n    loading: boolean;\n    children: HierarchyBarNode[];\n}","import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, OnDestroy, Output, QueryList, TemplateRef, ViewChild, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { HierarchyBarNode, HierarchyBarService } from './hierarchy-bar.service';\n\n@Component({\n    selector: 'ux-hierarchy-bar',\n    template: `<!-- Allow content to be placed on the left of the items -->\n<aside class=\"hierarchy-bar-addons\">\n    <ng-content select=\"[uxHierarchyBarLeftAddon]\"></ng-content>\n</aside>\n\n<main #nodelist class=\"hierarchy-bar-nodes\" (uxResize)=\"scrollIntoView()\">\n\n    <div *ngIf=\"overflow$ | async\"\n         #popover=\"ux-popover\"\n         class=\"hierarchy-bar-overflow-indicator\"\n         [style.left.px]=\"nodelist.scrollLeft\"\n         [uxPopover]=\"overflow\"\n         [popoverContext]=\"{ popover: popover }\"\n         placement=\"bottom\"\n         popoverClass=\"hierarchy-bar-popover\">\n        . . .\n    </div>\n\n    <div #nodeElement class=\"hierarchy-bar-node\"\n         *ngFor=\"let node of hierarchyBar.nodes$ | async\">\n\n        <button class=\"hierarchy-bar-node-content\"\n                [attr.aria-label]=\"node.title\"\n                (click)=\"hierarchyBar.selectNode(node)\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"node.icon\" [src]=\"node.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ node.title }}</span>\n\n        </button>\n\n        <!-- Show a dropdown arrow if there are children -->\n        <button *ngIf=\"node.children\"\n              #popover=\"ux-popover\"\n              aria-label=\"Show children\"\n              role=\"button\"\n              class=\"hierarchy-bar-node-arrow hpe-icon hpe-next\"\n              [uxPopover]=\"content\"\n              [popoverContext]=\"{ node: node, popover: popover }\"\n              placement=\"bottom\"\n              popoverClass=\"hierarchy-bar-popover\"\n              tabindex=\"0\">\n        </button>\n\n    </div>\n\n</main>\n\n<!-- Allow content to be placed on the right of the items -->\n<aside class=\"hierarchy-bar-addons\">\n    <ng-content select=\"[uxHierarchyBarRightAddon]\"></ng-content>\n</aside>\n\n<!-- Template for the popover list -->\n<ng-template #content let-node=\"node\" let-popover=\"popover\">\n\n    <!-- Loading Indicator -->\n    <ul class=\"hierarchy-bar-node-list\" *ngIf=\"(hierarchyBar.getChildren(node) | async).loading\">\n\n        <li class=\"hierarchy-bar-node-list-item\">\n            <ng-container [ngTemplateOutlet]=\"loadingIndicator || defaultLoadingIndicator\"></ng-container>\n        </li>\n    </ul>\n\n    <!-- List of children -->\n    <ul class=\"hierarchy-bar-node-list\" *ngIf=\"!(hierarchyBar.getChildren(node) | async).loading\">\n\n        <li *ngFor=\"let child of (hierarchyBar.getChildren(node) | async).children; let first = first\"\n            class=\"hierarchy-bar-node-list-item\"\n            [focusIf]=\"first\"\n            tabindex=\"0\"\n            (keydown.enter)=\"hierarchyBar.selectNode(child); popover.hide()\"\n            (click)=\"hierarchyBar.selectNode(child); popover.hide()\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"child.icon\" [src]=\"child.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ child.title }}</span>\n\n        </li>\n\n    </ul>\n</ng-template>\n\n<!-- Template for the overflow popover list -->\n<ng-template #overflow let-popover=\"popover\">\n\n    <ul class=\"hierarchy-bar-node-list\">\n\n        <li *ngFor=\"let child of overflowNodes$ | async; let first = first\"\n            class=\"hierarchy-bar-node-list-item\"\n            tabindex=\"0\"\n            [focusIf]=\"first\"\n            (click)=\"hierarchyBar.selectNode(child); popover.hide()\"\n            (keydown.enter)=\"hierarchyBar.selectNode(child); popover.hide()\">\n\n            <!-- Show an icon if specifed -->\n            <img class=\"hierarchy-bar-node-icon\" *ngIf=\"child.icon\" [src]=\"child.icon\" alt=\"Hierarchy Bar Icon\">\n\n            <!-- Show the name of the current node -->\n            <span class=\"hierarchy-bar-node-title\">{{ child.title }}</span>\n\n        </li>\n\n    </ul>\n</ng-template>\n\n<!-- Loading Indicator Template -->\n<ng-template #defaultLoadingIndicator>\n    <div class=\"hierarchy-bar-node-icon\" alt=\"Hierarchy Bar Loading Indicator\">\n        <div class=\"spinner spinner-accent spinner-bounce-middle\"></div>\n    </div>\n\n    <!-- Show the name of the current node -->\n    <span class=\"hierarchy-bar-node-title\">Loading...</span>\n</ng-template>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    viewProviders: [HierarchyBarService]\n})\nexport class HierarchyBarComponent implements OnDestroy {\n\n    @Input() set root(node: HierarchyBarNode) {\n        this.hierarchyBar.setRootNode(node);\n    }\n\n    @Input() set selected(node: HierarchyBarNode) {\n        this.hierarchyBar.selectNode(node);\n    }\n\n    @Input() loadingIndicator: TemplateRef<any>;\n\n    @Output() selectedChange = new EventEmitter<HierarchyBarNode>();\n    @ViewChild('nodelist') nodelist: ElementRef;\n    @ViewChildren('nodeElement') nodes: QueryList<ElementRef>;\n\n    overflow$ = new BehaviorSubject<boolean>(false);\n    overflowNodes$ = new BehaviorSubject<HierarchyBarNode[]>([]);\n\n    private _subscription = new Subscription();\n\n    constructor(public hierarchyBar: HierarchyBarService) {\n\n        // subscribe to changes in the selected node\n        const selected = hierarchyBar.nodes$.subscribe(nodes => this.selectedChange.emit(nodes.length === 0 ? null : nodes[nodes.length - 1]));\n        const changed = hierarchyBar.nodes$.pipe(debounceTime(0)).subscribe(() => this.scrollIntoView());\n\n        // store subscriptions\n        this._subscription.add(selected);\n        this._subscription.add(changed);\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    /**\n     * When there is overflow ensure that the rightmost\n     * node remains in view at all times. The nodes no longer\n     * visible be be displayed in a popover available on the\n     * overflow indicator\n     */\n    scrollIntoView(): void {\n\n        if (!this.nodelist) {\n            return;\n        }\n\n        // get the native element\n        const { nativeElement } = this.nodelist;\n\n        // emit whether or not there is overflow\n        this.overflow$.next(nativeElement.scrollWidth > nativeElement.offsetWidth);\n\n        // if the hierarchy bar contents do not overflow then do nothing\n        if (nativeElement.scrollWidth > nativeElement.offsetWidth) {\n\n            // determine the amount of overflow\n            const overflowAmount = nativeElement.scrollWidth - nativeElement.offsetWidth;\n\n            // determine which nodes are not fully visible\n            this.overflowNodes$.next(\n                this.nodes.filter(node => node.nativeElement.offsetLeft < overflowAmount)\n                    .map((node, index) => this.hierarchyBar.nodes$.value[index])\n            );\n\n            // move the scroll position to always show the last itme\n            this.nodelist.nativeElement.scrollLeft = overflowAmount;\n        }\n    }\n}","import { Directive, Output, EventEmitter, ElementRef, HostListener } from '@angular/core';\n\n@Directive({ \n    selector: '[uxClickOutside]'\n})\nexport class ClickOutsideDirective {\n\n    @Output() uxClickOutside = new EventEmitter<MouseEvent>();\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('document:click', ['$event'])\n    click(event: MouseEvent): void {\n        if (this._elementRef.nativeElement !== event.target && !this._elementRef.nativeElement.contains(event.target)) {\n            this.uxClickOutside.emit(event);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ClickOutsideDirective } from './click-outside.directive';\n\n\n@NgModule({\n    exports: [ClickOutsideDirective],\n    declarations: [ClickOutsideDirective]\n})\nexport class ClickOutsideModule { }\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { TooltipComponent } from '../tooltip/index';\n\nlet uniquePopoverId = 0;\n\n@Component({\n  selector: 'ux-popover',\n  template: `<div class=\"popover show\" [ngClass]=\"[placement, customClass]\" [id]=\"id\" [attr.role]=\"role\" (uxClickOutside)=\"clickOutside$.next($event)\">\n    <div class=\"arrow\"></div>\n    <h3 class=\"popover-title\" *ngIf=\"title\">{{ title }}</h3>\n    <div class=\"popover-content\" (cdkObserveContent)=\"reposition()\">\n        <ng-container *ngIf=\"!isTemplateRef\">{{ content }}</ng-container>\n        <ng-container *ngIf=\"isTemplateRef\" [ngTemplateOutlet]=\"content\" [ngTemplateOutletContext]=\"context\"></ng-container>\n    </div>\n</div>`,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PopoverComponent extends TooltipComponent {\n\n  /** Define a unique id for each popover */\n  id: string = `ux-popover-${++uniquePopoverId}`;\n\n  /** If specified allows the popover to show a title */\n  title: string;\n\n  /** This will emit an event any time the user clicks outside the popover */\n  clickOutside$ = new Subject<MouseEvent>();\n\n  /** This will update the title of the popover and trigger change detection */\n  setTitle(title: string): void {\n    this.title = title;\n    this._changeDetectorRef.markForCheck();\n  }\n}","import { ESCAPE } from '@angular/cdk/keycodes';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { Directive, HostBinding, Input, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { takeUntil } from 'rxjs/operators';\nimport { TooltipDirective } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\n\n@Directive({\n    selector: '[uxPopover]',\n    exportAs: 'ux-popover'\n})\nexport class PopoverDirective extends TooltipDirective implements OnInit, OnChanges {\n\n    /** Contains the content of the popover or a TemplateRef for more detailed content */\n    @Input('uxPopover') content: string | TemplateRef<any>;\n\n    /** Optionally display a title in the popover */\n    @Input('popoverTitle') title: string;\n\n    /** Allow the popover to be conditionally disabled */\n    @Input('popoverDisabled') disabled: boolean;\n\n    /** All the user to add a custom class to the popover */\n    @Input('popoverClass') customClass: string = '';\n\n    /** All the user to add a role to the popover - default is tooltip */\n    @Input('popoverRole') role: string = 'tooltip';\n\n    /** Provide the TemplateRef a context object */\n    @Input('popoverContext') context: any = {};\n\n    /** Delay the showing of the popover by a number of miliseconds */\n    @Input('popoverDelay') delay: number = 0;\n\n    /** Specify which events should show the popover */\n    @Input() showTriggers: string[] = ['click'];\n\n    /** Specify which events should hide the popover */\n    @Input() hideTriggers: string[] = ['click', 'clickoutside', 'escape'];\n\n    /** Keep track of the tooltip visibility and update aria-expanded attribute */\n    @HostBinding('attr.aria-expanded') isVisible: boolean = false;\n\n    /** A reference to the CDK portal containing the overlay */\n    protected _portal: ComponentPortal<PopoverComponent>;\n\n    /** A reference to the instance of the popover component when created */\n    protected _instance: PopoverComponent;\n\n    /** Determine whether or not an aria-describedby property originally existed on the element */\n    private _ariaDescribedBy: boolean;\n\n    /** Internally store the type of this component - usual for distinctions when extending the tooltip class */\n    protected _type: string = 'popover';\n\n    /** Set up the triggers and bind to the show/hide events to keep visibility in sync */\n    ngOnInit(): void {\n\n        // set up the event triggers\n        fromEvent(document, 'keydown').pipe(takeUntil(this._onDestroy)).subscribe(this.onKeyDown.bind(this));\n\n        // check if there is an aria-described by attribute\n        this._ariaDescribedBy = this._elementRef.nativeElement.hasAttribute('aria-describedby');\n\n        // set up the default event triggers\n        super.ngOnInit();\n    }\n\n    /**\n     * We need to send input changes to the popover component\n     * We can't use setters as they may trigger before popover initialised and can't resend once initialised\n     **/\n    ngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n\n        if (this._instance && changes.title) {\n            this._instance.setTitle(changes.title.currentValue);\n        }\n    }\n\n    protected createInstance(overlayRef: OverlayRef): PopoverComponent {\n        const instance = overlayRef.attach(this._portal).instance as PopoverComponent;\n\n        // supply the tooltip with the correct properties\n        instance.setTitle(this.title);\n        instance.setContent(this.content);\n        instance.setPlacement(this.placement);\n        instance.setClass(this.customClass);\n        instance.setContext(this.context);\n        instance.setRole(this.role);\n\n        // Update the aria-describedby attribute\n        this.setAriaDescribedBy(instance.id);\n\n        // subscribe to the outside click event\n        instance.clickOutside$.pipe(takeUntil(this._onDestroy)).subscribe(this.onClickOutside.bind(this));\n\n        return instance;\n    }\n\n    protected createPortal(): ComponentPortal<PopoverComponent> {\n        return this._portal || new ComponentPortal(PopoverComponent, this._viewContainerRef);\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n\n        // if visible and the escape key is pressed and it is one of the hide triggers\n        if (this.isVisible && event.keyCode === ESCAPE && this.includes(this.hideTriggers, 'escape')) {\n            this.hide();\n        }\n    }\n\n    private onClickOutside(): void {\n        // if visible and it is one of the hide triggers\n        if (this.isVisible && this.includes(this.hideTriggers, 'clickoutside')) {\n            this.hide();\n        }\n    }\n\n    /** Programmatically update the aria-describedby property */\n    protected setAriaDescribedBy(id: string | null): void {\n\n        // we only want to set the aria-describedby attr when the content is a string and there was no user defined attribute already\n        if (this._ariaDescribedBy === false && typeof this.content === 'string') {\n            super.setAriaDescribedBy(id);\n        }\n    }\n\n}","import { ObserversModule } from '@angular/cdk/observers';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ClickOutsideModule } from '../../directives/click-outside/index';\nimport { TooltipModule } from '../tooltip/index';\nimport { PopoverComponent } from './popover.component';\nimport { PopoverDirective } from './popover.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    ObserversModule,\n    ClickOutsideModule,\n    TooltipModule\n  ],\n  exports: [PopoverDirective],\n  declarations: [PopoverComponent, PopoverDirective],\n  entryComponents: [PopoverComponent]\n})\nexport class PopoverModule { }\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FocusIfModule } from '../../directives/focus-if/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { HierarchyBarComponent } from './hierarchy-bar.component';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule,\n        FocusIfModule,\n        PopoverModule\n    ],\n    exports: [HierarchyBarComponent],\n    declarations: [HierarchyBarComponent],\n})\nexport class HierarchyBarModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class SidePanelService {\n\n    open$ = new BehaviorSubject<boolean>(false);\n\n    open() {\n        this.open$.next(true);\n    }\n\n    close() {\n        this.open$.next(false);\n    }\n}","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy, HostBinding, HostListener, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SidePanelService } from './side-panel.service';\n\n@Component({\n    selector: 'ux-side-panel',\n    exportAs: 'ux-side-panel',\n    template: `<div *ngIf=\"modal && open\" class=\"modal-backdrop\"\n    [style.position]=\"position\"\n    [style.top]=\"cssTop\"></div>\n\n<div class=\"ux-side-panel-host\"\n    [class.modal-panel]=\"modal\"\n    [style.position]=\"position\"\n    [style.width]=\"hostWidth\"\n    [style.top]=\"cssTop\">\n    <ng-content></ng-content>\n</div>\n`,\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel'\n    }\n})\nexport class SidePanelComponent implements OnInit, OnDestroy {\n\n    @Input()\n    @HostBinding('class.open')\n    get open(): boolean {\n        return this.service.open$.value;\n    }\n\n    set open(value: boolean) {\n        this.service.open$.next(value);\n    }\n\n    @Input()\n    @HostBinding('class.inline')\n    inline = false;\n\n    @Input()\n    attachTo: 'window' | 'container' = 'window';\n\n    @Input()\n    width: string | number = '50%';\n\n    @Input()\n    top: string | number = '0';\n\n    @Input()\n    @HostBinding('attr.aria-modal')\n    modal = false;\n\n    @Input()\n    @HostBinding('class.animate')\n    animate = false;\n\n    @Input()\n    closeOnExternalClick = false;\n\n    @Output()\n    openChange = new EventEmitter<boolean>();\n\n    get position() {\n        if (this.inline) {\n            return 'static';\n        }\n        if (this.attachTo === 'container') {\n            return 'absolute';\n        }\n        return 'fixed';\n    }\n\n    get cssWidth(): string {\n        if (typeof this.width === 'number') {\n            return this.width === 0 ? '0' : this.width + 'px';\n        }\n        return this.width;\n    }\n\n    get cssTop(): string {\n        if (typeof this.top === 'number') {\n            return this.top === 0 ? '0' : this.top + 'px';\n        }\n        return this.top;\n    }\n\n    @HostBinding('style.width')\n    get componentWidth(): string {\n        if (this.inline) {\n            return this.open ? this.cssWidth : '0';\n        }\n        return null;\n    }\n\n    get hostWidth() {\n        return this.inline ? '100%' : this.cssWidth;\n    }\n\n    private _subscription: Subscription;\n\n    constructor(\n        protected service: SidePanelService,\n        private _elementRef: ElementRef\n    ) { }\n\n    ngOnInit() {\n        this._subscription = this.service.open$.subscribe((next) => {\n            this.openChange.emit(next);\n        });\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n    }\n\n    openPanel() {\n        this.service.open();\n    }\n\n    @HostListener('document:keyup.escape')\n    closePanel() {\n        this.service.close();\n    }\n\n    @HostListener('document:click', ['$event'])\n    clickHandler(event: MouseEvent) {\n        if (!this.open || !this.closeOnExternalClick) {\n            return;\n        }\n\n        const target = event.target as HTMLElement;\n\n        if (!this._elementRef.nativeElement.contains(target) ||\n            (target && target.classList.contains('modal-backdrop'))) {\n            this.closePanel();\n        }\n    }\n}","import { Component, Directive, Input, Output, EventEmitter, ContentChild, ElementRef } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SidePanelComponent } from '../side-panel/side-panel.component';\nimport { SidePanelService } from '../side-panel/side-panel.service';\n\n@Directive({\n    selector: '[uxItemDisplayPanelContent]'\n})\nexport class ItemDisplayPanelContentDirective { }\n\n@Directive({\n    selector: '[uxItemDisplayPanelFooter]'\n})\nexport class ItemDisplayPanelFooterDirective { }\n\n@Component({\n    selector: 'ux-item-display-panel',\n    template: `<div class=\"ux-side-panel-host ux-item-display-panel\"\n    [class.box-shadow]=\"boxShadow\"\n    [style.position]=\"position\"\n    [style.width]=\"hostWidth\"\n    [style.top]=\"cssTop\">\n\n    <div class=\"ux-side-panel-header\" [class.item-display-panel-shadow]=\"shadow\">\n        <h3>{{ header }}</h3>\n        <button *ngIf=\"closeVisible\" type=\"button\" class=\"btn btn-lg btn-link btn-icon button-secondary\" (click)=\"visible = false\">\n            <i class=\"hpe-icon hpe-close\"></i>\n        </button>\n    </div>\n\n    <div class=\"ux-side-panel-content\">\n        <ng-content select=\"[uxItemDisplayPanelContent]\"></ng-content>\n    </div>\n\n    <div class=\"ux-side-panel-footer\" *ngIf=\"footer\">\n        <ng-content select=\"[uxItemDisplayPanelFooter]\"></ng-content>\n    </div>\n\n</div>\n`,\n    providers: [SidePanelService],\n    host: {\n        'class': 'ux-side-panel ux-item-display-panel'\n    }\n})\nexport class ItemDisplayPanelComponent extends SidePanelComponent {\n\n    @Input() header: string;\n\n    @Input() boxShadow: boolean = true;\n\n    @Input() closeVisible: boolean = true;\n\n    get preventClose(): boolean {\n        return !this.closeOnExternalClick;\n    }\n\n    @Input()\n    set preventClose(value: boolean) {\n        this.closeOnExternalClick = !value;\n    }\n\n    @Input() shadow: boolean = false;\n\n    @ContentChild(ItemDisplayPanelFooterDirective) footer: ItemDisplayPanelFooterDirective;\n\n    @Output() visibleChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /**\n     * @deprecated\n     * Title used for adding tooltips and shouldn't be used as an input\n     * instead header will be used. This is here to support backward compatibility only\n     * this property should not be used.\n     */\n    @Input()\n    set title(value: string) {\n        this.header = value;\n    }\n\n    get title() {\n        return this.header;\n    }\n\n    @Input()\n    set visible(visible: boolean) {\n        this.open = visible;\n    }\n\n    get visible() {\n        return this.open;\n    }\n\n    private _itemDisplayPanelSubscription: Subscription;\n\n    constructor(service: SidePanelService, elementRef: ElementRef) {\n        super(service, elementRef);\n\n        this.animate = false;\n        this.closeOnExternalClick = true;\n    }\n\n    ngOnInit() {\n        this._itemDisplayPanelSubscription = this.service.open$.subscribe((next) => {\n            this.visibleChange.emit(next);\n        });\n    }\n\n    ngOnDestroy() {\n        this._itemDisplayPanelSubscription.unsubscribe();\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ItemDisplayPanelComponent, ItemDisplayPanelContentDirective, ItemDisplayPanelFooterDirective } from './item-display-panel.component';\n\nconst DECLARATIONS = [\n    ItemDisplayPanelComponent,\n    ItemDisplayPanelContentDirective,\n    ItemDisplayPanelFooterDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class ItemDisplayPanelModule {}","import { Component, Input, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'ux-wizard-step',\n    template: `<ng-container *ngIf=\"active\">\n    <ng-content></ng-content>\n</ng-container>`\n})\nexport class WizardStepComponent {\n    \n    @Input() header: string;\n    @Input() valid: boolean = true;\n    @Input() visitedChange = new EventEmitter<boolean>();\n\n    private _active: boolean = false;\n    private _visited: boolean = false;\n\n    @Input() \n    get visited(): boolean {\n        return this._visited;\n    }\n\n    set visited(value: boolean) {\n        this._visited = value;\n        this.visitedChange.next(value);\n    }\n\n    set active(value: boolean) {\n        \n        // store the active state of the step\n        this._active = value;\n\n        // if the value is true then the step should also be marked as visited\n        if (value === true) {\n            this.visited = true;\n        }\n    }\n\n    get active(): boolean {\n        return this._active;\n    }\n\n}","import { AfterViewInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList } from '@angular/core';\nimport { WizardStepComponent } from './wizard-step.component';\n\n@Component({\n    selector: 'ux-wizard',\n    template: `<div class=\"wizard-body\">\n\n    <div class=\"wizard-steps\">\n\n        <div class=\"wizard-step\" [class.active]=\"stp.active\" [class.visited]=\"stp.visited\" [class.invalid]=\"stp.active && !stp.valid && invalidIndicator\" (click)=\"gotoStep(stp)\" *ngFor=\"let stp of steps\">\n            {{ stp.header }}\n        </div>\n\n    </div>\n\n    <div class=\"wizard-content\">\n        <ng-content></ng-content>\n    </div>\n\n</div>\n\n<div class=\"wizard-footer\">\n    <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"previousVisible\" [uxTooltip]=\"previousTooltip\" [disabled]=\"previousDisabled || step === 0\"\n        (click)=\"previous(); tip.hide()\">{{ previousText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"nextVisible && !isLastStep()\" [uxTooltip]=\"nextTooltip\" [disabled]=\"nextDisabled\"\n        (click)=\"next(); tip.hide()\">{{ nextText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"finishVisible && isLastStep() || finishAlwaysVisible\" [uxTooltip]=\"finishTooltip\"\n        [disabled]=\"finishDisabled\" (click)=\"finish(); tip.hide()\">{{ finishText }}</button>\n\n    <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"cancelVisible && !isLastStep() || cancelAlwaysVisible\" [uxTooltip]=\"cancelTooltip\"\n        [disabled]=\"cancelDisabled\" (click)=\"cancel(); tip.hide()\">{{ cancelText }}</button>\n</div>`,\n    host: {\n        '[class]': 'orientation'\n    }\n})\nexport class WizardComponent implements AfterViewInit {\n\n    private _step: number = 0;\n\n    @ContentChildren(WizardStepComponent) steps = new QueryList<WizardStepComponent>();\n\n    @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    @Input() nextText: string = 'Next';\n    @Input() previousText: string = 'Previous';\n    @Input() cancelText: string = 'Cancel';\n    @Input() finishText: string = 'Finish';\n\n    @Input() nextTooltip: string = 'Go to the next step';\n    @Input() previousTooltip: string = 'Go to the previous step';\n    @Input() cancelTooltip: string = 'Cancel the wizard';\n    @Input() finishTooltip: string = 'Finish the wizard';\n\n    @Input() nextDisabled: boolean = false;\n    @Input() previousDisabled: boolean = false;\n    @Input() cancelDisabled: boolean = false;\n    @Input() finishDisabled: boolean = false;\n\n    @Input() nextVisible: boolean = true;\n    @Input() previousVisible: boolean = true;\n    @Input() cancelVisible: boolean = true;\n    @Input() finishVisible: boolean = true;\n    @Input() cancelAlwaysVisible: boolean = false;\n    @Input() finishAlwaysVisible: boolean = false;\n\n    @Output() onNext = new EventEmitter<number>();\n    @Output() onPrevious = new EventEmitter<number>();\n    @Output() onCancel = new EventEmitter<void>();\n    @Output() onFinishing = new EventEmitter<void>();\n    @Output() onFinish = new EventEmitter<void>();\n    @Output() stepChanging = new EventEmitter<StepChangingEvent>();\n    @Output() stepChange = new EventEmitter<number>();\n\n    invalidIndicator: boolean = false;\n\n    @Input()\n    get step() {\n        return this._step;\n    }\n    set step(value: number) {\n\n        // only accept numbers as valid options\n        if (typeof value === 'number') {\n\n            // store the active step\n            this._step = value;\n\n            // update which steps should be active\n            this.update();\n\n            // emit the change event\n            this.stepChange.next(this.step);\n\n            // reset the invalid state\n            this.invalidIndicator = false;\n        }\n    }\n\n    ngAfterViewInit(): void {\n\n        // initially set the correct visibility of the steps\n        setTimeout(this.update.bind(this));\n    }\n\n    /**\n     * Navigate to the next step\n     */\n    next(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step + 1));\n\n        // check if current step is invalid\n        if (!this.getCurrentStep().valid) {\n            this.invalidIndicator = true;\n            return;\n        }\n\n        // check if we are currently on the last step\n        if ((this.step + 1) < this.steps.length) {\n            this.step++;\n\n            // emit the current step\n            this.onNext.next(this.step);\n        }\n    }\n\n    /**\n     * Navigate to the previous step\n     */\n    previous(): void {\n\n        this.stepChanging.next(new StepChangingEvent(this.step, this.step - 1));\n\n        // check if we are currently on the last step\n        if (this.step > 0) {\n            this.step--;\n\n            // emit the current step\n            this.onPrevious.next(this.step);\n        }\n    }\n\n    /**\n     * Perform actions when the finish button is clicked\n     */\n    finish(): Promise<void> {\n\n        // fires when the finish button is clicked always\n        this.onFinishing.next();\n\n        /**\n         * This is required because we need to ensure change detection has run\n         * to determine whether or not we have the latest value for the 'valid' input\n         * on the current step. Unfortunately we can't use ChangeDetectorRef as we are looking to run\n         * on content children, and we cant use ApplicationRef.tick() as this does not work in a hybrid app, eg. our docs\n         */\n        return new Promise<void>(resolve => {\n            setTimeout(() => {\n\n                // only fires when the finish button is clicked and the step is valid\n                if (this.getCurrentStep().valid) {\n                    this.onFinish.next();        \n                }\n\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Perform actions when the cancel button is clicked\n     */\n    cancel(): void {\n        this.onCancel.next();\n    }\n\n    /**\n     * Update the active state of each step\n     */\n    update(): void {\n        // update which steps should be active\n        this.steps.forEach((step, idx) => step.active = idx === this.step);\n    }\n\n    /**\n     * Jump to a specific step only if the step has previously been visited\n     */\n    gotoStep(step: WizardStepComponent): void {\n        if (step.visited) {\n\n            const stepIndex = this.steps.toArray().findIndex(stp => stp === step);\n\n            this.stepChanging.next(new StepChangingEvent(this.step, stepIndex));\n\n            this.step = stepIndex;\n        }\n    }\n\n    /**\n     * Determine if the current step is the last step\n     */\n    isLastStep(): boolean {\n        return this.step === (this.steps.length - 1);\n    }\n\n    /**\n     * Reset the wizard - goes to first step and resets visited state\n     */\n    reset(): void {\n\n        // mark all steps as not visited\n        this.steps.forEach(step => step.visited = false);\n\n        // go to the first step\n        this.step = 0;\n    }\n\n    /**\n     * Get the step at the current index\n     */\n    getCurrentStep(): WizardStepComponent {\n        return this.getStepAtIndex(this.step);\n    }\n\n    /**\n     * Return a step at a specific index\n     */\n    getStepAtIndex(index: number): WizardStepComponent {\n        return this.steps.toArray()[index];\n    }\n}\n\nexport class StepChangingEvent {\n    constructor(public from: number, public to: number) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WizardComponent } from './wizard.component';\nimport { WizardStepComponent } from './wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    WizardComponent,\n    WizardStepComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TooltipModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class WizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\n\n/**\n * This service is required to provide a form of communication\n * between the marquee wizard steps and the containing marquee wizard.\n * We cannot inject the Host due to the steps being content children \n * rather than view children.\n */\n@Injectable()\nexport class MarqueeWizardService {\n    valid$ = new Subject<MarqueeWizardValidEvent>();\n}\n\nexport interface MarqueeWizardValidEvent {\n    step: MarqueeWizardStepComponent;\n    valid: boolean;\n}","import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { WizardStepComponent } from '../wizard/index';\nimport { MarqueeWizardService } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard-step',\n    template: `<ng-container *ngIf=\"active\">\n    <ng-content></ng-content>\n</ng-container>`\n})\nexport class MarqueeWizardStepComponent extends WizardStepComponent {\n\n    @Input() icon: string;\n    @Input() completed: boolean = false;\n    @Output() completedChange = new EventEmitter<boolean>();\n    \n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n\n        if (this._marqueeWizardService) {\n            this._marqueeWizardService.valid$.next({ step: this, valid: valid });\n        }\n    }\n\n    private _valid: boolean = true;\n\n    constructor(private _marqueeWizardService: MarqueeWizardService) {\n        super();\n    }\n\n    /**\n     * Update the completed state and emit the latest value\n     * @param completed whether or not the step is completed\n     */\n    setCompleted(completed: boolean): void {\n        this.completed = completed;\n        this.completedChange.emit(completed);\n    }\n}","import { Component, ContentChildren, Input, QueryList, TemplateRef } from '@angular/core';\nimport { filter } from 'rxjs/operators';\nimport { WizardComponent } from '../wizard/index';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { MarqueeWizardService, MarqueeWizardValidEvent } from './marquee-wizard.service';\n\n@Component({\n    selector: 'ux-marquee-wizard',\n    template: `<div class=\"marquee-wizard-side-panel\">\n\n    <div class=\"marquee-wizard-description-container\" *ngIf=\"description\">\n        <!-- If a template was provided display it -->\n        <ng-container *ngIf=\"isTemplate\" [ngTemplateOutlet]=\"description\"></ng-container>\n\n        <!-- Otherwise wimply display the string -->\n        <ng-container *ngIf=\"!isTemplate\">\n            <p>{{ description }}</p>\n        </ng-container>\n    </div>\n\n    <ul class=\"marquee-wizard-steps\">\n\n        <li class=\"marquee-wizard-step\" *ngFor=\"let step of steps\" (click)=\"gotoStep(step)\" [class.active]=\"step.active\" [class.visited]=\"step.visited\" [class.invalid]=\"!step.valid\">\n            <i class=\"marquee-wizard-step-icon\" [ngClass]=\"step.icon\"></i>\n            <span class=\"marquee-wizard-step-title\">{{ step.header }}</span>\n            <span class=\"marquee-wizard-step-status hpe-icon hpe-checkmark\" *ngIf=\"step.completed\"></span>\n        </li>\n\n    </ul>\n</div>\n\n<div class=\"marquee-wizard-content-panel\">\n    <div class=\"marquee-wizard-content\">\n        <ng-content></ng-content>\n    </div>\n\n    <div class=\"modal-footer\">\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"previousVisible\" [uxTooltip]=\"previousTooltip\" container=\"body\"\n            [disabled]=\"previousDisabled || step === 0\" (click)=\"previous(); tip.hide()\">{{ previousText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"nextVisible && !isLastStep()\" [uxTooltip]=\"nextTooltip\" container=\"body\"\n            [disabled]=\"nextDisabled\" (click)=\"next(); tip.hide()\">{{ nextText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-primary\" *ngIf=\"finishVisible && isLastStep() || finishAlwaysVisible\" [uxTooltip]=\"finishTooltip\"\n            container=\"body\" [disabled]=\"finishDisabled\" (click)=\"finish(); tip.hide()\">{{ finishText }}</button>\n\n        <button #tip=\"ux-tooltip\" class=\"btn button-secondary\" *ngIf=\"cancelVisible && !isLastStep() || cancelAlwaysVisible\" [uxTooltip]=\"cancelTooltip\"\n            container=\"body\" [disabled]=\"cancelDisabled\" (click)=\"cancel(); tip.hide()\">{{ cancelText }}</button>\n    </div>\n</div>`,\n    providers: [ MarqueeWizardService ]\n})\nexport class MarqueeWizardComponent extends WizardComponent {\n\n    @Input() description: string | TemplateRef<any>;\n    @ContentChildren(MarqueeWizardStepComponent) steps = new QueryList<MarqueeWizardStepComponent>();\n\n    get isTemplate(): boolean {\n        return this.description && this.description instanceof TemplateRef;\n    }\n\n    constructor(marqueeWizardService: MarqueeWizardService) {\n        super();\n\n        marqueeWizardService.valid$.pipe(\n            filter((event: MarqueeWizardValidEvent) => !event.valid)\n        ).subscribe(this.validChange.bind(this));\n    }\n\n    /**\n     * If the current step is valid, mark it as\n     * complete and go to the next step\n     */\n    next(): void {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        if (step.valid) {\n            super.next();\n\n            // mark this step as completed\n            step.setCompleted(true);\n        }\n    }\n\n    /**\n     * Emit the onFinishing event and if valid the onFinish event.\n     * Also mark the final step as completed if it is valid\n     */\n    finish(): Promise<void> {\n\n        // get the current step\n        const step = this.getCurrentStep() as MarqueeWizardStepComponent;\n\n        // call the original finish function\n        return super.finish().then(() => {\n            // if the step is valid indicate that it is now complete\n            if (step.valid) {\n                step.setCompleted(true);\n            }\n        });\n    }\n\n    /**\n     * If a step in the wizard becomes invalid, all steps sequentially after\n     * it, should become unvisited and incomplete\n     */\n    validChange(state: MarqueeWizardValidEvent): void {\n\n        const steps = this.steps.toArray();\n        const current = steps.findIndex(step => step === state.step);\n        const affected = steps.slice(current);\n\n        affected.forEach(step => {\n\n            // the step should no longer be completed\n            step.completed = false;\n\n            // if the step is not the current step then also mark it as unvisited\n            if (step !== state.step) {\n                step.visited = false;\n            }\n        });\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { WizardModule } from '../wizard/index';\nimport { MarqueeWizardComponent } from './marquee-wizard.component';\nimport { MarqueeWizardStepComponent } from './marquee-wizard-step.component';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        WizardModule,\n        TooltipModule\n    ],\n    exports: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ],\n    declarations: [\n        MarqueeWizardComponent,\n        MarqueeWizardStepComponent\n    ]\n})\nexport class MarqueeWizardModule { }\n","import { Injectable } from '@angular/core';\nimport { Http, ResponseContentType } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { of } from 'rxjs/observable/of';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class AudioService {\n\n    private _audioBuffer: AudioBuffer;\n    private _audioBufferSource: AudioBufferSourceNode;\n    private _audioContext: AudioContext;\n    private _gainNode: GainNode;\n    private _analyserNode: AnalyserNode;\n\n    constructor(private _http: Http) { }\n\n    getAudioFileMetadata(mediaElement: HTMLMediaElement): Observable<AudioMetadata> {\n        return Observable.create((observer: Observer<AudioMetadata>) => {\n            this._http.request(mediaElement.src, { responseType: ResponseContentType.Blob }).subscribe(response => {\n\n                const filename = mediaElement.src.substring(mediaElement.src.lastIndexOf('/') + 1);\n                const extension = mediaElement.src.substring(mediaElement.src.lastIndexOf('.') + 1).toLowerCase();\n                const blob = response.blob();\n                let description;\n\n                switch (extension) {\n                    case 'mp3':\n                        description = 'MPEG audio layer 3 file';\n                        break;\n\n                    case 'wma':\n                        description = 'Windows media audio file';\n                        break;\n\n                    case 'wav':\n                        description = 'WAVE audio file';\n                        break;\n\n                    case 'ogg':\n                        description = 'Ogg Vorbis file';\n                        break;\n\n                    case 'aac':\n                        description = 'Advanced audio coding file';\n                        break;\n\n                    case 'midi':\n                        description = 'Musical instrument digital interface file';\n                        break;\n\n                    default:\n                        description = 'Audio file';\n                        break;\n                }\n\n                observer.next({\n                    filename: filename,\n                    extension: extension,\n                    description: description,\n                    size: blob.size\n                });\n            });\n        });\n    }\n\n    getWaveformFromUrl(url: string): Observable<Float32Array[]> {\n\n        // if audio context is not support return a stream of empty data\n        if (!(<any>window).AudioContext) {\n            return of<Float32Array[]>([new Float32Array(0)]);\n        }\n\n        this._audioContext = new AudioContext();\n        this.createVolumeNode();\n        this.createAnalyserNode();\n\n        return Observable.create((observer: Observer<Float32Array[]>) => {\n\n            // load the media from the URL provided\n            this._http.request(url, { responseType: ResponseContentType.ArrayBuffer }).subscribe(response => {\n                this.getAudioBuffer(response.arrayBuffer()).subscribe(audioBuffer => {\n\n                    // create the buffer source\n                    this.createBufferSource(audioBuffer);\n\n                    let dataPoints: Float32Array[] = [];\n                    const channels = this._audioBuffer.numberOfChannels;\n\n                    // extract the data from each channel\n                    for (let channelIdx = 0; channelIdx < channels; channelIdx++) {\n                        dataPoints[channelIdx] = this._audioBuffer.getChannelData(channelIdx);\n                    }\n\n                    observer.next(dataPoints);\n                    observer.complete();\n\n                    // cleanup after ourselves\n                    dataPoints = null;\n                }, (error) => observer.error(error));\n            }, (error) => observer.error(error));\n        });\n    }\n\n    getWaveformPoints(channels: Float32Array[] = [], skip: number = 1000): WaveformPoint[] {\n\n        const waveform: WaveformPoint[] = [];\n        const duration = channels.length > 0 ? channels[0].length : 0;\n\n        // convert each channel data to a series of waveform points\n        for (let idx = 0; idx < duration; idx += skip) {\n\n            // get all the channel data for a specific point\n            const points = channels.map(channel => channel[idx]);\n\n            // find the minimum point and maximum points at each position across all channels\n            waveform.push({\n                min: points.reduce((previous, current) => current < previous ? current : previous),\n                max: points.reduce((previous, current) => current > previous ? current : previous)\n            });\n        }\n\n        return waveform;\n    }\n\n    private getAudioBuffer(arrayBuffer: ArrayBuffer): Observable<AudioBuffer> {\n        return Observable.create((observer: Observer<AudioBuffer>) => {\n            this.getOfflineAudioContext().decodeAudioData(arrayBuffer, (audioBuffer: AudioBuffer) => {\n                observer.next(audioBuffer);\n                observer.complete();\n            }, (error) => observer.error(error));\n        });\n    }\n\n    private getOfflineAudioContext(): OfflineAudioContext {\n        return new OfflineAudioContext(1, 2, this._audioContext.sampleRate || 44100);\n    }\n\n    private createBufferSource(audioBuffer: AudioBuffer): void {\n        this.disconnectSource();\n\n        this._audioBuffer = audioBuffer;\n        this._audioBufferSource = this._audioContext.createBufferSource();\n        this._audioBufferSource.buffer = this._audioBuffer;\n        this._audioBufferSource.connect(this._analyserNode);\n    }\n\n    private createVolumeNode(): void {\n        this._gainNode = this._audioContext.createGain();\n        this._gainNode.connect(this._audioContext.destination);\n    }\n\n    private createAnalyserNode(): void {\n        this._analyserNode = this._audioContext.createAnalyser();\n        this._analyserNode.connect(this._gainNode);\n    }\n\n    private disconnectSource(): void {\n        if (this._audioBufferSource) {\n            this._audioBufferSource.disconnect();\n        }\n    }\n}\n\nexport interface WaveformPoint {\n    min: number;\n    max: number;\n}\n\nexport interface AudioMetadata {\n    filename: string;\n    extension: string;\n    description: string;\n    size: number;\n}","import { NgModule } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { AudioService } from './audio.service';\n\n@NgModule({\n    imports: [ HttpModule ],\n    providers: [AudioService]\n})\nexport class AudioServiceModule { }\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { concat } from 'rxjs/observable/concat';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { Observer } from 'rxjs/Observer';\n\n@Injectable()\nexport class FrameExtractionService {\n\n    private createVideoPlayer(source: string): HTMLVideoElement {\n        let videoPlayer = document.createElement('video');\n        videoPlayer.preload = 'auto';\n        videoPlayer.src = source;\n        return videoPlayer;\n    }\n\n    private createCanvas(width: number, height: number): HTMLCanvasElement {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        return canvas;\n    }\n\n    private goToFrame(videoPlayer: HTMLVideoElement, time: number): Observable<number> {\n        videoPlayer.currentTime = time;\n        return fromEvent(videoPlayer, time === 0 ? 'loadeddata' : 'seeked');\n    }\n\n    private getThumbnail(videoPlayer: HTMLVideoElement, canvas: HTMLCanvasElement, time: number, width: number = 160, height: number = 90): Observable<ExtractedFrame> {\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            // go to specified frame\n            let subscription = this.goToFrame(videoPlayer, time).subscribe((event: any) => {\n                // create image from current frame\n                canvas.getContext('2d').drawImage(videoPlayer, 0, 0, width, height);\n                observer.next({ image: canvas.toDataURL(), width: width, height: height, time: time });\n                observer.complete();\n                subscription.unsubscribe();\n            });\n        });\n    }\n\n    getFrameThumbnail(source: string, width: number, height: number, time: number): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        let frameSubscription = this.getThumbnail(videoPlayer, canvas, time, width, height);\n\n        // ensure we release memory after we are finished\n        frameSubscription.subscribe(null, null, () => {\n            videoPlayer = null;\n            canvas = null;\n        });\n\n        return frameSubscription;\n    }\n\n    getFrameThumbnails(source: string, width: number, height: number, start: number, end: number, skip: number = 5): Observable<ExtractedFrame> {\n\n        // create required elements\n        let videoPlayer = this.createVideoPlayer(source);\n        let canvas = this.createCanvas(width, height);\n\n        return Observable.create((observer: Observer<ExtractedFrame>) => {\n\n            fromEvent(videoPlayer, 'loadedmetadata').subscribe(() => {\n\n                // calculate the frames required\n                let frames = [];\n\n                for (let idx = start; idx < end; idx += skip) {\n                    frames.push(this.getThumbnail(videoPlayer, canvas, idx, width, height));\n                }\n\n                concat(...frames).subscribe((frame: ExtractedFrame) => observer.next(frame), null, () => {\n                    videoPlayer = null;\n                    canvas = null;\n                    observer.complete();\n                });\n            });\n\n        });\n    }\n\n}\n\nexport interface ExtractedFrame {\n    image: string;\n    width: number;\n    height: number;\n    time: number;\n}","import { NgModule } from '@angular/core';\n\nimport { FrameExtractionService } from './frame-extraction.service';\n\n@NgModule({\n    providers: [FrameExtractionService],\n})\nexport class FrameExtractionModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { Observer } from 'rxjs/Observer';\nimport { Subject } from 'rxjs/Subject';\nimport { ExtractedFrame, FrameExtractionService } from '../../services/frame-extraction/index';\nimport { MediaPlayerType } from './media-player.component';\n\n@Injectable()\nexport class MediaPlayerService {\n\n    source: string;\n    type: MediaPlayerType = 'video';\n    loaded: boolean = false;\n\n    /*\n        Create observables for media player events\n    */\n    playing: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    initEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    abortEvent: Subject<void> = new Subject<void>();\n    canPlayEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    canPlayThroughEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    durationChangeEvent: Subject<number> = new Subject<number>();\n    endedEvent: Subject<void> = new Subject<void>();\n    errorEvent: Subject<any> = new Subject<any>();\n    loadedDataEvent: Subject<any> = new Subject<any>();\n    loadedMetadataEvent: Subject<any> = new Subject<any>();\n    loadStartEvent: Subject<void> = new Subject<void>();\n    pauseEvent: Subject<void> = new Subject<void>();\n    playEvent: Subject<void> = new Subject<void>();\n    playingEvent: Subject<boolean> = new Subject<boolean>();\n    rateChangeEvent: Subject<number> = new Subject<number>();\n    seekedEvent: Subject<number> = new Subject<number>();\n    seekingEvent: Subject<number> = new Subject<number>();\n    stalledEvent: Subject<void> = new Subject<void>();\n    suspendEvent: Subject<void> = new Subject<void>();\n    timeUpdateEvent: Subject<number> = new Subject<number>();\n    volumeChangeEvent: Subject<number> = new Subject<number>();\n    waitingEvent: Subject<void> = new Subject<void>();\n    mediaClickEvent: Subject<MouseEvent> = new Subject<MouseEvent>();\n    fullscreenEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    quietModeEvent: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    progressEvent: Observable<TimeRanges> = Observable.create((observer: Observer<TimeRanges>) => {\n\n        // repeat until the whole video has fully loaded\n        let interval = setInterval(() => {\n\n            let buffered = this._mediaPlayer.buffered as TimeRanges;\n            observer.next(buffered);\n\n            if (buffered.length === 1 && buffered.start(0) === 0 && buffered.end(0) === this.duration) {\n                observer.complete();\n                clearInterval(interval);\n            }\n        }, 1000);\n    });\n\n    private _mediaPlayer: HTMLMediaElement;\n    private _hostElement: HTMLElement;\n    private _fullscreen: boolean = false;\n    private _quietMode: boolean;\n\n    constructor(private _frameExtractionService: FrameExtractionService) {}\n\n    /*\n        Create all the getters and setters the can be used by media player extensions\n    */\n    get mediaPlayer(): HTMLMediaElement {\n        return this._mediaPlayer;\n    }\n\n    get quietMode(): boolean {\n        return this._quietMode;\n    }\n\n    set quietMode(value: boolean) {\n\n        // quiet mode cannot be enabled on audio player\n        if (this.type === 'audio') {\n            value = false;\n        }\n\n        this._quietMode = value;\n        this.quietModeEvent.next(value);\n    }\n\n    get mediaPlayerWidth(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetWidth : 0;\n    }\n\n    get mediaPlayerHeight(): number {\n        return this._mediaPlayer ? this._mediaPlayer.offsetHeight : 0;\n    }\n\n    get audioTracks(): AudioTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.audioTracks : null;\n    }\n\n    get autoplay(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.autoplay : false;\n    }\n    set autoplay(value: boolean) {\n        this._mediaPlayer.autoplay = value;\n    }\n\n    get buffered(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.buffered : new TimeRanges();\n    }\n\n    get crossOrigin(): string {\n        return this._mediaPlayer ? this._mediaPlayer.crossOrigin : null;\n    }\n    set crossOrigin(value: string) {\n        this._mediaPlayer.crossOrigin = value;\n    }\n\n    get currentSrc(): string {\n        return this._mediaPlayer ? this._mediaPlayer.currentSrc : null;\n    }\n\n    get currentTime(): number {\n        return this._mediaPlayer ? this._mediaPlayer.currentTime : 0;\n    }\n    set currentTime(value: number) {\n        this._mediaPlayer.currentTime = value;\n    }\n\n    get defaultMuted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.defaultMuted : false;\n    }\n    set defaultMuted(value: boolean) {\n        this._mediaPlayer.defaultMuted = value;\n    }\n\n    get defaultPlaybackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.defaultPlaybackRate : 1;\n    }\n    set defaultPlaybackRate(value: number) {\n        this._mediaPlayer.defaultPlaybackRate = value;\n    }\n\n    get duration(): number {\n        return this._mediaPlayer ? this._mediaPlayer.duration : 0;\n    }\n\n    get ended(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.ended : false;\n    }\n\n    get loop(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.loop : false;\n    }\n    set loop(value: boolean) {\n        this._mediaPlayer.loop = value;\n    }\n\n    get muted(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.muted : false;\n    }\n    set muted(value: boolean) {\n        this._mediaPlayer.muted = value;\n    }\n\n    get networkState(): number {\n        return this._mediaPlayer.networkState;\n    }\n\n    get paused(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.paused : true;\n    }\n\n    get playbackRate(): number {\n        return this._mediaPlayer ? this._mediaPlayer.playbackRate : 1;\n    }\n    set playbackRate(value: number) {\n        this._mediaPlayer.playbackRate = value;\n    }\n\n    get played(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.played : new TimeRanges();\n    }\n\n    get preload(): string {\n        return this._mediaPlayer ? this._mediaPlayer.preload : 'auto';\n    }\n    set preload(value: string) {\n        this._mediaPlayer.preload = value;\n    }\n\n    get readyState(): number {\n        return this._mediaPlayer ? this._mediaPlayer.readyState : 0;\n    }\n\n    get seekable(): TimeRanges {\n        return this._mediaPlayer ? this._mediaPlayer.seekable : new TimeRanges();\n    }\n\n    get seeking(): boolean {\n        return this._mediaPlayer ? this._mediaPlayer.seeking : false;\n    }\n\n    get src(): string {\n        return this._mediaPlayer ? this._mediaPlayer.src : '';\n    }\n    set src(value: string) {\n        this._mediaPlayer.src = value;\n    }\n\n    get textTracks(): TextTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.textTracks : new TextTrackList();\n    }\n\n    get videoTracks(): VideoTrackList {\n        return this._mediaPlayer ? this._mediaPlayer.videoTracks : new VideoTrackList();\n    }\n\n    get volume(): number {\n        return this._mediaPlayer ? this._mediaPlayer.volume : 1;\n    }\n    set volume(value: number) {\n        this._mediaPlayer.volume = value;\n    }\n\n    get fullscreen(): boolean {\n        return this._mediaPlayer ? this._fullscreen : false;\n    }\n    set fullscreen(value: boolean) {\n        this._fullscreen = value;\n        this.fullscreenEvent.next(value);\n    }\n\n    setMediaPlayer(hostElement: HTMLElement, mediaPlayer: HTMLMediaElement): void {\n        this._hostElement = hostElement;\n        this._mediaPlayer = mediaPlayer;\n\n        this.initEvent.next(true);\n    }\n\n    /**\n     * Toggle playing state\n     */\n    togglePlay(): void {\n\n        // prevent any action is not loaded\n        if (this.loaded === false) {\n            return;\n        }\n\n        if (this.paused) {\n            this.play();\n        } else {\n            this.pause();\n        }\n    }\n\n    /**\n     * Starts playing the audio/video\n     */\n    play(): void {\n        this._mediaPlayer.play();\n    }\n\n    /**\n     * Pauses the currently playing audio/video\n     */\n    pause(): void {\n        this._mediaPlayer.pause();\n    }\n\n    /**\n     * Re-loads the audio/video element\n     */\n    load(): void {\n        this._mediaPlayer.load();\n    }\n\n    /**\n     * Checks if the browser can play the specified audio/video type\n     */\n    canPlayType(type: string): string {\n        return this._mediaPlayer.canPlayType(type);\n    }\n\n    /**\n     * Adds a new text track to the audio/video\n     */\n    addTextTrack(kind: string, label: string, language: string): TextTrack {\n        return this._mediaPlayer.addTextTrack(kind, label, language);\n    }\n\n    /**\n     * Attempt to display media in fullscreen mode\n     */\n    requestFullscreen(): void {\n\n        if (this._hostElement.requestFullscreen) {\n            this._hostElement.requestFullscreen();\n        } else if (this._hostElement.webkitRequestFullscreen) {\n            this._hostElement.webkitRequestFullscreen();\n        } else if ((<any>this._hostElement).msRequestFullscreen) {\n            (<any>this._hostElement).msRequestFullscreen();\n        } else if ((<any>this._hostElement).mozRequestFullScreen) {\n            (<any>this._hostElement).mozRequestFullScreen();\n        }\n    }\n\n    /**\n     * Exit full screen mode\n     */\n    exitFullscreen(): void {\n\n        if ((<any>this._hostElement).exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        } else if ((<any>document).msExitFullscreen) {\n            (<any>document).msExitFullscreen();\n        } else if ((<any>document).mozCancelFullScreen) {\n            (<any>document).mozCancelFullScreen();\n        }\n    }\n\n    fullscreenChange(event: Event) {\n        this.fullscreen = (<any>document).fullscreen || document.webkitIsFullScreen || (<any>document).mozFullScreen || (<any>document).msFullscreenElement !== null && (<any>document).msFullscreenElement !== undefined;\n        this.fullscreenEvent.next(this.fullscreen);\n    }\n\n    /**\n     * Toggle Fullscreen State\n     */\n    toggleFullscreen(): void {\n        if (this.fullscreen) {\n            this.exitFullscreen();\n        } else {\n            this.requestFullscreen();\n        }\n    }\n\n    /**\n     * Extract the frames from the video\n     */\n    getFrames(width: number, height: number, skip: number): Observable<ExtractedFrame> {\n\n        if (this.type === 'video') {\n            return this._frameExtractionService.getFrameThumbnails(this.source, width, height, 0, this.duration, 10);\n        }\n\n        return from([]);\n    }\n}","import { AfterViewInit, Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { debounceTime, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { AudioMetadata, AudioService } from '../../services/audio/index';\nimport { MediaPlayerService } from './media-player.service';\n\n@Component({\n    selector: 'ux-media-player',\n    template: `<div class=\"video-player-container\" *ngIf=\"type === 'video'\">\n\n    <video class=\"video-player\"\n        #player\n        [src]=\"source\"\n        (abort)=\"mediaPlayerService.abortEvent.next()\"\n        (canplay)=\"mediaPlayerService.canPlayEvent.next(true)\"\n        (canplaythrough)=\"mediaPlayerService.canPlayThroughEvent.next(true)\"\n        (durationchange)=\"mediaPlayerService.durationChangeEvent.next(player.duration)\"\n        (ended)=\"mediaPlayerService.endedEvent.next()\"\n        (error)=\"mediaPlayerService.errorEvent.next($event)\"\n        (loadeddata)=\"mediaPlayerService.loadedDataEvent.next($event)\"\n        (loadedmetadata)=\"mediaPlayerService.loadedMetadataEvent.next($event)\"\n        (loadstart)=\"mediaPlayerService.loadStartEvent.next()\"\n        (pause)=\"mediaPlayerService.pauseEvent.next()\"\n        (play)=\"mediaPlayerService.playEvent.next()\"\n        (playing)=\"mediaPlayerService.playingEvent.next(!player.paused)\"\n        (ratechange)=\"mediaPlayerService.rateChangeEvent.next(player.playbackRate)\"\n        (seeked)=\"mediaPlayerService.seekedEvent.next(player.currentTime)\"\n        (seeking)=\"mediaPlayerService.seekingEvent.next(player.currentTime)\"\n        (stalled)=\"mediaPlayerService.stalledEvent.next()\"\n        (suspend)=\"mediaPlayerService.suspendEvent.next()\"\n        (timeupdate)=\"mediaPlayerService.timeUpdateEvent.next(player.currentTime)\"\n        (volumechange)=\"mediaPlayerService.volumeChangeEvent.next(player.volume)\"\n        (waiting)=\"mediaPlayerService.waitingEvent.next()\"\n        (click)=\"mediaPlayerService.mediaClickEvent.next($event)\">\n    </video>\n\n    <div class=\"video-overlay\" [class.playing]=\"mediaPlayerService.playing | async\">\n        <svg class=\"play-graphic\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\">\n            <circle class=\"play-circle\" cx=\"32.2\" cy=\"31.8\" r=\"31.8\" />\n            <polygon class=\"play-triangle\" points=\"23,14.1 23,50.8 48.3,32.5\" />\n        </svg>\n    </div>\n\n</div>\n\n\n<div class=\"audio-player\" *ngIf=\"type === 'audio'\">\n\n    <svg width=\"24px\" height=\"24px\" viewBox=\"0 0 24 24\">\n        <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n            <g transform=\"translate(-98.000000, -458.000000)\">\n                <g transform=\"translate(98.000000, 458.000000)\">\n                    <path d=\"M4.5,0.5 L18.0435308,0.5 L23.5,6.22251502 L23.5,23.5 L4.5,23.5 L4.5,0.5 Z\" fill=\"#CCEAE2\"></path>\n                    <path d=\"M4.5,8 L4.5,0.5 L18,0.5 L23.5,6 L23.5,23.5 L18,23.5\" stroke=\"#60798D\" fill=\"#CCEAE2\"></path>\n                    <path d=\"M4,13.5 L0.5,13.5 L0.5,18.5 L4,18.5 L9.5,22.5 L9.5,9.5 L4,13.5 Z\" stroke=\"#60798D\" fill=\"#85D2BE\"></path>\n                    <path d=\"M11.5,12.5137939 C13.7576225,12.5137939 14.5,14.3709236 14.5,16 C14.5,17.6849236 13.7089152,19.5420532 11.5,19.5420532\"\n                        stroke=\"#60798D\"></path>\n                    <path d=\"M11.5,9 C15.8037643,9.04168701 18.5,11.6604805 18.5,16 C18.5,20.3395195 15.8804302,23.0079956 11.5,23\" stroke=\"#60798D\"></path>\n                    <path d=\"M17.5219116,0.761413574 L17.5219116,6 L23,6\" stroke=\"#60798D\" fill=\"#85D2BE\"></path>\n                </g>\n            </g>\n        </g>\n    </svg>\n\n    <p class=\"audio-file-name\">{{ (audioMetadata | async)?.filename }}</p>\n    <p class=\"audio-file-format\">{{ (audioMetadata | async)?.description }}</p>\n    <p class=\"audio-file-size\">{{ (audioMetadata | async)?.size | fileSize }}</p>\n\n    <audio #player\n        [src]=\"source\"\n        (abort)=\"mediaPlayerService.abortEvent.next()\"\n        (canplay)=\"mediaPlayerService.canPlayEvent.next(true)\"\n        (canplaythrough)=\"mediaPlayerService.canPlayThroughEvent.next(true)\"\n        (durationchange)=\"mediaPlayerService.durationChangeEvent.next(player.duration)\"\n        (ended)=\"mediaPlayerService.endedEvent.next()\"\n        (error)=\"mediaPlayerService.errorEvent.next($event)\"\n        (loadeddata)=\"mediaPlayerService.loadedDataEvent.next($event)\"\n        (loadedmetadata)=\"mediaPlayerService.loadedMetadataEvent.next($event)\"\n        (loadstart)=\"mediaPlayerService.loadStartEvent.next()\"\n        (pause)=\"mediaPlayerService.pauseEvent.next()\"\n        (play)=\"mediaPlayerService.playEvent.next()\"\n        (playing)=\"mediaPlayerService.playingEvent.next(!player.paused)\"\n        (ratechange)=\"mediaPlayerService.rateChangeEvent.next(player.playbackRate)\"\n        (seeked)=\"mediaPlayerService.seekedEvent.next(player.currentTime)\"\n        (seeking)=\"mediaPlayerService.seekingEvent.next(player.currentTime)\"\n        (stalled)=\"mediaPlayerService.stalledEvent.next()\"\n        (suspend)=\"mediaPlayerService.suspendEvent.next()\"\n        (timeupdate)=\"mediaPlayerService.timeUpdateEvent.next(player.currentTime)\"\n        (volumechange)=\"mediaPlayerService.volumeChangeEvent.next(player.volume)\"\n        (waiting)=\"mediaPlayerService.waitingEvent.next()\"\n        (click)=\"mediaPlayerService.mediaClickEvent.next($event)\">\n    </audio>\n</div>\n\n<div class=\"control-bar\">\n    <ux-media-player-timeline></ux-media-player-timeline>\n    <ux-media-player-controls></ux-media-player-controls>\n</div>`,\n    providers: [MediaPlayerService],\n    host: {\n        'tabindex': '0',\n        '(keydown.Space)': 'mediaPlayerService.togglePlay()',\n        '[class.standard]': '!mediaPlayerService.fullscreen',\n        '[class.fullscreen]': 'mediaPlayerService.fullscreen',\n        '[class.quiet]': 'quietMode && type === \"video\" || mediaPlayerService.fullscreen',\n        '[class.hover]': 'hovering',\n        '[class.video]': 'type === \"video\"',\n        '[class.audio]': 'type === \"audio\"',\n        '(mouseenter)': 'hovering = true',\n        '(mouseleave)': 'hovering = false',\n        '(document:webkitfullscreenchange)': 'mediaPlayerService.fullscreenChange($event)',\n        '(document:mozfullscreenchange)': 'mediaPlayerService.fullscreenChange($event)',\n        '(document:MSFullscreenChange)': 'mediaPlayerService.fullscreenChange($event)'\n    }\n})\nexport class MediaPlayerComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChild('player') private _playerRef: ElementRef;\n\n    hovering: boolean = false;\n    audioMetadata: Observable<AudioMetadata>;\n\n    get source(): string {\n        return this.mediaPlayerService.source;\n    }\n\n    @Input()\n    set source(value: string) {\n        this.mediaPlayerService.source = value;\n    }\n\n    get type(): MediaPlayerType {\n        return this.mediaPlayerService.type;\n    }\n\n    @Input()\n    set type(value: MediaPlayerType) {\n        this.mediaPlayerService.type = value;\n    }\n\n    get quietMode(): boolean {\n        return this.mediaPlayerService.quietMode;\n    }\n\n    @Input()\n    set quietMode(value: boolean) {\n        this.mediaPlayerService.quietMode = value;\n    }\n\n    private _onDestroy = new Subject<void>();\n\n    constructor(public mediaPlayerService: MediaPlayerService, private _audioService: AudioService, private _elementRef: ElementRef) {\n\n        // show controls when hovering and in quiet mode\n        fromEvent(this._elementRef.nativeElement, 'mousemove').pipe(\n            switchMap((event: MouseEvent) => {\n                this.hovering = true;\n                return of(event);\n            }),\n            debounceTime(2000),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.hovering = false);\n    }\n\n    ngAfterViewInit(): void {\n        this.mediaPlayerService.setMediaPlayer(this._elementRef.nativeElement, this._playerRef.nativeElement);\n\n        this.audioMetadata = this._audioService.getAudioFileMetadata(this._playerRef.nativeElement);\n        this.mediaPlayerService.playingEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(true));\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.playing.next(false));\n        this.mediaPlayerService.mediaClickEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.togglePlay());\n        this.mediaPlayerService.loadedMetadataEvent.pipe(takeUntil(this._onDestroy)).subscribe(() => this.mediaPlayerService.loaded = true);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n}\n\nexport type MediaPlayerType = 'video' | 'audio';\n\nexport interface MediaPlayerBuffer {\n    start: number;\n    end: number;\n}","import { Directive } from '@angular/core';\nimport { MediaPlayerService } from '../media-player.service';\n\n@Directive({\n    selector: '[mediaPlayerBaseExtension]'\n})\nexport class MediaPlayerBaseExtensionDirective {\n    constructor(public mediaPlayerService: MediaPlayerService) { }\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n\n@Component({\n    selector: 'ux-media-player-timeline',\n    template: `<p class=\"current-time\">{{ current | duration }}</p>\n\n<div #timeline class=\"timeline-bar\" (mouseenter)=\"scrub.visible = true; pop.show()\" (mouseleave)=\"scrub.visible = false; pop.hide()\"\n    (mousemove)=\"updateScrub($event)\" (mouseup)=\"updateScrub($event)\" (mousedown)=\"mouseDown = true; $event.preventDefault()\">\n\n    <div class=\"buffered-bar\" *ngFor=\"let buffer of buffered\" [style.left.%]=\"buffer.start\" [style.width.%]=\"buffer.end - buffer.start\"></div>\n\n    <div class=\"media-progress-bar\" [style.width.%]=\"position\">\n        <div #progressThumb class=\"media-progress-bar-thumb\" (mouseenter)=\"scrub.visible = false; pop.hide(); $event.stopPropagation()\"\n            (mouseleave)=\"scrub.visible = true; pop.show(); $event.stopPropagation()\"></div>\n    </div>\n\n    <div class=\"scrub-handle\"\n         [class.scrub-handle-hidden]=\"!scrub.visible\"\n         [style.left.px]=\"scrub.position\"\n         [uxTooltip]=\"popTemplate\"\n         placement=\"top\"\n         [showTriggers]=\"[]\"\n         [hideTriggers]=\"[]\"\n         #pop=\"ux-tooltip\"\n         [tooltipDelay]=\"100\"\n         [tooltipDisabled]=\"duration === 0\"></div>\n</div>\n\n<p class=\"duration-time\">{{ duration | duration }}</p>\n\n<ng-template #popTemplate>\n    <span>{{ scrub.time | duration }}</span>\n</ng-template>`,\n    host: {\n        '(document:mouseup)': 'mouseDown = false',\n        '[class.quiet]': 'quietMode || fullscreen'\n    }\n})\nexport class MediaPlayerTimelineExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild('progressThumb') thumb: ElementRef;\n    @ViewChild('timeline') timelineRef: ElementRef;\n\n    current: number = 0;\n    position: number = 0;\n    duration: number = 0;\n    buffered: MediaPlayerBuffered[] = [];\n    mouseDown: boolean = false;\n    quietMode: boolean = false;\n    fullscreen: boolean = false;\n    scrub = { visible: false, position: 0, time: 0 };\n\n    private _onDestroy = new Subject<void>();\n\n    ngOnInit(): void {\n\n        // watch for changes to the current time\n        this.mediaPlayerService.durationChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(duration => this.duration = duration);\n        this.mediaPlayerService.quietModeEvent.pipe(takeUntil(this._onDestroy)).subscribe(quietMode => this.quietMode = quietMode);\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => {\n            this.fullscreen = fullscreen;\n            this.scrub.position = 0;\n        });\n\n        this.mediaPlayerService.timeUpdateEvent.pipe(takeUntil(this._onDestroy)).subscribe(current => {\n            this.current = current;\n            this.position = (this.current / this.duration) * 100;\n        });\n\n        this.mediaPlayerService.progressEvent.pipe(takeUntil(this._onDestroy)).subscribe((buffered: TimeRanges) => {\n            this.buffered = [];\n\n            for (let idx = 0; idx < buffered.length; idx++) {\n                this.buffered.push({ start: (buffered.start(idx) / this.duration) * 100, end: (buffered.end(idx) / this.duration) * 100 });\n            }\n        });\n    }\n\n    ngAfterViewInit(): void {\n        const mousedown$ = fromEvent(this.thumb.nativeElement, 'mousedown');\n        const mousemove$ = fromEvent(document, 'mousemove');\n        const mouseup$ = fromEvent(document, 'mouseup');\n\n        mousedown$.pipe(\n            switchMap(() => mousemove$.pipe(takeUntil(mouseup$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.scrub.visible = false);\n    }\n\n    ngOnDestroy() {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    updateScrub(event?: MouseEvent): void {\n\n        const target = event.target as HTMLElement;\n\n        if (target.classList.contains('media-progress-bar-thumb')) {\n            return;\n        }\n\n        const timeline = this.timelineRef.nativeElement as HTMLDivElement;\n        const bounds = timeline.getBoundingClientRect();\n\n        this.scrub.position = event.offsetX;\n        this.scrub.time = (event.offsetX / bounds.width) * this.mediaPlayerService.duration;\n\n        if (this.mouseDown) {\n            this.mediaPlayerService.pause();\n            this.mediaPlayerService.currentTime = this.scrub.time;\n        }\n    }\n}\n\nexport interface MediaPlayerBuffered {\n    start: number;\n    end: number;\n}\n","import { Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { timer } from 'rxjs/observable/timer';\nimport { debounceTime, filter, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { MediaPlayerBaseExtensionDirective } from '../base-extension.directive';\n\n@Component({\n    selector: 'ux-media-player-controls',\n    template: `<div class=\"volume-container\">\n\n    <div class=\"volume-slider-container\" #volumeContainer [class.active]=\"volumeActive\">\n        <div class=\"volume-slider-icon\" #volumeIcon>\n            <span class=\"hpe-icon\" [class.hpe-volume-mute]=\"volume === 0\" [class.hpe-volume-low]=\"volume > 0 && volume <= 70\" [class.hpe-volume]=\"volume > 70\" [uxTooltip]=\"muteTooltip\" (click)=\"toggleMute()\"></span>\n        </div>\n        \n        <div class=\"volume-slider-node\">\n            <div class=\"volume-slider\" #volumeSlider>\n                <div class=\"volume-track-lower\" [style.width.%]=\"volume\"></div>\n                <div class=\"volume-slider-thumb\" (mousedown)=\"dragStart($event)\" [style.left.%]=\"volume\" tabindex=\"0\" (keydown.ArrowRight)=\"volume = volume + 10\" (keydown.ArrowLeft)=\"volume = volume - 10\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"spacer\"></div>\n\n<svg viewBox=\"0 0 51.5 64\" width=\"14\" height=\"17\" class=\"control-button\" (click)=\"goToStart()\">\n    <rect x=\"0\" y=\"0\" width=\"7.5\" height=\"64\" />\n    <polygon points=\"51.5,64 51.5,0 7.4,32 \" />\n</svg>\n\n<svg viewBox=\"0 0 45 64\" width=\"20\" height=\"29\" class=\"control-button\" *ngIf=\"!playing\" (click)=\"togglePlay()\">\n    <polygon points=\"0.4,0 0.4,64 44.6,32\" />\n</svg>\n\n<svg viewBox=\"0 0 43 56.9\" class=\"control-button\" width=\"20\" height=\"29\" *ngIf=\"playing\" (click)=\"togglePlay()\">\n    <rect y=\"0.1\" width=\"15.7\" height=\"56.9\" />\n    <rect x=\"27.3\" y=\"0.1\" width=\"15.7\" height=\"56.9\" />\n</svg>\n\n<svg viewBox=\"0 0 51.5 64\" width=\"14\" height=\"17\" class=\"control-button\" (click)=\"goToEnd()\">\n    <rect x=\"44.1\" y=\"0\" width=\"7.5\" height=\"64\" />\n    <polygon points=\"0,64 0,0 44.1,32 \" />\n</svg>\n\n<div class=\"spacer\"></div>\n\n<span class=\"hpe-icon\" *ngIf=\"mediaPlayerService.type !== 'audio'\" [class.hpe-expand]=\"!mediaPlayerService.fullscreen\" [class.hpe-contract]=\"mediaPlayerService.fullscreen\"\n    (click)=\"setFullscreen()\"></span>\n\n<ng-template #muteTooltip>{{ volume === 0 ? 'Unmute' : 'Mute' }}</ng-template>`,\n    host: {\n        '[class.quiet]': 'quietMode || fullscreen'\n    }\n})\nexport class MediaPlayerControlsExtensionComponent extends MediaPlayerBaseExtensionDirective implements OnInit, OnDestroy {\n\n    playing: boolean;\n    quietMode: boolean;\n    fullscreen: boolean = false;\n    volumeActive: boolean = false;\n    volumeDragging: boolean = false;\n\n    @ViewChild('volumeIcon') volumeIcon: ElementRef;\n    @ViewChild('volumeSlider') volumeSlider: ElementRef;\n    @ViewChild('volumeContainer') volumeContainer: ElementRef;\n\n    private _volume: number = 50;\n    private _previousVolume = 50;\n    private _onDestroy = new Subject<void>();\n\n    get volume(): number {\n        return this._volume;\n    }\n\n    set volume(value: number) {\n\n        if (value === 0 && this._volume !== 0) {\n            this._previousVolume = this._volume;\n        }\n\n        this._volume = Math.min(Math.max(value, 0), 100);\n        this.mediaPlayerService.volume = this._volume / 100;\n    }\n\n    ngOnInit(): void {\n        this.mediaPlayerService.playEvent.pipe(takeUntil(this._onDestroy)).subscribe(_ => this.playing = true);\n        this.mediaPlayerService.pauseEvent.pipe(takeUntil(this._onDestroy)).subscribe(_ => this.playing = false);\n        this.mediaPlayerService.quietModeEvent.pipe(takeUntil(this._onDestroy)).subscribe(quietMode => this.quietMode = quietMode);\n        this.mediaPlayerService.volumeChangeEvent.pipe(takeUntil(this._onDestroy)).subscribe(volume => this.volume = volume * 100);\n        this.mediaPlayerService.initEvent.pipe(debounceTime(1), filter(init => init === true), takeUntil(this._onDestroy)).subscribe(() => this.volume = this.mediaPlayerService.volume * 100);\n        this.mediaPlayerService.fullscreenEvent.pipe(takeUntil(this._onDestroy)).subscribe(fullscreen => this.fullscreen = fullscreen);\n\n        const mouseenter$ = fromEvent(this.volumeIcon.nativeElement, 'mouseenter');\n        const mouseenterContainer$ = fromEvent(this.volumeContainer.nativeElement, 'mouseenter');\n        const mouseleaveContainer$ = fromEvent(this.volumeContainer.nativeElement, 'mouseleave');\n\n        mouseenter$.pipe(takeUntil(this._onDestroy)).subscribe(() => this.volumeActive = true);\n        mouseleaveContainer$.pipe(\n            switchMap(() => timer(1500).pipe(takeUntil(mouseenterContainer$))),\n            takeUntil(this._onDestroy)\n        ).subscribe(() => this.volumeActive = false);\n    }\n\n    ngOnDestroy(): void {\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    toggleMute(): void {\n        if (this.volume === 0) {\n            this.volume = this._previousVolume;\n        } else {\n            this.volume = 0;\n        }\n    }\n\n    togglePlay(): void {\n        if (this.playing) {\n            this.mediaPlayerService.pause();\n        } else {\n            this.mediaPlayerService.play();\n        }\n    }\n\n    setFullscreen(): void {\n        this.mediaPlayerService.toggleFullscreen();\n    }\n\n    goToStart(): void {\n        this.mediaPlayerService.currentTime = 0;\n    }\n\n    goToEnd(): void {\n        this.mediaPlayerService.currentTime = this.mediaPlayerService.duration;\n    }\n\n    dragStart(event: MouseEvent): void {\n        event.preventDefault();\n        this.volumeDragging = true;\n\n        const thumb = event.target as HTMLDivElement;\n        thumb.focus();\n    }\n\n    @HostListener('document:mousemove', ['$event'])\n    dragMove(event: MouseEvent): void {\n        if (!this.volumeDragging) {\n            return;\n        }\n\n        event.preventDefault();\n\n        const slider = this.volumeSlider.nativeElement as HTMLDivElement;\n        const bounds = slider.getBoundingClientRect();\n\n        const x = Math.min(bounds.width, Math.max(0, event.pageX - bounds.left));\n\n        // convert to a percentage\n        this.volume = (x / bounds.width) * 100;\n    }\n\n    @HostListener('document:mouseup')\n    dragEnd(): void {\n        this.volumeDragging = false;\n    }\n\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'duration'\n})\nexport class DurationPipe implements PipeTransform {\n    \n    transform(seconds: number): any {\n\n        let minutes = Math.floor(seconds / 60);\n        let hours = Math.floor(minutes / 60);\n        let days = Math.floor(hours / 24);\n\n        hours = hours - (days * 24);\n        minutes = minutes - (days * 24 * 60) - (hours * 60);\n        seconds = Math.floor(seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60));\n\n        if (hours > 0) {\n            return `${this.pad(hours)}:${this.pad(minutes)}:${this.pad(seconds)}`;\n        } else {\n            return `${this.pad(minutes)}:${this.pad(seconds)}`;\n        }\n    }\n\n    pad(value: number): string {\n        if (value < 10) {\n            return `0${value}`;\n        }\n\n        return value.toString();\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { DurationPipe } from './duration.pipe';\n\n@NgModule({\n    exports: [DurationPipe],\n    declarations: [DurationPipe]\n})\nexport class DurationPipeModule { }\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'fileSize'\n})\nexport class FileSizePipe implements PipeTransform {\n\n    transform(value: number): any {\n\n        // allow for async values\n        if (!value) {\n            return value;\n        }\n        \n        let units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n        // calculate the which unit bracket the values should be a part of\n        let idx = Math.floor(Math.log(value) / Math.log(1024));\n        let formattedValue = value / Math.pow(1024, idx);\n        \n        return `${formattedValue.toFixed(2)} ${units[idx]}`;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FileSizePipe } from './file-size.pipe';\n\n@NgModule({\n    exports: [FileSizePipe],\n    declarations: [FileSizePipe]\n})\nexport class FileSizePipeModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MediaPlayerComponent } from './media-player.component';\nimport { MediaPlayerTimelineExtensionComponent } from './extensions/timeline/timeline.component';\nimport { MediaPlayerBaseExtensionDirective } from './extensions/base-extension.directive';\nimport { MediaPlayerControlsExtensionComponent } from './extensions/controls/controls.component';\nimport { FrameExtractionModule } from '../../services/frame-extraction/frame-extraction.module';\nimport { AudioServiceModule } from '../../services/audio/index';\nimport { DurationPipeModule } from '../../pipes/duration/index';\nimport { FileSizePipeModule } from '../../pipes/file-size/index';\nimport { MediaPlayerService } from './media-player.service';\nimport { TooltipModule } from '../tooltip/index';\n\nconst DECLARATIONS = [\n    MediaPlayerComponent,\n    MediaPlayerTimelineExtensionComponent,\n    MediaPlayerBaseExtensionDirective,\n    MediaPlayerControlsExtensionComponent\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FrameExtractionModule,\n        TooltipModule,\n        AudioServiceModule,\n        DurationPipeModule,\n        FileSizePipeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [MediaPlayerService]\n})\nexport class MediaPlayerModule { }\n","import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'ux-navigation',\n    template: `<nav class=\"tree\" role=\"navigation\">\n    <ol class=\"nav\">\n        <ng-content></ng-content>\n    </ol>\n</nav>\n`\n})\nexport class NavigationComponent {\n\n}","import { AfterContentInit, AfterViewInit, Component, ContentChildren, ElementRef, HostBinding, Input, OnDestroy, Optional, QueryList, Renderer2, SkipSelf } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router, UrlTree } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: '[ux-navigation-item]',\n    template: `<a *ngIf=\"link\" [class.has-arrow]=\"children.length > 0\" [class.no-arrow]=\"indentWithoutArrow\" [routerLink]=\"link\">\n    <span>{{header}}</span>\n</a>\n<a *ngIf=\"!link\" (click)=\"expanded = !expanded\" [class.has-arrow]=\"children.length > 0\" [class.no-arrow]=\"indentWithoutArrow\">\n    <span>{{header}}</span>\n</a>\n<ng-content></ng-content>\n`,\n})\nexport class NavigationItemComponent implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    @Input() header: string;\n    @Input() icon: string;\n    @Input() link: string;\n    @Input() @HostBinding('class.selected') expanded: boolean = false;\n\n    @HostBinding('class.active')\n    get active(): boolean {\n        if (this.link) {\n            return this._router.isActive(this.link, true);\n        }\n    }\n\n    level: number = 1;\n    indentWithoutArrow: boolean = true;\n\n    private _navigationEnd: Subscription;\n    private _childrenChanges: Subscription;\n\n    @ContentChildren(NavigationItemComponent, { descendants: true })\n    private _children: QueryList<NavigationItemComponent>;\n\n    get children(): NavigationItemComponent[] {\n        return this._children.filter(item => item !== this);\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2,\n        @Optional() @SkipSelf() private _parent: NavigationItemComponent,\n        private _router: Router,\n        private _activatedRoute: ActivatedRoute\n    ) {\n        this.level = _parent ? _parent.level + 1 : 1;\n\n        this._navigationEnd = _router.events.pipe(filter(event => event instanceof NavigationEnd))\n            .subscribe(() => this.expanded = this.hasActiveLink(this.link));\n    }\n\n    ngAfterViewInit(): void {\n        // Add classes to parent for styling\n        const parentListElement = this._elementRef.nativeElement.parentElement;\n        if (parentListElement) {\n            const levelClass: string = this.getLevelClass();\n            if (levelClass.length > 0) {\n                this._renderer.addClass(parentListElement, 'nav');\n                this._renderer.addClass(parentListElement, levelClass);\n            }\n        }\n    }\n\n    ngAfterContentInit(): void {\n        // Set 'indentWithoutArrow'\n        this.setIndentWithoutArrow();\n\n        // Update 'indentWithoutArrow' in response to changes to children\n        this._childrenChanges = this._children.changes.subscribe(() => this.setIndentWithoutArrow());\n    }\n\n    ngOnDestroy(): void {\n        this._navigationEnd.unsubscribe();\n        this._childrenChanges.unsubscribe();\n    }\n\n    private hasActiveLink(link: string | UrlTree): boolean {\n\n        const tree = this._router.createUrlTree([link], {\n            relativeTo: this._activatedRoute,\n            queryParams: this._activatedRoute.snapshot.queryParams,\n            fragment: this._activatedRoute.snapshot.fragment\n        });\n\n        if (link && this._router.isActive(tree, true)) {\n            return true;\n        }\n\n        // If this component has children, check if any of them, or their descendants, are active.\n        return this.children.some((item) => item.hasActiveLink(item.link));\n    }\n\n    private getLevelClass(): string {\n        switch (this.level) {\n            case 2:\n                return 'nav-second-level';\n            case 3:\n                return 'nav-third-level';\n            case 4:\n                return 'nav-fourth-level';\n            case 5:\n                return 'nav-fifth-level';\n        }\n\n        return '';\n    }\n\n    private setIndentWithoutArrow(): void {\n        if (this.children.length > 0) {\n            // If this element has children it will be indented and will have an arrow\n            this.indentWithoutArrow = false;\n        } else if (this._parent) {\n           // If this element has a parent, indent it if any of its siblings have children\n            this.indentWithoutArrow = !this._parent.children.every((item) => item.children.length === 0);\n        } else {\n            // Top-level elements should be indented\n            this.indentWithoutArrow = true;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { NavigationComponent } from './navigation.component';\nimport { NavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        RouterModule\n    ],\n    exports: [\n        NavigationComponent,\n        NavigationItemComponent\n    ],\n    declarations: [\n        NavigationComponent,\n        NavigationItemComponent\n    ]\n})\nexport class NavigationModule { }\n","import { Injectable } from '@angular/core';\nimport { ColorClassSet, ColorValueSet } from './color.service';\n\n@Injectable()\nexport class ColorService {\n\n    private _html: string;\n    private _element: HTMLElement;\n    private _colors: ThemeColors;\n    private _colorSet: any = colorSets.keppel;\n\n    constructor() {\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    private setColors() {\n\n        this._html = '';\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._html += '<div class=\"' + this._colorSet.colorClassSet[key] + '-color\"></div>';\n        }\n\n        this._element = document.createElement('div');\n        this._element.className = 'color-chart';\n        this._element.innerHTML = this._html;\n\n        document.body.appendChild(this._element);\n\n        this._colors = {};\n\n        for (let key in this._colorSet.colorClassSet) {\n            this._colors[key] = this.getColorValue(this._colorSet.colorClassSet[key]);\n        }\n\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    private getColorValueByHex(color: string): ThemeColor {\n        const hex = color.replace('#', '');\n\n        const r = parseInt(hex.substring(0, 2), 16).toString();\n        const g = parseInt(hex.substring(2, 4), 16).toString();\n        const b = parseInt(hex.substring(4, 6), 16).toString();\n\n        return new ThemeColor(r, g, b, '1');\n    }\n\n    private getColorValue(color: ColorIdentifier): ThemeColor {\n\n        const target = this._element.querySelector('.' + this._colorSet.colorClassSet[color] + '-color');\n\n        if (!target) {\n            throw new Error('Invalid color');\n        }\n\n        const colorValue = window.getComputedStyle(target).backgroundColor;\n\n        const rgba = colorValue.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/);\n\n        return new ThemeColor(rgba[1], rgba[2], rgba[3], rgba[4]);\n    }\n\n    getColor(color: ColorIdentifier): ThemeColor {\n        const themeColor = this._colors[this.resolveColorName(color)];\n        if (!themeColor) {\n            throw new Error('Color not found: ' + color);\n        }\n\n        return new ThemeColor(themeColor.getRed(), themeColor.getGreen(), themeColor.getBlue(), themeColor.getAlpha());\n    }\n\n    getColorSet() {\n        return this._colorSet;\n    }\n\n    setColorSet(colorSet: ColorSet) {\n        this._colorSet = colorSet;\n        this._colors = {};\n\n        if (this._colorSet.colorClassSet) {\n            this.setColors();\n        } else {\n            for (let key in this._colorSet.colorValueSet) {\n                this._colors[key] = this.getColorValueByHex(this._colorSet.colorValueSet[key]);\n            }\n        }\n    }\n\n    resolve(value: string): string {\n        if (!value) {\n            return;\n        }\n\n        const colorName = this.resolveColorName(value);\n\n        for (let color in this._colors) {\n            if (colorName === color.toLowerCase()) {\n                return this.getColor(colorName).toRgba();\n            }\n        }\n\n        return value;\n    }\n\n    resolveColorName(value: string = ''): string {\n        return value.replace(/\\s+/g, '-').toLowerCase();\n    }\n}\n\nexport class ThemeColor {\n\n    private _r: string;\n    private _g: string;\n    private _b: string;\n    private _a: string;\n\n    constructor(r: string, g: string, b: string, a: string) {\n        this._r = r;\n        this._g = g;\n        this._b = b;\n        this._a = a === undefined ? '1' : a;\n    }\n\n    static parse(value: string): ThemeColor {\n        let r, g, b, a = '1';\n\n        const rgbaPattern = /^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+(?:\\.\\d+)?))?\\)$/;\n        const shortHexPattern = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n        const longHexPattern = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/;\n\n        const rgbaMatch = value.match(rgbaPattern);\n        const shortHexMatch = value.match(shortHexPattern);\n        const longHexMatch = value.match(longHexPattern);\n\n        if (rgbaMatch) {\n            r = rgbaMatch[1];\n            g = rgbaMatch[2];\n            b = rgbaMatch[3];\n            a = rgbaMatch[4] ? rgbaMatch[4] : '1';\n        } else if (longHexMatch) {\n            r = parseInt(longHexMatch[1], 16).toString();\n            g = parseInt(longHexMatch[2], 16).toString();\n            b = parseInt(longHexMatch[3], 16).toString();\n        } else if (shortHexMatch) {\n            r = parseInt(shortHexMatch[1] + shortHexMatch[1], 16).toString();\n            g = parseInt(shortHexMatch[2] + shortHexMatch[2], 16).toString();\n            b = parseInt(shortHexMatch[3] + shortHexMatch[3], 16).toString();\n        } else {\n            throw new Error(`Cannot parse color - ${value} is not a valid color.`);\n        }\n        return new ThemeColor(r, g, b, a);\n    }\n\n    toHex() {\n        let red = parseInt(this._r).toString(16);\n        let green = parseInt(this._g).toString(16);\n        let blue = parseInt(this._b).toString(16);\n\n        if (red.length < 2) {\n            red = '0' + red;\n        }\n        if (green.length < 2) {\n            green = '0' + green;\n        }\n        if (blue.length < 2) {\n            blue = '0' + blue;\n        }\n\n        return '#' + red + green + blue;\n    }\n\n    toRgb() {\n        return 'rgb(' + this._r + ', ' + this._g + ', ' + this._b + ')';\n    }\n\n    toRgba() {\n        return 'rgba(' + this._r + ', ' + this._g + ', ' + this._b + ', ' + this._a + ')';\n    }\n\n    getRed() {\n        return this._r;\n    }\n\n    getGreen() {\n        return this._g;\n    }\n\n    getBlue() {\n        return this._b;\n    }\n\n    getAlpha() {\n        return this._a;\n    }\n\n    setRed(red: string) {\n        this._r = red;\n        return this;\n    }\n\n    setGreen(green: string) {\n        this._g = green;\n        return this;\n    }\n\n    setBlue(blue: string) {\n        this._b = blue;\n        return this;\n    }\n\n    setAlpha(alpha: string | number) {\n        this._a = alpha.toString();\n        return this;\n    }\n}\n\nexport const colorSets = {\n    keppel: {\n        colorClassSet: {\n            'primary': 'primary',\n            'accent': 'accent',\n            'secondary': 'secondary',\n            'alternate1': 'alternate1',\n            'alternate2': 'alternate2',\n            'alternate3': 'alternate3',\n            'vibrant1': 'vibrant1',\n            'vibrant2': 'vibrant2',\n            'grey1': 'grey1',\n            'grey2': 'grey2',\n            'grey3': 'grey3',\n            'grey4': 'grey4',\n            'grey5': 'grey5',\n            'grey6': 'grey6',\n            'grey7': 'grey7',\n            'grey8': 'grey8',\n            'chart1': 'chart1',\n            'chart2': 'chart2',\n            'chart3': 'chart3',\n            'chart4': 'chart4',\n            'chart5': 'chart5',\n            'chart6': 'chart6',\n            'ok': 'ok',\n            'warning': 'warning',\n            'critical': 'critical',\n            'partition1': 'partition1',\n            'partition9': 'partition9',\n            'partition10': 'partition10',\n            'partition11': 'partition11',\n            'partition12': 'partition12',\n            'partition13': 'partition13',\n            'partition14': 'partition14',\n            'social-chart-node': 'social-chart-node',\n            'social-chart-edge': 'social-chart-edge'\n        }\n    },\n    microFocus: {\n        'colorValueSet': {\n            'cerulean': '#1668c1',\n            'aqua': '#29ceff',\n            'aquamarine': '#2fd6c3',\n            'fuchsia': '#c6179d',\n            'indigo': '#7425ad',\n            'dark-blue': '#231ca5',\n            'white': '#ffffff',\n            'slightly-gray': '#f5f7f8',\n            'bright-gray': '#f1f2f3',\n            'gray': '#dcdedf',\n            'silver': '#bdbec0',\n            'dim-gray': '#656668',\n            'dark-gray': '#323435',\n            'black': '#000000',\n            'crimson-negative': '#e5004c',\n            'apricot': '#f48b34',\n            'yellow': '#fcdb1f',\n            'green-positive': '#1aac60',\n            'ultramarine': '#3939c6',\n            'skyblue': '#00abf3',\n            'pale-aqua': '#43e4ff',\n            'pale-green': '#1ffbba',\n            'lime': '#75da4d',\n            'orange': '#ffce00',\n            'magenta': '#eb23c2',\n            'pale-purple': '#ba47e2',\n            'dark-ultramarine': '#271782',\n            'steelblue': '#014272',\n            'arctic-blue': '#0b8eac',\n            'emerald': '#00a989',\n            'olive': '#5bba36',\n            'goldenrod': '#ffb000',\n            'purple': '#9b1e83',\n            'pale-eggplant': '#5216ac',\n            'red': '#ff454f',\n            'pale-amber': '#ffb24d',\n            'pale-lemon': '#fde159',\n            'pale-emerald': '#33c180',\n            'plum': '#b21646',\n            'copper': '#e57828',\n            'amber': '#ffc002',\n            'leaf-green': '#118c4f',\n            'forest-green': '#00645a',\n            'primary': '#0073e7',\n            'accent': '#7425ad',\n            'secondary': '#ffffff',\n            'alternate1': '#29ceff',\n            'alternate2': '#2fd6c3',\n            'alternate3': '#c6179d',\n            'vibrant1': '#43e4ff',\n            'vibrant2': '#ffce00',\n            'grey1': '#000000',\n            'grey2': '#323435',\n            'grey3': '#656668',\n            'grey4': '#bdbec0',\n            'grey5': '#dcdedf',\n            'grey6': '#f1f2f3',\n            'grey7': '#f5f7f8',\n            'grey8': '#ffffff',\n            'chart1': '#3939c6',\n            'chart2': '#00abf3',\n            'chart3': '#75da4d',\n            'chart4': '#ffce00',\n            'chart5': '#eb23c2',\n            'chart6': '#ba47e2',\n            'ok': '#1aac60',\n            'warning': '#f48b34',\n            'critical': 'e5004c',\n            'partition1': '#7425ad',\n            'partition9': '#5216ac',\n            'partition10': '#5bba36',\n            'partition11': '#014272',\n            'partition12': '#ffb000',\n            'partition13': '#bdbec0',\n            'partition14': '#271782',\n            'social-chart-node': '#ff00ff',\n            'social-chart-edge': '#ff00ff'\n        }\n    }\n};\n\nexport interface ThemeColors {\n    [name: string]: ThemeColor;\n}\n\nexport interface ColorSet {\n    colorClassSet?: ColorClassSet;\n    colorValueSet?: ColorValueSet;\n}\n\nexport interface ColorClassSet {\n    [name: string]: string;\n}\n\nexport interface ColorValueSet {\n    [name: string]: string;\n}\n\nexport type ColorIdentifier = string;\n","import { NgModule } from '@angular/core';\nimport { ColorService } from './color.service';\n\n@NgModule({\n    providers: [ColorService],\n})\nexport class ColorServiceModule { }\n","import { Injectable, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\n\n@Injectable()\nexport class NotificationService {\n\n    // provide default options\n    options: NotificationOptions = {\n        duration: 4,\n        height: 100,\n        spacing: 10,\n        backgroundColor: this._colorService.getColor('accent').toHex(),\n        iconColor: this._colorService.getColor('accent').toHex()\n    };\n\n    direction: NotificationListDirection = 'above';\n\n    notifications$: BehaviorSubject<NotificationRef[]> = new BehaviorSubject<NotificationRef[]>([]);    \n\n    show(templateRef: TemplateRef<any>, options: NotificationOptions = this.options, data: { [key: string]: any } = {}): NotificationRef {\n\n        options = { ...this.options, ...options };\n\n        const notificationRef: NotificationRef = {\n            templateRef: templateRef,\n            duration: options.duration,\n            date: new Date(),\n            visible: true,\n            height: options.height,\n            spacing: options.spacing,\n            backgroundColor: options.backgroundColor,\n            iconColor: options.iconColor,\n            data: data\n        };\n\n        const notifications = this.notifications$.getValue();\n\n        if (this.direction === 'above') {\n            notifications.unshift(notificationRef);\n        } else {\n            notifications.push(notificationRef);\n        }\n\n        this.notifications$.next(notifications);\n\n        // remove notification after delay\n        if (options.duration !== 0) {\n            setTimeout(() => this.dismiss(notificationRef), options.duration * 1000);\n        }\n\n        return notificationRef;\n    }\n\n    getHistory(): NotificationRef[] {\n        return this.notifications$.getValue();\n    }\n\n    dismiss(notificationRef: NotificationRef): void {\n        notificationRef.visible = false;\n        this.notifications$.next(this.notifications$.getValue());\n    }\n    \n    dismissAll(): void {\n        this.notifications$.getValue().forEach(notificationRef => notificationRef.visible = false);\n        this.notifications$.next(this.notifications$.getValue());        \n    }\n\n    constructor(private _colorService: ColorService) {\n    }\n}\n\nexport interface NotificationRef {\n    templateRef: TemplateRef<any>;\n    duration: number;\n    date: Date;\n    visible?: boolean;\n    height?: number;\n    spacing?: number;\n    backgroundColor?: string;\n    iconColor?: string;\n    data: { [key: string]: any };\n}\n\nexport interface NotificationOptions {\n    duration?: number;\n    height?: number;\n    spacing?: number;\n    backgroundColor?: string;\n    iconColor?: string;\n}\n\nexport type NotificationListDirection = 'above' | 'below';","import { Component, HostBinding, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { NotificationService, NotificationRef, NotificationListDirection } from './notification.service';\nimport { trigger, state, style, animate, transition } from '@angular/animations';\nimport { map } from 'rxjs/operators/map';\nimport { Observable } from 'rxjs/Observable';\n\n@Component({\n    selector: 'ux-notification-list',\n    template: `<div class=\"notification\" *ngFor=\"let notificationRef of notifications$ | async; let idx = index\"\n    [style.top.px]=\"(notificationRef.height + notificationRef.spacing) * idx\"\n    [style.height.px]=\"notificationRef.height\"\n    [style.background-color]=\"notificationRef.backgroundColor\"\n    [@notificationState]>\n    <ng-container *ngTemplateOutlet=\"notificationRef.templateRef; context: { $implicit: notificationRef, data: notificationRef.data }\"></ng-container>\n</div>\n`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('notificationState', [\n            state('in', style({ transform: 'translateY(0)', opacity: 0.9 })),\n            transition(':enter', [\n                style({ transform: 'translateY(-50px)', opacity: 0 }),\n                animate(500)\n            ]),\n            transition(':leave', [\n                animate(500, style({ transform: 'translateY(50px)', opacity: 0 }))\n            ])\n        ])\n    ]\n})\nexport class NotificationListComponent {\n    \n    @Input() \n    set direction(direction: NotificationListDirection) {\n        this._notificationService.direction = direction;\n    }\n\n    @Input() @HostBinding('class') position: NotificationListPostion = 'top-right';\n\n    notifications$: Observable<NotificationRef[]> = this._notificationService.notifications$.pipe(\n        map((notificationRefs: NotificationRef[]) => notificationRefs.filter(notificationRef => notificationRef.visible),\n    ));\n\n    constructor(private _notificationService: NotificationService) {\n\n    }\n}\n\nexport type NotificationListPostion = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationListComponent } from './notification-list.component';\r\nimport { NotificationService } from './notification.service';\r\nimport { ColorServiceModule } from '../../services/color/index';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ColorServiceModule\r\n    ],\r\n    exports: [\r\n        NotificationListComponent\r\n    ],\r\n    declarations: [\r\n        NotificationListComponent\r\n    ],\r\n    providers: [\r\n        NotificationService\r\n    ]\r\n})\r\nexport class NotificationModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const NUMBER_PICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => NumberPickerComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'ux-number-picker',\n    template: `<input type=\"number\"\n       role=\"spinbutton\"\n       class=\"form-control number-picker-input\"\n       [(ngModel)]=\"value\"\n       [min]=\"min\"\n       [max]=\"max\"\n       (keydown.ArrowDown)=\"decrement($event)\"\n       (keydown.ArrowUp)=\"increment($event)\"\n       (wheel)=\"onScroll($event)\"\n       step=\"any\"\n       [disabled]=\"disabled\"\n       [attr.aria-valuemin]=\"min\"\n       [attr.aria-valuenow]=\"value\"\n       [attr.aria-valuemax]=\"max\">\n\n<div class=\"number-picker-controls\">\n\n    <div class=\"number-picker-control-up\"\n         (click)=\"increment($event)\"\n         [class.disabled]=\"disabled || value >= max\">\n\n        <span class=\"hpe-icon hpe-up\"></span>\n    </div>\n\n    <div class=\"number-picker-control-down\"\n         (click)=\"decrement($event)\"\n         [class.disabled]=\"disabled || value <= min\">\n\n        <span class=\"hpe-icon hpe-down\"></span>\n    </div>\n\n</div>`,\n    providers: [NUMBER_PICKER_VALUE_ACCESSOR],\n    host: {\n        '[class.has-error]': '!isValid()'\n    }\n})\nexport class NumberPickerComponent implements ControlValueAccessor {\n\n    private _min: number = -Infinity;\n    private _max: number = Infinity;\n    private _step: number = 1;\n    private _disabled: boolean = false;\n    private _value: number = 0;\n    private _propagateChange = (_: any) => { };\n\n    @Input() valid: boolean = true;\n    @Output() valueChange = new EventEmitter<number>();\n\n    @Input('value')\n    get value(): number {\n        return this._value;\n    }\n    set value(value: number) {\n        this._value = value;\n        this.valueChange.emit(value);\n        this._propagateChange(value);\n    }\n\n    @Input()\n    get min(): number {\n        return this._min;\n    }\n    set min(value) {\n        this._min = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get max(): number {\n        return this._max;\n    }\n    set max(value) {\n        this._max = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get step(): number {\n        return this._step;\n    }\n    set step(value) {\n        this._step = typeof value === 'string' ? parseFloat(value) : value;\n    }\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = typeof value === 'string' && (value === '' || value === 'true' || value === 'disabled') || value === true;\n    }\n\n    increment(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.max(Math.min(this.value + this.step, this.max), this.min);\n        }\n    }\n\n    decrement(event: MouseEvent | KeyboardEvent): void {\n        event.preventDefault();\n\n        if (!this.disabled) {\n            this.value = Math.min(Math.max(this.value - this.step, this.min), this.max);\n        }\n    }\n\n    isValid(): boolean {\n        if (this.value < this.min || this.value > this.max) {\n            return false;\n        }\n\n        return this.valid;\n    }\n\n    onScroll(event: WheelEvent): void {\n\n        let scrollValue = event.deltaY || event.wheelDelta;\n\n        if (scrollValue < 0) {\n            this.increment(event);\n        } else {\n            this.decrement(event);\n        }\n    }\n\n    writeValue(value: any): void {\n        if (value !== undefined) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this._propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void { }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nimport { NumberPickerComponent } from './number-picker.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    exports: [NumberPickerComponent],\n    declarations: [NumberPickerComponent]\n})\nexport class NumberPickerModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\n\n@Injectable()\nexport class MenuNavigationService {\n\n    active$ = new BehaviorSubject<MenuNavigationItemDirective>(null);\n}","import { Directive, ElementRef, EventEmitter, OnDestroy, Output } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigationItem]'\n})\nexport class MenuNavigationItemDirective implements OnDestroy {\n\n    @Output() activated = new EventEmitter();\n\n    private _subscription: Subscription;\n\n    constructor(service: MenuNavigationService, private _elementRef: ElementRef) {\n        this._subscription = service.active$.subscribe((next) => {\n            if (next === this) {\n                this.setActive();\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setActive(): void {\n        this._elementRef.nativeElement.focus();\n        this.activated.emit();\n    }\n}","import { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, HostListener, Inject, Input, OnDestroy, OnInit, Output, QueryList } from '@angular/core';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\nimport { MenuNavigationService } from './menu-navigation.service';\n\n@Directive({\n    selector: '[uxMenuNavigation]',\n    exportAs: 'uxMenuNavigation',\n    providers: [MenuNavigationService]\n})\nexport class MenuNavigationDirective implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input()\n    toggleButton: MenuNavigationToggleDirective;\n\n    @Input()\n    toggleButtonPosition: 'top' | 'right' | 'bottom' | 'left' = 'top';\n\n    @Output()\n    navigatedOut = new EventEmitter<KeyboardEvent>();\n\n    @ContentChildren(MenuNavigationItemDirective, { descendants: true })\n    items: QueryList<MenuNavigationItemDirective>;\n\n    get activeIndex(): number {\n        return this._itemsOrdered.indexOf(this._service.active$.value);\n    }\n\n    private _itemsOrdered: MenuNavigationItemDirective[];\n\n    private _document: any;\n\n    private _subscription = new Subscription();\n\n    constructor(\n        private _service: MenuNavigationService,\n        private _elementRef: ElementRef,\n        @Inject(DOCUMENT) document: any\n    ) {\n        this._document = document;\n    }\n\n    ngOnInit(): void {\n        if (this.toggleButton) {\n            this._subscription.add(\n                this.toggleButton.keyEnter.subscribe(this.focusFirst.bind(this))\n            );\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        this._subscription.add(\n            this.items.changes.subscribe(() => {\n                this._itemsOrdered = this.items.toArray();\n            })\n        );\n\n        this._itemsOrdered = this.items.toArray();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    focusFirst(): void {\n        this.moveFirst();\n    }\n\n    @HostListener('document:keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        // Only handle events when focus in within the list of menu items\n        if (!this._elementRef.nativeElement.contains(this._document.activeElement)) {\n            return;\n        }\n\n        let handled = false;\n\n        switch (event.key) {\n\n            case 'ArrowUp':\n            case 'Up':\n                this.movePrevious(event);\n                handled = true;\n                break;\n\n            case 'ArrowDown':\n            case 'Down':\n                this.moveNext(event);\n                handled = true;\n                break;\n\n            case 'ArrowLeft':\n            case 'Left':\n                if (this.toggleButtonPosition === 'left') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'ArrowRight':\n            case 'Right':\n                if (this.toggleButtonPosition === 'right') {\n                    this.moveToToggleButton(event);\n                    handled = true;\n                }\n                break;\n\n            case 'Home':\n                this.moveFirst();\n                handled = true;\n                break;\n\n            case 'End':\n                this.moveLast();\n                handled = true;\n                break;\n\n            case 'Escape':\n                this.navigatedOut.emit(event);\n                handled = true;\n                break;\n        }\n\n        if (handled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private moveNext(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex + 1;\n        if (nextIndex < this._itemsOrdered.length) {\n\n            // Activate the next menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'bottom') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private movePrevious(event: KeyboardEvent): void {\n\n        // Do nothing if there's no active menu item registered\n        if (this.activeIndex < 0) {\n            return;\n        }\n\n        const nextIndex = this.activeIndex - 1;\n        if (nextIndex >= 0) {\n\n            // Activate the previous menu item\n            // (uxMenuNavigationItem subscribes to this and applies focus if it matches)\n            this._service.active$.next(this._itemsOrdered[nextIndex]);\n\n        } else {\n\n            // Check if focus went out of bounds in the direction of the origin toggle button\n            if (this.toggleButtonPosition === 'top') {\n                this.moveToToggleButton(event);\n            }\n        }\n    }\n\n    private moveFirst(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[0]);\n        }\n    }\n\n    private moveLast(): void {\n        if (this._itemsOrdered.length > 0) {\n            this._service.active$.next(this._itemsOrdered[this._itemsOrdered.length - 1]);\n        }\n    }\n\n    private moveToToggleButton(event: KeyboardEvent): void {\n        if (this.toggleButton) {\n            this.toggleButton.focus();\n            this.toggleButton.menuOpen = false;\n        }\n\n        this.navigatedOut.emit(event);\n    }\n}","import { Directive, ElementRef, EventEmitter, HostListener, Input, Output } from '@angular/core';\n\n@Directive({\n    selector: '[uxMenuNavigationToggle]',\n    exportAs: 'uxMenuNavigationToggle'\n})\nexport class MenuNavigationToggleDirective {\n\n    @Input()\n    get menuOpen(): boolean {\n        return this._menuOpen;\n    }\n\n    set menuOpen(value: boolean) {\n        this._menuOpen = value;\n        this.menuOpenChange.emit(value);\n    }\n\n    @Input()\n    menuPosition: 'top' | 'right' | 'bottom' | 'left' = 'bottom';\n\n    @Output()\n    menuOpenChange = new EventEmitter<boolean>();\n\n    keyEnter = new EventEmitter<void>();\n\n    private _menuOpen: boolean;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent): void {\n\n        if (this.isKeyMatch(event.key)) {\n\n            // Open the menu\n            this.menuOpen = true;\n\n            // Allow the menu to init, then send the event to give it focus\n            setTimeout(() => {\n                this.keyEnter.emit();\n            });\n\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    private isKeyMatch(key: string): boolean {\n        switch (key) {\n            case 'Enter':\n            case ' ':\n                return true;\n\n            case 'ArrowUp':\n            case 'Up':\n                return this.menuPosition === 'top';\n\n            case 'ArrowDown':\n            case 'Down':\n                return this.menuPosition === 'bottom';\n\n            case 'ArrowLeft':\n            case 'Left':\n                return this.menuPosition === 'left';\n\n            case 'ArrowRight':\n            case 'Right':\n                return this.menuPosition === 'right';\n        }\n\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { MenuNavigationDirective } from './menu-navigation.directive';\nimport { MenuNavigationItemDirective } from './menu-navigation-item.directive';\nimport { MenuNavigationToggleDirective } from './menu-navigation-toggle.directive';\n\nconst EXPORTS = [\n    MenuNavigationDirective,\n    MenuNavigationItemDirective,\n    MenuNavigationToggleDirective\n];\n\n@NgModule({\n    imports: [],\n    exports: EXPORTS,\n    declarations: EXPORTS,\n})\nexport class MenuNavigationModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxPageHeaderCustomMenu]' \n})\nexport class PageHeaderCustomMenuDirective { }","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationDropdownItem, PageHeaderNavigationItem } from './navigation/navigation.component';\n\n@Injectable()\nexport class PageHeaderService implements OnDestroy {\n\n    items$ = new BehaviorSubject<PageHeaderNavigationItem[]>([]);\n    selected$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    selectedRoot$ = new BehaviorSubject<PageHeaderNavigationItem>(null);\n    secondary$ = new BehaviorSubject<boolean>(false);\n    activeIconMenu$ = new BehaviorSubject<PageHeaderIconMenu>(null);\n    secondaryNavigationAutoselect = false;\n\n    private _subscription: Subscription;\n\n    constructor() {\n        this._subscription = this.selected$.pipe(map(selected => this.getRoot(selected))).subscribe(root => this.selectedRoot$.next(root));\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationItem): void {\n\n        if (this.secondaryNavigationAutoselect && item && item.children && item.children.length > 0) {\n\n            // Select the first child in secondaryNavigationAutoselect mode\n            this.selected$.next(item.children[0]);\n\n        } else {\n\n            // if we are in secondary navigation mode and we click a parent - dont deselect the child\n            if (this.secondary$.getValue() === true && this.isParentOf(this.selected$.getValue(), item)) {\n                return;\n            }\n\n            // Otherwise select the given item\n            this.selected$.next(item);\n        }\n    }\n\n    deselect(item: PageHeaderNavigationItem | PageHeaderNavigationDropdownItem): void {\n\n        // deselect the current item\n        item.selected = false;\n\n        // iterate any children and deselect them\n        if (item.children) {\n            item.children.forEach(_item => this.deselect(_item));\n        }\n    }\n\n    deselectAll(): void {\n        this.items$.getValue().forEach(item => this.deselect(item));\n    }\n\n    updateItem(item: PageHeaderNavigationItem, selected: PageHeaderNavigationItem): void {\n\n        // Item is selected if it is the selected item, or one of the selected item's ancestors.\n        item.selected = (item === selected) || this.isParentOf(selected, item);\n\n        if (item === selected) {\n            // call the select function if present\n            if (item.select) {\n                item.select.call(item, item);\n            }\n        }\n    }\n\n    setItems(items: PageHeaderNavigationItem[] = []): void {\n        // identify all parent elements\n        items.forEach(item => this.setParent(item));\n\n        this.items$.next(items);\n\n        // Set up the initally selected item\n        const initialSelectedItem = items.find(item => item.selected === true);\n        this.select(initialSelectedItem);\n    }\n\n    setSecondaryNavigation(enabled: boolean): void {\n        this.secondary$.next(enabled);\n    }\n\n    private getRoot(item: PageHeaderNavigation): PageHeaderNavigation {\n        return item && item.parent ? this.getRoot(item.parent) : item;\n    }\n\n    private setParent(item: PageHeaderNavigation, parent?: PageHeaderNavigation | null): void {\n        // set the parent field\n        item.parent = parent;\n\n        // call this function recursively on all children\n        if (item.children) {\n            item.children.forEach(child => this.setParent(child, item));\n        }\n    }\n\n    private isParentOf(node: PageHeaderNavigation, parent: PageHeaderNavigation): boolean {\n\n        // if there are no parents return false\n        if (!node || !node.parent) {\n            return false;\n        }\n\n        // if the parent is the match we are looking for return true\n        if (node.parent === parent) {\n            return true;\n        }\n\n        // if there are potentially grandparents then check them too\n        return this.isParentOf(node.parent, parent);\n    }\n}\n\nexport type PageHeaderNavigation = PageHeaderNavigationItem | PageHeaderNavigationDropdownItem;","import { Component, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderIconMenu, PageHeaderIconMenuDropdownItem } from '../interfaces';\nimport { PageHeaderService } from '../page-header.service';\n\n@Component({\n    selector: 'ux-page-header-icon-menu',\n    template: `<div class=\"page-header-icon-menu\"\n    dropdown\n    placement=\"bottom right\"\n    [(isOpen)]=\"isOpen\">\n\n    <a role=\"button\"\n        class=\"page-header-icon-menu-button\"\n        [attr.aria-label]=\"menu.label\"\n        aria-haspopup=\"true\"\n        tabindex=\"0\"\n        (click)=\"select(menu)\"\n        dropdownToggle\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"isOpen\">\n\n        <i class=\"hpe-icon\" [ngClass]=\"menu.icon\"></i>\n        <span class=\"label label-primary\" *ngIf=\"menu?.badge\" aria-hidden=\"true\">{{ menu.badge }}</span>\n\n    </a>\n\n    <ul *dropdownMenu\n        class=\"dropdown-menu\"\n        role=\"menu\"\n        uxMenuNavigation\n        [toggleButton]=\"menuNavigationToggle\">\n\n        <li *ngFor=\"let dropdown of menu?.dropdown\"\n            role=\"none\"\n            [class.dropdown-header]=\"dropdown.header\"\n            [class.dropdown-divider]=\"dropdown.divider\">\n\n            <span class=\"font-bold\" *ngIf=\"dropdown.header\">{{ dropdown.title }}</span>\n\n            <a *ngIf=\"!dropdown.header\"\n                role=\"menuitem\"\n                class=\"dropdown-item\"\n                tabindex=\"-1\"\n                (click)=\"select(dropdown)\"\n                (keydown)=\"keydownHandler(dropdown, $event)\"\n                uxMenuNavigationItem>\n\n\n                <span class=\"dropdown-item-title\">\n                    <i class=\"hpe-icon hpe-fw\" [ngClass]=\"dropdown.icon\"></i>\n                    {{ dropdown.title }}\n                </span>\n                <span *ngIf=\"dropdown.subtitle\" class=\"dropdown-item-subtitle\">{{ dropdown.subtitle }}</span>\n\n            </a>\n        </li>\n\n    </ul>\n</div>`\n})\nexport class PageHeaderIconMenuComponent implements OnDestroy {\n\n    @Input() menu: PageHeaderIconMenu;\n\n    get isOpen(): boolean {\n        return this._isOpen;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n        if (value) {\n            this._service.activeIconMenu$.next(this.menu);\n        }\n    }\n\n    @ViewChild('menuNavigationToggle') menuNavigationToggle: MenuNavigationToggleDirective;\n\n    private _isOpen: boolean;\n    private _subscription: Subscription;\n\n    constructor(private _service: PageHeaderService) {\n        this._subscription = _service.activeIconMenu$.subscribe((next) => {\n            // Close all but the most recently opened menu\n            if (next !== this.menu) {\n                this._isOpen = false;\n            }\n        });\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem) {\n        if (item.select) {\n            item.select.call(item, item);\n        }\n    }\n\n    keydownHandler(item: PageHeaderIconMenu | PageHeaderIconMenuDropdownItem, event: KeyboardEvent): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                this.isOpen = false;\n                this.menuNavigationToggle.focus();\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, ViewChild } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { debounceTime } from 'rxjs/operators';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-dropdown-item',\n    exportAs: 'ux-page-header-horizontal-navigation-dropdown-item',\n    template: `<div *ngIf=\"item.children && item.children.length > 0\"\n    dropdown\n    #subMenu=\"bs-dropdown\"\n    [isOpen]=\"dropdownOpen\"\n    container=\"body\"\n    placement=\"right\"\n    (mouseenter)=\"hoverStart()\"\n    (mouseleave)=\"hoverLeave()\">\n\n    <a role=\"menuitem\"\n        class=\"dropdown-item\"\n        [class.selected]=\"item.selected\"\n        aria-haspopup=\"true\"\n        [attr.aria-expanded]=\"dropdownOpen\"\n        [attr.aria-selected]=\"item.selected\"\n        tabindex=\"-1\"\n        #button\n        dropdownToggle\n        uxMenuNavigationToggle\n        #menuNavigationToggle=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"dropdownOpen\"\n        menuPosition=\"right\">\n\n        <span class=\"dropdown-item-title\">{{ item.title }}</span>\n        <span class=\"dropdown-item-icon hpe-icon hpe-next\"></span>\n\n    </a>\n\n    <ul *dropdownMenu\n        role=\"menu\"\n        class=\"dropdown-menu horizontal-navigation-dropdown-submenu\"\n        (mouseenter)=\"hoverStart()\"\n        (mouseleave)=\"hoverLeave()\"\n        uxMenuNavigation\n        #menuNavigation=\"uxMenuNavigation\"\n        [toggleButton]=\"menuNavigationToggle\"\n        toggleButtonPosition=\"left\">\n\n        <li *ngFor=\"let subItem of item.children\" role=\"none\">\n\n            <a role=\"menuitem\"\n                class=\"dropdown-item\"\n                [class.selected]=\"subItem.selected\"\n                [attr.aria-selected]=\"subItem.selected\"\n                tabindex=\"-1\"\n                (click)=\"select(subItem)\"\n                (keydown)=\"keydownHandler($event, subItem)\"\n                uxMenuNavigationItem>\n\n                <span class=\"dropdown-item-title\">{{ subItem.title }}</span>\n\n            </a>\n\n        </li>\n    </ul>\n\n</div>\n\n<div *ngIf=\"!item.children || item.children.length === 0\"\n    (mouseenter)=\"hoverStart()\"\n    (mouseleave)=\"hoverLeave()\">\n\n    <a role=\"menuitem\"\n        #button\n        class=\"dropdown-item\"\n        [class.selected]=\"item.selected\"\n        [attr.aria-selected]=\"item.selected\"\n        tabindex=\"-1\"\n        (click)=\"select(item)\"\n        (keydown)=\"keydownHandler($event, item)\">\n\n        <span class=\"dropdown-item-title\">{{ item.title }}</span>\n\n    </a>\n\n</div>`\n})\nexport class PageHeaderNavigationDropdownItemComponent implements OnDestroy {\n\n    @Input() item: PageHeaderNavigationDropdownItem;\n\n    @ViewChild('button')\n    button: ElementRef;\n\n    dropdownOpen: boolean = false;\n\n    private _subscription: Subscription;\n    private _hover$: Subject<boolean> = new Subject<boolean>();\n\n    constructor(private _pageHeaderService: PageHeaderService) {\n\n        // subscribe to stream with a debounce (a small debounce is all that is required)\n        this._subscription = this._hover$.pipe(debounceTime(1)).subscribe(visible => this.dropdownOpen = visible);\n\n        // Close submenus when selected item changes\n        this._subscription.add(\n            _pageHeaderService.selected$.subscribe(() => {\n                this.dropdownOpen = false;\n            })\n        );\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select(item: PageHeaderNavigationDropdownItem) {\n\n        // clicking on an item with children then return\n        if (item.children) {\n            return;\n        }\n\n        // emit the selected item in an event\n        this._pageHeaderService.select(item);\n    }\n\n    focus(): void {\n        this.button.nativeElement.focus();\n    }\n\n    hoverStart() {\n        this._hover$.next(true);\n    }\n\n    hoverLeave() {\n        this._hover$.next(false);\n    }\n\n    close() {\n        this.dropdownOpen = false;\n    }\n\n    keydownHandler(event: KeyboardEvent, item: PageHeaderNavigationDropdownItem): void {\n\n        switch (event.key) {\n            case 'Enter':\n            case ' ':\n                this.select(item);\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n        }\n    }\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\nimport { BsDropdownDirective } from 'ngx-bootstrap/dropdown';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { MenuNavigationToggleDirective } from '../../../../directives/menu-navigation/menu-navigation-toggle.directive';\nimport { PageHeaderService } from '../../page-header.service';\nimport { PageHeaderNavigationDropdownItemComponent } from '../navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItem } from '../navigation.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation-item',\n    template: `<div *ngIf=\"item.children && item.children.length > 0 && !(secondary$ | async)\"\n    dropdown\n    #menu=\"bs-dropdown\"\n    [(isOpen)]=\"isOpen\"\n    container=\"body\"\n    placement=\"bottom left\">\n\n    <button role=\"menuitem\"\n        class=\"horizontal-navigation-button\"\n        [class.selected]=\"item.selected\"\n        [class.open]=\"isOpen\"\n        aria-haspopup=\"true\"\n        [attr.aria-expanded]=\"isOpen\"\n        [attr.aria-selected]=\"item.selected\"\n        dropdownToggle\n        uxMenuNavigationToggle\n        #button=\"uxMenuNavigationToggle\"\n        [(menuOpen)]=\"isOpen\">\n\n        <span class=\"hpe-icon navigation-item-icon\" *ngIf=\"item.icon\" [ngClass]=\"item?.icon\"></span>\n        <span class=\"navigation-item-label\">{{ item?.title }}</span>\n        <span class=\"hpe-icon hpe-down\"></span>\n\n    </button>\n\n    <div *dropdownMenu\n        role=\"menu\"\n        class=\"dropdown-menu horizontal-navigation-dropdown-menu\"\n        uxMenuNavigation\n        [toggleButton]=\"button\"\n        toggleButtonPosition=\"top\">\n\n        <div *ngFor=\"let item of item?.children\" uxMenuNavigationItem (activated)=\"dropdownItem.focus()\">\n            <ux-page-header-horizontal-navigation-dropdown-item\n                #dropdownItem=\"ux-page-header-horizontal-navigation-dropdown-item\"\n                [item]=\"item\">\n            </ux-page-header-horizontal-navigation-dropdown-item>\n        </div>\n\n    </div>\n\n</div>\n\n<button *ngIf=\"!item.children || item.children.length === 0 || (secondary$ | async)\"\n    role=\"menuitem\"\n    class=\"horizontal-navigation-button\"\n    [class.selected]=\"item.selected\"\n    [attr.aria-selected]=\"item.selected\"\n    (click)=\"select()\">\n\n    <span class=\"hpe-icon navigation-item-icon\" *ngIf=\"item.icon\" [ngClass]=\"item?.icon\"></span>\n    <span class=\"navigation-item-label\">{{ item?.title }}</span>\n\n</button>`\n})\nexport class PageHeaderNavigationItemComponent implements OnInit, OnDestroy {\n\n    @ViewChild('button') button: MenuNavigationToggleDirective;\n    @ViewChild('menu') menu: BsDropdownDirective;\n    @ViewChildren(PageHeaderNavigationDropdownItemComponent) dropdowns: QueryList<PageHeaderNavigationDropdownItemComponent>;\n\n    @Input() item: PageHeaderNavigationItem;\n\n    secondary$: BehaviorSubject<boolean> = this._pageHeaderService.secondary$;\n\n    isOpen: boolean;\n\n    private _subscription: Subscription;\n\n    constructor(\n        public elementRef: ElementRef,\n        private _pageHeaderService: PageHeaderService\n    ) { }\n\n    ngOnInit() {\n\n        this._subscription = this._pageHeaderService.selected$.subscribe(next => {\n\n            // Update selected state for this item\n            this._pageHeaderService.updateItem(this.item, next);\n\n            if (next && this.isOpen) {\n                this.isOpen = false;\n\n                // If menu was closed, keep focus on the toggle button\n                this.button.focus();\n            }\n        });\n\n        if (this.menu) {\n            this._subscription.add(\n                this.menu.onHidden.subscribe(() => this.dropdowns.forEach(dropdown => dropdown.close()))\n            );\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    select() {\n\n        // if the item has children then do nothing at this stage\n        if (this.item.children && this._pageHeaderService.secondary$.getValue() === false) {\n            return;\n        }\n\n        // otherwise select the current item\n        this._pageHeaderService.select(this.item);\n    }\n}","import { Directive, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { delay, takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { PageHeaderService } from '../../page-header.service';\r\nimport { PageHeaderNavigationItem } from '../navigation.component';\r\n\r\n@Directive({\r\n    selector: '[uxPageHeaderNavigationSecondaryItem]'\r\n})\r\nexport class PageHeaderNavigationSecondaryItemDirective implements OnInit, OnDestroy {\r\n\r\n    @Input('uxPageHeaderNavigationSecondaryItem')\r\n    item: PageHeaderNavigationItem;\r\n\r\n    private _onDestroy = new Subject<void>();\r\n\r\n    constructor(private _pageHeaderService: PageHeaderService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        this._pageHeaderService.selected$.pipe(delay(0), takeUntil(this._onDestroy)).subscribe(next => {\r\n\r\n            // Update selected state for this item\r\n            this._pageHeaderService.updateItem(this.item, next);\r\n\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    }\r\n}","import { AfterViewInit, Component, ElementRef, OnDestroy, QueryList, ViewChildren } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { ResizeService } from '../../../directives/resize/index';\nimport { PageHeaderNavigation, PageHeaderService } from '../page-header.service';\nimport { PageHeaderNavigationItemComponent } from './navigation-item/navigation-item.component';\n\n@Component({\n    selector: 'ux-page-header-horizontal-navigation',\n    template: `<ux-page-header-horizontal-navigation-item\n    *ngFor=\"let item of items$ | async\"\n    [item]=\"item\">\n</ux-page-header-horizontal-navigation-item>\n\n<div class=\"selected-indicator\"\n    [style.opacity]=\"indicatorVisible ? 1 : 0\"\n    [style.margin-left.px]=\"indicatorX\"\n    [style.width.px]=\"indicatorWidth\">\n</div>`,\n    host: {\n        'role': 'menubar'\n    }\n})\nexport class PageHeaderNavigationComponent implements AfterViewInit, OnDestroy {\n\n    @ViewChildren(PageHeaderNavigationItemComponent) menuItems: QueryList<PageHeaderNavigationItemComponent>;\n\n    items$: BehaviorSubject<PageHeaderNavigationItem[]> = this._pageHeaderService.items$;\n    indicatorVisible: boolean = false;\n    indicatorX: number = 0;\n    indicatorWidth: number = 0;\n\n    private _subscription = new Subscription();\n\n    constructor(elementRef: ElementRef, resizeService: ResizeService, private _pageHeaderService: PageHeaderService) {\n        this._subscription.add(resizeService.addResizeListener(elementRef.nativeElement).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.selected$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n        this._subscription.add(_pageHeaderService.secondary$.pipe(distinctUntilChanged()).subscribe(this.updateSelectedIndicator.bind(this)));\n    }\n\n    ngAfterViewInit(): void {\n        this.updateSelectedIndicator();\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    updateSelectedIndicator(): void {\n        setTimeout(() => {\n            // find the selected item\n            const selected = this.menuItems.find(item => item.item.selected);\n\n            // determine whether or not to show the indicator\n            this.indicatorVisible = !!selected;\n\n            // set the width of the indicator to match the width of the navigation item\n            if (selected) {\n                const styles = getComputedStyle(selected.elementRef.nativeElement);\n\n                this.indicatorX = selected.elementRef.nativeElement.offsetLeft;\n                this.indicatorWidth = parseInt(styles.getPropertyValue('width'));\n            }\n        });\n    }\n\n}\n\nexport interface PageHeaderNavigationItem {\n    icon?: string;\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\nexport interface PageHeaderNavigationDropdownItem {\n    title: string;\n    selected?: boolean;\n    select?: (item: PageHeaderNavigationDropdownItem) => void;\n    children?: PageHeaderNavigationDropdownItem[];\n    parent?: PageHeaderNavigation;\n}\n\n// This is an alias for MF use as \"DropdownItem\" doesn't make sense in context with how it is used\nexport interface PageHeaderSecondaryNavigationItem extends PageHeaderNavigationDropdownItem { }","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, TemplateRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { ColorService } from '../../services/color/index';\nimport { Breadcrumb } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenu } from './interfaces';\nimport { PageHeaderNavigationItem } from './navigation/navigation.component';\nimport { PageHeaderNavigation, PageHeaderService } from './page-header.service';\n\n@Component({\n    selector: 'ux-page-header',\n    exportAs: 'ux-page-header',\n    template: `<div class=\"ux-page-header\" [class.page-header-condensed]=\"condensed\" role=\"banner\">\n\n    <!-- Display Upper Section when not condensed -->\n    <div class=\"page-header-actions\" *ngIf=\"!condensed\">\n\n        <div class=\"page-header-logo-container\" role=\"presentation\" [hidden]=\"!logo\">\n            <img [attr.src]=\"logo\" class=\"page-header-logo\">\n        </div>\n\n        <div class=\"page-header-navigation\" [ngClass]=\"alignment\" role=\"navigation\" aria-label=\"Primary Navigation\">\n\n            <!-- The Top Navigation Options -->\n            <ux-page-header-horizontal-navigation></ux-page-header-horizontal-navigation>\n        </div>\n\n        <div class=\"page-header-icon-menus\" role=\"toolbar\">\n            <ng-container *ngFor=\"let menu of customMenus\" [ngTemplateOutlet]=\"menu\"></ng-container>\n\n            <ux-page-header-icon-menu *ngFor=\"let menu of iconMenus\" [menu]=\"menu\"></ux-page-header-icon-menu>\n        </div>\n    </div>\n\n    <!-- Display Lower Section When Not Condensed -->\n    <div class=\"page-header-details\" *ngIf=\"!condensed\">\n\n        <div class=\"page-header-state-container\" role=\"navigation\">\n\n            <button *ngIf=\"backVisible === true\" class=\"page-header-back-button\" (click)=\"goBack()\" aria-label=\"Go Back\">\n                <span class=\"hpe-icon hpe-previous text-primary\"></span>\n            </button>\n\n            <div class=\"page-header-title-container\">\n\n                <ux-breadcrumbs [crumbs]=\"crumbs\"></ux-breadcrumbs>\n\n                <h1 class=\"page-header-title\" [style.backgroundColor]=\"familyBackground\" [style.color]=\"familyForeground\">{{ header }}</h1>\n            </div>\n\n        </div>\n\n    </div>\n\n    <!-- Display This Section Optimized for Condensed Mode -->\n    <div class=\"page-header-condensed-content\" *ngIf=\"condensed\">\n\n        <div class=\"page-header-breadcrumbs\" role=\"navigation\">\n            <ux-breadcrumbs [crumbs]=\"crumbs\"></ux-breadcrumbs>\n        </div>\n\n        <div class=\"page-header-navigation\" [ngClass]=\"alignment\" role=\"navigation\" aria-label=\"Primary Navigation\">\n\n            <!-- The Top Navigation Options -->\n            <ux-page-header-horizontal-navigation></ux-page-header-horizontal-navigation>\n        </div>\n\n        <div class=\"page-header-icon-menus\" role=\"toolbar\">\n            <ng-container *ngFor=\"let menu of customMenus\" [ngTemplateOutlet]=\"menu\"></ng-container>\n            <ux-page-header-icon-menu *ngFor=\"let menu of iconMenus\" [menu]=\"menu\"></ux-page-header-icon-menu>\n        </div>\n\n    </div>\n\n</div>\n\n<div class=\"page-header-secondary\" [ngClass]=\"secondaryNavigationAlignment\" role=\"navigation\" *ngIf=\"secondaryNavigation && (selectedRoot$ | async)\">\n    <ul class=\"nav nav-tabs\" role=\"tablist\" aria-label=\"Secondary Navigation\" *ngIf=\"(selectedRoot$ | async)?.children; let children\">\n        <li *ngFor=\"let child of children\"\n            [class.active]=\"child.selected\"\n            role=\"none\"\n            [uxPageHeaderNavigationSecondaryItem]=\"child\">\n\n            <a role=\"tab\"\n                [attr.aria-selected]=\"child.selected\"\n                tabindex=\"0\"\n                (click)=\"select(child)\"\n                (keydown.enter)=\"select(child)\">{{ child.title }}</a>\n\n        </li>\n    </ul>\n</div>`,\n    providers: [ PageHeaderService ]\n})\nexport class PageHeaderComponent {\n\n    @Input() logo: string;\n    @Input() header: string;\n    @Input() alignment: 'left' | 'right' | 'center' = 'center';\n    @Input() condensed: boolean = false;\n    @Input() iconMenus: PageHeaderIconMenu[];\n    @Input() backVisible: boolean = true;\n    @Input() secondaryNavigationAlignment: string = 'center';\n\n    @Input() set secondaryNavigationAutoselect(value: boolean) {\n        this._pageHeaderService.secondaryNavigationAutoselect = value;\n    }\n\n    get secondaryNavigationAutoselect(): boolean {\n        return this._pageHeaderService.secondaryNavigationAutoselect;\n    }\n\n    @Input() set items(items: PageHeaderNavigationItem[]) {\n        this._pageHeaderService.setItems(items);\n    }\n\n    @Input() set secondaryNavigation(enabled: boolean) {\n        this._pageHeaderService.setSecondaryNavigation(enabled);\n    }\n\n    get secondaryNavigation(): boolean {\n        return this._pageHeaderService.secondary$.getValue();\n    }\n\n    @Input() set crumbs(crumbs: Breadcrumb[]) {\n        this._crumbs = crumbs;\n    }\n\n    get crumbs(): Breadcrumb[] {\n        return this.condensed ? [...this._crumbs, { title: this.header }] : this._crumbs;\n    }\n\n    @Input()\n    set familyBackground(color: string) {\n        this._familyBackground = this._colorService.resolve(color);\n    }\n\n    get familyBackground(): string {\n        return this._familyBackground;\n    }\n\n    @Input()\n    set familyForeground(color: string) {\n        this._familyForeground = this._colorService.resolve(color);\n    }\n\n    get familyForeground(): string {\n        return this._familyForeground;\n    }\n\n    @Output() backClick = new EventEmitter();\n\n    @ContentChildren(PageHeaderCustomMenuDirective, { read: TemplateRef }) customMenus: QueryList<TemplateRef<any>>;\n\n    selected$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selected$;\n    selectedRoot$: BehaviorSubject<PageHeaderNavigationItem> = this._pageHeaderService.selectedRoot$;\n\n    private _crumbs: Breadcrumb[] = [];\n    private _familyBackground: string;\n    private _familyForeground: string;\n\n    constructor(private _colorService: ColorService, private _pageHeaderService: PageHeaderService) { }\n\n    goBack(): void {\n        this.backClick.emit();\n    }\n\n    select(item: PageHeaderNavigation): void {\n        this._pageHeaderService.select(item);\n    }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nimport { MenuNavigationModule } from '../../directives/menu-navigation/index';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { BreadcrumbsModule } from '../breadcrumbs/index';\nimport { PageHeaderCustomMenuDirective } from './custom-menu/custom-menu.directive';\nimport { PageHeaderIconMenuComponent } from './icon-menu/icon-menu.component';\nimport { PageHeaderNavigationDropdownItemComponent } from './navigation/navigation-dropdown-item/navigation-dropdown-item.component';\nimport { PageHeaderNavigationItemComponent } from './navigation/navigation-item/navigation-item.component';\nimport { PageHeaderNavigationSecondaryItemDirective } from './navigation/navigation-secondary-item/navigation-secondary-item.directive';\nimport { PageHeaderNavigationComponent } from './navigation/navigation.component';\nimport { PageHeaderComponent } from './page-header.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        BreadcrumbsModule,\n        ColorServiceModule,\n        ResizeModule,\n        MenuNavigationModule,\n        BsDropdownModule.forRoot()\n    ],\n    exports: [\n        PageHeaderComponent,\n        PageHeaderCustomMenuDirective\n    ],\n    declarations: [\n        PageHeaderComponent,\n        PageHeaderIconMenuComponent,\n        PageHeaderCustomMenuDirective,\n        PageHeaderNavigationComponent,\n        PageHeaderNavigationItemComponent,\n        PageHeaderNavigationDropdownItemComponent,\n        PageHeaderNavigationSecondaryItemDirective\n    ]\n})\nexport class PageHeaderModule { }\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n    selector: 'ux-progress-bar',\n    template: `<div *ngIf=\"!indeterminate\" class=\"progressbar-track\" [style.width.%]=\"(value / max) * 100\" [style.backgroundColor]=\"barColor\">\n    <ng-content></ng-content>\n</div>\n<div *ngIf=\"indeterminate\" class=\"progressbar-track indeterminate\" [style.backgroundColor]=\"barColor\">\n    <ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {\n    @Input() value: number = 0;\n    @Input() max: number = 100;\n    @Input() indeterminate: boolean = false;\n    @Input() trackColor: string;\n    @Input() barColor: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProgressBarComponent } from './progress-bar.component';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [ProgressBarComponent],\n    declarations: [ProgressBarComponent]\n})\nexport class ProgressBarModule { }\n","import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIOBUTTON_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButtonComponent),\n    multi: true\n};\n\nlet uniqueRadioId = 0;\n\n@Component({\n    selector: 'ux-radio-button',\n    template: `<label [attr.for]=\"inputId\" class=\"ux-radio-button\"\n       [class.ux-radio-button-checked]=\"value === option\"\n       [class.ux-radio-button-simplified]=\"simplified\"\n       [class.ux-radio-button-disabled]=\"disabled\"\n       [class.ux-radio-button-focused]=\"focused\">\n\n    <div class=\"ux-radio-button-container\">\n        <input class=\"ux-radio-button-input\"\n            type=\"radio\"\n            [id]=\"inputId\"\n            [checked]=\"value === option\"\n            [disabled]=\"disabled\"\n            [tabindex]=\"tabindex || value === option ? 0 : -1\"\n            [attr.name]=\"name\"\n            [required]=\"required\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledby]=\"ariaLabelledby\"\n            [attr.aria-describedby]=\"ariaDescribedby\"\n            [attr.aria-checked]=\"value === option\"\n            (focus)=\"focused = true\"\n            (blur)=\"focused = false\"\n            (change)=\"toggle()\"\n            (click)=\"$event.stopPropagation()\">\n    </div>\n\n    <span class=\"ux-radio-button-label\">\n        <ng-content></ng-content>\n    </span>\n\n</label>`,\n    providers: [RADIOBUTTON_VALUE_ACCESSOR]\n})\nexport class RadioButtonComponent implements ControlValueAccessor {\n\n    private _radioButtonId: string = `ux-radio-button-${++uniqueRadioId}`;\n\n    @Input() id: string = this._radioButtonId;\n    @Input() name: string | null;\n    @Input() required: boolean;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input() simplified: boolean = false;\n    @Input() option: any;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n    @Input('aria-describedby') ariaDescribedby: string = null;\n\n    @Output() valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // invoke change event\n        this.valueChange.emit(this._value);\n\n        // call callback\n        this.onChangeCallback(this._value);\n        this.onTouchedCallback();        \n    }\n\n    get inputId(): string { \n        return `${this.id || this._radioButtonId}-input`;\n    }\n\n    private _value: any = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n\n        if (this.disabled || !this.clickable) {\n            return;\n        }\n\n        // toggle the checked state\n        this.value = this.option;\n\n        // call callback\n        this.onChangeCallback(this.value);\n    }\n\n    // Functions required to update ng-model\n    writeValue(value: boolean): void {\n        if (value !== this._value) {\n            this._value = value;\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport { RadioButtonComponent } from './radiobutton.component';\n\n@NgModule({\n    imports: [FormsModule],\n    exports: [RadioButtonComponent],\n    declarations: [RadioButtonComponent]\n})\nexport class RadioButtonModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\n\n@Injectable()\nexport class SearchBuilderService {\n\n  query: SearchBuilderQuery = {};\n  queryChange: Subject<SearchBuilderQuery> = new Subject<SearchBuilderQuery>();\n  validationChange: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(true);\n\n  private _componentId: number = 0;\n  private _components: SearchBuilderComponentDefinition[] = [];\n  private _validation: { [key: number]: boolean } = {};\n\n  /**\n   * Add a component to the internal list of components\n   */\n  registerComponent(component: SearchBuilderComponentDefinition): void {\n\n    // ensure there are no components with a matching name\n    if (this._components.find(cmp => cmp.name === component.name)) {\n      throw new Error(`Search builder components must have a unique name. The name ${component.name} has already been used.`);\n    }\n\n    // if unique then add the component to the list\n    this._components.push(component);\n  }\n\n  /**\n   * Bulk registration of components\n   * (Just a helper method)\n   */\n  registerComponents(components: SearchBuilderComponentDefinition[]): void {\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  /**\n   * Get a registered component class\n   */\n  getComponent(name: string): any {\n\n    // find the component\n    const component = this._components.find(cmp => cmp.name === name);\n\n    // if there is no match throw an exception\n    if (!component) {\n      throw new Error(`No search build component with the name ${name} exists`);\n    }\n\n    // ensure config is defined - at least to an empty object\n    component.config = component.config || {};\n\n    return component;\n  }\n\n  /**\n   * Update the internal search query state\n   * note that the query will be immutable\n   */\n  setQuery(query: SearchBuilderQuery): void {\n    this.query = Object.assign({}, query);\n  }\n\n  /**\n   * Return the current query state\n   */\n  getQuery(): SearchBuilderQuery {\n    return this.query;\n  }\n\n  /**\n   * Trigger the observable to indicate the query has been updated\n   */\n  queryHasChanged(): void {\n    this.queryChange.next(this.query);\n  }\n\n  /**\n   * Store the validation state of the query\n   */\n  setValid(id: number, valid: boolean): void {\n\n    // store the state for this specific component\n    this._validation[id] = valid;\n\n    // evaluate the entire validation state\n    this.validationChange.next(!Object.keys(this._validation).some(key => !this._validation[key]));\n  }\n\n  /**\n   * Generate a unique id for each component\n   */\n  generateComponentId(): number {\n    return this._componentId++;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Injectable()\nexport class SearchBuilderGroupService {\n\n  private _id: string;\n\n  constructor(private _searchBuilderService: SearchBuilderService) { }\n\n  /**\n   * Initialise the group by defining an id\n   */\n  init(id: string): void {\n    // store the name of the group\n    this._id = id;\n\n    // create the entry in the query object if it doesn't exist\n    if (!this._searchBuilderService.query[this._id]) {\n\n      // create the section\n      this._searchBuilderService.query[this._id] = [];\n\n      // emit the changes after the initial setup\n      setTimeout(() => this._searchBuilderService.queryHasChanged());\n    }\n  }\n\n  /**\n   * Remove a field from the search builder query\n   */\n  remove(field: SearchBuilderGroupQuery): void {\n    // get the query for this group\n    const query = this.getQuery();\n\n    // remove the field from the array\n    query.splice(query.indexOf(field), 1);\n  }\n\n  /**\n   * Get the query for this specific search group\n   */\n  getQuery(): SearchBuilderGroupQuery[] {\n    return this._searchBuilderService.query[this._id] ? this._searchBuilderService.query[this._id] : [];\n  }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\nimport { SearchBuilderGroupService } from './search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\nimport { SearchBuilderGroupQuery } from '../interfaces/group-query.interface';\n\n@Component({\n  selector: 'ux-search-builder-group',\n  template: `<h4 class=\"search-group-title\">{{ header }}</h4>\n\n<main class=\"search-group-content\">\n\n  <section class=\"search-group-operator search-group-operator-{{ operator }}\" [class.hidden-operator]=\"searchBuilderGroupService.getQuery().length < 2\">{{ operator }}</section>\n\n  <section class=\"search-group-items\">\n\n    <div class=\"search-group-item-container\" *ngFor=\"let field of searchBuilderGroupService.getQuery()\">\n\n      <div class=\"search-group-item\">\n        <ng-container *uxSearchBuilderOutlet=\"field.type; context: field\"></ng-container>\n      </div>\n\n      <div class=\"search-group-item-remove\" (click)=\"removeField(field)\">\n        <span class=\"hpe-icon hpe-close\"></span>\n      </div>\n    </div>\n\n    <!-- Placeholder Item -->\n    <ng-container *ngIf=\"showPlaceholder\">\n\n      <!-- The Default Placeholder -->\n      <div class=\"search-group-item-container placeholder-item\" *ngIf=\"!placeholder\">\n        \n        <div class=\"search-group-item\">\n          <label class=\"form-label\">New field</label>\n          <div class=\"form-control\"></div>\n        </div>\n  \n      </div>\n\n      <!-- Allow a custom placeholder -->\n    <ng-container *ngTemplateOutlet=\"placeholder\"></ng-container>\n\n    </ng-container>\n\n  </section>\n\n  <section class=\"search-builder-group-add-field\" (click)=\"add.emit($event)\">\n\n    <button type=\"button\" class=\"btn btn-icon btn-circular button-accent\" aria-label=\"Add Field\">\n      <span class=\"hpe-icon hpe-add\" aria-hidden=\"true\"></span>\n    </button>\n\n    <span class=\"search-builder-group-add-field-label\">{{ addText }}</span>\n\n  </section>\n\n</main>\n\n<hr class=\"search-builder-group-divider\">\n`,\n  providers: [SearchBuilderGroupService]\n})\nexport class SearchBuilderGroupComponent implements OnInit {\n\n  @Input() id: string;\n  @Input() header: string;\n  @Input() operator: SearchBuilderGroupOperator = 'and';\n  @Input() addText: string = 'Add a field';\n  @Input() placeholder: TemplateRef<any>;\n  @Input() showPlaceholder: boolean = false;\n\n  @Output() add: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @Output() remove: EventEmitter<SearchBuilderGroupQuery> = new EventEmitter<SearchBuilderGroupQuery>();\n\n  constructor(public searchBuilderGroupService: SearchBuilderGroupService, private _searchBuilderService: SearchBuilderService) { }\n\n  ngOnInit(): void {\n\n    // ensure we have a name otherwise throw an error\n    if (!this.id) {\n      throw new Error('Search builder group must have a name attribute.');\n    }\n\n    // otherwise register the group\n    this.searchBuilderGroupService.init(this.id);\n  }\n\n  removeField(field: SearchBuilderGroupQuery): void {\n    this.searchBuilderGroupService.remove(field);\n    this.remove.emit(field);\n  }\n}\n\nexport type SearchBuilderGroupOperator = 'and' | 'or' | 'not';\n","import { ComponentFactoryResolver, ComponentRef, Directive, Input, OnInit, ViewContainerRef } from '@angular/core';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Directive({\n    selector: '[uxSearchBuilderOutlet]'\n})\nexport class SearchBuilderOutletDirective implements OnInit {\n\n    @Input() uxSearchBuilderOutlet: string;\n    @Input() uxSearchBuilderOutletContext: any;\n\n    private _componentRef: ComponentRef<any>;\n\n    constructor(\n        private _viewContainerRef: ViewContainerRef,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _searchBuilderService: SearchBuilderService\n    ) { }\n\n    ngOnInit(): void {\n\n        // get the class from the type\n        const componentDefinition = this._searchBuilderService.getComponent(this.uxSearchBuilderOutlet);\n\n        // create the component factory\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentDefinition.component);\n\n        // create the component instance\n        this._componentRef = this._viewContainerRef.createComponent(componentFactory);\n\n        // combine the predefined config with any dynmaic config\n        const config = Object.assign({}, componentDefinition.config, this.uxSearchBuilderOutletContext.config || {});\n\n        // set the context and config property on the component instance\n        this._componentRef.instance.context = this.uxSearchBuilderOutletContext;\n        this._componentRef.instance.config = config;\n    }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { SearchBuilderComponentContext } from '../interfaces/component-context.interface';\nimport { SearchBuilderGroupService } from '../search-builder-group/search-builder-group.service';\nimport { SearchBuilderService } from '../search-builder.service';\n\n@Component({\n    selector: 'ux-base-search',\n    template: ''\n})\nexport class BaseSearchComponent implements OnDestroy {\n\n    type: string;\n    config: any;\n    context: SearchBuilderComponentContext;\n\n    private _id: number = this._searchBuilderService.generateComponentId();\n    private _valid: boolean = true;\n\n    /**\n     * Get the current value of the component\n     */\n    get value() {\n        return this.context.value;\n    }\n\n    /**\n     * Set the current value of the component\n     */\n    set value(value: any) {\n        this.context.value = value;\n        this._searchBuilderService.queryHasChanged();\n\n        // if value has been set perform validation\n        this.validate();\n    }\n\n    get valid(): boolean {\n        return this._valid;\n    }\n\n    set valid(valid: boolean) {\n        this._valid = valid;\n        this._searchBuilderService.setValid(this._id, valid);\n    }\n\n    constructor(\n        private _searchBuilderService: SearchBuilderService,\n        private _searchBuilderGroupService: SearchBuilderGroupService\n    ) { }\n\n    /**\n     * Make sure we clean up after ourselves\n     */\n    ngOnDestroy(): void {\n        this.valid = true;\n    }\n\n    /**\n     * Perform any required validation on the value\n     */\n    validate(): void {\n        // if a custom validation function has been provided then use it\n        this.valid = this.config.validation ? this.config.validation(this, this.value) : true;\n    }\n\n}\n\nexport interface BaseSearchComponentConfig {\n    label?: string;\n    placeholder?: string;\n    validation?: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-text',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n<input [placeholder]=\"placeholder\" [(ngModel)]=\"value\" class=\"form-control\">`\n})\nexport class SearchTextComponent extends BaseSearchComponent {\n\n  type: string = 'text';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter text';\n  }\n}\n\nexport interface SearchTextConfig extends BaseSearchComponentConfig { }","import { Component, OnInit } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\n\n@Component({\n  selector: 'ux-search-date',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<div class=\"input-group date m-nil\">\n    <span class=\"input-group-addon\" tabindex=\"1\" (click)=\"popover.show()\">\n        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n    </span>\n    <input type=\"text\" #popover=\"ux-popover\" [ngModel]=\"value | date:'dd MMMM yyyy'\" [uxPopover]=\"popoverTemplate\"\n        placement=\"bottom\" popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"placeholder\">\n</div>\n\n<ng-template #popoverTemplate>\n    <ux-date-time-picker [(date)]=\"value\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>`\n})\nexport class SearchDateComponent extends BaseSearchComponent implements OnInit {\n\n  type: string = 'date';\n\n  get label(): string {\n    return this.config.label;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Enter date';\n  }\n\n  ngOnInit(): void {\n\n    // by default set to the current date if not specified\n    if (!this.value) {\n      this.value = new Date();\n    }\n  }\n}\n\nexport interface SearchDateConfig extends BaseSearchComponentConfig { }","import { Component } from '@angular/core';\nimport { BaseSearchComponent } from '../base-search.component';\n\n@Component({\n    selector: 'ux-search-date-range',\n    template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<div class=\"row\">\n    <div class=\"col-sm-12\">\n        <div class=\"form-inline\" [class.has-error]=\"!valid\">\n\n            <div class=\"form-group p-r-md\">\n                <label class=\"form-label m-r-xs\">{{ fromLabel }}</label>\n\n                <div class=\"input-group date m-nil\">\n                    <span class=\"input-group-addon p-r-xs\" tabindex=\"1\" (click)=\"fromPopover.show()\">\n                        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n                    </span>\n                    <input type=\"text\" #fromPopover=\"ux-popover\" [ngModel]=\"from | date:'dd MMMM yyyy'\" [uxPopover]=\"fromPopoverTemplate\" placement=\"bottom\"\n                        popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"fromPlaceholder\">\n                </div>\n            </div>\n\n            <div class=\"form-group p-r-xs\">\n                <label class=\"form-label m-r-xs\">{{ toLabel }}</label>\n\n                <div class=\"input-group date m-nil\">\n                    <span class=\"input-group-addon\" tabindex=\"1\" (click)=\"toPopover.show()\">\n                        <i class=\"hpe-icon hpe-calendar\" aria-hidden=\"true\"></i>\n                    </span>\n                    <input type=\"text\" #toPopover=\"ux-popover\" [ngModel]=\"to | date:'dd MMMM yyyy'\" [uxPopover]=\"toPopoverTemplate\" placement=\"bottom\"\n                        popoverClass=\"date-time-picker-popover\" class=\"form-control\" aria-label=\"Selected date\" [placeholder]=\"toPlaceholder\">\n                </div>\n            </div>\n\n        </div>\n    </div>\n</div>\n\n<ng-template #fromPopoverTemplate>\n    <ux-date-time-picker [(date)]=\"from\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>\n\n<ng-template #toPopoverTemplate>\n    <ux-date-time-picker [(date)]=\"to\" [showTime]=\"false\"></ux-date-time-picker>\n</ng-template>`\n})\nexport class SearchDateRangeComponent extends BaseSearchComponent {\n\n    type: string = 'date-range';\n\n    get label(): string {\n        return this.config.label;\n    }\n\n    get from() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.from) {\n            this.from = new Date();\n        }\n\n        // ensure that the from value is a date object\n        if (this.value.from instanceof Date === false) {\n            this.value.from = new Date(this.value.from);\n        }\n\n        return this.value.from;\n    }\n\n    set from(fromValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the from value is a date\n        if (fromValue instanceof Date === false) {\n            fromValue = new Date(fromValue);\n        }\n\n        // set the latest value\n        value.from = fromValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get to() {\n\n        // if value does not exist the set it\n        if (!this.value || !this.value.to) {\n            this.to = new Date();\n        }\n\n        // ensure that the to value is a date object\n        if (this.value.to instanceof Date === false) {\n            this.value.to = new Date(this.value.to);\n        }\n\n        return this.value.to;\n    }\n\n    set to(toValue: any) {\n\n        // create new object based on the current value\n        const value = Object.assign({}, this.value);\n\n        // ensure that the to value is a date\n        if (toValue instanceof Date === false) {\n            toValue = new Date(toValue);\n        }\n\n        // set the latest value\n        value.to = toValue;\n\n        // update the value object while ensuring immutability\n        this.value = value;\n    }\n\n    get fromLabel(): string {\n        return this.config.fromLabel || 'From';\n    }\n\n    get toLabel(): string {\n        return this.config.toLabel || 'To';\n    }\n\n    get fromPlaceholder(): string {\n        return this.config.fromPlaceholder;\n    }\n\n    get toPlaceholder(): string {\n        return this.config.toPlaceholder;\n    }\n\n    /**\n     * Override the default validation\n     */\n    validate(): void {\n\n        // check if there is a config validation function\n        if (this.config.validation) {\n            return super.validate();\n        }\n\n        // create copies of the dates so we can modify time value (to ignore it)\n        const from = new Date(this.value.from);\n        const to = new Date(this.value.to);\n\n        // set the time to the same so we dont compare it\n        from.setHours(0, 0, 0, 0);\n        to.setHours(0, 0, 0, 0);\n\n        // valid if the from date is less than or equal to the to date\n        this.valid = from <= to;\n    }\n}\n\nexport interface SearchDateRangeConfig {\n    label?: string;\n    fromLabel?: string;\n    toLabel?: string;\n    fromPlaceholder?: string;\n    toPlaceholder?: string;\n    validation: (value: any) => boolean;\n}","import { Component } from '@angular/core';\nimport { BaseSearchComponent, BaseSearchComponentConfig } from '../base-search.component';\nimport { InfiniteScrollLoadFunction } from '../../../../index';\n\n@Component({\n  selector: 'ux-search-select',\n  template: `<label class=\"form-label\" *ngIf=\"label\">{{ label }}</label>\n\n<ux-select [(value)]=\"value\" \n           [options]=\"options\" \n           [multiple]=\"multiple\" \n           [placeholder]=\"placeholder\" \n           [dropDirection]=\"dropDirection\"\n           [pageSize]=\"pageSize\"\n           [allowNull]=\"allowNull\"\n           [disabled]=\"disabled\"\n           [maxHeight]=\"maxHeight\"\n           [key]=\"config.key\"\n           [display]=\"config.display\"\n           [loadingTemplate]=\"config.loadingTemplate\"\n           [optionTemplate]=\"config.optionTemplate\"\n           [noOptionsTemplate]=\"config.noOptionsTemplate\">\n</ux-select>`\n})\nexport class SearchSelectComponent extends BaseSearchComponent {\n\n  type: string = 'select';\n\n  /**\n   * Provide defaults for undefined properties\n   */\n  get label(): string {\n    return this.config.label;\n  }\n\n  get options() {\n    return this.config.options || [];\n  }\n\n  get multiple(): boolean {\n    return this.config.multiple || false;\n  }\n\n  get placeholder(): string {\n    return this.config.placeholder || 'Select item';\n  }\n\n  get dropDirection(): string {\n    return this.config.dropDirection || 'down';\n  }\n\n  get allowNull(): boolean {\n    return this.config.allowNull || false;\n  }\n\n  get disabled(): boolean {\n    return this.config.disabled || false;\n  }\n\n  get maxHeight(): string {\n    return this.config.maxHeight || '250px';\n  }\n\n  get pageSize(): number {\n    return this.config.pageSize || 20;\n  }\n}\n\nexport interface SearchSelectConfig extends BaseSearchComponentConfig {\n  options?: any[] | InfiniteScrollLoadFunction;\n  multiple?: boolean;\n  dropDirection?: 'up' | 'down';\n  allowNull?: boolean;\n  disabled?: boolean;\n  maxHeight?: string;\n  pageSize?: number;\n}","import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchBuilderComponentDefinition } from './interfaces/component-definition.interface';\nimport { SearchBuilderQuery } from './interfaces/query.interface';\nimport { SearchBuilderService } from './search-builder.service';\n\n@Component({\n  selector: 'ux-search-builder',\n  template: `<ng-content></ng-content>`,\n  providers: [SearchBuilderService]\n})\nexport class SearchBuilderComponent implements OnDestroy {\n\n  @Input()\n  set components(components: SearchBuilderComponentDefinition[]) {\n    this._searchBuilderService.registerComponents(components);\n  }\n\n  @Input()\n  set query(value: SearchBuilderQuery) {\n    this._searchBuilderService.setQuery(value);\n  }\n\n  get query() {\n    return this._searchBuilderService.getQuery();\n  }\n\n  @Output() queryChange: EventEmitter<SearchBuilderQuery> = new EventEmitter<SearchBuilderQuery>();\n  @Output() valid: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n  private _querySubscription: Subscription;\n  private _validSubscription: Subscription;\n\n  /**\n   * Register the default search builder components\n   */\n  constructor(private _searchBuilderService: SearchBuilderService) {\n\n    // watch for any query changes\n    this._querySubscription = _searchBuilderService.queryChange.subscribe(query => this.queryChange.emit(query));\n\n    // watch for any changes to the validation\n    this._validSubscription = _searchBuilderService.validationChange.pipe(distinctUntilChanged()).subscribe(valid => this.valid.emit(valid));\n  }\n\n  /**\n   * Remove any subscriptions and cleanup\n   */\n  ngOnDestroy(): void {\n    this._querySubscription.unsubscribe();\n    this._validSubscription.unsubscribe();\n  }\n\n}\n","export class TypeaheadOptionEvent {\n    constructor(public option: any) {}\n}","import { TypeaheadComponent } from './index';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TypeaheadKeyService {\n\n    constructor() { }\n\n    handleKey(event: KeyboardEvent, typeahead: TypeaheadComponent) {\n        if (typeahead) {\n            switch (event.key) {\n                case 'ArrowUp':\n                case 'Up':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(-1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'ArrowDown':\n                case 'Down':\n                    if (!typeahead.open) {\n                        typeahead.open = true;\n                    } else {\n                        typeahead.moveHighlight(1);\n                    }\n                    event.preventDefault();\n                    break;\n                case 'Escape':\n                case 'Esc':\n                    typeahead.open = false;\n                    break;\n            }\n        }\n    }\n}","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\n\r\n@Injectable()\r\nexport class TypeaheadService {\r\n\r\n    open$ = new BehaviorSubject<boolean>(false);\r\n\r\n    highlightedElement$ = new BehaviorSubject<HTMLElement>(null);\r\n}","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnChanges, OnDestroy, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { combineLatest } from 'rxjs/observable/combineLatest';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadOptionEvent } from './typeahead-event';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n    selector: 'ux-typeahead',\r\n    template: `<div class=\"ux-typeahead-options\"\n    [uxInfiniteScroll]=\"loadOptionsCallback\"\n    [collection]=\"visibleOptions$ | async\"\n    (collectionChange)=\"visibleOptions$.next($event)\"\n    [enabled]=\"isInfiniteScroll()\"\n    [filter]=\"filter\"\n    [loadOnScroll]=\"true\"\n    [pageSize]=\"pageSize\"\n    [scrollElement]=\"typeaheadElement\"\n    (loading)=\"loading = true\"\n    (loaded)=\"loading = false\">\n\n    <ol *ngIf=\"(visibleOptions$ | async).length > 0\">\n        <li *ngFor=\"let option of (visibleOptions$ | async); let i = index\"\n            [attr.id]=\"id + '-option-' + i\"\n            [class.disabled]=\"isDisabled(option)\"\n            [class.highlighted]=\"highlightedKey === option.key\"\n            [attr.aria-selected]=\"multiselectable ? isDisabled(option) : null\"\n            [uxTypeaheadHighlight]=\"highlightedKey === option.key\"\n            [uxScrollIntoViewIf]=\"highlightedKey === option.key\"\n            [scrollParent]=\"typeaheadElement.nativeElement\"\n            (mousedown)=\"optionMousedownHandler($event)\"\n            (click)=\"optionClickHandler($event, option)\"\n            (mouseover)=\"highlight(option)\">\n\n            <ng-container [ngTemplateOutlet]=\"optionTemplate\"\n                [ngTemplateOutletContext]=\"{option: option.value, api: optionApi}\">\n            </ng-container>\n\n        </li>\n    </ol>\n\n    <div *uxInfiniteScrollLoading>\n        <ng-container [ngTemplateOutlet]=\"loadingTemplate\">\n        </ng-container>\n    </div>\n\n</div>\n<div *ngIf=\"(visibleOptions$ | async).length === 0 && !loading\">\n    <ng-container [ngTemplateOutlet]=\"noOptionsTemplate\">\n    </ng-container>\n</div>\n\n<ng-template #defaultLoadingTemplate>\n    <div class=\"ux-typeahead-loading\">\n        <div class=\"spinner spinner-accent spinner-bounce-middle\"></div>\n        <div>Loading...</div>\n    </div>\n</ng-template>\n\n<ng-template #defaultOptionTemplate let-option=\"option\" let-api=\"api\">\n    <span class=\"ux-typeahead-option\" [innerHtml]=\"api.getDisplayHtml(option)\"></span>\n</ng-template>\n\n<ng-template #defaultNoOptionsTemplate>\n    <span class=\"ux-typeahead-no-options\">No results</span>\n</ng-template>`,\r\n    providers: [TypeaheadService],\r\n    host: {\r\n        'role': 'listbox',\r\n        '[class.open]': 'open',\r\n        '[class.drop-up]': 'dropDirection === \"up\"',\r\n        '[style.maxHeight]': 'maxHeight'\r\n    }\r\n})\r\nexport class TypeaheadComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-typeahead-${++uniqueId}`;\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() filter: string;\r\n\r\n    @Input('open')\r\n    get open() {\r\n        return this._service.open$.getValue();\r\n    }\r\n    set open(value: boolean) {\r\n        this._service.open$.next(value);\r\n    }\r\n\r\n    @Output() openChange = new EventEmitter<boolean>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() disabledOptions: any[];\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() @HostBinding('attr.aria-multiselectable') multiselectable: boolean = false;\r\n    @Input() openOnFilterChange: boolean = true;\r\n    @Input() pageSize: number = 20;\r\n    @Input() selectFirst: boolean = true;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n\r\n    @Output() optionSelected = new EventEmitter<TypeaheadOptionEvent>();\r\n\r\n    @Output() highlightedChange = new EventEmitter<any>();\r\n    @Output() highlightedElementChange = new EventEmitter<HTMLElement>();\r\n\r\n    @ViewChild('defaultLoadingTemplate') private _defaultLoadingTemplate: TemplateRef<any>;\r\n    @ViewChild('defaultOptionTemplate') private _defaultOptionTemplate: TemplateRef<any>;\r\n    @ViewChild('defaultNoOptionsTemplate') private _defaultNoOptionsTemplate: TemplateRef<any>;\r\n\r\n    loadOptionsCallback: InfiniteScrollLoadFunction;\r\n    visibleOptions$ = new BehaviorSubject<TypeaheadVisibleOption[]>([]);\r\n    loading = false;\r\n    clicking = false;\r\n    highlighted$ = new BehaviorSubject<TypeaheadVisibleOption>(null);\r\n    highlightedKey: string = null;\r\n\r\n    get highlighted(): any {\r\n        const value = this.highlighted$.getValue();\r\n        return value ? value.value : null;\r\n    }\r\n\r\n    private _open: boolean = false;\r\n    private _subscription = new Subscription();\r\n\r\n    optionApi: TypeaheadOptionApi = {\r\n        getKey: this.getKey.bind(this),\r\n        getDisplay: this.getDisplay.bind(this),\r\n        getDisplayHtml: this.getDisplayHtml.bind(this)\r\n    };\r\n\r\n    constructor(\r\n        public typeaheadElement: ElementRef,\r\n        private _cdRef: ChangeDetectorRef,\r\n        private _service: TypeaheadService\r\n    ) {\r\n\r\n        this.loadOptionsCallback = (pageNum: number, pageSize: number, filter: any) => {\r\n            if (typeof this.options === 'function') {\r\n\r\n                // Invoke the callback which may return an array or a promise.\r\n                const arrayOrPromise = this.options(pageNum, pageSize, filter);\r\n\r\n                // Map the results to an array of TypeaheadVisibleOption.\r\n                return Promise.resolve(arrayOrPromise).then(newOptions => {\r\n\r\n                    if (!Array.isArray(newOptions)) {\r\n                        return newOptions;\r\n                    }\r\n\r\n                    return newOptions.map((option: any) => {\r\n                        return {\r\n                            value: option,\r\n                            key: this.getKey(option)\r\n                        };\r\n                    });\r\n                });\r\n            }\r\n            return null;\r\n        };\r\n\r\n        this._subscription.add(\r\n            this._service.open$.pipe(distinctUntilChanged()).subscribe((next) => {\r\n                this.openChange.emit(next);\r\n\r\n                if (next) {\r\n                    this.initOptions();\r\n                }\r\n            })\r\n        );\r\n\r\n        this._subscription.add(\r\n            this.highlighted$.subscribe((next) => {\r\n                this.highlightedKey = next ? next.key : null;\r\n                this.highlightedChange.emit(next ? next.value : null);\r\n            })\r\n        );\r\n\r\n        this._subscription.add(\r\n            combineLatest(this._service.open$, this._service.highlightedElement$, this.visibleOptions$)\r\n                .subscribe(([open, highlightedElement, visibleOptions]) => {\r\n                    this.highlightedElementChange.emit(open && visibleOptions.length > 0 ? highlightedElement : null);\r\n                })\r\n        );\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        // Attach default loading template\r\n        if (!this.loadingTemplate) {\r\n            this.loadingTemplate = this._defaultLoadingTemplate;\r\n        }\r\n\r\n        // Attach default option template\r\n        if (!this.optionTemplate) {\r\n            this.optionTemplate = this._defaultOptionTemplate;\r\n        }\r\n\r\n        // Attach default \"no results\" template\r\n        if (!this.noOptionsTemplate) {\r\n            this.noOptionsTemplate = this._defaultNoOptionsTemplate;\r\n        }\r\n\r\n        this._cdRef.detectChanges();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // Open the dropdown if the filter value updates\r\n        if (changes.filter) {\r\n            if (this.openOnFilterChange && changes.filter.currentValue && changes.filter.currentValue.length > 0) {\r\n                this.open = true;\r\n            }\r\n        }\r\n\r\n        // Re-filter visibleOptions\r\n        this.updateOptions();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    @HostListener('mousedown')\r\n    mousedownHandler() {\r\n        this.clicking = true;\r\n    }\r\n\r\n    @HostListener('mouseup')\r\n    mouseupHandler() {\r\n        this.clicking = false;\r\n    }\r\n\r\n    optionMousedownHandler(event: MouseEvent) {\r\n        // Workaround to prevent focus changing when an option is clicked\r\n        event.preventDefault();\r\n    }\r\n\r\n    optionClickHandler(event: MouseEvent, option: TypeaheadVisibleOption) {\r\n        this.select(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string {\r\n        if (typeof this.key === 'function') {\r\n            return this.key(option);\r\n        }\r\n        if (typeof this.key === 'string' && option && option.hasOwnProperty(this.key)) {\r\n            return option[<string>this.key];\r\n        }\r\n        return this.getDisplay(option);\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value.\r\n     * @param option\r\n     */\r\n    getDisplayHtml(option: any) {\r\n        const displayText = this.getDisplay(option).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n        let displayHtml = displayText;\r\n        if (this.filter) {\r\n            const length = this.filter.length;\r\n            const matchIndex = displayText.toLowerCase().indexOf(this.filter.toLowerCase());\r\n            if (matchIndex >= 0) {\r\n                var highlight = `<span class=\"ux-filter-match\">${displayText.substr(matchIndex, length)}</span>`;\r\n                displayHtml = displayText.substr(0, matchIndex) + highlight + displayText.substr(matchIndex + length);\r\n            }\r\n        }\r\n        return displayHtml;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the infinite scroll component should load\r\n     */\r\n    isInfiniteScroll() {\r\n        return typeof this.options === 'function';\r\n    }\r\n\r\n    /**\r\n     * Selects the given option, emitting the optionSelected event and closing the dropdown.\r\n     */\r\n    select(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.optionSelected.emit(new TypeaheadOptionEvent(option.value));\r\n            this.highlighted$.next(null);\r\n            this.open = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given option is part of the disabledOptions array.\r\n     */\r\n    isDisabled(option: TypeaheadVisibleOption): boolean {\r\n        if (this.disabledOptions) {\r\n            const result = this.disabledOptions.find((selectedOption) => {\r\n                return this.getKey(selectedOption) === option.key;\r\n            });\r\n            return result !== undefined;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set the given option as the current highlighted option, available in the highlightedOption parameter.\r\n     */\r\n    highlight(option: TypeaheadVisibleOption) {\r\n        if (!this.isDisabled(option)) {\r\n            this.highlighted$.next(option);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Increment or decrement the highlighted option in the list. Disabled options are skipped.\r\n     * @param d Value to be added to the index of the highlighted option, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveHighlight(d: number): any {\r\n        const visibleOptions = this.visibleOptions$.getValue();\r\n        const highlightIndex = this.indexOfVisibleOption(this.highlighted);\r\n        let newIndex = highlightIndex;\r\n        let disabled = true;\r\n        let inBounds = true;\r\n        do {\r\n            newIndex = newIndex + d;\r\n            inBounds = (newIndex >= 0 && newIndex < visibleOptions.length);\r\n            disabled = inBounds && this.isDisabled(visibleOptions[newIndex]);\r\n        }\r\n        while (inBounds && disabled);\r\n\r\n        if (!disabled && inBounds) {\r\n            this.highlighted$.next(visibleOptions[newIndex]);\r\n        }\r\n\r\n        return this.highlighted;\r\n    }\r\n\r\n    /**\r\n     * Set up the options before the dropdown is displayed.\r\n     */\r\n    initOptions() {\r\n        // Clear previous highlight\r\n        this.highlighted$.next(null);\r\n        if (this.selectFirst) {\r\n            // This will highlight the first non-disabled option.\r\n            this.moveHighlight(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the visibleOptions array with the current filter.\r\n     */\r\n    updateOptions() {\r\n        if (typeof this.options === 'object') {\r\n            const normalisedInput = (this.filter || '').toLowerCase();\r\n            const visibleOptions = this.options\r\n                .filter((option) => {\r\n                    return this.getDisplay(option).toLowerCase().indexOf(normalisedInput) >= 0;\r\n                })\r\n                .map((value) => {\r\n                    return {\r\n                        value: value,\r\n                        key: this.getKey(value)\r\n                    };\r\n                });\r\n            this.visibleOptions$.next(visibleOptions);\r\n        }\r\n\r\n        this.initOptions();\r\n    }\r\n\r\n    /**\r\n     * Return the index of the given option in the visibleOptions array. Returns -1 if the option is not currently visible.\r\n     */\r\n    private indexOfVisibleOption(option: any): number {\r\n        if (option) {\r\n            const optionKey = this.getKey(option);\r\n            return this.visibleOptions$.getValue().findIndex((el) => {\r\n                return el.key === optionKey;\r\n            });\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to option templates.\r\n */\r\nexport interface TypeaheadOptionApi {\r\n\r\n    /**\r\n     * Returns the unique key value of the given option.\r\n     */\r\n    getKey(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string;\r\n\r\n    /**\r\n     * Returns the display value of the given option with HTML markup added to highlight the part which matches the current filter value. Override the ux-filter-match class in CSS to modify the default appearance.\r\n     */\r\n    getDisplayHtml(option: any): string;\r\n}\r\n\r\nexport interface TypeaheadVisibleOption {\r\n    value: any;\r\n    key: string;\r\n}","import { Directive, ElementRef, Input, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoadButton]'\n})\nexport class InfiniteScrollLoadButtonDirective {\n\n    @Input('uxInfiniteScrollLoadButton')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._template);\n\n                // Template content follows the elementRef, which is a comment.\n                const clickTarget = this.getNextElementSibling(this._template.elementRef.nativeElement);\n                this._renderer.listen(clickTarget, 'click', this.onClick.bind(this));\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n\n        this._visible = value;\n    }\n\n    @Output() load: Observable<Event>;\n\n    private _visible: boolean = false;\n    private _load = new Subject();\n\n    constructor(\n        private _element: ElementRef,\n        private _template: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef,\n        private _renderer: Renderer2) {\n\n        this.load = this._load.asObservable() as Observable<Event>;\n    }\n\n    private onClick(event: MouseEvent) {\n        this._load.next(event);\n    }\n\n    private getNextElementSibling(element: any): Element {\n        var next = element;\n        while (next = next.nextSibling) {\n            if (next.nodeType === 1) {\n                return next;\n            }\n        }\n        return null;\n    }\n}\n","import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxInfiniteScrollLoading]'\n})\nexport class InfiniteScrollLoadingDirective {\n\n    @Input('uxInfiniteScrollLoading')\n    get visible() {\n        return this._visible;\n    }\n    set visible(value: boolean) {\n        if (value !== this._visible) {\n            if (value) {\n                this._viewContainer.createEmbeddedView(this._templateRef);\n            } else {\n                this._viewContainer.clear();\n            }\n        }\n        \n        this._visible = value;\n    }\n\n    private _visible: boolean = false;\n\n    constructor(\n        private _templateRef: TemplateRef<any>,\n        private _viewContainer: ViewContainerRef) { }\n}\n","\nimport { AfterContentInit, ContentChildren, Directive, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { from } from 'rxjs/observable/from';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { auditTime, combineLatest, filter as filterOperator, first, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\n\n@Directive({\n    selector: '[uxInfiniteScroll]',\n    exportAs: 'uxInfiniteScroll'\n})\nexport class InfiniteScrollDirective implements OnInit, AfterContentInit, OnChanges, OnDestroy {\n\n    @Input('uxInfiniteScroll') load: InfiniteScrollLoadFunction;\n\n    @Input('collection') _collection: any[] = [];\n    get collection() {\n        return this._collection;\n    }\n    set collection(value: any[]) {\n        this.collectionChange.emit(value);\n        this._collection = value;\n    }\n\n\n    @Input() set scrollElement(element: ElementRef | HTMLElement) {\n        this._scrollElement = element instanceof ElementRef ? element : new ElementRef(element);\n    }\n\n    @Input() enabled: boolean = true;\n    @Input() filter: any;\n    @Input() loadOnInit: boolean = true;\n    @Input() loadOnScroll: boolean = true;\n    @Input() pageSize: number = 20;\n\n    @Output() collectionChange = new EventEmitter<any[]>();\n\n    @Output('loading')\n    loadingEvent = new EventEmitter<InfiniteScrollLoadingEvent>();\n\n    @Output('loaded')\n    loadedEvent = new EventEmitter<InfiniteScrollLoadedEvent>();\n\n    @Output('loadError')\n    loadErrorEvent = new EventEmitter<InfiniteScrollLoadErrorEvent>();\n\n    @ContentChildren(InfiniteScrollLoadButtonDirective)\n    private _loadButtonQuery: QueryList<InfiniteScrollLoadButtonDirective>;\n\n    @ContentChildren(InfiniteScrollLoadingDirective)\n    private _loadingIndicatorQuery: QueryList<InfiniteScrollLoadingDirective>;\n\n    private _pages: any[][];\n    private _nextPageNum = 0;\n    private _domObserver: MutationObserver;\n    private _scrollEventSub: Subscription;\n    private _updateRequests = new Subject<InfiniteScrollRequest>();\n\n    private _isLoading = new BehaviorSubject<boolean>(false);\n    private _isExhausted = new BehaviorSubject<boolean>(false);\n    private _loadButtonEnabled = new BehaviorSubject<boolean>(false);\n    private _canLoadManually: Observable<boolean>;\n\n    private _scrollElement: ElementRef;\n    private _subscriptions: Subscription[] = [];\n    private _loadButtonSubscriptions: Subscription[] = [];\n    private _onDestroy = new Subject<void>();\n\n    constructor(private _element: ElementRef) {\n        this._canLoadManually = this._isLoading.pipe(combineLatest(\n            this._isExhausted,\n            this._loadButtonEnabled,\n            (isLoading, isExhausted, loadButtonEnabled) => {\n                return !isLoading && !isExhausted && loadButtonEnabled;\n            }\n        ));\n    }\n\n    ngOnInit() {\n        if (!this._scrollElement) {\n            this._scrollElement = this._element;\n        }\n\n        this._loadButtonEnabled.next(!this.loadOnScroll);\n    }\n\n    ngAfterContentInit() {\n\n        // There are two kinds of update requests: check and load.\n        // Check requests are throttled and will only cause an update if more data is required\n        // to fill the scrolling view, and it isn't already loading some.\n        // Load requests are not throttled and always request a page of data.\n        this._updateRequests.pipe(filterOperator(request => request.check), auditTime(200), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n        this._updateRequests.pipe(filterOperator(request => !request.check), takeUntil(this._onDestroy)).subscribe(this.doRequest.bind(this));\n\n        if (this.enabled) {\n            // Subscribe to scroll events and DOM changes.\n            this.attachEventHandlers();\n        }\n\n        // Connect the Load More button visible state.\n        this._canLoadManually.pipe(takeUntil(this._onDestroy)).subscribe(canLoad => {\n            this._loadButtonQuery.forEach(loadButton => {\n                loadButton.visible = canLoad;\n            });\n        });\n\n        // Connect the loading indicator visible state.\n        this._isLoading.pipe(takeUntil(this._onDestroy)).subscribe(isLoading => {\n            this._loadingIndicatorQuery.forEach(loading => {\n                loading.visible = isLoading;\n            });\n        });\n\n        // Link the Load More button click event to trigger an update.\n        this.attachLoadButtonEvents();\n        this._loadButtonQuery.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {\n            this.attachLoadButtonEvents();\n        });\n\n        // Initial update.\n        if (this.loadOnInit) {\n            this.loadNextPage();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        let check = true;\n\n        if (changes.enabled && changes.enabled.currentValue !== changes.enabled.previousValue) {\n            if (changes.enabled.currentValue) {\n                this.attachEventHandlers();\n                this.reset();\n                check = false;\n            } else {\n                this.detachEventHandlers();\n            }\n        }\n\n        if (this.enabled) {\n            if (changes.filter && changes.filter.currentValue !== changes.filter.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            if (changes.loadOnScroll) {\n                this._loadButtonEnabled.next(\n                    !changes.loadOnScroll.currentValue\n                );\n            }\n\n            if (changes.pageSize && changes.pageSize.currentValue !== changes.pageSize.previousValue) {\n                this.reset();\n                check = false;\n            }\n\n            this._updateRequests.next({\n                check: check,\n                pageNumber: this._nextPageNum,\n                pageSize: this.pageSize,\n                filter: this.filter\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        this.detachEventHandlers();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n    }\n\n    /**\n     * Request an additional page of data.\n     */\n    loadNextPage() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Request a check for whether an additional page of data is required. This is throttled.\n     */\n    check() {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: true,\n            pageNumber: this._nextPageNum,\n            pageSize: this.pageSize,\n            filter: this.filter\n        });\n    }\n\n    /**\n     * Clear the collection. Future requests will load from page 0.\n     */\n    reset() {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Reset the page counter.\n        this._nextPageNum = 0;\n\n        this._pages = [];\n\n        // Clear the collection (without changing the reference).\n        if (this.collection) {\n            this.collection.length = 0;\n        }\n\n        // Reset the exhausted flag, allowing the Load More button to appear.\n        this._isExhausted.next(false);\n\n        // Cancel any pending requests\n        if (this._subscriptions) {\n            this._subscriptions.forEach(request => request.unsubscribe());\n        }\n    }\n\n    /**\n     * Reload the data without clearing the view.\n     */\n    reload() {\n        this._pages.forEach((page, i) => this.reloadPage(i));\n    }\n\n    /**\n     * Reload the data in a specific page without clearing the view.\n     * @param pageNum Page number\n     */\n    reloadPage(pageNum: number) {\n        if (!this.enabled) {\n            return;\n        }\n\n        this._updateRequests.next({\n            check: false,\n            pageNumber: pageNum,\n            pageSize: this.pageSize,\n            filter: this.filter,\n            reload: true\n        });\n    }\n\n    /**\n     * Attach scroll event handler and DOM observer.\n     */\n    private attachEventHandlers() {\n\n        // if the scrollElement is documentElement we must watch for a scroll event on the document\n        const target = this._scrollElement.nativeElement instanceof HTMLHtmlElement ? document : this._scrollElement.nativeElement;\n\n        // Subscribe to the scroll event on the target element.\n        this._scrollEventSub = fromEvent(target, 'scroll').subscribe(this.check.bind(this));\n\n        // Subscribe to child DOM changes. The main effect of this is to check whether even more data is\n        // required after the initial load.\n        this._domObserver = new MutationObserver(this.check.bind(this));\n        this._domObserver.observe(this._scrollElement.nativeElement, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    /**\n     * Detach scroll event handler and DOM observer.\n     */\n    private detachEventHandlers() {\n        if (this._scrollEventSub) {\n            this._scrollEventSub.unsubscribe();\n            this._scrollEventSub = null;\n        }\n\n        if (this._domObserver) {\n            this._domObserver.disconnect();\n            this._domObserver = null;\n        }\n    }\n\n    /**\n     * Remove any existing event subscriptions for the load button `load` event, then attach subscriptions\n     * for any in the query.\n     */\n    private attachLoadButtonEvents() {\n        this._loadButtonSubscriptions.forEach(s => s.unsubscribe());\n        this._loadButtonSubscriptions = this._loadButtonQuery.map(\n            loadButton => loadButton.load.subscribe(this.loadNextPage.bind(this))\n        );\n    }\n\n    /**\n     * Conditionally loads a page into the collection based on directive state and request parameters.\n     */\n    private doRequest(request: InfiniteScrollRequest) {\n\n        // Load a new page if the scroll position is beyond the threshhold and if the client code did not\n        // cancel.\n        if (this.needsData(request) && this.beginLoading(request)) {\n\n            // Invoke the callback load function, which returns a promose or plain data.\n            const loadResult = this.load(request.pageNumber, request.pageSize, request.filter);\n\n            const observable = Array.isArray(loadResult) ? of(loadResult) : from<any[]>(loadResult);\n\n            const subscription = observable.pipe(first()).subscribe(\n                items => {\n                    // Make sure that the parameters have not changed since the load started;\n                    // otherwise discard the results.\n                    if (request.filter === this.filter && request.pageSize === this.pageSize) {\n                        if (items && items.length) {\n                            this.setPageItems(request.pageNumber, items);\n                        }\n\n                        // Emit the loaded event\n                        this.endLoading(request, items);\n                    }\n                },\n                reason => {\n                    // Emit the loadError event\n                    this.endLoadingWithError(request, reason);\n                },\n                () => {\n                    // remove this request from the list\n                    this._subscriptions = this._subscriptions.filter(s => s !== subscription);\n                }\n            );\n\n            // add the subscription to the list of requests\n            this._subscriptions.push(subscription);\n        }\n    }\n\n    /**\n     * Returns true if the request should be fulfilled.\n     */\n    private needsData(request: InfiniteScrollRequest): boolean {\n        if (!this.enabled) {\n            return false;\n        }\n\n        // Always load for a load request\n        if (!request.check) {\n            return true;\n        }\n\n        // Ignore a check request when the end of data has been detected, or if data is currently loading.\n        if (this._isExhausted.getValue() || this._isLoading.getValue()) {\n            return false;\n        }\n\n        // Load if the remaining scroll area is <= the element height.\n        if (this._scrollElement && this.loadOnScroll) {\n\n            const element = <HTMLElement>this._scrollElement.nativeElement;\n            const remainingScroll =\n                element.scrollHeight -\n                (element.scrollTop + element.clientHeight);\n\n            return remainingScroll <= element.clientHeight;\n        }\n\n        return false;\n    }\n\n    /**\n     * Updates state for the beginning of a load. Returns false if the `loading` event was cancelled.\n     */\n    private beginLoading(request: InfiniteScrollRequest): boolean {\n\n        const event = new InfiniteScrollLoadingEvent(\n            request.pageNumber,\n            request.pageSize,\n            request.filter\n        );\n        this.loadingEvent.emit(event);\n\n        this._isLoading.next(!event.defaultPrevented());\n\n        return !event.defaultPrevented();\n    }\n\n    private setPageItems(pageNum: number, items: any[]) {\n        this._pages[pageNum] = items;\n        this.collection = this._pages.reduce((previous, current) => previous.concat(current), []);\n    }\n\n    /**\n     * Updates state from a successful load. Raises the `loaded` event.\n     */\n    private endLoading(request: InfiniteScrollRequest, data?: any) {\n        this._isLoading.next(false);\n\n        const isExhausted = !!(data && data.length < this.pageSize);\n        this._isExhausted.next(isExhausted);\n\n        this.loadedEvent.emit(\n            new InfiniteScrollLoadedEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                data,\n                isExhausted\n            )\n        );\n\n        if (!request.reload) {\n            this._nextPageNum += 1;\n        }\n    }\n\n    /**\n     * Updates state from a failed load. Raises the `loadError` event.\n     */\n    private endLoadingWithError(request: InfiniteScrollRequest, error: any) {\n        this._isLoading.next(false);\n\n        this.loadErrorEvent.emit(\n            new InfiniteScrollLoadErrorEvent(\n                request.pageNumber,\n                request.pageSize,\n                request.filter,\n                error\n            )\n        );\n    }\n}\n\n/**\n * The internal data associated with a load/check request.\n */\nclass InfiniteScrollRequest {\n    check: boolean;\n    pageNumber: number;\n    pageSize: number;\n    filter: any;\n    reload?: boolean;\n}\n\nexport type InfiniteScrollLoadFunction = (\n    pageNum: number,\n    pageSize: number,\n    filter: any\n) => any | Promise<any>;\n\n/**\n * Event raised before the `loading` function is called.\n */\nexport class InfiniteScrollLoadingEvent {\n    private _defaultPrevented = false;\n\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any\n    ) { }\n\n    /**\n     * Prevents the default behaviour of the `loading` event (loading function will not be called).\n     */\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}\n\n/**\n * Event raised when the loading function result has been resolved and added to the collection.\n */\nexport class InfiniteScrollLoadedEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The result of the promise returned from the loading function.\n         */\n        public data: any,\n        /**\n         * True if the data is considered exhausted (number of items returned less than `pageSize`).\n         */\n        public exhausted: boolean\n    ) { }\n}\n\n/**\n * Event raised if the loading function returns a rejected promise.\n */\nexport class InfiniteScrollLoadErrorEvent {\n    constructor(\n        /**\n         * The index of the requested page, starting from 0.\n         */\n        public pageNumber: number,\n        /**\n         * The number of items requested.\n         */\n        public pageSize: number,\n        /**\n         * The filter details as provided via the `filter` binding.\n         */\n        public filter: any,\n        /**\n         * The object provided when rejecting the promise.\n         */\n        public error: any\n    ) { }\n}\n","import { InfiniteScrollLoadButtonDirective } from './infinite-scroll-load-button.directive';\nimport { InfiniteScrollLoadingDirective } from './infinite-scroll-loading.directive';\nimport { InfiniteScrollDirective } from './infinite-scroll.directive';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    imports: [],\n    exports: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    declarations: [\n        InfiniteScrollDirective,\n        InfiniteScrollLoadButtonDirective,\n        InfiniteScrollLoadingDirective\n    ],\n    providers: [],\n})\nexport class InfiniteScrollModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ScrollIntoViewService {\n\n    scrollIntoView(elem: HTMLElement, scrollParent: HTMLElement) {\n        const offsetTop = (elem.getBoundingClientRect().top + scrollParent.scrollTop) - scrollParent.getBoundingClientRect().top;\n        if (offsetTop < scrollParent.scrollTop) {\n            scrollParent.scrollTop = offsetTop;\n        } else {\n            const offsetBottom = offsetTop + elem.offsetHeight;\n            if (offsetBottom > (scrollParent.scrollTop + scrollParent.clientHeight)) {\n                scrollParent.scrollTop = offsetBottom - scrollParent.clientHeight;\n            }\n        }\n    }\n}","import { Directive, ElementRef, Input, OnChanges } from '@angular/core';\nimport { ScrollIntoViewService } from './scroll-into-view.service';\n\n@Directive({\n    selector: '[uxScrollIntoViewIf]',\n    providers: [ScrollIntoViewService]\n })\nexport class ScrollIntoViewIfDirective implements OnChanges {\n\n    @Input('uxScrollIntoViewIf') condition = false;\n    @Input() scrollParent: HTMLElement;\n\n    constructor(private _element: ElementRef, private _scrollIntoViewService: ScrollIntoViewService) {}\n\n    ngOnChanges() {\n        if (this.condition) {\n            setTimeout(() => this._scrollIntoViewService.scrollIntoView(this._element.nativeElement, this.scrollParent));\n        }\n    }\n}","import { AfterViewInit, Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({\n    selector: '[uxScrollIntoView]'\n})\nexport class ScrollIntoViewDirective implements AfterViewInit {\n\n    /** Allow a condition around whether or not this should scroll into view */\n    @Input() uxScrollIntoView: boolean = true;\n\n    /** Allow user to provide the browser supported options */\n    @Input() scrollIntoViewOptions: ScrollIntoViewOptions | boolean = true;\n\n    constructor(private _elementRef: ElementRef) { }\n\n    ngAfterViewInit(): void {\n        if (this.uxScrollIntoView) {\n            this._elementRef.nativeElement.scrollIntoView(this.scrollIntoViewOptions);\n        }\n    }\n}","import { NgModule } from '@angular/core';\nimport { ScrollIntoViewIfDirective } from './scroll-into-view-if.directive';\nimport { ScrollIntoViewDirective } from './scroll-into-view.directive';\n\n\n@NgModule({\n    exports: [ScrollIntoViewIfDirective, ScrollIntoViewDirective],\n    declarations: [ScrollIntoViewIfDirective, ScrollIntoViewDirective]\n})\nexport class ScrollModule { }","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { TypeaheadService } from './typeahead.service';\r\n\r\n@Directive({\r\n    selector: '[uxTypeaheadHighlight]'\r\n})\r\nexport class TypeaheadHighlightDirective {\r\n\r\n    @Input('uxTypeaheadHighlight')\r\n    set highlight(value: boolean) {\r\n        if (value) {\r\n            this._service.highlightedElement$.next(this._elementRef.nativeElement);\r\n        }\r\n    }\r\n\r\n    constructor(private _service: TypeaheadService, private _elementRef: ElementRef) {}\r\n}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { ScrollModule } from '../../directives/scroll/index';\nimport { TypeaheadHighlightDirective } from './typeahead-highlight.directive';\nimport { TypeaheadKeyService } from './typeahead-key.service';\nimport { TypeaheadComponent } from './typeahead.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        InfiniteScrollModule,\n        ScrollModule\n    ],\n    exports: [TypeaheadComponent],\n    declarations: [TypeaheadComponent, TypeaheadHighlightDirective],\n    providers: [TypeaheadKeyService],\n})\nexport class TypeaheadModule { }\n","import { Component, ElementRef, EventEmitter, HostBinding, Inject, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, StaticProvider, TemplateRef, ViewChild, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { debounceTime, filter, map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { InfiniteScrollLoadFunction } from '../../directives/infinite-scroll/index';\r\nimport { TypeaheadComponent, TypeaheadKeyService, TypeaheadOptionEvent } from '../typeahead/index';\r\n\r\nlet uniqueId = 0;\r\n\r\nexport const SELECT_VALUE_ACCESSOR: StaticProvider = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => SelectComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-select',\r\n    template: `<ux-tag-input *ngIf=\"multiple\"\r\n    [id]=\"id + '-input'\"\r\n    [(tags)]=\"value\"\r\n    [(input)]=\"input\"\r\n    [addOnPaste]=\"false\"\r\n    [disabled]=\"disabled\"\r\n    [display]=\"display\"\r\n    [freeInput]=\"false\"\r\n    [placeholder]=\"placeholder\"\r\n    [showTypeaheadOnClick]=\"true\">\r\n\r\n    <ux-typeahead #multipleTypeahead\r\n        [id]=\"id + '-typeahead'\"\r\n        [options]=\"options\"\r\n        [filter]=\"filter$ | async\"\r\n        [(open)]=\"dropdownOpen\"\r\n        [display]=\"display\"\r\n        [key]=\"key\"\r\n        [disabledOptions]=\"value\"\r\n        [dropDirection]=\"dropDirection\"\r\n        [maxHeight]=\"maxHeight\"\r\n        [multiselectable]=\"true\"\r\n        [pageSize]=\"pageSize\"\r\n        [selectFirst]=\"true\"\r\n        [loadingTemplate]=\"loadingTemplate\"\r\n        [optionTemplate]=\"optionTemplate\"\r\n        [noOptionsTemplate]=\"noOptionsTemplate\">\r\n    </ux-typeahead>\r\n\r\n</ux-tag-input>\r\n\r\n<div *ngIf=\"!multiple\"\r\n    class=\"inner-addon right-addon\"\r\n    [class.disabled]=\"disabled\"\r\n    role=\"combobox\"\r\n    [attr.aria-expanded]=\"dropdownOpen\"\r\n    aria-haspopup=\"listbox\">\r\n\r\n    <i class=\"hpe-icon\"\r\n        [class.hpe-down]=\"dropDirection === 'down'\"\r\n        [class.hpe-up]=\"dropDirection === 'up'\"></i>\r\n\r\n    <input #singleInput type=\"text\" [attr.id]=\"id + '-input'\" class=\"form-control\"\r\n        [attr.aria-activedescendant]=\"highlightedElement?.id\"\r\n        aria-autocomplete=\"list\"\r\n        [attr.aria-controls]=\"singleTypeahead.id\"\r\n        aria-multiline=\"false\"\r\n        [(ngModel)]=\"input\"\r\n        [placeholder]=\"placeholder\"\r\n        [disabled]=\"disabled\"\r\n        (click)=\"inputClickHandler($event)\"\r\n        (blur)=\"inputBlurHandler($event)\"\r\n        (keydown)=\"inputKeyHandler($event)\">\r\n\r\n    <ux-typeahead #singleTypeahead\r\n        [id]=\"id + '-typeahead'\"\r\n        [options]=\"options\"\r\n        [filter]=\"filter$ | async\"\r\n        [(open)]=\"dropdownOpen\"\r\n        [display]=\"display\"\r\n        [key]=\"key\"\r\n        [dropDirection]=\"dropDirection\"\r\n        [maxHeight]=\"maxHeight\"\r\n        [multiselectable]=\"false\"\r\n        [openOnFilterChange]=\"false\"\r\n        [pageSize]=\"pageSize\"\r\n        [selectFirst]=\"true\"\r\n        [loadingTemplate]=\"loadingTemplate\"\r\n        [optionTemplate]=\"optionTemplate\"\r\n        [noOptionsTemplate]=\"noOptionsTemplate\"\r\n        (optionSelected)=\"singleOptionSelected($event)\"\r\n        (highlightedElementChange)=\"highlightedElement = $event\">\r\n    </ux-typeahead>\r\n\r\n</div>\r\n`,\r\n    providers: [SELECT_VALUE_ACCESSOR]\r\n})\r\nexport class SelectComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-select-${++uniqueId}`;\r\n\r\n    @Input()\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(value: any) {\r\n        this._value = value;\r\n        this.valueChange.emit(value);\r\n        this.propagateChange(value);\r\n\r\n        // if we are not allow multiple selection update the input value (supporting ngModel)\r\n        if (!this.multiple && value !== null) {\r\n            this.input = this.getDisplay(value);\r\n        }\r\n    }\r\n\r\n    @Input()\r\n    get input() {\r\n        return this._input$.value;\r\n    }\r\n    set input(value: string) {\r\n        this._input$.next(value);\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Input()\r\n    get dropdownOpen() {\r\n        return this._dropdownOpen;\r\n    }\r\n    set dropdownOpen(value: boolean) {\r\n        this._dropdownOpen = value;\r\n        this.dropdownOpenChange.emit(value);\r\n    }\r\n\r\n    @Input() options: any[] | InfiniteScrollLoadFunction;\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() key: (option: any) => string | string;\r\n    @Input() allowNull: boolean = false;\r\n    @Input() disabled: boolean = false;\r\n    @Input() dropDirection: 'up' | 'down' = 'down';\r\n    @Input() maxHeight: string = '250px';\r\n    @Input() multiple: boolean = false;\r\n    @Input() pageSize: number = 20;\r\n    @Input() placeholder: string;\r\n\r\n    @Input() loadingTemplate: TemplateRef<any>;\r\n    @Input() noOptionsTemplate: TemplateRef<any>;\r\n    @Input() optionTemplate: TemplateRef<any>;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() inputChange = new EventEmitter<string>();\r\n    @Output() dropdownOpenChange = new EventEmitter<boolean>();\r\n\r\n    @ViewChild('singleInput') singleInput: ElementRef;\r\n    @ViewChild('multipleTypeahead') multipleTypeahead: TypeaheadComponent;\r\n    @ViewChild('singleTypeahead') singleTypeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n    filter$: Observable<string>;\r\n    propagateChange = (_: any) => { };\r\n\r\n    private _value: any;\r\n    private _input$ = new BehaviorSubject<string>('');\r\n    private _dropdownOpen: boolean = false;\r\n    private _subscription = new Subscription();\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n\r\n        // Changes to the input field\r\n        const onInput = this._input$.pipe(\r\n            filter(value => this.allowNull),\r\n            filter(value => !this.multiple && value !== this.getDisplay(this.value))\r\n        ).subscribe(value => this.value = null);\r\n\r\n        // Set up filter from input\r\n        this.filter$ = this._input$.pipe(\r\n            map(input => !this.multiple && input === this.getDisplay(this.value) ? '' : input),\r\n            debounceTime(200)\r\n        );\r\n\r\n        // Open the dropdown when filter is nonempty.\r\n        const onFilter = this.filter$.pipe(filter(value => value && value.length > 0)).subscribe(() => this.dropdownOpen = true);\r\n\r\n        // store the subscriptions\r\n        this._subscription.add(onInput);\r\n        this._subscription.add(onFilter);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.multiple && !changes.multiple.firstChange && changes.multiple.currentValue !== changes.multiple.previousValue) {\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj !== undefined && obj !== this._value) {\r\n            this.value = obj;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void { }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    inputClickHandler(event: MouseEvent) {\r\n        this.selectInputText();\r\n        this.dropdownOpen = true;\r\n    }\r\n\r\n    inputBlurHandler(event: Event) {\r\n\r\n        // If a click on the typeahead is in progress, just refocus the input.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.singleTypeahead && this.singleTypeahead.clicking) {\r\n            this.singleInput.nativeElement.focus();\r\n            return;\r\n        }\r\n\r\n        // Close dropdown and reset text input if focus is lost\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.dropdownOpen = false;\r\n                if (!this.multiple) {\r\n                    this.input = this.getDisplay(this.value);\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    /**\r\n     * Key handler for single select only. Multiple select key handling is in TagInputComponent.\r\n     */\r\n    inputKeyHandler(event: KeyboardEvent) {\r\n\r\n        // Standard keys for typeahead (up/down/esc)\r\n        this._typeaheadKeyService.handleKey(event, this.singleTypeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                if (this._dropdownOpen) {\r\n                    // Set the highlighted option as the value and close\r\n                    this.value = this.singleTypeahead.highlighted;\r\n                    this.dropdownOpen = false;\r\n                }\r\n\r\n                // Update the input field. If dropdown isn't open then reset it to the previous value.\r\n                this.input = this.getDisplay(this.value);\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    }\r\n\r\n    singleOptionSelected(event: TypeaheadOptionEvent) {\r\n        if (event.option) {\r\n            this.value = event.option;\r\n            this.dropdownOpen = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the display value of the given option.\r\n     */\r\n    getDisplay(option: any): string {\r\n        if (option === null || option === undefined) {\r\n            return '';\r\n        }\r\n        if (typeof this.display === 'function') {\r\n            return this.display(option);\r\n        }\r\n        if (typeof this.display === 'string' && option.hasOwnProperty(this.display)) {\r\n            return option[<string>this.display];\r\n        }\r\n        return option;\r\n    }\r\n\r\n    private selectInputText() {\r\n        this.singleInput.nativeElement.select();\r\n    }\r\n}","export class TagInputEvent {\n\n    private _defaultPrevented = false;\n\n    constructor(public tag: any) {}\n\n    preventDefault() {\n        this._defaultPrevented = true;\n    }\n\n    defaultPrevented(): boolean {\n        return this._defaultPrevented;\n    }\n}","import { AfterContentInit, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DOCUMENT } from '@angular/platform-browser';\r\nimport { delay } from 'rxjs/operators/delay';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { TypeaheadComponent, TypeaheadKeyService } from '../typeahead/index';\r\nimport { TypeaheadOptionEvent } from '../typeahead/typeahead-event';\r\nimport { TagInputEvent } from './tag-input-event';\r\n\r\nlet uniqueId = 0;\r\n\r\nconst TAGINPUT_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\nconst TAGINPUT_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef(() => TagInputComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'ux-tag-input',\r\n    template: `<ol [attr.role]=\"typeahead ? 'combobox' : 'none'\" [attr.aria-haspopup]=\"typeahead ? 'listbox' : null\">\n    <li *ngFor=\"let tag of tags; let i = index\" class=\"ux-tag\"\n        [class.disabled]=\"disabled\"\n        [ngClass]=\"tagClass(tag, i, isSelected(i))\"\n        [attr.tabindex]=\"disabled ? null : 0\"\n        [focusIf]=\"isSelected(i)\"\n        (click)=\"tagClickHandler($event, tag, i)\"\n        (focus)=\"selectTagAt(i)\">\n\n        <ng-container [ngTemplateOutlet]=\"tagTemplate\"\n            [ngTemplateOutletContext]=\"{tag: tag, index: i, disabled: disabled, api: tagApi}\">\n        </ng-container>\n\n    </li>\n    <li *ngIf=\"isInputVisible()\" class=\"ux-tag-input\" role=\"none\">\n        <input #tagInput type=\"text\" [attr.id]=\"id\" class=\"ux-tag-input\"\n            [(ngModel)]=\"input\"\n            [class.invalid]=\"!inputValid\"\n            [attr.aria-activedescendant]=\"highlightedElement?.id\"\n            [attr.aria-autocomplete]=\"typeahead ? 'list' : 'none'\"\n            [attr.aria-controls]=\"typeahead?.id\"\n            aria-multiline=\"false\"\n            [placeholder]=\"disabled ? '' : (placeholder || '')\"\n            [disabled]=\"disabled\"\n            [focusIf]=\"isSelected(tags.length)\"\n            (click)=\"inputClickHandler()\"\n            (focus)=\"inputFocusHandler()\"\n            (paste)=\"inputPasteHandler($event)\">\n    </li>\n</ol>\n\n<ng-content #typeahead></ng-content>\n\n<ng-template #defaultTagTemplate let-tag=\"tag\" let-index=\"index\" let-disabled=\"disabled\" let-api=\"api\">\n    <span class=\"ux-tag-text\">{{api.getTagDisplay(tag)}}</span>\n    <button *ngIf=\"api.canRemoveTagAt(index)\"\n        type=\"button\"\n        class=\"ux-tag-remove\"\n        aria-label=\"Remove Item\"\n        [disabled]=\"disabled\"\n        (click)=\"api.removeTagAt(index); $event.stopPropagation();\">\n        <span class=\"hpe-icon hpe-close\"></span>\n    </button>\n</ng-template>`,\r\n    providers: [TAGINPUT_VALUE_ACCESSOR, TAGINPUT_VALIDATOR],\r\n    host: {\r\n        '[class.disabled]': 'disabled',\r\n        '[class.focus]': 'hasFocus()',\r\n        '[class.invalid]': '!valid || !inputValid'\r\n    }\r\n})\r\nexport class TagInputComponent implements OnInit, AfterContentInit, OnChanges, ControlValueAccessor, OnDestroy {\r\n\r\n    @Input() @HostBinding('attr.id') id: string = `ux-tag-input-${++uniqueId}`;\r\n\r\n    @Input('tags')\r\n    get tags() {\r\n        if (!this._tags) {\r\n            this._tags = [];\r\n        }\r\n        return this._tags;\r\n    }\r\n    set tags(value: any[]) {\r\n        this._tags = value;\r\n        this._onChangeHandler(this._tags);\r\n        this.tagsChange.emit(this._tags);\r\n    }\r\n\r\n    @Output() tagsChange = new EventEmitter<any[]>();\r\n\r\n    @Input('input')\r\n    get input() {\r\n        return this._input;\r\n    }\r\n    set input(value: string) {\r\n        this._input = value;\r\n        this.inputChange.emit(value);\r\n    }\r\n\r\n    @Output() inputChange = new EventEmitter<string>();\r\n\r\n    @Input() display: (option: any) => string | string;\r\n    @Input() addOnPaste: boolean = true;\r\n    @Input() disabled: boolean = false;\r\n    @Input() enforceTagLimits: boolean = false;\r\n    @Input() freeInput: boolean = true;\r\n    @Input() maxTags: number = Number.MAX_VALUE;\r\n    @Input() minTags: number = 0;\r\n    @Input() placeholder: string = '';\r\n    @Input() showTypeaheadOnClick: boolean = false;\r\n    @Input() tagDelimiters: string = '';\r\n    @Input() tagPattern: RegExp;\r\n    @Input() tagTemplate: TemplateRef<any>;\r\n    @Input() tagClass: TagClassFunction = () => undefined;\r\n    @Input() validationErrors: any = {};\r\n    @Input('createTag') createTagHandler: (value: string) => any;\r\n\r\n    @Output() tagAdding = new EventEmitter<TagInputEvent>();\r\n    @Output() tagAdded = new EventEmitter<TagInputEvent>();\r\n    @Output() tagInvalidated = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoving = new EventEmitter<TagInputEvent>();\r\n    @Output() tagRemoved = new EventEmitter<TagInputEvent>();\r\n    @Output() tagClick = new EventEmitter<TagInputEvent>();\r\n\r\n    @ContentChildren(TypeaheadComponent) typeaheadQuery: QueryList<TypeaheadComponent>;\r\n\r\n    @ViewChild('tagInput') tagInput: ElementRef;\r\n\r\n    @ViewChild('defaultTagTemplate') private _defaultTagTemplate: TemplateRef<any>;\r\n\r\n    selectedIndex: number = -1;\r\n\r\n    tagApi: TagApi = {\r\n        getTagDisplay: this.getTagDisplay.bind(this),\r\n        removeTagAt: this.removeTagAt.bind(this),\r\n        canRemoveTagAt: this.canRemoveTagAt.bind(this)\r\n    };\r\n\r\n    valid: boolean = true;\r\n    inputValid: boolean = true;\r\n\r\n    typeahead: TypeaheadComponent;\r\n\r\n    highlightedElement: HTMLElement;\r\n\r\n    private _input: string = '';\r\n    private _tags: any[] = [];\r\n    private _onChangeHandler: (_: any) => void = () => { };\r\n    private _onTouchedHandler: () => void = () => { };\r\n    private _typeaheadSubscription: Subscription;\r\n\r\n    constructor(\r\n        private _element: ElementRef,\r\n        @Inject(DOCUMENT) private _document: any,\r\n        private _typeaheadKeyService: TypeaheadKeyService) { }\r\n\r\n    ngOnInit() {\r\n        if (!this.tagTemplate) {\r\n            this.tagTemplate = this._defaultTagTemplate;\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        // Watch for optional child typeahead control\r\n        this.connectTypeahead(this.typeaheadQuery.first);\r\n        this.typeaheadQuery.changes.subscribe((query) => {\r\n            this.connectTypeahead(query.first);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.disabled) {\r\n            if (changes.disabled.currentValue) {\r\n                // Clear selection and close dropdown\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Update validation status\r\n        this.validate();\r\n    }\r\n\r\n    writeValue(value: any[]) {\r\n        if (value) {\r\n            this.tags = value;\r\n        }\r\n    }\r\n\r\n    registerOnChange(fn: any) {\r\n        this._onChangeHandler = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any) {\r\n        this._onTouchedHandler = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the value of the control (tags property).\r\n     */\r\n    validate() {\r\n        this.valid = true;\r\n        let tagRangeError = null;\r\n        if (this.tags && (this.tags.length < this.minTags || this.tags.length > this.maxTags)) {\r\n            tagRangeError = {\r\n                given: this.tags.length,\r\n                min: this.minTags,\r\n                max: this.maxTags\r\n            };\r\n            this.valid = false;\r\n        }\r\n        this.validationErrors['tagRangeError'] = tagRangeError;\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    keyHandler(event: KeyboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Get the input field cursor location\r\n        const inputCursorPos = this.tagInput.nativeElement.selectionStart;\r\n\r\n        // Determine if the input field has any text selected\r\n        const hasSelection = this.tagInput.nativeElement.selectionStart !== this.tagInput.nativeElement.selectionEnd;\r\n\r\n        // Determine if a tag has focus\r\n        const tagSelected = this.isValidTagIndex(this.selectedIndex);\r\n\r\n        const inputLength = this.input ? this.input.length : 0;\r\n\r\n        // Check whether the arrow keys can move the selection. Otherwise the input field takes the event.\r\n        const canNavigateLeft = tagSelected || (inputCursorPos <= 0 && !hasSelection);\r\n        const canNavigateRight = tagSelected || (inputCursorPos >= inputLength && !hasSelection);\r\n\r\n        // Forward key events to the typeahead component.\r\n        this._typeaheadKeyService.handleKey(event, this.typeahead);\r\n\r\n        switch (event.key) {\r\n            case 'Enter':\r\n                // Check if a typeahead option is highlighted\r\n                if (this.typeahead && this.typeahead.open && this.typeahead.highlighted) {\r\n                    // Add the typeahead option as a tag, clear the input, and close the dropdown\r\n                    this.commitTypeahead(this.typeahead.highlighted);\r\n                    this.typeahead.open = false;\r\n                } else {\r\n                    // Validate and add the input text as a tag, if possible\r\n                    this.commitInput();\r\n                }\r\n                event.preventDefault();\r\n                break;\r\n            case 'Backspace':\r\n                if (canNavigateLeft) {\r\n                    this.backspace();\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'Delete':\r\n            case 'Del':\r\n                if (tagSelected) {\r\n                    this.removeTagAt(this.selectedIndex);\r\n                }\r\n                break;\r\n            case 'ArrowLeft':\r\n            case 'Left':\r\n                if (canNavigateLeft) {\r\n                    this.moveSelection(-1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case 'ArrowRight':\r\n            case 'Right':\r\n                if (canNavigateRight) {\r\n                    this.moveSelection(1);\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n        }\r\n\r\n        // Check for keys in the tagDelimiters\r\n        if (this.tagDelimiters && this.tagDelimiters.indexOf(this.getKeyChar(event)) >= 0) {\r\n            // Commit previous text\r\n            this.commitInput();\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('focusout', ['$event'])\r\n    focusOutHandler(event: FocusEvent) {\r\n\r\n        // If a click on the typeahead is in progress, don't do anything.\r\n        // This works around an issue in IE where clicking a scrollbar drops focus.\r\n        if (this.typeahead && this.typeahead.clicking) {\r\n            return;\r\n        }\r\n\r\n        // Close the dropdown on blur\r\n        setTimeout(() => {\r\n            if (!this._element.nativeElement.contains(this._document.activeElement)) {\r\n                this.selectedIndex = -1;\r\n                if (this.typeahead) {\r\n                    this.typeahead.open = false;\r\n                }\r\n            }\r\n        }, 200);\r\n    }\r\n\r\n    tagClickHandler(event: MouseEvent, tag: any, index: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // Send tagClick event\r\n        const tagClickEvent = new TagInputEvent(tag);\r\n        this.tagClick.emit(tagClickEvent);\r\n\r\n        // Prevent focus if preventDefault() was called\r\n        if (tagClickEvent.defaultPrevented()) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Select the tag (for IE that doesn't propagate focus)\r\n        this.selectTagAt(index);\r\n    }\r\n\r\n    inputClickHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.typeahead && this.showTypeaheadOnClick) {\r\n            this.typeahead.open = true;\r\n        }\r\n    }\r\n\r\n    inputFocusHandler() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectInput();\r\n    }\r\n\r\n    inputPasteHandler(event: ClipboardEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.addOnPaste) {\r\n            // Get text from the clipboard\r\n            let input: string = null;\r\n            if (event.clipboardData) {\r\n                input = event.clipboardData.getData('text/plain');\r\n            } else if ((<any>window).clipboardData) {\r\n                // Internet Explorer only\r\n                input = (<any>window).clipboardData.getData('Text');\r\n            }\r\n\r\n            // Commit the clipboard text directly\r\n            if (this.commit(input)) {\r\n                this.selectInput();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    typeaheadOptionSelectedHandler(event: TypeaheadOptionEvent) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        // When the typeahead sends the optionSelected event, commit the object directly\r\n        this.commitTypeahead(event.option);\r\n    }\r\n\r\n    /**\r\n     * Commit the current input value and clear the input field if successful.\r\n     */\r\n    commitInput() {\r\n        if (this.commit(this.input)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given tag object and clear the input if successful.\r\n     */\r\n    commitTypeahead(tag: any) {\r\n        if (this.addTag(tag)) {\r\n            this.selectInput();\r\n            this.input = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Commit the given string value as one or more tags, if validation passes. Returns true if the tag(s) were created.\r\n     */\r\n    commit(input: string): boolean {\r\n        if (input && this.freeInput) {\r\n\r\n            // Split the tags by the tagDelimiters if configured\r\n            const newTags = this.splitTagInput(input);\r\n\r\n            // Check tag validation for all of the individual values\r\n            let allValid = true;\r\n            for (let newTag of newTags) {\r\n                const valid = this.validateTag(newTag);\r\n                if (!valid) {\r\n                    allValid = false;\r\n                }\r\n            }\r\n\r\n            // Add the tags if all are valid\r\n            if (allValid) {\r\n                for (let newTag of newTags) {\r\n                    this.addTag(this.createTag(newTag));\r\n                }\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * If no tag is selected, select the rightmost tag. If a tag is selected, remove it.\r\n     */\r\n    backspace() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (!this.isValidTagIndex(this.selectedIndex)) {\r\n            this.selectTagAt(this.tags.length - 1);\r\n        } else {\r\n            this.removeTagAt(this.selectedIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Move the highlighted option forwards or backwards in the list. Wraps at the limits.\r\n     * @param d Value to be added to the selected index, i.e. -1 to move backwards, +1 to move forwards.\r\n     */\r\n    moveSelection(d: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidSelectIndex(this.selectedIndex)) {\r\n            this.selectedIndex += d;\r\n\r\n            // Do wrapping of selection when out of bounds\r\n            if (this.selectedIndex < 0) {\r\n                this.selectedIndex = this.tags.length;\r\n            } else if (this.selectedIndex > this.tags.length) {\r\n                this.selectedIndex = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a value to display for the given tag. Uses display function/property name if set, otherwise assumes that the tag is a simple string.\r\n     */\r\n    getTagDisplay(tag: any): string {\r\n        if (typeof this.display === 'function') {\r\n            return this.display(tag);\r\n        }\r\n        if (typeof this.display === 'string') {\r\n            return tag[<string>this.display];\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is selected (tag index or input field).\r\n     */\r\n    isSelected(index: number): boolean {\r\n        return index === this.selectedIndex;\r\n    }\r\n\r\n    /**\r\n     * Select the tag at the given index. Does nothing if disabled is true.\r\n     */\r\n    selectTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            this.selectedIndex = tagIndex;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the input field, giving it focus. Does nothing if disabled is true.\r\n     */\r\n    selectInput() {\r\n\r\n        if (this.disabled) { return; }\r\n\r\n        this.selectedIndex = this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Remove the tag at the given index. Does nothing if disabled is true or the minTags property prevents removal.\r\n     */\r\n    removeTagAt(tagIndex: number) {\r\n\r\n        if (this.disabled || !this.canRemoveTagAt(tagIndex)) { return; }\r\n\r\n        // Check that the tagIndex is in range\r\n        if (this.isValidTagIndex(tagIndex)) {\r\n            const tag = this.tags[tagIndex];\r\n            const tagRemovingEvent = new TagInputEvent(tag);\r\n            this.tagRemoving.emit(tagRemovingEvent);\r\n            if (!tagRemovingEvent.defaultPrevented()) {\r\n                // Select input first to avoid issues with dropping focus\r\n                this.selectInput();\r\n                // Remove the tag\r\n                this.tags.splice(tagIndex, 1);\r\n                // Set focus again since indices have changed\r\n                this.selectInput();\r\n                this.tagRemoved.emit(new TagInputEvent(tag));\r\n                this.validate();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt(tagIndex: number): boolean {\r\n        return this.tags.length > this.minTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the input field should be available.\r\n     */\r\n    isInputVisible() {\r\n        return this.tags.length < this.maxTags || !this.enforceTagLimits;\r\n    }\r\n\r\n    /**\r\n     * Returns true if any part of the control has focus.\r\n     */\r\n    hasFocus(): boolean {\r\n        return this.isValidSelectIndex(this.selectedIndex);\r\n    }\r\n\r\n    private connectTypeahead(typeahead: TypeaheadComponent) {\r\n        if (this._typeaheadSubscription) {\r\n            this._typeaheadSubscription.unsubscribe();\r\n            this._typeaheadSubscription = null;\r\n        }\r\n\r\n        this.typeahead = typeahead;\r\n        if (this.typeahead) {\r\n            // Set up event handler for selected options\r\n            this._typeaheadSubscription = this.typeahead.optionSelected.subscribe(this.typeaheadOptionSelectedHandler.bind(this));\r\n\r\n            // Set up event handler for the highlighted element\r\n            // Added a delay to move it out of the current change detection cycle\r\n            this._typeaheadSubscription.add(\r\n                this.typeahead.highlightedElementChange.pipe(delay(0)).subscribe((element: HTMLElement) => {\r\n                    this.highlightedElement = element;\r\n                })\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the given tagValue with the tagPattern, if set. Update validationErrors on validation failure.\r\n     */\r\n    private validateTag(tagValue: string): boolean {\r\n        let inputPattern = null;\r\n        this.inputValid = true;\r\n        if (this.tagPattern && !this.tagPattern.test(tagValue)) {\r\n            inputPattern = {\r\n                given: tagValue,\r\n                pattern: this.tagPattern\r\n            };\r\n            this.inputValid = false;\r\n        }\r\n        this.validationErrors['inputPattern'] = inputPattern;\r\n        return this.inputValid;\r\n    }\r\n\r\n    /**\r\n     * Create a tag object for the given tagValue. If createTagHandler is specified, use it; otherwise if displayProperty is specified, create an object with the tagValue as the single named property; otherwise return the tagValue itself.\r\n     */\r\n    private createTag(tagValue: string): any {\r\n        let tag = null;\r\n        if (this.createTagHandler && typeof this.createTagHandler === 'function') {\r\n            tag = this.createTagHandler(tagValue);\r\n        } else if (typeof this.display === 'string') {\r\n            tag = {};\r\n            tag[<string>this.display] = tagValue;\r\n        } else {\r\n            tag = tagValue;\r\n        }\r\n        return tag;\r\n    }\r\n\r\n    /**\r\n     * Add a tag object, calling the tagAdding and tagAdded events. Returns true if the tag was added to the tags array.\r\n     */\r\n    private addTag(tag: any): boolean {\r\n        if (tag) {\r\n            // Verify that the new tag can be displayed\r\n            const displayValue = this.getTagDisplay(tag);\r\n            if (displayValue && typeof displayValue === 'string' && displayValue.length > 0) {\r\n                const tagAddingEvent = new TagInputEvent(tag);\r\n                this.tagAdding.emit(tagAddingEvent);\r\n                if (!tagAddingEvent.defaultPrevented()) {\r\n                    this.tags = this.tags || [];\r\n                    this.tags.push(tag);\r\n                    this.tagAdded.emit(new TagInputEvent(tag));\r\n                    this.validate();\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given tagIndex is a valid tag index.\r\n     */\r\n    private isValidTagIndex(tagIndex: number): boolean {\r\n        return tagIndex >= 0 && tagIndex < this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the given index is a valid selection index (tags or input field).\r\n     */\r\n    private isValidSelectIndex(index: number): boolean {\r\n        return index >= 0 && index <= this.tags.length;\r\n    }\r\n\r\n    /**\r\n     * Returns the character corresponding to the given key event, mainly for IE compatibility.\r\n     */\r\n    private getKeyChar(event: KeyboardEvent): string {\r\n        switch (event.key) {\r\n            case 'Spacebar':\r\n                return ' ';\r\n        }\r\n        return event.key;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of strings corresponding to the input string split by the tagDelimiters characters.\r\n     */\r\n    private splitTagInput(input: string): string[] {\r\n        let tagValues = [input];\r\n        if (this.tagDelimiters && typeof this.tagDelimiters === 'string') {\r\n            const escapedDelimiters = this.tagDelimiters.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n            const delimiterRegex = new RegExp(`[${escapedDelimiters}]`, 'g');\r\n            tagValues = input.split(delimiterRegex).filter((s) => s.length > 0);\r\n        }\r\n        return tagValues;\r\n    }\r\n}\r\n\r\n/**\r\n * The API available to tag templates.\r\n */\r\nexport interface TagApi {\r\n    /**\r\n     * Returns the display value of the given tag, according to the displayProperty property.\r\n     */\r\n    getTagDisplay: (tag: any) => string;\r\n\r\n    /**\r\n     * Removes the tag at the given index, if possible.\r\n     */\r\n    removeTagAt: (index: number) => void;\r\n\r\n    /**\r\n     * \tReturns true if the tag at the given index can be removed.\r\n     */\r\n    canRemoveTagAt: (index: number) => boolean;\r\n}\r\n\r\n/**\r\n * The function used to return custom class information, for use in `ngClass`.\r\n */\r\nexport type TagClassFunction = (tag: any, index: number, selected: boolean) => (string | string[] | Set<string>);","import { FocusIfModule } from '../../directives/focus-if/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { TagInputComponent } from './tag-input.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        FocusIfModule,\n        TypeaheadModule\n    ],\n    exports: [TagInputComponent],\n    declarations: [TagInputComponent],\n    providers: [],\n})\nexport class TagInputModule { }\n","import { InfiniteScrollModule } from '../../directives/infinite-scroll/index';\nimport { TagInputModule } from '../tag-input/index';\nimport { TypeaheadModule } from '../typeahead/index';\nimport { SelectComponent } from './select.component';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        InfiniteScrollModule,\n        TagInputModule,\n        TypeaheadModule\n    ],\n    exports: [SelectComponent],\n    declarations: [SelectComponent]\n})\nexport class SelectModule { }\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { SearchBuilderComponent } from './search-builder.component';\nimport { SearchBuilderGroupComponent } from './search-builder-group/search-builder-group.component';\nimport { SearchTextComponent } from './search-components/text/text.component';\nimport { SearchDateComponent } from './search-components/date/date.component';\nimport { SearchBuilderOutletDirective } from './search-builder-outlet/search-builder-outlet.directive';\nimport { BaseSearchComponent } from './search-components/base-search.component';\nimport { DateTimePickerModule } from '../date-time-picker/date-time-picker.module';\nimport { SearchDateRangeComponent } from './search-components/date-range/date-range.component';\nimport { SearchSelectComponent } from './search-components/select/select.component';\nimport { SelectModule } from '../select/index';\nimport { PopoverModule } from '../popover/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    DateTimePickerModule,\n    PopoverModule,\n    SelectModule\n  ],\n  exports: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    BaseSearchComponent\n  ],\n  declarations: [\n    SearchBuilderComponent,\n    SearchBuilderGroupComponent,\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchBuilderOutletDirective,\n    SearchSelectComponent,\n    BaseSearchComponent\n  ],\n  entryComponents: [\n    SearchTextComponent,\n    SearchDateComponent,\n    SearchDateRangeComponent,\n    SearchSelectComponent\n  ]\n})\nexport class SearchBuilderModule { }\n","import { Directive, HostListener } from '@angular/core';\nimport { SidePanelService } from './side-panel.service';\n\n@Directive({\n    selector: '[uxSidePanelClose]'\n})\nexport class SidePanelCloseDirective {\n\n    constructor(private _service: SidePanelService) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this._service.close();\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SidePanelComponent } from './side-panel.component';\nimport { SidePanelCloseDirective } from './side-panel-close.directive';\n\nconst EXPORTS = [\n    SidePanelComponent,\n    SidePanelCloseDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: EXPORTS,\n    declarations: EXPORTS\n})\nexport class SidePanelModule { }\n","import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, DoCheck, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\n\n@Component({\n    selector: 'ux-slider',\n    template: `<div class=\"track\" #track [class.narrow]=\"options.track.height === sliderSize.Narrow\" [class.wide]=\"options.track.height === sliderSize.Wide\" [class.range]=\"options.type === sliderType.Range\">\n\n    <!-- Section Beneath Lower Thumb -->\n    <div class=\"track-section track-lower\" [style.flex-grow]=\"tracks.lower.size\" [style.background]=\"tracks.lower.color\"></div>\n\n    <!-- Lower Thumb Button / Line -->\n    <div class=\"thumb lower\"\n        uxDrag\n        role=\"slider\"\n        tabindex=\"0\"\n        #lowerthumb\n        [attr.aria-label]=\"options.type === sliderType.Range ? options.handles.aria.lowerThumb : options.handles.aria.thumb\"\n        [attr.aria-valuemin]=\"options?.track?.min\"\n        [attr.aria-valuemax]=\"options.type === sliderType.Range ? getThumbValue(sliderThumb.Upper) : options?.track?.max\"\n        [attr.aria-valuenow]=\"getThumbValue(sliderThumb.Lower)\"\n        [attr.aria-valuetext]=\"getAriaValueText(sliderThumb.Lower)\"\n        [style.left.%]=\"thumbs.lower.position\"\n        [class.active]=\"thumbs.lower.drag\"\n        [style.z-index]=\"thumbs.lower.order\"\n        [class.button]=\"options.handles.style === sliderStyle.Button\"\n        [class.line]=\"options.handles.style === sliderStyle.Line\"\n        [class.narrow]=\"options.track.height === sliderSize.Narrow\"\n        [class.wide]=\"options.track.height === sliderSize.Wide\"\n        (dragstart)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.DragStart); lowerthumb.focus()\"\n        (drag)=\"updateThumbPosition($event, sliderThumb.Lower)\"\n        (dragend)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.DragEnd)\"\n        (mouseenter)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseOver)\"\n        (mouseleave)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseLeave)\"\n        (focus)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseOver)\"\n        (blur)=\"thumbEvent(sliderThumb.Lower, sliderThumbEvent.MouseLeave)\"\n        (keydown.ArrowLeft)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowRight)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.ArrowUp)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowDown)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.PageDown)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.Major, false); $event.preventDefault()\"\n        (keydown.PageUp)=\"snapToNearestTick(sliderThumb.Lower, sliderSnap.Major, true); $event.preventDefault()\"\n        (keydown.Home)=\"snapToEnd(sliderThumb.Lower, false); $event.preventDefault()\"\n        (keydown.End)=\"snapToEnd(sliderThumb.Lower, true); $event.preventDefault()\">\n\n        <!-- Lower Thumb Callout -->\n        <div class=\"tooltip top tooltip-lower\" #lowerTooltip\n            [class.tooltip-dynamic]=\"options.handles.callout.trigger === sliderCalloutTrigger.Dynamic && thumbs.lower.drag === false\"\n            [style.opacity]=\"tooltips.lower.visible ? 1 : 0\"\n            [style.left.px]=\"tooltips.lower.position\">\n\n            <div class=\"tooltip-arrow\" [style.border-top-color]=\"options.handles.callout.background\"></div>\n\n            <div class=\"tooltip-inner\"\n                [style.background-color]=\"options.handles.callout.background\"\n                [style.color]=\"options.handles.callout.color\">\n                {{ tooltips.lower.label }}\n            </div>\n        </div>\n\n    </div>\n\n    <!-- Section of Track Between Lower and Upper Thumbs -->\n    <div class=\"track-section track-range\" *ngIf=\"options.type === sliderType.Range\" [style.flex-grow]=\"tracks.middle.size\" [style.background]=\"tracks.middle.color\">\n    </div>\n\n    <!-- Upper Thumb Button / Line -->\n    <div class=\"thumb upper\"\n        uxDrag\n        role=\"slider\"\n        tabindex=\"0\"\n        #upperthumb\n        [attr.aria-label]=\"options.handles.aria.upperThumb\"\n        [attr.aria-valuemin]=\"getThumbValue(sliderThumb.Lower) || options?.track?.min\"\n        [attr.aria-valuemax]=\"options?.track?.max\"\n        [attr.aria-valuenow]=\"getThumbValue(sliderThumb.Upper)\"\n        [attr.aria-valuetext]=\"getAriaValueText(sliderThumb.Upper)\"\n        [hidden]=\"options.type !== sliderType.Range\"\n        [class.active]=\"thumbs.upper.drag\"\n        [style.left.%]=\"thumbs.upper.position\"\n        [style.z-index]=\"thumbs.upper.order\"\n        [class.button]=\"options.handles.style === sliderStyle.Button\"\n        [class.line]=\"options.handles.style === sliderStyle.Line\"\n        [class.narrow]=\"options.track.height === sliderSize.Narrow\"\n        [class.wide]=\"options.track.height === sliderSize.Wide\"\n        (dragstart)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.DragStart); upperthumb.focus()\"\n        (drag)=\"updateThumbPosition($event, sliderThumb.Upper)\"\n        (dragend)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.DragEnd)\"\n        (mouseenter)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseOver)\"\n        (mouseleave)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseLeave)\"\n        (focus)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseOver)\"\n        (blur)=\"thumbEvent(sliderThumb.Upper, sliderThumbEvent.MouseLeave)\"\n        (keydown.ArrowLeft)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowRight)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.ArrowUp)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, false); $event.preventDefault()\"\n        (keydown.ArrowDown)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.All, true); $event.preventDefault()\"\n        (keydown.PageDown)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.Major, false); $event.preventDefault()\"\n        (keydown.PageUp)=\"snapToNearestTick(sliderThumb.Upper, sliderSnap.Major, true); $event.preventDefault()\"\n        (keydown.Home)=\"snapToEnd(sliderThumb.Upper, false); $event.preventDefault()\"\n        (keydown.End)=\"snapToEnd(sliderThumb.Upper, true); $event.preventDefault()\">\n\n        <!-- Upper Thumb Callout -->\n        <div class=\"tooltip top tooltip-upper\" #upperTooltip\n            [class.tooltip-dynamic]=\"options.handles.callout.trigger === sliderCalloutTrigger.Dynamic && thumbs.upper.drag === false\"\n            [style.opacity]=\"tooltips.upper.visible ? 1 : 0\"\n            [style.left.px]=\"tooltips.upper.position\">\n\n            <div class=\"tooltip-arrow\" [style.border-top-color]=\"options.handles.callout.background\"></div>\n\n            <div class=\"tooltip-inner\"\n                *ngIf=\"options.type === sliderType.Range\"\n                [style.background-color]=\"options.handles.callout.background\"\n                [style.color]=\"options.handles.callout.color\">\n                {{ tooltips.upper.label }}\n            </div>\n        </div>\n    </div>\n\n    <!-- Section of Track Abover Upper Thumb -->\n    <div class=\"track-section track-higher\" [style.flex-grow]=\"tracks.upper.size\" [style.background]=\"tracks.upper.color\"></div>\n\n</div>\n\n<!-- Chart Ticks and Tick Labels -->\n<div class=\"tick-container\"\n    role=\"presentation\"\n    *ngIf=\"(options.track.ticks.major.show || options.track.ticks.minor.show) && options.handles.callout.trigger !== sliderCalloutTrigger.Dynamic\"\n    [class.show-labels]=\"options.track.ticks.major.labels || options.track.ticks.minor.labels\">\n\n    <div class=\"tick\"\n        *ngFor=\"let tick of ticks\"\n        [class.major]=\"tick.type === sliderTickType.Major\"\n        [class.minor]=\"tick.type === sliderTickType.Minor\"\n        [style.left.%]=\"tick.position\"\n        [hidden]=\"!tick.showTicks\">\n\n        <div class=\"tick-indicator\"></div>\n        <div class=\"tick-label\" aria-hidden=\"true\" [hidden]=\"!tick.showLabels\">{{ tick.label }}</div>\n    </div>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SliderComponent implements OnInit, AfterViewInit, DoCheck {\n\n    @Input() value: SliderValue | number = 0;\n    @Input() options: SliderOptions;\n    @Output() valueChange: EventEmitter<SliderValue | number> = new EventEmitter<SliderValue | number>();\n\n    @ViewChild('lowerTooltip') lowerTooltip: ElementRef;\n    @ViewChild('upperTooltip') upperTooltip: ElementRef;\n    @ViewChild('track') track: ElementRef;\n\n    // store current values for deep change detection\n    private _value: SliderValue | number;\n\n    // expose enums to Angular view\n    sliderType = SliderType;\n    sliderStyle = SliderStyle;\n    sliderSize = SliderSize;\n    sliderSnap = SliderSnap;\n    sliderThumb = SliderThumb;\n    sliderTickType = SliderTickType;\n    sliderThumbEvent = SliderThumbEvent;\n    sliderCalloutTrigger = SliderCalloutTrigger;\n\n    tracks = {\n        lower: {\n            size: 0,\n            color: ''\n        },\n        middle: {\n            size: 0,\n            color: ''\n        },\n        upper: {\n            size: 0,\n            color: ''\n        }\n    };\n\n    tooltips = {\n        lower: {\n            visible: false,\n            position: 0,\n            label: ''\n        },\n        upper: {\n            visible: false,\n            position: 0,\n            label: ''\n        }\n    };\n\n    thumbs = {\n        lower: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 100,\n            value: null as number\n        },\n        upper: {\n            hover: false,\n            drag: false,\n            position: 0,\n            order: 101,\n            value: null as number\n        }\n    };\n\n    // store all the ticks to display\n    ticks: SliderTick[] = [];\n    defaultOptions: SliderOptions;\n\n    constructor(colorService: ColorService, private _changeDetectorRef: ChangeDetectorRef) {\n\n        // setup default options\n        this.defaultOptions = {\n            type: SliderType.Value,\n            handles: {\n                style: SliderStyle.Button,\n                callout: {\n                    trigger: SliderCalloutTrigger.None,\n                    background: colorService.getColor('grey2').toHex(),\n                    color: '#fff',\n                    formatter: (value: number): string | number => value\n                },\n                keyboard: {\n                    major: 5,\n                    minor: 1\n                },\n                aria: {\n                    thumb: 'Slider value',\n                    lowerThumb: 'Slider lower value',\n                    upperThumb: 'Slider upper value'\n                }\n            },\n            track: {\n                height: SliderSize.Wide,\n                min: 0,\n                max: 100,\n                ticks: {\n                    snap: SliderSnap.None,\n                    major: {\n                        show: true,\n                        steps: 10,\n                        labels: true,\n                        formatter: (value: number): string | number => value\n                    },\n                    minor: {\n                        show: true,\n                        steps: 5,\n                        labels: false,\n                        formatter: (value: number): string | number => value\n                    }\n                },\n                colors: {\n                    lower: colorService.getColor('grey6').toHex(),\n                    range: colorService.getColor('accent').setAlpha(0.75).toRgba(),\n                    higher: colorService.getColor('grey6').toHex()\n                }\n            }\n        };\n    }\n\n    ngOnInit(): void {\n\n        this.updateOptions();\n        this.updateValues();\n\n        this.setThumbState(SliderThumb.Lower, false, false);\n        this.setThumbState(SliderThumb.Upper, false, false);\n\n        // emit the initial value\n        this.valueChange.next(this.clone(this.value));\n    }\n\n    ngDoCheck(): void {\n\n        if (this.detectValueChange(this.value, this._value)) {\n            this.updateValues();\n            this._value = this.clone(this.value);\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // persistent tooltips will need positioned correctly at this stage\n        setTimeout(() => {\n            this.updateTooltipPosition(SliderThumb.Lower);\n            this.updateTooltipPosition(SliderThumb.Upper);\n\n            // mark as dirty\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n\n    snapToNearestTick(thumb: SliderThumb, snapTarget: SliderSnap, forwards: boolean): void {\n\n        // get the value for the thumb\n        const { value } = this.getThumbState(thumb);\n\n        // get the closest ticks - remove any tick if we are currently on it\n        const closest = this.getTickDistances(value, thumb, snapTarget)\n            .filter(tick => tick.value !== value)\n            .find(tick => forwards ? tick.value > value : tick.value < value);\n\n        // If we have no ticks then move by a predefined amount\n        if (closest) {\n            return this.setThumbValue(thumb, this.validateValue(thumb, closest.value));\n        }\n\n        const step = snapTarget === SliderSnap.Major ? this.options.handles.keyboard.major : this.options.handles.keyboard.minor;\n\n        this.setThumbValue(thumb, this.validateValue(thumb, value + (forwards ? step : -step)));\n\n    }\n\n    snapToEnd(thumb: SliderThumb, forwards: boolean): void {\n        this.setThumbValue(thumb, this.validateValue(thumb, forwards ? this.options.track.max : this.options.track.min));\n    }\n\n    getThumbValue(thumb: SliderThumb): number {\n        return this.getThumbState(thumb).value;\n    }\n\n    getFormattedValue(thumb: SliderThumb): string | number {\n        return this.options.handles.callout.formatter(this.getThumbState(thumb).value);\n    }\n\n    private getThumbState(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.thumbs.lower : this.thumbs.upper;\n    }\n\n    private setThumbState(thumb: SliderThumb, hover: boolean, drag: boolean) {\n\n        if (thumb === SliderThumb.Lower) {\n            this.thumbs.lower.hover = hover;\n            this.thumbs.lower.drag = drag;\n        } else {\n            this.thumbs.upper.hover = hover;\n            this.thumbs.upper.drag = drag;\n        }\n\n        // update the visibility of the tooltips\n        this.updateTooltips(thumb);\n    }\n\n    thumbEvent(thumb: SliderThumb, event: SliderThumbEvent): void {\n\n        // get the current thumb state\n        const state = this.getThumbState(thumb);\n\n        // update based upon event\n        switch (event) {\n\n            case SliderThumbEvent.DragStart:\n                state.drag = true;\n                break;\n\n            case SliderThumbEvent.DragEnd:\n                state.drag = false;\n                break;\n\n            case SliderThumbEvent.MouseOver:\n                state.hover = true;\n                break;\n\n            case SliderThumbEvent.MouseLeave:\n                state.hover = false;\n                break;\n\n            case SliderThumbEvent.None:\n                state.drag = false;\n                state.hover = false;\n                break;\n        }\n\n        // update the thumb state\n        this.setThumbState(thumb, state.hover, state.drag);\n    }\n\n    getAriaValueText(thumb: SliderThumb): string | number {\n        // get the current thumb value\n        const value = this.getThumbValue(thumb);\n\n        // get all the ticks\n        const tick = this.ticks.find(_tick => _tick.value === value);\n\n        if (tick && tick.label) {\n            return tick.label;\n        }\n\n        // otherwise simply display the formatted value\n        return this.getFormattedValue(thumb);\n    }\n\n    private updateTooltips(thumb: SliderThumb): void {\n\n        let visible = false;\n        const state = this.getThumbState(thumb);\n\n        switch (this.options.handles.callout.trigger) {\n\n            case SliderCalloutTrigger.Persistent:\n                visible = true;\n                break;\n\n            case SliderCalloutTrigger.Drag:\n                visible = state.drag;\n                break;\n\n            case SliderCalloutTrigger.Hover:\n                visible = state.hover || state.drag;\n                break;\n\n            case SliderCalloutTrigger.Dynamic:\n                visible = true;\n                break;\n        }\n\n        // update the state for the corresponding thumb\n        this.getTooltip(thumb).visible = visible;\n\n        // update the tooltip text\n        this.updateTooltipText(thumb);\n\n        // update the tooltip positions\n        this.updateTooltipPosition(thumb);\n    }\n\n    private updateTooltipText(thumb: SliderThumb) {\n\n        // get the thumb value\n        let state = this.getThumbState(thumb);\n        let tooltip = this.getTooltip(thumb);\n\n        // store the formatted label\n        tooltip.label = this.getFormattedValue(thumb).toString();\n    }\n\n    private getTooltipElement(thumb: SliderThumb): ElementRef {\n        return thumb === SliderThumb.Lower ? this.lowerTooltip : this.upperTooltip;\n    }\n\n    private getTooltip(thumb: SliderThumb) {\n        return thumb === SliderThumb.Lower ? this.tooltips.lower : this.tooltips.upper;\n    }\n\n    private updateTooltipPosition(thumb: SliderThumb): void {\n\n        const tooltip = this.getTooltip(thumb);\n\n        // if tooltip is not visible then stop here\n        if (tooltip.visible === false) {\n            return;\n        }\n\n        let tooltipElement = this.getTooltipElement(thumb);\n\n        // get the element widths\n        let thumbWidth: number;\n\n        if (this.options.handles.style === SliderStyle.Button) {\n            thumbWidth = this.options.track.height === SliderSize.Narrow ? 16 : 24;\n        } else {\n            thumbWidth = 2;\n        }\n\n        let tooltipWidth = tooltipElement.nativeElement.offsetWidth;\n\n        // calculate the tooltips new position\n        let tooltipPosition = Math.ceil((tooltipWidth - thumbWidth) / 2);\n\n        // update tooltip position\n        tooltip.position = -tooltipPosition;\n\n        if (this.options.type === SliderType.Range && this.options.handles.callout.trigger === SliderCalloutTrigger.Dynamic) {\n            this.preventTooltipOverlap(tooltip);\n        }\n    }\n\n    private preventTooltipOverlap(tooltip: any): void {\n        const trackWidth = this.track.nativeElement.offsetWidth;\n\n        const lower = (trackWidth / 100) * this.thumbs.lower.position;\n        const upper = (trackWidth / 100) * this.thumbs.upper.position;\n\n        const lowerWidth = this.lowerTooltip.nativeElement.offsetWidth / 2;\n        const upperWidth = this.upperTooltip.nativeElement.offsetWidth / 2;\n\n        const diff = (lower + lowerWidth) - (upper - upperWidth);\n\n        // if the tooltips are closer than 16px then adjust so the dont move any close\n        if (diff > 0) {\n            if (tooltip === this.tooltips.lower && this.thumbs.lower.drag === false) {\n                tooltip.position -= (diff / 2);\n            } else if (tooltip === this.tooltips.upper && this.thumbs.upper.drag === false) {\n                tooltip.position += (diff / 2);\n            }\n        }\n    }\n\n    private clamp(value: number, min: number, max: number): number {\n        return Math.min(Math.max(value, min), max);\n    }\n\n    updateThumbPosition(event: MouseEvent | TouchEvent, thumb: SliderThumb): void {\n\n        // get event position - either mouse or touch\n        let eventPosition = event instanceof MouseEvent ? event.clientX : event.touches && event.touches.length > 0 ? event.touches[0].clientX : null;\n\n        // if event position is null do nothing\n        if (eventPosition === null) {\n            return;\n        }\n\n        // get mouse position\n        let mouseX = window.pageXOffset + eventPosition;\n\n        // get track size and position\n        let trackBounds = this.track.nativeElement.getBoundingClientRect();\n\n        // restrict the value within the range size\n        let position = this.clamp(mouseX - trackBounds.left, 0, trackBounds.width);\n\n        // get fraction representation of location within the track\n        let fraction = (position / trackBounds.width);\n\n        // convert to value within the range\n        let value = ((this.options.track.max - this.options.track.min) * fraction) + this.options.track.min;\n\n        // ensure value is valid\n        value = this.validateValue(thumb, value);\n\n        // snap to a tick if required\n        value = this.snapToTick(value, thumb);\n\n        // update the value accordingly\n        this.setThumbValue(thumb, value);\n\n        this.updateOrder(thumb);\n        this.updateValues();\n\n        // update tooltip text & position\n        this.updateTooltipText(thumb);\n\n        // update the position of all visible tooltips\n        this.updateTooltipPosition(SliderThumb.Lower);\n        this.updateTooltipPosition(SliderThumb.Upper);\n\n        // mark as dirty for change detection\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private updateOrder(thumb: SliderThumb): void {\n\n        let lower = thumb === SliderThumb.Lower ? 101 : 100;\n        let upper = thumb === SliderThumb.Lower ? 100 : 101;\n\n        // The most recently used thumb should be above\n        this.thumbs.lower.order = lower;\n        this.thumbs.upper.order = upper;\n    }\n\n    private getTickDistances(value: number, thumb: SliderThumb, snapTarget: SliderSnap): SliderTick[] {\n\n        // if snap target is none then return original value\n        if (snapTarget === SliderSnap.None) {\n            return [];\n        }\n\n        // get filtered ticks\n        let ticks: SliderTick[];\n\n        switch (snapTarget) {\n\n            case SliderSnap.Minor:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Minor);\n                break;\n\n            case SliderSnap.Major:\n                ticks = this.ticks.filter(tick => tick.type === SliderTickType.Major);\n                break;\n\n            default:\n                ticks = this.ticks.slice(0);\n        }\n\n        // get the track limit\n        let lowerLimit = this.options.track.min;\n        let upperLimit = this.options.track.max;\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Lower) {\n            upperLimit = this.thumbs.upper.value;\n        }\n\n        if (this.options.type === SliderType.Range && thumb === SliderThumb.Upper) {\n            lowerLimit = this.thumbs.lower.value;\n        }\n\n        // Find the closest tick to the current position\n        const range = ticks.filter(tick => tick.value >= lowerLimit && tick.value <= upperLimit);\n\n        // If there are no close ticks in the valid range then dont snap\n        if (range.length === 0) {\n            return [];\n        }\n\n        return range.sort((tickOne, tickTwo) => {\n\n            const tickOneDelta = Math.max(tickOne.value, value) - Math.min(tickOne.value, value);\n            const tickTwoDelta = Math.max(tickTwo.value, value) - Math.min(tickTwo.value, value);\n            \n            return tickOneDelta - tickTwoDelta;\n        });\n    }\n\n    private snapToTick(value: number, thumb: SliderThumb): number {\n\n        const tickDistances = this.getTickDistances(value, thumb, this.options.track.ticks.snap);\n\n        // if there are no ticks return the current value\n        if (tickDistances.length === 0) {\n            return value;\n        }\n\n        // get the closest tick\n        return tickDistances[0].value;\n    }\n\n    private validateValue(thumb: SliderThumb, value: number): number {\n\n        // if slider is not a range value is always valid providing it is within the chart min and max values\n        if (this.options.type === SliderType.Value) {\n            return Math.max(Math.min(value, this.options.track.max), this.options.track.min);\n        }\n\n        // check if value is with chart ranges\n        if (value > this.options.track.max) {\n            return thumb === SliderThumb.Lower ? Math.min(this.options.track.max, this.thumbs.upper.value) : this.options.track.max;\n        }\n\n        if (value < this.options.track.min) {\n            return thumb === SliderThumb.Upper ? Math.max(this.options.track.min, this.thumbs.lower.value) : this.options.track.min;\n        }\n\n        // otherwise we need to check to make sure lower thumb cannot go above higher and vice versa\n        if (thumb === SliderThumb.Lower) {\n\n            if (this.thumbs.upper.value === null) {\n                return value;\n            }\n\n            return value <= this.thumbs.upper.value ? value : this.thumbs.upper.value;\n        }\n\n        if (thumb === SliderThumb.Upper) {\n\n            if (this.thumbs.lower.value === null) {\n                return value;\n            }\n\n            return value >= this.thumbs.lower.value ? value : this.thumbs.lower.value;\n        }\n    }\n\n    private updateOptions(): void {\n\n        // add in the default options that user hasn't specified\n        this.options = this.deepMerge(this.options || {}, this.defaultOptions);\n\n        this.updateTrackColors();\n        this.updateTicks();\n        this.updateValues();\n    }\n\n    private updateValues(): void {\n\n        if (this.value === undefined || this.value === null) {\n            this.value = 0;\n        }\n\n        let lowerValue = typeof this.value === 'number' ? this.value : this.value.low;\n        let upperValue = typeof this.value === 'number' ? this.value : this.value.high;\n\n        // validate values\n        lowerValue = this.validateValue(SliderThumb.Lower, Number(lowerValue.toFixed(4)));\n        upperValue = this.validateValue(SliderThumb.Upper, Number(upperValue.toFixed(4)));\n\n        // calculate the positions as percentages\n        let lowerPosition = (((lowerValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n        let upperPosition = (((upperValue - this.options.track.min) / (this.options.track.max - this.options.track.min)) * 100);\n\n        // update thumb positions\n        this.thumbs.lower.position = lowerPosition;\n        this.thumbs.upper.position = upperPosition;\n\n        // calculate the track sizes\n        this.tracks.lower.size = lowerPosition;\n        this.tracks.middle.size = upperPosition - lowerPosition;\n        this.tracks.upper.size = this.options.type === SliderType.Value ? 100 - lowerPosition : 100 - upperPosition;\n\n        // update the value input\n        this.setValue(lowerValue, upperValue);\n    }\n\n    private setValue(low: number, high?: number): void {\n\n        this.thumbs.lower.value = low;\n        this.thumbs.upper.value = high;\n\n        let previousValue = this.clone(this._value);\n\n        this.value = this.options.type === SliderType.Value ? low : { low: low, high: high };\n\n        // call the event emitter if changes occured\n        if (this.detectValueChange(this.value, previousValue)) {\n            this.valueChange.emit(this.clone(this.value));\n\n            this.updateTooltipText(SliderThumb.Lower);\n            this.updateTooltipText(SliderThumb.Upper);\n        } else {\n            this.valueChange.emit(this.clone(this.value));\n        }\n    }\n\n    private setThumbValue(thumb: SliderThumb, value: number): void {\n\n        // update the thumb value\n        this.getThumbState(thumb).value = value;\n\n        // forward these changes to the value\n        this.setValue(this.thumbs.lower.value, this.thumbs.upper.value);\n    }\n\n    private updateTicks(): void {\n\n        // get tick options\n        const majorOptions = this.options.track.ticks.major;\n        const minorOptions = this.options.track.ticks.minor;\n\n        // check if we should show ticks\n        if (majorOptions.show === false && minorOptions.show === false) {\n            this.ticks = [];\n        }\n\n        // create ticks for both major and minor - only get the ones to be shown\n        const majorTicks = this.getTicks(majorOptions, SliderTickType.Major).filter(tick => tick.showTicks);\n        const minorTicks = this.getTicks(minorOptions, SliderTickType.Minor).filter(tick => tick.showTicks);\n\n        // remove any minor ticks that are on a major interval\n        this.ticks = this.unionTicks(majorTicks, minorTicks);\n    }\n\n    private updateTrackColors(): void {\n\n        // get colors for each part of the track\n        const { lower, range, higher } = this.options.track.colors;\n\n        // update the controller value\n        this.tracks.lower.color = typeof lower === 'string' ? lower : `linear-gradient(to right, ${lower.join(', ')})`;\n        this.tracks.middle.color = typeof range === 'string' ? range : `linear-gradient(to right, ${range.join(', ')})`;\n        this.tracks.upper.color = typeof higher === 'string' ? higher : `linear-gradient(to right, ${higher.join(', ')})`;\n    }\n\n    private getSteps(steps: number | number[]): number[] {\n\n        // if they are already an array just return it\n        if (steps instanceof Array) {\n            return steps;\n        }\n\n        let output: number[] = [];\n\n        // otherwise calculate the steps\n        for (let idx = this.options.track.min; idx <= this.options.track.max; idx += steps) {\n            output.push(idx);\n        }\n\n        return output;\n    }\n\n    private getTicks(options: SliderTickOptions, type: SliderTickType): SliderTick[] {\n\n        // create an array to store the ticks and step points\n        let steps = this.getSteps(options.steps);\n\n        // get some chart options\n        let min = this.options.track.min;\n        let max = this.options.track.max;\n\n        // convert each step to a slider tick and remove invalid ticks\n        return steps.map(step => {\n            return {\n                showTicks: options.show,\n                showLabels: options.labels,\n                type: type,\n                position: ((step - min) / (max - min)) * 100,\n                value: step,\n                label: options.formatter(step)\n            };\n        }).filter(tick => tick.position >= 0 && tick.position <= 100);\n    }\n\n    private unionTicks(majorTicks: SliderTick[], minorTicks: SliderTick[]): SliderTick[] {\n\n        // get all ticks combined removing any minor ticks with the same value as major ticks\n        return majorTicks.concat(minorTicks)\n            .filter((tick, index, array) => tick.type === SliderTickType.Major || !array.find(tk => tk.type === SliderTickType.Major && tk.position === tick.position))\n            .sort((t1, t2) => t1.value - t2.value);\n    }\n\n    private deepMerge<T>(destination: T, source: T): T {\n\n        // loop though all of the properties in the source object\n        for (let prop in source) {\n\n            // check if the destination object has the property\n            if (!destination.hasOwnProperty(prop)) {\n                // copy the property across\n                destination[prop] = source[prop];\n                continue;\n            }\n\n            // if the property exists and is not an object then skip\n            if (typeof destination[prop] !== 'object') {\n                continue;\n            }\n\n            // check if property is an array\n            if (destination[prop] instanceof Array) {\n                continue;\n            }\n\n            // if it is an object then perform a recursive check\n            destination[prop] = this.deepMerge(destination[prop], source[prop]);\n        }\n\n        return destination;\n    }\n\n    private detectValueChange(value1: number | SliderValue, value2: number | SliderValue): boolean {\n\n        // compare two slider values\n        if (this.isSliderValue(value1) && this.isSliderValue(value2)) {\n\n            // references to the objects in the correct types\n            const obj1 = value1 as SliderValue;\n            const obj2 = value2 as SliderValue;\n\n            return obj1.low !== obj2.low || obj1.high !== obj2.high;\n        }\n\n        // if not a slider value - should be number of nullable type - compare normally\n        return value1 !== value2;\n    }\n\n    /**\n     * Determines whether or not an object conforms to the\n     * SliderValue interface.\n     * @param value - The object to check - this must be type any\n     */\n    private isSliderValue(value: any): boolean {\n\n        // check if is an object\n        if (typeof value !== 'object') {\n            return false;\n        }\n\n        // next check if it contains the necessary properties\n        return 'low' in value && 'high' in value;\n    }\n\n    private clone(value: number | SliderValue): number | SliderValue {\n\n        // if it is not an object simply return the value\n        if (typeof value !== 'object') {\n            return value;\n        }\n\n        // create a new object from the existing one\n        const instance = { ...value };\n\n        // delete remove the value from the old object\n        value = undefined;\n\n        // return the new instance of the object\n        return instance;\n    }\n}\n\nexport enum SliderType {\n    Value,\n    Range\n}\n\nexport enum SliderStyle {\n    Button,\n    Line\n}\n\nexport enum SliderSize {\n    Narrow,\n    Wide\n}\n\nexport enum SliderCalloutTrigger {\n    None,\n    Hover,\n    Drag,\n    Persistent,\n    Dynamic\n}\n\nexport interface SliderValue {\n    low: number;\n    high: number;\n}\n\nexport enum SliderSnap {\n    None,\n    Minor,\n    Major,\n    All\n}\n\nexport enum SliderTickType {\n    Minor,\n    Major\n}\n\nexport interface SliderOptions {\n    type?: SliderType;\n    handles?: SliderHandleOptions;\n    track?: SliderTrackOptions;\n}\n\nexport interface SliderHandleOptions {\n    style?: SliderStyle;\n    callout?: SliderCallout;\n    keyboard?: SliderKeyboardOptions;\n    aria?: SliderAriaOptions;\n}\n\nexport interface SliderAriaOptions {\n    thumb: string;\n    lowerThumb: string;\n    upperThumb: string;\n}\n\nexport interface SliderKeyboardOptions {\n    major?: number;\n    minor?: number;\n}\n\nexport interface SliderTrackOptions {\n    height?: SliderSize;\n    min?: number;\n    max?: number;\n    ticks?: SliderTicksOptions;\n    colors?: SliderTrackColors;\n}\n\nexport interface SliderTicksOptions {\n    snap?: SliderSnap;\n    major?: SliderTickOptions;\n    minor?: SliderTickOptions;\n}\n\nexport interface SliderTickOptions {\n    show?: boolean;\n    steps?: number | number[];\n    labels?: boolean;\n    formatter?: (value: number) => string | number;\n}\n\nexport interface SliderTick {\n    showTicks: boolean;\n    showLabels: boolean;\n    type: SliderTickType;\n    position: number;\n    value: number;\n    label: string | number;\n}\n\nexport interface SliderTrackColors {\n    lower?: string | string[];\n    range?: string | string[];\n    higher?: string | string[];\n}\n\nexport interface SliderCallout {\n    trigger?: SliderCalloutTrigger;\n    background?: string;\n    color?: string;\n    formatter?: (value: number) => string | number;\n}\n\nexport enum SliderThumbEvent {\n    None,\n    MouseOver,\n    MouseLeave,\n    DragStart,\n    DragEnd\n}\n\nexport enum SliderThumb {\n    Lower,\n    Upper\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ColorServiceModule } from '../../services/color/index';\n\nimport { SliderComponent } from './slider.component';\nimport { DragModule } from '../../directives/drag/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        DragModule\n    ],\n    exports: [SliderComponent],\n    declarations: [SliderComponent]\n})\nexport class SliderModule { }","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { ColorService } from '../../services/color/index';\nimport { ColorIdentifier } from '../../index';\n\n@Component({\n    selector: 'ux-spark',\n    template: `<!-- Inline Spark Chart -->\n<div *ngIf=\"inlineLabel\" class=\"ux-spark-inline-label-container\">\n\n    <div class=\"ux-spark-inline-label-left\" [innerHtml]=\"inlineLabel\"></div>\n\n    <div class=\"ux-spark-line\">\n\n        <div class=\"ux-spark-top-container\" *ngIf=\"topLeftLabel || topRightLabel\">\n            <div class=\"ux-spark-label-top-left\" *ngIf=\"topLeftLabel\" [innerHtml]=\"topLeftLabel\"></div>\n            <div class=\"ux-spark-label-top-right\" *ngIf=\"topRightLabel\" [innerHtml]=\"topRightLabel\"></div>\n        </div>\n\n        <div class=\"ux-spark ux-inline ux-spark-theme-{{theme}}\" [style.height.px]=\"barHeight\" [style.backgroundColor]=\"trackColor\" [uxTooltip]=\"tooltip\">\n            <div class=\"ux-spark-bar\" *ngFor=\"let line of values; let idx = index;\" [style.width.%]=\"line\" [style.backgroundColor]=\"barColor[idx]\"></div>\n        </div>\n\n        <div class=\"ux-spark-bottom-container\" *ngIf=\"bottomLeftLabel || bottomRightLabel\">\n            <div class=\"ux-spark-label-bottom-left\" *ngIf=\"bottomLeftLabel\" [innerHtml]=\"bottomLeftLabel\"></div>\n            <div class=\"ux-spark-label-bottom-right\" *ngIf=\"bottomRightLabel\" [innerHtml]=\"bottomRightLabel\"></div>\n        </div>\n\n    </div>\n</div>\n\n<!-- End Inline Spark Chart -->\n\n\n<!-- Non Inline Spark Chart -->\n<div *ngIf=\"!inlineLabel\">\n\n    <div class=\"ux-spark-top-container\" *ngIf=\"topLeftLabel || topRightLabel\">\n        <div class=\"ux-spark-label-top-left\" *ngIf=\"topLeftLabel\" [innerHtml]=\"topLeftLabel\"></div>\n        <div class=\"ux-spark-label-top-right\" *ngIf=\"topRightLabel\" [innerHtml]=\"topRightLabel\"></div>\n    </div>\n\n    <div class=\"ux-spark ux-spark-theme-{{theme}}\" [class.ux-spark-multi-value]=\"values.length > 1\" [style.height.px]=\"barHeight\" [style.backgroundColor]=\"trackColor\"\n        [uxTooltip]=\"tooltip\">\n        <div class=\"ux-spark-bar\" *ngFor=\"let line of value; let idx = index;\" [style.width.%]=\"line\" [style.backgroundColor]=\"barColor[idx]\"></div>\n    </div>\n\n    <div class=\"ux-spark-bottom-container\" *ngIf=\"bottomLeftLabel || bottomRightLabel\">\n        <div class=\"ux-spark-label-bottom-left\" *ngIf=\"bottomLeftLabel\" [innerHtml]=\"bottomLeftLabel\"></div>\n        <div class=\"ux-spark-label-bottom-right\" *ngIf=\"bottomRightLabel\" [innerHtml]=\"bottomRightLabel\"></div>\n    </div>\n</div>\n\n<!-- End Non Inline Spark Chart -->`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SparkComponent {\n\n    values: number[] = [];\n\n    @Input() barHeight: number = 10;\n    @Input() inlineLabel: string;\n    @Input() topLeftLabel: string;\n    @Input() topRightLabel: string;\n    @Input() bottomLeftLabel: string;\n    @Input() bottomRightLabel: string;\n    @Input() tooltip: string;\n\n    private _trackColor: string;\n    private _theme: ColorIdentifier = 'primary';    \n    private _barColor: string | string[] = [];\n    \n    @Input() \n    set theme(value: string) {\n        this._theme = this._colorService.resolveColorName(value);\n    }\n\n    get theme(): string {\n        return this._theme;\n    }\n\n    @Input() \n    set trackColor(value: string) {\n        this._trackColor = this._colorService.resolve(value);\n    }\n\n    get trackColor(): string {\n        return this._trackColor;\n    }\n\n    @Input() \n    set barColor(value: string | string[]) {\n\n        if (Array.isArray(value)) {\n            this._barColor = value.map(color => this._colorService.resolve(color));\n        } else {\n            this._barColor = [this._colorService.resolve(value)];\n        }\n    }\n\n    get barColor(): string | string[] {\n        return this._barColor;\n    }\n\n    @Input()\n    set value(value: number | number[]) {\n\n        // ensure 'value' is an array at this point\n        const values = Array.isArray(value) ? value : [value];\n\n        // get the total value of all lines\n        const total = Math.max(values.reduce((previous, current) => previous + current, 0), 100);\n\n        // figure out the percentages for each spark line\n        this.values = values.map(val => (val / total) * 100);\n    }\n\n    get value() {\n        return this.values;\n    }\n\n    constructor(private _colorService: ColorService) { }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SparkComponent } from './spark.component';\nimport { ColorServiceModule } from '../../services/color/index';\nimport { TooltipModule } from '../tooltip/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ColorServiceModule,\n        TooltipModule\n    ],\n    exports: [SparkComponent],\n    declarations: [SparkComponent]\n})\nexport class SparkModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TabComponent } from './tab/tab.component';\n\n@Injectable()\nexport class TabsetService {\n\n    tabs$ = new BehaviorSubject<TabComponent[]>([]);\n    active$ = new BehaviorSubject<TabComponent>(null);\n    focused$ = new BehaviorSubject<boolean>(false);\n    highlighted$ = new BehaviorSubject<TabComponent>(null);\n\n    add(tab: TabComponent): void {\n        this.tabs$.next([...this.tabs$.value, tab]);\n\n        // check if this is the only tab. If so select this by default\n        if (!this.active$.value) {\n            this.select(tab);\n        }\n    }\n\n    remove(tab: TabComponent): void {\n\n        // remove the tab\n        this.tabs$.next(this.tabs$.value.filter(_tab => _tab !== tab));\n    }\n\n    select(tab: TabComponent): void {\n        if (!tab.disabled) {\n            this.active$.next(tab);\n            this.highlighted$.next(tab);\n        }\n    }\n\n    selectAtIndex(index: number): void {\n\n        // if there are no tabs then do nothing\n        if (this.tabs$.value.length === 0) {\n            return;\n        }\n\n        // check if the index is within the bounds\n        if (index < 0) {\n            return this.selectAtIndex(this.tabs$.value.length - 1);\n        } else if (index >= this.tabs$.value.length) {\n            return this.selectAtIndex(0);\n        }\n\n        const target = this.tabs$.value[index];\n\n        if (target) {\n            this.select(target);\n        }\n    }\n\n    selectNextTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs after the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(index + 1);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no tab could be selected - select the first tab\n        this.selectFirstTab();\n    }\n\n    selectPreviousTab(): void {\n        // find the currently selected index\n        const index = this.tabs$.value.indexOf(this.active$.value);\n\n        // check the tabs before the active one to see if there are any selectable tabs\n        const tabs = this.tabs$.value.slice(0, index);\n\n        // check if any of the tabs are not disabled\n        for (let tab of tabs.reverse()) {\n            if (!tab.disabled) {\n                return this.select(tab);\n            }\n        }\n\n        // if we reach here then no previous tab could be selected - select the last tab\n        this.selectLastTab();\n    }\n\n    selectFirstTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex(tabIndex);\n        }\n    }\n\n    selectLastTab(): void {\n        // find the index of the first non-disabled tab\n        const tabIndex = this.tabs$.value.slice().reverse().findIndex(tab => !tab.disabled);\n\n        if (tabIndex !== -1) {\n            this.selectAtIndex((this.tabs$.value.length - 1) - tabIndex);\n        }\n    }\n} ","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { TabComponent } from './tab/tab.component';\nimport { TabsetService } from './tabset.service';\n\n@Component({\n    selector: 'ux-tabset',\n    template: `<!-- Nav tabs -->\n<ul role=\"tablist\"\n    class=\"nav nav-tabs\"\n    [class.minimal-tab]=\"minimal\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-orientation]=\"stacked === 'none' ? 'horizontal' : 'vertical'\">\n\n\t<li role=\"presentation\" \n        class=\"nav-item\"\n        *ngFor=\"let tab of tabset.tabs$ | async; let index = index\"\n        [class.active]=\"tab.active$ | async\"\n        [class.disabled]=\"tab.disabled\"\n        [ngClass]=\"tab.customClass\">\n\n        <a class=\"nav-link\"\n            [id]=\"tab.id\"\n            role=\"tab\"\n            [uxTabFocus]=\"tab\"\n            [tabindex]=\"(tab.active$ | async) ? 0 : -1\"\n            [class.highlighted]=\"(tabset.focused$ | async) && (tabset.highlighted$ | async) === tab\"            \n            (mousedown)=\"tabset.select(tab)\"\n            (focus)=\"tabset.focused$.next(true)\"\n            (blur)=\"tabset.focused$.next(false)\"\n            (mousedown)=\"tabset.focused$.next(true)\"\n            (keydown.ArrowUp)=\"selectPreviousTab($event)\"\n            (keydown.ArrowLeft)=\"selectPreviousTab($event)\"\n            (keydown.ArrowRight)=\"selectNextTab($event)\"\n            (keydown.ArrowDown)=\"selectNextTab($event)\"\n            (keydown.Home)=\"tabset.selectFirstTab(); $event.preventDefault()\"\n            (keydown.End)=\"tabset.selectLastTab(); $event.preventDefault()\"\n            [attr.aria-controls]=\"tab.id\"\n            [attr.aria-selected]=\"tab.active$ | async\"\n            [attr.aria-disabled]=\"tab.disabled\">\n\n            <span *ngIf=\"!tab.headingRef\">{{ tab.heading }}</span>\n\n            <ng-container *ngIf=\"tab.headingRef\" [ngTemplateOutlet]=\"tab.headingRef\"></ng-container>\n        </a>\n\n\t</li>\n\n</ul>\n\n<!-- Tab panes -->\n<div class=\"tab-content\">\n\t<ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [TabsetService],\n    host: {\n        '[class.tabs-left]': 'stacked === \"left\"',\n        '[class.tabs-right]': 'stacked === \"right\"',\n    }\n})\nexport class TabsetComponent {\n\n    @Input() minimal: boolean = true;\n    @Input() stacked: 'left' | 'right' | 'none' = 'none';\n    @Input('aria-label') ariaLabel: string;\n\n    constructor(public tabset: TabsetService) { }\n\n    /**\n     * Allow manual tab selected\n     */\n    select(tab: TabComponent): void {\n        this.tabset.select(tab);\n    }\n\n    selectPreviousTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowLeft = event.key === 'ArrowLeft' || event.keyCode === 37;\n        const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowLeft && this.stacked !== 'none' || arrowUp && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectPreviousTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n\n    selectNextTab(event: KeyboardEvent): void {\n\n        // determine which arrow key is pressed\n        const arrowRight = event.key === 'ArrowRight' || event.keyCode === 39;\n        const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n        // only perform action if the arrow key matches the orientation\n        if (arrowRight && this.stacked !== 'none' || arrowDown && this.stacked === 'none') {\n            return;\n        }\n\n        // perform selection\n        this.tabset.selectNextTab();\n\n        // prevent the browser from scrolling when arrow keys are pressed\n        event.preventDefault();\n    }\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, Output, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { map } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\n\nlet uniqueTabId = 0;\n\n@Component({\n    selector: 'ux-tab',\n    template: `<div role=\"tabpanel\"\n     class=\"tab-pane\"\n     [class.active]=\"active$ | async\"\n     [id]=\"id + '-panel'\"\n     [attr.aria-labelledby]=\"id\"\n     [attr.aria-hidden]=\"!(active$ | async)\">\n  <ng-content></ng-content>\n</div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TabComponent implements OnDestroy {\n\n    @Input() id: string = `ux-tab-${++uniqueTabId}`;\n    @Input() disabled: boolean = false;\n    @Input() heading: string;\n    @Input() customClass: string;\n\n    @Output() select = new EventEmitter<void>();\n    @Output() deselect = new EventEmitter<void>();\n\n    @Input() set active(value: boolean) {\n        if (value) {\n            this._tabset.select(this);\n        }\n    }\n\n    headingRef: TemplateRef<any>;\n    active$: Observable<boolean> = this._tabset.active$.pipe(map(active => active === this));\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService) {\n        _tabset.add(this);\n\n        this._subscription = this.active$.subscribe(active => active ? this.select.emit() : this.deselect.emit());\n    }\n\n    ngOnDestroy(): void {\n        this._tabset.remove(this);\n        this._subscription.unsubscribe();\n    }\n\n}","import { Directive, TemplateRef } from '@angular/core';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabHeading]'\n})\nexport class TabHeadingDirective {\n\n    constructor(templateRef: TemplateRef<any>, tab: TabComponent) {\n        tab.headingRef = templateRef;\n    }\n\n}","import { Directive, ElementRef, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { filter } from 'rxjs/operators';\nimport { TabsetService } from '../tabset.service';\nimport { TabComponent } from './tab.component';\n\n@Directive({\n    selector: '[uxTabFocus]'\n})\nexport class TabFocusDirective implements OnInit, OnDestroy {\n\n    @Input() uxTabFocus: TabComponent;\n\n    private _subscription: Subscription;\n\n    constructor(private _tabset: TabsetService, private _elementRef: ElementRef) { }\n\n    ngOnInit(): void {\n        this._subscription = this._tabset.highlighted$.pipe(\n            filter(() => this._tabset.focused$.value === true),\n            filter(() => this._tabset.highlighted$.value === this.uxTabFocus),\n        ).subscribe(() => this._elementRef.nativeElement.focus());\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TabsetComponent } from './tabset.component';\nimport { TabsetService } from './tabset.service';\nimport { TabComponent } from './tab/tab.component';\nimport { TabHeadingDirective } from './tab/tab-heading.directive';\nimport { TabFocusDirective } from './tab/tab-focus.directive';\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: [TabsetComponent, TabComponent, TabHeadingDirective],\n    declarations: [TabsetComponent, TabComponent, TabHeadingDirective, TabFocusDirective],\n})\nexport class TabsetModule { }","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline',\r\n    template: `<div class=\"timeline\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`\r\n})\r\nexport class TimelineComponent {\r\n}","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ux-timeline-event',\r\n    template: `<div class=\"timeline-badge\" [ngClass]=\"badgeColor\">\r\n    <span>{{badgeTitle}}</span>\r\n</div>\r\n<div class=\"timeline-panel\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`\r\n})\r\nexport class TimelineEventComponent {\r\n\r\n    @Input() badgeColor: string;\r\n    @Input() badgeTitle: string;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TimelineComponent } from './timeline.component';\r\nimport { TimelineEventComponent } from './timeline-event/timeline-event.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ],\r\n    declarations: [\r\n        TimelineComponent,\r\n        TimelineEventComponent\r\n    ]\r\n})\r\nexport class TimelineModule { }\r\n","import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TOGGLESWITCH_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => ToggleSwitchComponent),\n    multi: true\n};\n\nlet uniqueToggleSwitchId = 0;\n\n@Component({\n    selector: 'ux-toggleswitch',\n    template: `<label [attr.for]=\"inputId\"\n       class=\"ux-toggleswitch\"\n       [class.ux-toggleswitch-checked]=\"value\"\n       [class.ux-toggleswitch-disabled]=\"disabled\"\n       [class.ux-toggleswitch-focused]=\"focused\">\n\n    <input class=\"ux-toggleswitch-input\"\n           type=\"checkbox\"\n           role=\"switch\"\n           [id]=\"inputId\"\n           [checked]=\"value\"\n           [disabled]=\"disabled\"\n           [attr.name]=\"name\"\n           [tabindex]=\"tabindex\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-checked]=\"value\"\n           (focus)=\"focused = true\"\n           (blur)=\"focused = false\"\n           (change)=\"toggle()\"\n           (click)=\"$event.stopPropagation()\">\n\n    <div class=\"ux-toggleswitch-container\">\n        <div class=\"ux-toggleswitch-bg\"></div>\n        <div class=\"ux-toggleswitch-nub\"></div>\n    </div>\n\n    <span class=\"ux-toggleswitch-label\">\n        <ng-content></ng-content>\n    </span>\n</label>`,\n    providers: [TOGGLESWITCH_VALUE_ACCESSOR]\n})\nexport class ToggleSwitchComponent implements ControlValueAccessor {\n\n    private _toggleSwitchId: string = `ux-toggleswitch-${++uniqueToggleSwitchId}`;\n\n    @Input() id: string = this._toggleSwitchId;\n    @Input() name: string | null;\n    @Input() tabindex: number = 0;\n    @Input() clickable: boolean = true;\n    @Input() disabled: boolean = false;\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string = null;\n\n    @Output() valueChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @Input()\n    get value() {\n        return this._value;\n    }\n\n    set value(value: boolean) {\n        this._value = value;\n\n        // Update value output\n        this.valueChange.emit(value);\n\n        // Notify ngModel\n        this.onChangeCallback(value);\n        this.onTouchedCallback();\n    }\n\n    get inputId(): string {\n        return `${this.id || this._toggleSwitchId}-input`;\n    }\n\n    private _value: boolean = false;\n\n    focused: boolean = false;\n    onTouchedCallback: () => void = () => { };\n    onChangeCallback: (_: any) => void = () => { };\n\n    toggle(): void {\n        if (!this.disabled && this.clickable) {\n            this.value = !this.value;\n        }\n    }\n\n    writeValue(value: boolean): void {\n        this.value = !!value;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { ToggleSwitchComponent } from './toggleswitch.component';\n\n@NgModule({\n    imports: [ FormsModule ],\n    exports: [ ToggleSwitchComponent ],\n    declarations: [ ToggleSwitchComponent ]\n})\nexport class ToggleSwitchModule { }\n","import { Directive, HostListener, Output, EventEmitter, ElementRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxToolbarSearchButton]'\n})\nexport class ToolbarSearchButtonDirective {\n\n    @Output()\n    clicked = new EventEmitter<void>();\n\n    get width(): number {\n        return this._elementRef.nativeElement.offsetWidth;\n    }\n\n    constructor(private _elementRef: ElementRef) { }\n\n    @HostListener('click')\n    clickHandler() {\n        this.clicked.emit();\n    }\n}\n","import { Directive, ElementRef, EventEmitter, HostListener, Optional, Output } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nconst KEYS = {\n    ENTER: 13,\n    ESCAPE: 27\n};\n\n@Directive({\n    selector: '[uxToolbarSearchField]'\n})\nexport class ToolbarSearchFieldDirective {\n\n    @Output()\n    cancel = new EventEmitter<void>();\n\n    @Output()\n    submit = new EventEmitter<string>();\n\n    get text(): string {\n        // Use ngModel if specified on the host; otherwise read the DOM\n        if (this._ngModel) {\n            return this._ngModel.value;\n        }\n\n        return this._elementRef.nativeElement.value;\n    }\n\n    constructor(\n        private _elementRef: ElementRef,\n        @Optional() private _ngModel: NgModel) { }\n\n    focus() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.focus();\n        });\n    }\n\n    blur() {\n        setTimeout(() => {\n            this._elementRef.nativeElement.blur();\n        });\n    }\n\n    clear() {\n        // Use ngModel if specified on the host; otherwise use the DOM\n        if (this._ngModel) {\n            this._ngModel.reset();\n        } else {\n            this._elementRef.nativeElement.value = '';\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    keydownHandler(event: KeyboardEvent) {\n        setTimeout(() => {\n            if (event.keyCode === KEYS.ENTER) {\n                this.submit.emit(this.text);\n            } else if (event.keyCode === KEYS.ESCAPE) {\n                this._elementRef.nativeElement.blur();\n                this.cancel.emit();\n            }\n        });\n    }\n}\n","import { animate, AnimationEvent, state, style, transition, trigger } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output } from '@angular/core';\nimport { ColorService } from '../../services/color/color.service';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\n\n\n@Component({\n    selector: 'ux-toolbar-search',\n    template: `<ng-content></ng-content>`,\n    animations: [\n        trigger('expanded', [\n            state(\n                'collapsed',\n                style({\n                    width: '{{initialWidth}}'\n                }),\n                {\n                    params: { initialWidth: '30px' }\n                }\n            ),\n            state(\n                'expanded',\n                style({\n                    width: '100%'\n                })\n            ),\n            transition('collapsed <=> expanded', [animate('0.3s ease-out')])\n        ])\n    ]\n})\nexport class ToolbarSearchComponent implements AfterContentInit {\n\n    @HostBinding('class.expanded')\n    @Input()\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        this._expanded = value;\n\n        this.expandedChange.emit(value);\n\n        if (value) {\n            // Set focus on the input when expanded\n            this.field.focus();\n        } else {\n            // Clear text when contracted\n            this.field.clear();\n\n            // Remove focus (works around an IE issue where the caret remains visible)\n            this.field.blur();\n        }\n    }\n\n    @Input()\n    @HostBinding('class')\n    direction: 'left' | 'right' = 'right';\n\n    @Input()\n    @HostBinding('class.inverse')\n    inverse = false;\n\n    @Input()\n    set background(value: string) {\n        this.backgroundColor = this._colorService.resolve(value) || 'transparent';\n    }\n\n    @Output()\n    expandedChange = new EventEmitter<boolean>();\n\n    @Output()\n    search = new EventEmitter<string>();\n\n    private _expanded: boolean = false;\n\n    @HostBinding('@expanded')\n    get expandedAnimation(): any {\n        return {\n            value: this.expanded ? 'expanded' : 'collapsed',\n            params: {\n                initialWidth: this.button.width + 'px'\n            }\n        };\n    }\n\n    @HostBinding('style.position') position = 'relative';\n    @HostBinding('style.background-color') backgroundColor = 'transparent';\n    @ContentChild(ToolbarSearchFieldDirective) field: ToolbarSearchFieldDirective;\n    @ContentChild(ToolbarSearchButtonDirective) button: ToolbarSearchButtonDirective;\n\n    private _placeholder: HTMLElement;\n\n    constructor(\n        private _elementRef: ElementRef,\n        private _colorService: ColorService,\n        @Inject(DOCUMENT) private _document: any) {\n    }\n\n    ngAfterContentInit() {\n        // Subscribe to the submit event on the input field, triggering the search event\n        this.field.submit.subscribe((text: string) => this.search.emit(text));\n\n        // Subscribe to cancel events coming from the input field\n        this.field.cancel.subscribe(() => this.expanded = false);\n\n        // Subscribe to the button click event\n        this.button.clicked.subscribe(() => {\n            if (this.expanded && this.field.text) {\n                this.search.emit(this.field.text);\n            } else {\n                this.expanded = !this.expanded;\n            }\n        });\n\n        // Create placeholder element to avoid changing layout when switching to position: absolute\n        this.createPlaceholder();\n    }\n\n    @HostListener('@expanded.start', ['$event'])\n    animationStart(event: AnimationEvent) {\n        if (event.toState === 'expanded') {\n            this.position = 'absolute';\n            this.enablePlaceholder(true);\n        }\n    }\n\n    @HostListener('@expanded.done', ['$event'])\n    animationDone(event: AnimationEvent) {\n        if (event.toState === 'collapsed') {\n            this.position = 'relative';\n            this.enablePlaceholder(false);\n        }\n    }\n\n    private createPlaceholder() {\n        // Get width and height of the component\n        const styles = getComputedStyle(this._elementRef.nativeElement);\n\n        // Create invisible div with the same dimensions\n        this._placeholder = this._document.createElement('div');\n        this._placeholder.style.display = 'none';\n        this._placeholder.style.width = this.button.width + 'px';\n        this._placeholder.style.height = styles.height;\n        this._placeholder.style.visibility = 'hidden';\n\n        // Add as a sibling\n        this._elementRef.nativeElement.parentNode.insertBefore(this._placeholder, this._elementRef.nativeElement);\n    }\n\n    private enablePlaceholder(enabled: boolean) {\n        this._placeholder.style.display = (enabled ? 'inline-block' : 'none');\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ToolbarSearchComponent } from './toolbar-search.component';\nimport { ToolbarSearchFieldDirective } from './toolbar-search-field.directive';\nimport { ToolbarSearchButtonDirective } from './toolbar-search-button.directive';\n\nconst DECLARATIONS = [\n    ToolbarSearchComponent,\n    ToolbarSearchFieldDirective,\n    ToolbarSearchButtonDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class ToolbarSearchModule { }\n","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollLoading]' \n})\nexport class VirtualScrollLoadingDirective { }","import { Directive } from '@angular/core';\n\n@Directive({\n    selector: '[uxVirtualScrollLoadButton]' \n})\nexport class VirtualScrollLoadButtonDirective { }","import { Directive } from '@angular/core';\n\n@Directive({ \n    selector: '[uxVirtualScrollCell]' \n})\nexport class VirtualScrollCellDirective {\n\n}","import { Component, OnInit, EventEmitter, Output, Input, HostListener, ElementRef, AfterContentInit, ContentChild, TemplateRef, OnDestroy, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n    selector: 'ux-virtual-scroll',\n    template: `<div class=\"virtual-scroll-content-height\" [style.height.px]=\"getTotalHeight()\"></div>\n<div class=\"virtual-scroll-content\" [style.transform]=\"'translateY(' + scrollTop + 'px)'\">\n\n    <!-- Virtually Render Cells -->\n    <ng-container *ngFor=\"let cell of cells | async\">\n        <ng-container *ngTemplateOutlet=\"cellTemplate; context: { cell: cell }\"></ng-container>\n    </ng-container>\n\n    <!-- Loading Indicator -->\n    <ng-container *ngIf=\"loadingIndicatorTemplate && isLoading\" [ngTemplateOutlet]=\"loadingIndicatorTemplate\"></ng-container>\n\n    <!-- Loading Button -->\n    <div class=\"virtual-scroll-load-button\" *ngIf=\"loadButtonTemplate && !loadOnScroll && !loadingComplete && !isLoading\" (click)=\"loadNextPage()\">\n        <ng-container *ngTemplateOutlet=\"loadButtonTemplate\"></ng-container>\n    </div>\n    \n</div>`\n})\nexport class VirtualScrollComponent implements OnInit, AfterContentInit, OnDestroy {\n\n    @Input() collection: Observable<any[]> = Observable.create();\n    @Input() cellHeight: number;\n    @Input() loadOnScroll: boolean = true;\n\n    @Output() loading: EventEmitter<number> = new EventEmitter<number>();\n\n    @ContentChild(VirtualScrollCellDirective, { read: TemplateRef }) cellTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadingDirective, { read: TemplateRef }) loadingIndicatorTemplate: TemplateRef<any>;\n    @ContentChild(VirtualScrollLoadButtonDirective, { read: TemplateRef }) loadButtonTemplate: TemplateRef<any>;\n\n    cells: BehaviorSubject<any[]> = new BehaviorSubject([]);\n    scrollTop: number = 0;\n    isLoading: boolean = false;\n    pageNumber: number = 0;\n    data: any[] = [];\n    loadingComplete: boolean = false;\n\n    private _subscription: Subscription;\n    private _height: number;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService) {\n\n        // watch for any future changes to size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => this._height = event.height);\n    }\n\n    ngOnInit() {\n\n        if (!this.cellHeight) {\n            throw new Error('Virtual Scroll Component requires \"cellHeight\" property to be defined.');\n        }\n\n        // subscribe to the collection\n        this.setupObservable();\n\n        // load the first page of data\n        this.loadNextPage();\n    }\n\n    ngAfterContentInit(): void {\n        // re-render cells now that we can display any loading indicator or loading button\n        this.renderCells();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.collection && changes.collection.currentValue !== changes.collection.previousValue && !changes.collection.isFirstChange()) {\n            this.setupObservable();\n            this.reset();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._subscription.unsubscribe();\n    }\n\n    setupObservable(): void {\n\n        // if there is a current subscription, unsubscribe\n        if (this._subscription && this._subscription.unsubscribe) {\n            this._subscription.unsubscribe();\n        }\n\n        this._subscription = this.collection.subscribe(collection => {\n            this.data.push(...collection);\n            this.renderCells();\n            this.isLoading = false;\n        }, null, () => {\n            this.loadingComplete = true;\n        });\n    }\n\n    @HostListener('scroll') renderCells(): void {\n        this.cells.next(this.getVisibleCells());\n\n        if (this.loadOnScroll && !this.isLoading && !this.loadingComplete) {\n            const remainingScroll = this._elementRef.nativeElement.scrollHeight - (this._elementRef.nativeElement.scrollTop + this._elementRef.nativeElement.clientHeight);\n\n            // if the current cells take up less than the height of the component then load the next page\n            if (remainingScroll <= this._elementRef.nativeElement.clientHeight) {\n                this.loadNextPage();\n            }\n        }\n    }\n\n    getVisibleCells(): any[] {\n\n        // store the initial element height\n        if (!this._height) {\n            this._height = this._elementRef.nativeElement.offsetHeight;\n        }\n\n        // perform some calculations\n        const scrollTop = this._elementRef.nativeElement.scrollTop;\n        const startCell = Math.floor(scrollTop / this.cellHeight);\n        const endCell = Math.ceil(this._height / this.cellHeight) + 1;\n\n        // update the scroll position\n        this.scrollTop = scrollTop - (scrollTop % this.cellHeight);\n\n        // return a sublist of items visible on the screen\n        return this.data.slice(startCell, startCell + endCell);\n    }\n\n    getTotalHeight(): number {\n        return this.cellHeight * this.data.length;\n    }\n\n    loadNextPage(): void {\n        this.isLoading = true;\n        this.loading.next(this.pageNumber);\n        this.pageNumber++;\n    }\n\n    reset(): void {\n\n        // reset all values\n        this.scrollTop = 0;\n        this.data = [];\n        this._height = undefined;\n        this.pageNumber = 0;\n        this.loadingComplete = false;\n\n        // set scroll position\n        this._elementRef.nativeElement.scrollTop = 0;\n\n        // clear the current cells\n        this.renderCells();\n\n        // reload first page\n        this.loadNextPage();\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VirtualScrollComponent } from './virtual-scroll.component';\nimport { ResizeModule } from '../../directives/resize/index';\nimport { VirtualScrollLoadingDirective } from './directives/virtual-scroll-loading.directive';\nimport { VirtualScrollLoadButtonDirective } from './directives/virtual-scroll-load-button.directive';\nimport { VirtualScrollCellDirective } from './directives/virtual-scroll-cell.directive';\n\nconst DECLARATIONS = [\n    VirtualScrollComponent,\n    VirtualScrollLoadingDirective,\n    VirtualScrollLoadButtonDirective,\n    VirtualScrollCellDirective\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class VirtualScrollModule { }\n","import { AfterViewInit, Directive, ElementRef, HostListener, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxAutoGrow]'\n})\nexport class AutoGrowDirective implements AfterViewInit {\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) {\n    // ensure this is a textarea or else throw error\n    if (_elementRef.nativeElement.tagName.toLowerCase() !== 'textarea') {\n      throw new Error('uxAutoGrow directive can only be used on <textarea> elements.');\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.update();\n  }\n\n  @HostListener('input')\n  update(): void {\n\n    // perform sizing\n    this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'hidden');\n    this._renderer.setStyle(this._elementRef.nativeElement, 'height', 'auto');\n\n    // get the new total height and element height\n    const { scrollHeight } = this._elementRef.nativeElement;\n    const { maxHeight } = getComputedStyle(this._elementRef.nativeElement);\n\n    // determine what the maximum allowed height is\n    const maximum = !isNaN(parseFloat(maxHeight)) ? parseFloat(maxHeight) : Infinity;\n\n    // if there is a max height specifed we want to show the scrollbars\n    if (maximum < scrollHeight) {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'overflowY', 'auto');\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', maximum + 'px');\n    } else {\n      this._renderer.setStyle(this._elementRef.nativeElement, 'height', scrollHeight + 'px');\n    }\n  }\n\n}","import { NgModule } from '@angular/core';\n\nimport { AutoGrowDirective } from './auto-grow.directive';\n\n@NgModule({\n    exports: [AutoGrowDirective],\n    declarations: [AutoGrowDirective]\n})\nexport class AutoGrowModule { }\n","import { Directive, ElementRef, EventEmitter, Input, OnInit, Output, Renderer2 } from '@angular/core';\n\n@Directive({\n  selector: '[uxFixedHeaderTable]'\n})\nexport class FixedHeaderTableDirective implements OnInit {\n\n  @Input() tableHeight: number | string;\n  @Output() tablePaging: EventEmitter<number> = new EventEmitter<number>();\n\n  private _tableHead: HTMLElement;\n  private _tableBody: HTMLElement;\n\n  constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n  ngOnInit(): void {\n\n    // add class to the table\n    this._renderer.addClass(this._elementRef.nativeElement, 'ux-fixed-header-table');\n\n    // locate the important elements\n    this._tableHead = this._elementRef.nativeElement.querySelector('thead');\n    this._tableBody = this._elementRef.nativeElement.querySelector('tbody');\n\n    // bind to scroll events on the table body\n    this._renderer.listen(this._tableBody, 'scroll', this.onScroll.bind(this));\n\n    // resize the table header to account for scrollbar\n    this.setLayout();\n\n    // trigger the loading of the first page\n    this.tablePaging.emit();\n  }\n\n  /**\n   * Get the table element\n   * Primarily used by column width directive\n   */\n  getTable(): HTMLTableElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /**\n   * Handle scroll events\n   */\n  private onScroll(): void {\n\n    // determine if we are scrolled to the bottom and if so load the next page\n    if (this._tableBody.scrollTop === (this._tableBody.scrollHeight - this._tableBody.offsetHeight)) {\n      this.tablePaging.emit();\n    }\n  }\n\n  /**\n   * Update the size of the table header to account for the scrollbar.\n   * This is important to keep the columns aligned\n   */\n  private setLayout(): void {\n\n    // calculate the size of the scrollbar\n    const scrollbar = this._tableBody.offsetWidth - this._tableBody.clientWidth;\n\n    // add padding to the header to account for this\n    this._renderer.setStyle(this._tableHead, 'padding-right', scrollbar + 'px');\n\n    // set the desired height of the table body\n    this._renderer.setStyle(this._tableBody, 'height', typeof this.tableHeight === 'number' ? `${this.tableHeight}px` : this.tableHeight);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { FixedHeaderTableDirective } from './fixed-header-table.directive';\n\n@NgModule({\n    exports: [FixedHeaderTableDirective],\n    declarations: [FixedHeaderTableDirective]\n})\nexport class FixedHeaderTableModule { }\n","import { Directive, ElementRef, HostBinding, Input, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\n\n@Directive({\n    selector: '[uxFloatLabel]',\n    host: {\n        'class': 'ux-float-label'\n    }\n})\nexport class FloatLabelDirective implements OnInit, OnChanges, OnDestroy {\n\n    @Input('uxFloatLabel')\n    input: HTMLInputElement;\n\n    @Input()\n    value: any;\n\n    @Input()\n    mode: 'focus' | 'input' = 'focus';\n\n    @HostBinding('class.ux-float-label-raised')\n    raised: boolean = false;\n\n\n    private _focused = false;\n    private _eventHandles: any[] = [];\n\n    constructor(private _elementRef: ElementRef, private _renderer: Renderer2) { }\n\n    ngOnInit(): void {\n        this._eventHandles.push(\n            this._renderer.listen(this.input, 'focus', this.inputFocus.bind(this)),\n            this._renderer.listen(this.input, 'blur', this.inputBlur.bind(this)),\n            this._renderer.listen(this.input, 'input', this.inputChange.bind(this))\n        );\n\n        // Check initial input value\n        this.raised = this.hasText();\n\n        // Ensure that the `for` attribute is set\n        if (!this._elementRef.nativeElement.getAttribute('for') && this.input.getAttribute('id')) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'for', this.input.getAttribute('id'));\n        }\n    }\n\n    ngOnChanges(): void {\n        if (!(this.mode === 'focus' && this._focused)) {\n            this.raised = this.hasText();\n        }\n    }\n\n    ngOnDestroy(): void {\n        // Unsubscribe event handles\n        this._eventHandles.forEach((eventHandle) => eventHandle());\n    }\n\n    private hasText(): boolean {\n        if (this.value === undefined) {\n            return !!this.input.value;\n        }\n        return !!this.value;\n    }\n\n    private inputFocus(): void {\n        if (this.mode === 'focus') {\n            this._focused = true;\n            this.raised = true;\n        }\n    }\n\n    private inputBlur(): void {\n        if (this.mode === 'focus') {\n            this._focused = false;\n            this.raised = this.hasText();\n        }\n    }\n\n    private inputChange(): void {\n        if (this.mode === 'input') {\n            this.raised = this.hasText();\n        }\n    }\n}","import { NgModule } from '@angular/core';\n\nimport { FloatLabelDirective } from './float-label.directive';\n\n@NgModule({\n    imports: [],\n    exports: [FloatLabelDirective],\n    declarations: [FloatLabelDirective],\n    providers: [],\n})\nexport class FloatLabelModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\n@Injectable()\nexport class HelpCenterService {\n\n    items: BehaviorSubject<HelpCenterItem[]> = new BehaviorSubject<HelpCenterItem[]>([]);\n\n    registerItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // add the new item to the list\n        items.push(item);\n\n        // update the observable\n        this.items.next(items);\n    }\n\n    unregisterItem(item: HelpCenterItem): void {\n\n        // get the current items\n        let items = this.items.getValue();\n\n        // remove the item being unregistered\n        items = items.filter(itm => itm !== item);\n\n        // update the observable\n        this.items.next(items);\n    }\n}\n\nexport interface HelpCenterItem {\n    icon?: string;\n    title: string;\n    select?: () => void;\n}","import { Directive, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HelpCenterService, HelpCenterItem } from './help-center.service';\n\n@Directive({ selector: '[uxHelpCenterItem]' })\nexport class HelpCenterItemDirective implements OnInit, OnDestroy {\n\n    @Input() uxHelpCenterItem: HelpCenterItem;\n\n    constructor(private _helpCenterService: HelpCenterService) { }\n\n    ngOnInit(): void {\n\n        // register the item in the service\n        this._helpCenterService.registerItem(this.uxHelpCenterItem);\n    }\n\n    ngOnDestroy(): void {\n        // remove this item when it is destroyed\n        this._helpCenterService.unregisterItem(this.uxHelpCenterItem);\n    }\n}","import { NgModule } from '@angular/core';\nimport { HelpCenterItemDirective } from './help-center-item.directive';\nimport { HelpCenterService } from './help-center.service';\n\n@NgModule({\n    imports: [],\n    exports: [HelpCenterItemDirective],\n    declarations: [HelpCenterItemDirective],\n    providers: [HelpCenterService],\n})\nexport class HelpCenterModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\n@Injectable()\nexport class HoverActionService {\n\n    active: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    private _container: HoverActionContainerDirective;\n    private _focused: boolean = false;\n    private _hovered: boolean = false;\n    private _actions: HoverActionDirective[] = [];\n\n    register(action: HoverActionDirective): void {\n        this._actions.push(action);\n    }\n\n    unregister(action: HoverActionDirective): void {\n        this._actions = this._actions.filter(actn => actn !== action);\n    }\n\n    setContainer(container: HoverActionContainerDirective): void {\n        this._container = container;\n    }\n\n    setFocusState(focus: boolean): void {\n        this._focused = focus;\n        this.updateVisibility();\n    }\n\n    setHoverState(hover: boolean): void {\n        this._hovered = hover;\n        this.updateVisibility();\n    }\n\n    next(): void {\n\n        // if container has focus then focus the first hover action\n        if (this.containerHasFocus()) {\n            this.focusActionAtIndex(0);\n            return this.updateVisibility();\n        }\n\n        // if a hover action has focus then focus the next action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() + 1;\n            this.focusActionAtIndex(index);\n            this.updateVisibility();\n        }\n    }\n\n    previous(): void {\n        // if a hover action has focus then focus the previous action\n        if (this.actionHasFocus()) {\n            let index = this.getFocusedActionIndex() - 1;\n\n            if (index >= 0) {\n                this.focusActionAtIndex(index);\n            } else {\n                this._container.focus();\n            }\n        }\n\n        this.updateVisibility();\n    }\n\n    updateVisibility(): void {\n        this.active.next(this._focused || this._hovered || this.actionHasFocus());\n    }\n\n    private focusActionAtIndex(index: number): void {\n        if (index >= 0 && index < this._actions.length) {\n            this._actions[index].focus();\n        }\n    }\n\n    private getFocusedActionIndex(): number {\n        return this._actions.findIndex(action => action === this.getFocusedAction());\n    }\n\n    private containerHasFocus(): boolean {\n        return this._focused;\n    }\n\n    private actionHasFocus(): boolean {\n        return !!this.getFocusedAction();\n    }\n\n    private getFocusedAction(): HoverActionDirective {\n        return this._actions.find(action => action.focused);\n    }\n}","import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { HoverActionService } from './hover-action.service';\n\n@Directive({\n    selector: '[uxHoverActionContainer]',\n    providers: [HoverActionService],\n    host: {\n        '[class.hover-action-container-active]': 'active',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionContainerDirective implements OnDestroy {\n\n    @Input() tabindex: number = 0;\n    active: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n        // register the container element with the service\n        this._hoverActionService.setContainer(this);\n\n        // apply a class based on the active state of the container and it's actions\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this.active$.unsubscribe();\n    }\n\n    @HostListener('click') focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this._hoverActionService.setFocusState(true);\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this._hoverActionService.setFocusState(false);\n    }\n\n    @HostListener('mouseenter') onHover(): void {\n        this._hoverActionService.setHoverState(true);\n    }\n\n    @HostListener('mouseleave') onLeave(): void {\n        this._hoverActionService.setHoverState(false);\n    }\n\n    @HostListener('keydown.arrowright') next(): void {\n        this._hoverActionService.next();\n    }\n}","import { Directive, ElementRef, HostListener, OnDestroy, Input } from '@angular/core';\nimport { HoverActionService } from './hover-action.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Directive({\n    selector: '[uxHoverAction]',\n    host: {\n        '[class.hover-action-active]': 'active',\n        '[class.hover-action-focused]': 'focused',\n        '[tabindex]': 'tabindex'\n    }\n})\nexport class HoverActionDirective implements OnDestroy {\n\n    @Input() tabindex: number = 1;\n    active: boolean = false;\n    focused: boolean = false;\n\n    private active$: Subscription;\n\n    constructor(private _elementRef: ElementRef, private _hoverActionService: HoverActionService) {\n\n        // register the action\n        this._hoverActionService.register(this);\n\n        // watch for changes to the activeness of the container\n        this.active$ = this._hoverActionService.active.subscribe(active => this.active = active);\n    }\n\n    ngOnDestroy(): void {\n        this._hoverActionService.unregister(this);\n        this.active$.unsubscribe();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    @HostListener('focus') onFocus(): void {\n        this.focused = true;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('blur') onBlur(): void {\n        this.focused = false;\n        this._hoverActionService.updateVisibility();\n    }\n\n    @HostListener('keydown.arrowleft', ['$event']) previous(event: MouseEvent): void {\n        event.stopPropagation();        \n        this._hoverActionService.previous();\n    }\n\n    @HostListener('keydown.arrowright', ['$event']) next(event: MouseEvent): void {\n        event.stopPropagation();\n        this._hoverActionService.next();\n    }\n}","import { NgModule } from '@angular/core';\nimport { HoverActionContainerDirective } from './hover-action-container.directive';\nimport { HoverActionDirective } from './hover-action.directive';\n\nconst DECLARATIONS = [\n    HoverActionDirective,\n    HoverActionContainerDirective\n];\n\n@NgModule({\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS\n})\nexport class HoverActionModule { }\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n    selector: '[uxLayoutSwitcherItem]'\n})\nexport class LayoutSwitcherItemDirective {\n\n    @Input('uxLayoutSwitcherItem') private _config: LayoutSwitcherItem;\n\n    private _embeddedView: EmbeddedViewRef<any>;\n\n    constructor(private _templateRef: TemplateRef<any>, private _viewContainerRef: ViewContainerRef) { }\n\n    getLayout(): TemplateRef<any> {\n        return this._templateRef;\n    }\n\n    getConfig(): LayoutSwitcherItem {\n        return this._config;\n    }\n\n    activate(): void {\n        this._embeddedView = this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n\n    deactivate(): void {\n        let index = this._viewContainerRef.indexOf(this._embeddedView);\n        this._viewContainerRef.remove(index);\n        this._embeddedView = null;\n    }\n\n}\n\nexport interface LayoutSwitcherItem {\n    group?: string;\n    minWidth?: number;\n    maxWidth?: number;\n}","import { Directive, ElementRef, QueryList, ContentChildren, Input, AfterContentInit, ViewContainerRef, OnChanges, SimpleChanges } from '@angular/core';\nimport { ResizeService } from '../resize/index';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\n\n@Directive({\n    selector: '[uxLayoutSwitcher]'\n})\nexport class LayoutSwitcherDirective implements AfterContentInit, OnChanges {\n\n    @Input() group: string;\n    @ContentChildren(LayoutSwitcherItemDirective) private _layouts: QueryList<LayoutSwitcherItemDirective>;\n    \n    private _width: number;\n    private _activeLayout: LayoutSwitcherItemDirective;\n\n    constructor(private _elementRef: ElementRef, resizeService: ResizeService,\n        private _viewContainerRef: ViewContainerRef) {\n\n        // watch for changes to the container size\n        resizeService.addResizeListener(_elementRef.nativeElement).subscribe(event => {\n            this._width = event.width;\n\n            // render the appropriate layout\n            this.updateActiveLayout();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n\n        // if the active group has changed then render the appropriate layout\n        if (changes.group.currentValue !== changes.group.previousValue) {\n            this.updateActiveLayout();\n        }\n    }\n\n    getActiveLayout(): LayoutSwitcherItemDirective | null {\n\n        // if there are currently no layouts then do nothing\n        if (!this._layouts) {\n            return null;\n        }\n\n        // otherwise find layouts that match the active group and that meet the constraints\n        return this._layouts.filter(layout => this.group === layout.getConfig().group).find(layout => {\n\n            let minWidth = layout.getConfig().minWidth || 0;\n            let maxWidth = layout.getConfig().maxWidth || Infinity;\n\n            return this._width >= minWidth && this._width < maxWidth;\n        });\n    }\n\n    updateActiveLayout(): void {\n\n        // get the layout that should be shown\n        let layout = this.getActiveLayout();\n\n        // check if we are currently showing the layout\n        if (this._activeLayout === layout) {\n            return;\n        }\n\n        // remove the current layout\n        if (this._activeLayout) {\n            this._activeLayout.deactivate();\n        }\n\n        // store the new active layout\n        this._activeLayout = layout;\n\n        // if there is an active layout then activate\n        if (this._activeLayout) {\n            this._activeLayout.activate();\n        }\n    }\n\n    ngAfterContentInit(): void {\n\n        // store the initial current element width\n        this._width = this._elementRef.nativeElement.offsetWidth;\n\n        // render the appropriate layout - need a delay as Angular doesn't like changes like this in these lifecycle hooks\n        requestAnimationFrame(this.updateActiveLayout.bind(this));\n    }\n}","import { NgModule } from '@angular/core';\nimport { LayoutSwitcherDirective } from './layout-switcher.directive';\nimport { LayoutSwitcherItemDirective } from './layout-switcher-item.directive';\nimport { ResizeModule } from '../resize/index';\n\nconst DECLARATIONS = [\n    LayoutSwitcherDirective,\n    LayoutSwitcherItemDirective\n];\n\n@NgModule({\n    imports: [\n        ResizeModule\n    ],\n    exports: DECLARATIONS,\n    declarations: DECLARATIONS,\n    providers: [],\n})\nexport class LayoutSwitcherModule { }\n","import { AfterViewInit, Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[uxOverflowObserver], [uxOverflowHorizontalObserver], [uxOverflowVerticalObserver]',\n  exportAs: 'ux-overflow-observer'\n})\nexport class OverflowDirective implements OnInit, AfterViewInit, OnDestroy {\n\n  /** Allow a observable to be used to check for overflow */\n  @Input() trigger: Observable<void>;\n\n  /** Allow overflow to be within a range before emitting */\n  @Input() tolerance: number = 0;\n\n  /** Emit when there is a change to the overflow state - horizontal or vertical */\n  @Output() uxOverflowObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the horizontal axis */\n  @Output() uxOverflowHorizontalObserver = new EventEmitter<boolean>();\n\n  /** Emit when there is a change to overflow on the vertical axis */\n  @Output() uxOverflowVerticalObserver = new EventEmitter<boolean>();\n\n  /** Store the overflow state on both axis */\n  private _state = { horizontalOverflow: false, verticalOverflow: false };\n\n  /** Unsubscribe from all the observables */\n  private _onDestroy = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef) { }\n\n  /** Set up the trigger if specified */\n  ngOnInit(): void {\n    if (this.trigger) {\n      this.trigger.pipe(takeUntil(this._onDestroy)).subscribe(() => this.checkForOverflow());\n    }\n  }\n\n  /** Perform an intial check for overflow */\n  ngAfterViewInit(): void {\n    requestAnimationFrame(() => this.checkForOverflow());\n  }\n\n  /** Unsubscribe from the trigger */\n  ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Programmatically trigger check for overflow */\n  checkForOverflow(): void {\n\n    const { offsetWidth, offsetHeight, scrollWidth, scrollHeight } = this._elementRef.nativeElement;\n    const horizontalOverflow = (scrollWidth - offsetWidth) > this.tolerance;\n    const verticalOverflow = (scrollHeight - offsetHeight) > this.tolerance;\n\n    if (horizontalOverflow !== this._state.horizontalOverflow) {\n      this.uxOverflowHorizontalObserver.emit(horizontalOverflow);\n    }\n\n    if (verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowVerticalObserver.emit(verticalOverflow);\n    }\n\n    if (horizontalOverflow !== this._state.horizontalOverflow || verticalOverflow !== this._state.verticalOverflow) {\n      this.uxOverflowObserver.emit((horizontalOverflow || verticalOverflow));\n    }\n\n    // store the state\n    this._state = { horizontalOverflow, verticalOverflow };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OverflowDirective } from './overflow/overflow-observer.directive';\n\n@NgModule({\n  exports: [OverflowDirective],\n  declarations: [OverflowDirective]\n})\nexport class ObserversModule { }\n","import { SelectionService } from '../selection.service';\n\nexport class SelectionStrategy {\n\n  constructor(protected selectionService?: SelectionService) { }\n\n  setSelectionService(selectionService: SelectionService): void {\n    this.selectionService = selectionService;\n  }\n\n  mousedown(event: MouseEvent, data: any): void { }\n\n  click(event: MouseEvent, data: any): void { }\n\n  keydown(event: KeyboardEvent, data: any): void { }\n\n  /**\n   * Select the item - default behavior\n   */\n  select(...data: any[]): void {\n    this.selectionService.select(...data);\n  }\n\n  /**\n   * Toggle the item's selected state - default behavior\n   */\n  toggle(...data: any[]): void {\n    this.selectionService.toggle(...data);\n  }\n\n  /**\n   * Deselect the item - default behavior\n   */\n  deselect(...data: any[]): void {\n    this.selectionService.deselect(...data);\n  }\n\n  /**\n   * Select all items - default behavior\n   */\n  selectAll(): void {\n    this.select(...this.selectionService.dataset);\n  }\n\n  /**\n   * Deselect all items - default behavior\n   */\n  deselectAll(): void {\n    this.deselect(...this.selectionService.dataset);\n  }\n\n  destroy(): void { }\n}\n","import { KeyCode } from './keycode.enum';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class RowSelectionStrategy extends SelectionStrategy {\n\n  // store the most recently selected row\n  private _selection: Selection = { start: null, end: null };\n\n  /**\n   * By default on shift click the browser will highlight\n   * text. This looks bad and we don't want this to occur\n   */\n  mousedown(event: MouseEvent): void {\n    event.preventDefault();\n  }\n\n  /**\n   * When a row is clicked we want to handle selection\n   */\n  click(event: MouseEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if the shift key is pressed we want to perform a multiple selection\n    if (shiftKey) {\n      return this.multipleSelect(data);\n    }\n\n    // if the control key is pressed we want to perform an additive toggle selection\n    if (ctrlKey) {\n      return this.toggle(data);\n    }\n\n    // perform a single selection where all other rows are deselected\n    this.singleSelect(data);\n  }\n\n  /**\n   * To support full keyboard control we need to support the following:\n   * 1. Arrow keys to navigate up and down\n   * 2. Spacebar to toggle selection\n   * 3. Shift + Arrow keys to multiple select\n   * 4. Ctrl + Arrow keys to allow retained selection and navigation\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n\n      case KeyCode.UpArrow:\n      case KeyCode.DownArrow:\n        event.preventDefault();\n        this.navigate(event, data);\n        break;\n\n      case KeyCode.Spacebar:\n        event.preventDefault();\n        this.selectionService.strategy.toggle(data, true);\n        break;\n\n    }\n  }\n\n  /**\n   * Override the standard toggle function to store or clear the\n   * most recently selected item\n   */\n  toggle(data: any, activate: boolean = false): void {\n    super.toggle(data);\n\n    // store or clear the selection\n    this.selectionService.isSelected(data) ? this.setSelectionStart(data) : this.clearSelection();\n\n    // if we want to keep the item activated then activate\n    if (activate) {\n      this.selectionService.activate(data);\n    }\n  }\n\n  /**\n   * Clear all other selected items and select only\n   * the most recently selected item\n   */\n  private singleSelect(data: any): void {\n\n    // deselect all other rows if neither modifier key is pressed\n    this.deselectAll();\n\n    // select the current row\n    this.select(data);\n\n    // store the current item as the selection start\n    this.setSelectionStart(data);\n  }\n\n  /**\n   * Handle multiple selection:\n   * 1. If no start item selected - select it\n   * 2. If a start item has been selected - select all in between\n   * 3. If a start and end item have been selected clear the range and then select the new range\n   */\n  protected multipleSelect(data: any): void {\n\n    // if no selection currently exists then perform initial selection\n    if (!this._selection.start) {\n\n      // select the row\n      this.select(data);\n\n      // store the starting point\n      return this.setSelectionStart(data);\n    }\n\n    // if a multiple selection already took place - clear the previous selection\n    if (this._selection.start && this._selection.end) {\n      this.deselect(...this.getSelectedItems());\n    }\n\n    // set the new selection end point\n    this.setSelectionEnd(data);\n\n    // select all the items in the range\n    this.select(...this.getSelectedItems());\n  }\n\n  /**\n   * Set the selection start point. If there was previously a\n   * selection end point then clear it as this is a new selection\n   */\n  private setSelectionStart(data: any): void {\n    this._selection.start = data;\n    this._selection.end = null;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Set the selection end point\n   */\n  private setSelectionEnd(data: any): void {\n    this._selection.end = data;\n\n    // activate the item\n    this.selectionService.activate(data);\n  }\n\n  /**\n   * Clear both start and end selection points\n   */\n  protected clearSelection(deactivate: boolean = true): void {\n\n    // reset the selected item\n    this._selection = { start: null, end: null };\n\n    // remove the current active item\n    if (deactivate) {\n      this.selectionService.deactivate();\n    }\n  }\n\n  /**\n   * Determine all the items affected by the current selection.\n   * Note that the end point may be above the start point so\n   * we need to account for this.\n   */\n  private getSelectedItems(): any[] {\n\n    // get the latest dataset\n    const { dataset } = this.selectionService;\n\n    // get the indexes of the start and end point\n    const startIdx = dataset.indexOf(this._selection.start);\n    const endIdx = dataset.indexOf(this._selection.end);\n\n    // get the region of the array that is selected - note the endIdx may be before the startIdx so account for this\n    return dataset.slice(Math.min(startIdx, endIdx), Math.max(startIdx, endIdx) + 1);\n  }\n\n  /**\n   * Activate the sibling item when arrow keys are pressed\n   */\n  private navigate(event: KeyboardEvent, data: any): void {\n\n    // determine which modifier keys are pressed\n    const { ctrlKey, shiftKey } = event;\n\n    // if no modifier keys are pressed then deselect all and clear the selection\n    if (!ctrlKey && !shiftKey) {\n      this.deselectAll();\n      this.clearSelection(false);\n    }\n\n    // activate the sibling - if the up arrow is pressed then navigate to the previous sibling\n    const sibling = this.selectionService.activateSibling(event.keyCode === KeyCode.UpArrow);\n\n    // if the shift key is pressed then we also want to toggle the state if the item\n    if (shiftKey && sibling) {\n\n      // if there is no current selection start then select the current row\n      if (!this._selection.start) {\n        this.multipleSelect(data);\n      }\n\n      this.multipleSelect(sibling);\n    }\n  }\n}\n\nexport interface Selection {\n  start: any;\n  end: any;\n}\n","import { KeyCode } from './keycode.enum';\r\nimport { RowSelectionStrategy } from './row-selection.strategy';\r\n\r\nexport class RowAltSelectionStrategy extends RowSelectionStrategy {\r\n    keydown(event: KeyboardEvent, data: any): void {\r\n        switch (event.keyCode) {\r\n            case KeyCode.UpArrow:\r\n            case KeyCode.DownArrow:\r\n                event.preventDefault();\r\n                this.handleCursorKey(event, data);\r\n                break;\r\n\r\n            case KeyCode.Spacebar:\r\n                event.preventDefault();\r\n                this.selectionService.strategy.toggle(data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the sibling item when arrow keys are pressed\r\n     */\r\n    private handleCursorKey(event: KeyboardEvent, data: any): void {\r\n        // determine which modifier keys are pressed\r\n        const { ctrlKey, shiftKey } = event;\r\n\r\n        // if no modifier keys are pressed then deselect all and clear the selection\r\n        if (!ctrlKey && !shiftKey) {\r\n            this.deselectAll();\r\n            this.clearSelection(false);\r\n        }\r\n\r\n        if (ctrlKey) {\r\n            this.selectionService.activateSibling(event.keyCode === KeyCode.UpArrow);\r\n        } else {\r\n            const sibling = this.selectionService.getSibling(event.keyCode === KeyCode.UpArrow);\r\n            this.multipleSelect(sibling ? sibling : data);\r\n        }\r\n    }\r\n}\r\n","import { KeyCode } from './keycode.enum';\nimport { SelectionStrategy } from './selection.strategy';\n\nexport class SimpleSelectionStrategy extends SelectionStrategy {\n\n  /**\n   * When the item is clicked simply toggle the current selected state\n   */\n  click(event: MouseEvent, data: any): void {\n    this.toggle(data);\n  }\n\n  /**\n   * Add basic keyboard support for navigating\n   * and selecting/deselecting items\n   */\n  keydown(event: KeyboardEvent, data: any): void {\n\n    switch (event.keyCode) {\n\n      case KeyCode.UpArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(true);\n\n      case KeyCode.DownArrow:\n        event.preventDefault();\n        return this.selectionService.activateSibling(false);\n\n      case KeyCode.Spacebar:\n        event.preventDefault();\n        return this.toggle(data);\n    }\n  }\n\n  /**\n   * Override the standard toggle function to always activate the item\n   */\n  toggle(data: any): void {\n    super.toggle(data);\n    this.selectionService.activate(data);\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { RowAltSelectionStrategy } from './strategies/row-alt-selection.strategy';\nimport { RowSelectionStrategy } from './strategies/row-selection.strategy';\nimport { SelectionStrategy } from './strategies/selection.strategy';\nimport { SimpleSelectionStrategy } from './strategies/simple-selection.strategy';\n\n@Injectable()\nexport class SelectionService implements OnDestroy {\n\n  private _selection = new Set();\n  private _strategyToDestroy: SelectionStrategy;\n\n  dataset: any[] = [];\n  enabled: boolean = true;\n  clickEnabled: boolean = true;\n  keyboardEnabled: boolean = true;\n  strategy: SelectionStrategy = new SimpleSelectionStrategy(this);\n\n  active$ = new BehaviorSubject<any>(null);\n  focusTarget$ = new BehaviorSubject<any>(null);\n  selection$ = new BehaviorSubject<any[]>([]);\n\n  constructor() {\n    this._strategyToDestroy = this.strategy;\n  }\n\n  ngOnDestroy(): void {\n    if (this._strategyToDestroy) {\n      this._strategyToDestroy.destroy();\n    }\n  }\n\n  /**\n   * If the item is not currently selected then add it\n   * to the list of selected items\n   */\n  select(...selections: any[]): void {\n\n    // add each selection to the set\n    selections.forEach(selection => this._selection.add(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Remove an item from the list of selected items\n   */\n  deselect(...selections: any[]): void {\n    // remove each item from the set\n    selections.forEach(selection => this._selection.delete(selection));\n\n    // propagate the changes\n    this.selectionHasMutated();\n  }\n\n  /**\n   * Toggle the selected state of any specified items\n   */\n  toggle(...selections: any[]): void {\n    selections.forEach(selection => this.isSelected(selection) ? this.deselect(selection) : this.select(selection));\n  }\n\n  /**\n   * Determine whether or not a specific item is currently selected\n   */\n  isSelected(data: any): boolean {\n    return this._selection.has(data);\n  }\n\n  /**\n   * Return an observable specifically for notifying the subscriber\n   * only when the selection state of a specific object has changed\n   */\n  selected$(data: any): Observable<boolean> {\n    return this.selection$.pipe(map(() => this.isSelected(data)), distinctUntilChanged());\n  }\n\n  /**\n   * Define how selections should be performed.\n   * This allows us to use an strategy pattern to handle the various keyboard\n   * and mouse interactions while keeping each mode separated and\n   * easily extensible if we want to add more modes in future!\n   */\n  setMode(mode: SelectionMode | SelectionStrategy): void {\n\n    if (this._strategyToDestroy) {\n      // Destroy previous strategy if it was created internally\n      this._strategyToDestroy.destroy();\n      this._strategyToDestroy = null;\n    }\n\n    if (mode instanceof SelectionStrategy) {\n\n      // Custom strategy - pass in the service instance\n      this.strategy = mode;\n      this.strategy.setSelectionService(this);\n\n    } else {\n\n      switch (mode.toLowerCase().trim()) {\n\n        case 'simple':\n          this.strategy = this._strategyToDestroy = new SimpleSelectionStrategy(this);\n          break;\n\n        case 'row':\n          this.strategy = this._strategyToDestroy = new RowSelectionStrategy(this);\n          break;\n\n        case 'row-alt':\n          this.strategy = this._strategyToDestroy = new RowAltSelectionStrategy(this);\n          break;\n\n        default:\n          throw new Error(`The selection mode '${mode}' does not exist. Valid modes are 'simple', 'row', or 'row-alt'.`);\n      }\n    }\n  }\n\n  /**\n   * Set the current active item\n   */\n  activate(data: any): void {\n    this.active$.next(data);\n  }\n\n  /**\n   * Deactive all items\n   */\n  deactivate(): void {\n    this.active$.next(null);\n  }\n\n  /**\n   * Return the next or previous sibling of the current active item.\n   * @param previous If true, the previous sibling will be returned.\n   */\n  getSibling(previous: boolean = false): any {\n\n    // get the currently active item\n    const current = this.active$.getValue();\n\n    // check if there is a current active item\n    if (!current) {\n      return;\n    }\n\n    // get the index of the current item\n    const idx = this.dataset.indexOf(current);\n    const target = this.dataset[previous ? idx - 1 : idx + 1];\n\n    return target;\n  }\n\n  /**\n   * Activate the sibling of the current active item.\n   * If previous is set to true the previous sibling will be activated\n   * rather than the next sibling. This function will also return the\n   * data of the newly activated sibling\n   */\n  activateSibling(previous: boolean = false): any {\n\n    const target = this.getSibling(previous);\n\n    // check if the target exists\n    if (target) {\n      this.activate(target);\n    }\n\n    return target;\n  }\n\n  setDisabled(disabled: boolean): void {\n    // store the current disabled state\n    this.enabled = !disabled;\n\n    // clear any stateful data\n    this.active$.next(null);\n    this._selection.clear();\n\n    // emit the selection change information\n    this.selectionHasMutated();\n  }\n\n  private selectionHasMutated(): void {\n    this.selection$.next(Array.from(this._selection));\n  }\n}\n\nexport type SelectionMode = 'simple' | 'row' | 'row-alt';\n","import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { SelectionService } from './selection.service';\r\n\r\n@Directive({\r\n  selector: '[uxSelectionItem]',\r\n  exportAs: 'ux-selection-item'\r\n})\r\nexport class SelectionItemDirective implements OnInit, OnDestroy {\r\n\r\n  @Input() uxSelectionItem: any;\r\n\r\n  @Input() @HostBinding('class.ux-selection-selected')\r\n  set selected(selected: boolean) {\r\n    selected ? this.select() : this.deselect();\r\n  }\r\n\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  @Input() tabindex: number = null;\r\n\r\n  @Output() selectedChange = new EventEmitter<boolean>();\r\n\r\n  @HostBinding('class.ux-selection-focused') active: boolean = false;\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get attrTabIndex(): number {\r\n    return (this.tabindex !== null) ? this.tabindex : this._managedTabIndex;\r\n  }\r\n\r\n  private _selected: boolean = false;\r\n  private _managedTabIndex: number = -1;\r\n  private _subscriptions = new Subscription();\r\n\r\n  constructor(private _selectionService: SelectionService, private _elementRef: ElementRef) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // if there is no associated data then throw an error\r\n    if (!this.uxSelectionItem) {\r\n      throw new Error('The uxSelectionItem directive must have data associated with it.');\r\n    }\r\n\r\n    // subscribe to selection changes on this item\r\n    this._subscriptions.add(this._selectionService.selected$(this.uxSelectionItem).subscribe(selected => {\r\n\r\n      // store the selected state\r\n      this._selected = selected;\r\n\r\n      // emit the selected state\r\n      this.selectedChange.emit(selected);\r\n    }));\r\n\r\n    // subscribe to changes to the active state\r\n    this._subscriptions.add(this._selectionService.active$.pipe(map(active => active === this.uxSelectionItem)).subscribe(active => {\r\n\r\n      // store the focus state\r\n      this.active = active;\r\n\r\n      // if it is active then focus the element\r\n      if (active === true) {\r\n        this._selectionService.focusTarget$.next(this.uxSelectionItem);\r\n        this._elementRef.nativeElement.focus();\r\n      }\r\n    }));\r\n\r\n    // Subscribe to changes to the focus target\r\n    // This is mostly the same as active$, except that it has an initial value of the first item in the collection.\r\n    this._subscriptions.add(this._selectionService.focusTarget$.subscribe(focusTarget => {\r\n      this._managedTabIndex = (focusTarget === this.uxSelectionItem) ? 0 : -1;\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._subscriptions.unsubscribe();\r\n  }\r\n\r\n  @HostListener('click', ['$event']) click(event: MouseEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\r\n      this._selectionService.strategy.click(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('mousedown', ['$event']) mousedown(event: MouseEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.clickEnabled) {\r\n      this._selectionService.strategy.mousedown(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown', ['$event']) keydown(event: KeyboardEvent): void {\r\n    if (this._selectionService.enabled && this._selectionService.keyboardEnabled) {\r\n      this._selectionService.strategy.keydown(event, this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  @HostListener('focus') focus(): void {\r\n    // If tabbed to from outside the component, activate.\r\n    if (this._selectionService.active$.getValue() !== this.uxSelectionItem) {\r\n      this._selectionService.activate(this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Select this item using the current strategy\r\n   */\r\n  select(): void {\r\n    if (this._selectionService.enabled) {\r\n      this._selectionService.strategy.select(this.uxSelectionItem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deselect this item using the current strategy\r\n   */\r\n  deselect(): void {\r\n    if (this._selectionService.enabled) {\r\n      this._selectionService.strategy.deselect(this.uxSelectionItem);\r\n    }\r\n  }\r\n}\r\n","import { AfterContentInit, ChangeDetectorRef, ContentChildren, Directive, EventEmitter, HostBinding, Input, OnDestroy, Output, QueryList } from '@angular/core';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionMode, SelectionService } from './selection.service';\nimport { SelectionStrategy } from './strategies/selection.strategy';\n\n\n@Directive({\n  selector: '[uxSelection]',\n  exportAs: 'ux-selection',\n  providers: [ SelectionService ]\n})\nexport class SelectionDirective implements AfterContentInit, OnDestroy {\n\n  @Input() set uxSelection(items: any[]) {\n    this._selectionService.select(...items);\n  }\n\n  @Input() set disabled(disabled: boolean) {\n    this._selectionService.setDisabled(disabled);\n  }\n\n  @Input() set mode(mode: SelectionMode | SelectionStrategy) {\n    this._selectionService.setMode(mode);\n  }\n\n  @Input() set clickSelection(enabled: boolean) {\n    this._selectionService.clickEnabled = enabled;\n  }\n\n  @Input() set keyboardSelection(enabled: boolean) {\n    this._selectionService.keyboardEnabled = enabled;\n  }\n\n  @Input() @HostBinding('attr.tabindex') tabindex: number = null;\n\n  @Output() uxSelectionChange = new EventEmitter<any[]>();\n\n  @ContentChildren(SelectionItemDirective) items: QueryList<SelectionItemDirective>;\n\n  private _subscriptions = new Subscription();\n\n  constructor(private _selectionService: SelectionService, private _cdRef: ChangeDetectorRef) {\n    this._subscriptions.add(_selectionService.selection$.subscribe(items => this.uxSelectionChange.emit(items)));\n  }\n\n  ngAfterContentInit(): void {\n    // provide the initial list of selection items\n    this.update();\n\n    // if the list changes then inform the service\n    this._subscriptions.add(this.items.changes.subscribe(() => this.update()));\n\n    // The above could trigger a change in the computed tabindex for selection items\n    this._cdRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    this._subscriptions.unsubscribe();\n  }\n\n  /**\n   * Update the dataset to reflect the latest selection items\n   */\n  update(): void {\n\n    this._selectionService.dataset = this.items.map(item => item.uxSelectionItem);\n\n    // Make sure that a tab target has been defined so that the component can be tabbed to.\n    if (this._selectionService.focusTarget$.getValue() === null && this._selectionService.dataset.length > 0) {\n      this._selectionService.focusTarget$.next(this._selectionService.dataset[0]);\n    }\n  }\n\n  /**\n   * Select all the items in the list\n   */\n  selectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.selectAll();\n    }\n  }\n\n  /**\n   * Deselect all currently selected items\n   */\n  deselectAll(): void {\n    if (this._selectionService.enabled) {\n      this._selectionService.strategy.deselectAll();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SelectionItemDirective } from './selection-item.directive';\nimport { SelectionDirective } from './selection.directive';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [SelectionDirective, SelectionItemDirective],\n  exports: [SelectionDirective, SelectionItemDirective]\n})\nexport class SelectionModule { }\n","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'contact-group'\n})\nexport class ContactsNg1Component extends UpgradeComponent {\n\n    @Input() contacts: Contact[];\n    @Input() organization: string;\n    @Input() size: 'medium' | 'small';\n    @Input() colors: any;\n    @Input() maxContacts: number;\n\n    @Output() overflowClick: EventEmitter<void> = new EventEmitter<void>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('contactGroup', elementRef, injector);\n    }\n}\n\nexport interface Contact {\n    test: string;\n    status: 'active' | 'passive';\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}\n\nexport interface Organization {\n    text: string;\n    label: 'external' | 'risk';\n    tooltip?: string;\n    customTooltip?: {\n        template: string,\n        tooltipPosition: string;\n        data?: any;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'expand-input'\n})\nexport class ExpandInputNg1Component extends UpgradeComponent {\n\n    @Input() elname: string;\n    @Input() placeHolder: string;\n    @Input() className: string;\n    @Input() clearTextIcon: string;\n    @Input() closeSearch: string;\n    @Input() expandAlways: boolean;\n    @Input() onEnter: Function;\n\n    @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('expandInput', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'floating-action-button'\n})\nexport class FloatingActionButtonNg1Component extends UpgradeComponent {\n\n    @Input() items: FloatingActionButtonItem[] = [];\n    @Input() primary: string;\n    @Input() direction: 'top' | 'right' | 'bottom' | 'left';\n    @Input() fabTooltip: string;\n    @Input() fabTooltipPlacement: 'top' | 'right' | 'bottom' | 'left';\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('floatingActionButton', elementRef, injector);\n    }\n}\n\nexport interface FloatingActionButtonItem {\n    icon: string;\n    event: Function;\n    tooltip?: string;\n    tooltipPlacement?: string;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'flot'\n})\nexport class FlotNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n    @Input() callback: any;\n    @Input() donutLabels: any;\n    @Output() onPlotClick = new EventEmitter<any>();\n    @Output() onPlotHover = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxFlotNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'grid'\n})\nexport class GridNg1Component extends UpgradeComponent {\n\n    @Input() source: any[] = [];\n    @Input() columns: GridColumn[] = [];\n\n    /**\n     * The following inputs are undocumented\n     */\n    @Input() options: any;\n    @Input() events: any;\n    @Input() plugins: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('grid', elementRef, injector);\n    }\n}\n\nexport interface GridColumn {\n    title: string;\n    template: string;\n    width?: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'hierarchy-bar'\n})\nexport class HierarchyBarNg1Component extends UpgradeComponent {\n\n    @Input() data: any[];\n    @Input() options: HierarchyBarOptions;\n    @Input() selectNode: any;\n    @Input() containerClass: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('hierarchyBar', elementRef, injector);\n    }\n}\n\nexport interface HierarchyBarOptions {\n    enabled: boolean;\n    overview?: Function;\n    image: Function;\n    valueFormatter: Function;\n    action?: {\n        title: string;\n        event: Function;\n    };\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'marquee-wizard'\n})\nexport class MarqueeWizardNg1Component extends UpgradeComponent {\n\n    @Input() wizardIcon: string;\n    @Input() wizardSteps: MarqueeWizardStep[];\n    @Input() buttonOptions: MarqueeWizardOptions;\n    @Input() onChanging: Function;\n    @Input() onFinished: Function;\n    @Input() onFinishing: Function;\n    @Input() onCanceled: Function;\n    @Input() isVisited: boolean;\n    @Input() sideInfo: MarqueeWizardSideInfo;\n\n    @Output() wizardStepsChange: EventEmitter<MarqueeWizardStep[]> = new EventEmitter<MarqueeWizardStep[]>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('marqueeWizard', elementRef, injector);\n    }\n}\n\nexport interface MarqueeWizardStep {\n    title: string;\n    html?: string;\n    header?: string;\n    templateUrl?: string;\n    hidden?: boolean;\n    error?: boolean;\n    completed?: boolean;\n    visited?: boolean;\n}\n\nexport interface MarqueeWizardOptions {\n    nextText?: string;\n    previousText?: string;\n    finishText?: string;\n    showNext?: boolean;\n    showPrevious?: boolean;\n    showFinish?: boolean;\n    nextTooltip?: string;\n    previousTooltip?: string;\n    finishTooltip?: string;\n    previousEnabled?: boolean;\n    nextEnabled?: boolean;\n    finishEnabled?: boolean;\n}\n\nexport interface MarqueeWizardSideInfo {\n    title: string;\n    description: string;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'nested-donut'\n})\nexport class NestedDonutNg1Component extends UpgradeComponent {\n\n    @Input() dataset: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxNestedDonutNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'organization-chart'\n})\nexport class OrganizationChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Output() dataChange = new EventEmitter<any>();\n    @Output() optionsChange = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxOrganizationChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'partition-map'\n})\nexport class PartitionMapNg1Component extends UpgradeComponent {\n\n    @Input() chartData: any;\n    @Input() chartOptions: any;\n    @Input() chartLoading: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPartitionMapNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'bar-chart'\n})\nexport class PeityBarChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityBarChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'line-chart'\n})\nexport class PeityLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'pie-chart'\n})\nexport class PeityPieChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityPieChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'updating-line-chart'\n})\nexport class PeityUpdatingLineChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() method: any;\n    @Input() updateinterval: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxPeityUpdatingLineChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sankey'\n})\nexport class SankeyNg1Component extends UpgradeComponent {\n\n    @Input() chartSize: any;\n    @Input() chartData: any;\n    @Input() options: any;\n    @Input() click: any;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSankeyNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'search-toolbar'\n})\nexport class SearchToolbarNg1Component extends UpgradeComponent {\n\n    @Input() searchTypeahead: any[];\n    @Input() placeHolder: string;\n    @Input() closeSearch: string;\n    @Input() onSearch: Function;\n    @Input() onFocus: Function;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('searchToolbar', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'select-table'\n})\nexport class SelectTableNg1Component extends UpgradeComponent {\n\n    @Input() values: any[];\n    @Input() multipleSelect: boolean;\n    @Input() selectKey: string;\n    @Input() selected: string;\n    @Input() searchText: string;\n    @Input() tableHeight: string;\n    @Input() selectHiddenItems: 'clear' | 'reselect';\n\n    @Output() selectedChange: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('selectTable', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter, forwardRef } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const SLIDER_CHART_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SliderChartNg1Component),\n    multi: true\n};\n\n@Directive({\n    selector: 'slider-chart',\n    providers: [SLIDER_CHART_VALUE_ACCESSOR]\n})\nexport class SliderChartNg1Component extends UpgradeComponent implements ControlValueAccessor {\n\n    @Input() sliderOptions: any;\n    @Input() ngModel: any;\n    @Input() chartOptions: any;\n    @Input() chartData: any;\n\n    @Output() ngModelChange: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sliderChart', elementRef, injector);\n    }\n\n    writeValue(obj: any): void { }\n\n    registerOnChange(fn: any): void { }\n\n    registerOnTouched(fn: any): void { }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'social-chart'\n})\nexport class SocialChartNg1Component extends UpgradeComponent {\n\n    @Input() data: any;\n    @Input() options: any;\n    @Input() width: any;\n    @Input() height: any;\n    @Input() api: any;\n    @Input() communities: any;\n    @Input() detailStyle: any;\n    @Input() popoverStyle: any;\n    @Input() nodeDetail: any;\n    @Input() edgeDetail: any;\n    @Input() nodePopover: any;\n    @Input() edgePopover: any;\n    @Input() forceAtlasDuration: any;\n    @Input() nodeSizeAttribute: any;\n    @Input() startMaximized: any;\n    @Input() startMaximised: any;\n    @Input() showMaximizeControl: any;\n    @Input() showMaximiseControl: any;\n    @Input() socialChartContainer: any;\n    @Input() fullscreenButtonPosition: any;\n    @Input() localStrings: any;\n    @Input() chartTitle: any;\n    @Input() titleDisplayTime: any;\n    @Input() edgeWeightInfluence: any;\n    @Input() minLabels: any;\n    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('uxSocialChartNg1', elementRef, injector);\n    }\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'sort-direction-toggle'\n})\nexport class SortDirectionToggleNg1Component extends UpgradeComponent {\n\n    @Input() label: string;\n    @Input() sorters: SortDirectionToggleSorter[];\n    @Input() descend: boolean;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('sortDirectionToggle', elementRef, injector);\n    }\n}\n\nexport interface SortDirectionToggleSorter {\n    name: string;\n    sort: string;\n    defaultSorter: boolean;\n    select: Function;\n}","import { Directive, ElementRef, Injector, Input, Output, EventEmitter } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'treegrid'\n})\nexport class TreeGridNg1Component extends UpgradeComponent {\n\n    @Input() data: TreeGridData[] | Function;\n    @Input() columns: TreeGridColumn[];\n    @Input() treeData: TreeGridData[];\n    @Input() selected: any[];\n    @Input() currentRow: any;\n    @Input() options: TreeGridOptions;\n\n    @Output() optionsChange: EventEmitter<TreeGridOptions> = new EventEmitter<TreeGridOptions>();\n    @Output() selectedChange: EventEmitter<any[]> = new EventEmitter<any[]>();\n    @Output() currentRowChange: EventEmitter<any> = new EventEmitter<any>();\n    @Output() treeDataChange: EventEmitter<TreeGridData[]> = new EventEmitter<TreeGridData[]>();    \n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('treegrid', elementRef, injector);\n    }\n}\n\nexport interface TreeGridColumn {\n    name: string;\n    value?: string | Function;\n    template?: string;\n    headerClass?: string;\n    cellClass?: string;\n    width?: string;\n    tooltip?: string;\n    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';\n}\n\nexport interface TreeGridData {\n    dataItem: any;\n    children: any[];\n    expanded: boolean;\n    expanding: boolean;\n    level: number;\n    api: any;\n}\n\nexport interface TreeGridOptions {\n    childrenProperty?: string;\n    hasChildren?: Function;\n    maxDepth?: number;\n    expandTopLevel?: boolean;\n    select?: any;\n    expander?: any;\n    icons?: any;\n    rowClass?: string | Function;\n    sort?: Function;\n}","import { Directive, ElementRef, Injector, Input } from '@angular/core';\nimport { UpgradeComponent } from '@angular/upgrade/static';\n\n@Directive({\n    selector: 'thumbnail'\n})\nexport class ThumbnailNg1Component extends UpgradeComponent {\n\n    @Input() url: string;\n    @Input() show: boolean;\n    @Input() width: string;\n    @Input() height: string;\n\n    constructor(elementRef: ElementRef, injector: Injector) {\n        super('thumbnail', elementRef, injector);\n    }\n}","import { Injectable, Inject, Injector } from '@angular/core';\nimport { INavigationMenuService } from './navigation-menu.interface';\n\n@Injectable()\nexport class NavigationMenuService implements INavigationMenuService {\n\n    constructor( @Inject('$navigationMenu') private _navigationMenuService: INavigationMenuService) { }\n\n    show(): void {\n        this._navigationMenuService.show();\n    }\n\n    hide(): void {\n        this._navigationMenuService.hide();\n    }\n\n    visible(): boolean {\n        return this._navigationMenuService.visible();\n    }\n\n    collapseAtWidth(): number {\n        return this._navigationMenuService.collapseAtWidth();\n    }\n\n    setCollapseAtWidth(width: number): void {\n        this._navigationMenuService.setCollapseAtWidth(width);\n    }\n\n    setDefaultCollapseAtWidth(): void {\n        this._navigationMenuService.setDefaultCollapseAtWidth();\n    }\n\n}\n\nexport function navigationMenuServiceFactory(injector: Injector) {\n    return injector.get('$navigationMenu');\n}\n\nexport const navigationMenuServiceProvider = {\n    provide: '$navigationMenu',\n    useFactory: navigationMenuServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { IPdfService, PdfColumns, PdfOptions, PdfDocument } from './pdf.interface';\n\n@Injectable()\nexport class PdfService implements IPdfService {\n    \n    constructor(@Inject('$pdf') private _pdfService: IPdfService) { }\n    \n    createTable(columns: PdfColumns, rows: any[], options: PdfOptions = {}): PdfDocument {\n        return this._pdfService.createTable(columns, rows, options);\n    }\n}\n\nexport function pdfServiceFactory(injector: Injector) {\n    return injector.get('$pdf');\n}\n\nexport const pdfServiceProvider = {\n    provide: '$pdf',\n    useFactory: pdfServiceFactory,\n    deps: ['$injector']\n};","import { Injectable, Inject, Injector } from '@angular/core';\nimport { ITimeAgoService, TimeAgoLocalizedTimes } from './time-ago.interface';\n\n@Injectable()\nexport class TimeAgoService implements ITimeAgoService {\n\n    constructor(@Inject('timeAgoService') private _timeAgoService: ITimeAgoService) { }\n\n    setStrings(strings: TimeAgoLocalizedTimes): void {\n        this._timeAgoService.setStrings(strings);\n    }\n\n    timeSince(past: Date, present: Date): string {\n        return this._timeAgoService.timeSince(past, present);\n    }\n\n    timeSinceNow(moment: Date): string {\n        return this._timeAgoService.timeSinceNow(moment);\n    }\n\n}\n\nexport function timeAgoServiceFactory(injector: Injector) {\n    return injector.get('timeAgoService');\n}\n\nexport const timeAgoServiceProvider = {\n    provide: 'timeAgoService',\n    useFactory: timeAgoServiceFactory,\n    deps: ['$injector']\n};","import { NgModule, Injector } from '@angular/core';\n\nimport { FloatingActionButtonNg1Component } from './components/floating-action-button/floating-action-button.component';\nimport { FlotNg1Component } from './components/flot/flot.component';\nimport { NestedDonutNg1Component } from './components/nested-donut/nested-donut.component';\nimport { OrganizationChartNg1Component } from './components/organization-chart/organization-chart.component';\nimport { PartitionMapNg1Component } from './components/partition-map/partition-map.component';\nimport { PeityBarChartNg1Component } from './components/peity-chart/peity-bar-chart.component';\nimport { PeityLineChartNg1Component } from './components/peity-chart/peity-line-chart.component';\nimport { PeityPieChartNg1Component } from './components/peity-chart/peity-pie-chart.component';\nimport { PeityUpdatingLineChartNg1Component } from './components/peity-chart/peity-updating-line-chart.component';\nimport { SankeyNg1Component } from './components/sankey-chart/sankey.component';\nimport { SocialChartNg1Component } from './components/social-chart/social-chart.component';\nimport { TimeAgoService, timeAgoServiceProvider } from './services/time-ago/time-ago.service';\nimport { PdfService, pdfServiceProvider } from './services/pdf/pdf.service';\nimport { NavigationMenuService, navigationMenuServiceProvider } from './services/navigation-menu/navigation-menu.service';\nimport { GridNg1Component } from './components/grid/grid.component';\nimport { ThumbnailNg1Component } from './components/thumbnail/thumbnail.component';\nimport { HierarchyBarNg1Component } from './components/hierarchy-bar/hierarchy-bar.component';\nimport { ContactsNg1Component } from './components/contacts/contacts.component';\nimport { ExpandInputNg1Component } from './components/expand-input/expand-input.component';\nimport { SortDirectionToggleNg1Component } from './components/sort-direction-toggle/sort-direction-toggle.component';\nimport { SearchToolbarNg1Component } from './components/search-toolbar/search-toolbar.component';\nimport { TreeGridNg1Component } from './components/tree-grid/tree-grid.component';\nimport { SelectTableNg1Component } from './components/select-table/select-table.component';\nimport { MarqueeWizardNg1Component } from './components/marquee-wizard/marquee-wizard.component';\nimport { SliderChartNg1Component } from './components/slider-chart/slider-chart.directive';\n\nconst declarations = [\n    ContactsNg1Component,\n    ExpandInputNg1Component,\n    FloatingActionButtonNg1Component,\n    FlotNg1Component,\n    GridNg1Component,\n    HierarchyBarNg1Component,\n    MarqueeWizardNg1Component,\n    NestedDonutNg1Component,\n    OrganizationChartNg1Component,\n    PartitionMapNg1Component,\n    PeityBarChartNg1Component,\n    PeityLineChartNg1Component,\n    PeityPieChartNg1Component,\n    PeityUpdatingLineChartNg1Component,\n    SankeyNg1Component,\n    SearchToolbarNg1Component,\n    SelectTableNg1Component,\n    SliderChartNg1Component,\n    SocialChartNg1Component,\n    SortDirectionToggleNg1Component,\n    TreeGridNg1Component,\n    ThumbnailNg1Component,\n];\n\n@NgModule({\n    imports: [],\n    exports: declarations,\n    declarations: declarations,\n    providers: [\n        navigationMenuServiceProvider,\n        pdfServiceProvider,\n        timeAgoServiceProvider,\n        TimeAgoService,\n        PdfService,\n        NavigationMenuService,\n    ],\n})\nexport class HybridModule { }\n","import { Pipe, Injectable, PipeTransform } from '@angular/core';\n\n@Pipe({\n    name: 'stringFilter'\n})\n@Injectable()\nexport class StringFilterPipe implements PipeTransform {\n    transform(items: any[], value: string): any[] {  \n        if (!items) {\n            return [];\n        }\n        return items.filter(it => it.toLowerCase().indexOf(value.toLowerCase()) >= 0);\n    }\n}","import { StringFilterPipe } from './string-filter.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [StringFilterPipe],\n    declarations: [StringFilterPipe]\n})\nexport class StringFilterModule { }\n","import { StorageAdapter } from './storage-adapter';\n\nexport class CookieAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n\n        if (document.cookie) {\n\n            // get all the cookies for this site\n            const cookies = document.cookie.split(';');\n\n            // process the cookies into a from we can easily manage\n            const match = cookies\n                .map(cookie => ({ key: cookie.split('=')[0].trim(), value: cookie.split('=')[1].trim() }))\n                .find(cookie => cookie.key === key);\n\n            return match ? match.value : null;\n        }\n\n        return null;\n    }\n\n    setItem(key: string, value: string): void {\n        document.cookie = `${key}=${value}; path=/`;\n    }\n\n    removeItem(key: string): void {\n\n        document.cookie.split(';').forEach(cookie => {\n            const eqPos = cookie.indexOf('=');\n            const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie;\n\n            if (name === key) {\n                document.cookie = cookie.trim().replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n            }\n        });\n    }\n\n    clear(): void {\n\n        // call remove item on each cookie\n        document.cookie.split(';').map(cookie => cookie.split('=')[0].trim())\n            .forEach(cookie => this.removeItem(cookie));\n    }\n\n    getSupported(): StorageAdapter {\n        // cookies are supported in all browsers\n        return this;\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class LocalStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return localStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        localStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        localStorage.removeItem(key);\n    }\n\n    clear(): void {\n        localStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!localStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            localStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            localStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { StorageAdapter } from './storage-adapter';\nimport { CookieAdapter } from './cookie-adapter';\n\nexport class SessionStorageAdapter implements StorageAdapter {\n\n    getItem(key: string): string {\n        return sessionStorage.getItem(key);\n    }\n\n    setItem(key: string, value: string): void {\n        sessionStorage.setItem(key, value);\n    }\n\n    removeItem(key: string): void {\n        sessionStorage.removeItem(key);\n    }\n\n    clear(): void {\n        sessionStorage.clear();\n    }\n\n    getSupported(): StorageAdapter {\n\n        // if local storage variable does not exist fall back to cookies\n        if (!sessionStorage) {\n            return new CookieAdapter();\n        }\n\n        // try to make a test save to local storage to see if there are any exceptions\n        try {\n            sessionStorage.setItem('ux-persistent-data-service', 'ux-persistent-data-service');\n            sessionStorage.removeItem('ux-persistent-data-service');\n\n            return this;\n        } catch (err) {\n            return new CookieAdapter();\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { StorageAdapter } from './adapters/storage-adapter';\nimport { CookieAdapter } from './adapters/cookie-adapter';\nimport { LocalStorageAdapter } from './adapters/local-storage-adapter';\nimport { SessionStorageAdapter } from './adapters/session-storage-adapter';\n\n@Injectable()\nexport class PersistentDataService {\n\n    /**\n     * Save the item in some form of persistent storage\n     */\n    setItem(key: string, value: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).setItem(key, value);\n    }\n\n    /**\n     * Get a stored value from persistent storage\n     */\n    getItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): string {\n        return this.getAdapter(type).getItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    removeItem(key: string, type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).removeItem(key);\n    }\n\n    /**\n     * Remove a stored value from persistent storage\n     */\n    clear(type: PersistentDataStorageType = PersistentDataStorageType.LocalStorage): void {\n        this.getAdapter(type).clear();\n    }\n\n    /**\n     * Return the appropriate adapter based on the type requested\n     */\n    private getAdapter(type: PersistentDataStorageType): StorageAdapter {\n\n        switch (type) {\n\n            case PersistentDataStorageType.Cookie:\n                return new CookieAdapter();\n\n            case PersistentDataStorageType.LocalStorage:\n                const localStorageAdapter = new LocalStorageAdapter();\n                return localStorageAdapter.getSupported();\n\n            case PersistentDataStorageType.SessionStorage:\n                const sessionStorageAdapter = new SessionStorageAdapter();\n                return sessionStorageAdapter.getSupported();\n        }\n    }\n}\n\nexport enum PersistentDataStorageType {\n    LocalStorage,\n    Cookie,\n    SessionStorage\n}","import { NgModule } from '@angular/core';\n\nimport { PersistentDataService } from './persistent-data.service';\n\n@NgModule({\n    providers: [PersistentDataService],\n})\nexport class PersistentDataModule { }\n","export abstract class StorageAdapter {\n    abstract getItem(key: string): string;\n    abstract setItem(key: string, value: string): void;\n    abstract removeItem(key: string): void;\n    abstract clear(): void;\n    abstract getSupported(): StorageAdapter;\n}"]}